
EMG_STM32F407VGT6_DISC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08009758  08009758  0000a758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ba8  08009ba8  0000b304  2**0
                  CONTENTS
  4 .ARM          00000008  08009ba8  08009ba8  0000aba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bb0  08009bb0  0000b304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bb0  08009bb0  0000abb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bb4  08009bb4  0000abb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000304  20000000  08009bb8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b304  2**0
                  CONTENTS
 10 .bss          000003f4  20000304  20000304  0000b304  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006f8  200006f8  0000b304  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b304  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f4fa  00000000  00000000  0000b334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000236f  00000000  00000000  0001a82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  0001cba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b69  00000000  00000000  0001da38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002342a  00000000  00000000  0001e5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001234d  00000000  00000000  000419cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9ce7  00000000  00000000  00053d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d9ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005318  00000000  00000000  0012da44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00132d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000304 	.word	0x20000304
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800973c 	.word	0x0800973c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000308 	.word	0x20000308
 80001cc:	0800973c 	.word	0x0800973c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <IIRFilter_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to initialize the IIR filter
void IIRFilter_Init(IIRFilter *filter, float b[], float a[]) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < N_B; i++) {
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	e014      	b.n	8001020 <IIRFilter_Init+0x3c>
        filter->b[i] = b[i];
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68f9      	ldr	r1, [r7, #12]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	330e      	adds	r3, #14
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	601a      	str	r2, [r3, #0]
        filter->x[i] = 0.0f;  // Initialize input buffer to 0
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < N_B; i++) {
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	2b06      	cmp	r3, #6
 8001024:	dde7      	ble.n	8000ff6 <IIRFilter_Init+0x12>
    }
    for (int i = 0; i < N_A; i++) {
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	e017      	b.n	800105c <IIRFilter_Init+0x78>
        filter->a[i] = a[i];
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	68f9      	ldr	r1, [r7, #12]
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	3314      	adds	r3, #20
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	3304      	adds	r3, #4
 8001042:	601a      	str	r2, [r3, #0]
        filter->y[i] = 0.0f;  // Initialize output buffer to 0
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	3306      	adds	r3, #6
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	3304      	adds	r3, #4
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < N_A; i++) {
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	3301      	adds	r3, #1
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	2b06      	cmp	r3, #6
 8001060:	dde4      	ble.n	800102c <IIRFilter_Init+0x48>
    }
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <CircularBuffer_Init>:

void CircularBuffer_Init(CircularBuffer* cb) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    memset(cb->buffer, 0, sizeof(cb->buffer));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	22f4      	movs	r2, #244	@ 0xf4
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f004 ff87 	bl	8005f92 <memset>
    cb->index = 0;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <IIR_Filter>:

// Function to apply the IIR filter to a new input sample
float IIR_Filter(IIRFilter *filter, float input) {
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	@ 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	ed87 0a00 	vstr	s0, [r7]
    // Shift the input buffer to make room for the new sample
    for (int i = N_B - 1; i > 0; i--) {
 80010a0:	2306      	movs	r3, #6
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	e00d      	b.n	80010c2 <IIR_Filter+0x2e>
        filter->x[i] = filter->x[i - 1];
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	601a      	str	r2, [r3, #0]
    for (int i = N_B - 1; i > 0; i--) {
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	3b01      	subs	r3, #1
 80010c0:	61fb      	str	r3, [r7, #28]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	dcee      	bgt.n	80010a6 <IIR_Filter+0x12>
    }
    filter->x[0] = input;  // Store the new input sample at the beginning of the buffer
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	601a      	str	r2, [r3, #0]

    // Calculate the output sample using the IIR difference equation
    float output = 0.0f;
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]

    // Feedforward part (b[] coefficients)
    for (int i = 0; i < N_B; i++) {
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	e017      	b.n	800110a <IIR_Filter+0x76>
        output += filter->b[i] * filter->x[i];
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	330e      	adds	r3, #14
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	ed93 7a00 	vldr	s14, [r3]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80010fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001100:	edc7 7a06 	vstr	s15, [r7, #24]
    for (int i = 0; i < N_B; i++) {
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	3301      	adds	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	2b06      	cmp	r3, #6
 800110e:	dde4      	ble.n	80010da <IIR_Filter+0x46>
    }

    // Feedback part (a[] coefficients)
    for (int i = 1; i < N_A; i++) {
 8001110:	2301      	movs	r3, #1
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	e01a      	b.n	800114c <IIR_Filter+0xb8>
        output -= filter->a[i] * filter->y[i];
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	3314      	adds	r3, #20
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	3304      	adds	r3, #4
 8001122:	ed93 7a00 	vldr	s14, [r3]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	3306      	adds	r3, #6
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	3304      	adds	r3, #4
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113a:	ed97 7a06 	vldr	s14, [r7, #24]
 800113e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001142:	edc7 7a06 	vstr	s15, [r7, #24]
    for (int i = 1; i < N_A; i++) {
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	3301      	adds	r3, #1
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	2b06      	cmp	r3, #6
 8001150:	dde1      	ble.n	8001116 <IIR_Filter+0x82>
    }

    // Normalize by the first coefficient of 'a' (if not zero)
    if (filter->a[0] != 0.0f) {
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001158:	eef5 7a40 	vcmp.f32	s15, #0.0
 800115c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001160:	d008      	beq.n	8001174 <IIR_Filter+0xe0>
        output /= filter->a[0];
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8001168:	edd7 6a06 	vldr	s13, [r7, #24]
 800116c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001170:	edc7 7a06 	vstr	s15, [r7, #24]
    }

    // Shift the output buffer to make room for the new output sample
    for (int i = N_A - 1; i > 0; i--) {
 8001174:	2306      	movs	r3, #6
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	e011      	b.n	800119e <IIR_Filter+0x10a>
        filter->y[i] = filter->y[i - 1];
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3b01      	subs	r3, #1
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	3306      	adds	r3, #6
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	3304      	adds	r3, #4
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	3306      	adds	r3, #6
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	3304      	adds	r3, #4
 8001196:	601a      	str	r2, [r3, #0]
    for (int i = N_A - 1; i > 0; i--) {
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3b01      	subs	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	dcea      	bgt.n	800117a <IIR_Filter+0xe6>
    }
    filter->y[0] = output;  // Store the new output sample at the beginning of the buffer
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	61da      	str	r2, [r3, #28]

    return output * EMG_SIGNAL_MAX_VOLTAGE;
 80011aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80011ae:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80011c4 <IIR_Filter+0x130>
 80011b2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80011b6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ba:	3724      	adds	r7, #36	@ 0x24
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	3a03126f 	.word	0x3a03126f

080011c8 <FIR_Filter>:

//void UART_Transmit(UART_HandleTypeDef *huart, char *data) {
//	HAL_UART_Transmit(huart, (uint8_t*) data, strlen(data), HAL_MAX_DELAY);
//}

float FIR_Filter(CircularBuffer* cb, float input) {
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	ed87 0a00 	vstr	s0, [r7]
    float sum = 0.0f;
 80011d4:	f04f 0300 	mov.w	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]

    // Update buffer with new input
    cb->buffer[cb->index] = input;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80011e0:	edd7 7a00 	vldr	s15, [r7]
 80011e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e8:	ee17 1a90 	vmov	r1, s15
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    int idx = cb->index;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011f8:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < FILTER_ORDER; i++) {
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	e020      	b.n	8001242 <FIR_Filter+0x7a>
        sum += cb->buffer[idx] * fir_coefficients[i];
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001210:	4a1d      	ldr	r2, [pc, #116]	@ (8001288 <FIR_Filter+0xc0>)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001220:	ed97 7a05 	vldr	s14, [r7, #20]
 8001224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001228:	edc7 7a05 	vstr	s15, [r7, #20]
        idx = (idx == 0) ? (FILTER_ORDER - 1) : (idx - 1);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d002      	beq.n	8001238 <FIR_Filter+0x70>
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	3b01      	subs	r3, #1
 8001236:	e000      	b.n	800123a <FIR_Filter+0x72>
 8001238:	233c      	movs	r3, #60	@ 0x3c
 800123a:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < FILTER_ORDER; i++) {
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3301      	adds	r3, #1
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2b3c      	cmp	r3, #60	@ 0x3c
 8001246:	dddb      	ble.n	8001200 <FIR_Filter+0x38>
    }

    cb->index = (cb->index + 1) % FILTER_ORDER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800124e:	1c59      	adds	r1, r3, #1
 8001250:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <FIR_Filter+0xc4>)
 8001252:	fb83 2301 	smull	r2, r3, r3, r1
 8001256:	111a      	asrs	r2, r3, #4
 8001258:	17cb      	asrs	r3, r1, #31
 800125a:	1ad2      	subs	r2, r2, r3
 800125c:	4613      	mov	r3, r2
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	1a9b      	subs	r3, r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	1aca      	subs	r2, r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

    return sum * EMG_SIGNAL_MAX_VOLTAGE;
 800126e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001272:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001290 <FIR_Filter+0xc8>
 8001276:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800127a:	eeb0 0a67 	vmov.f32	s0, s15
 800127e:	371c      	adds	r7, #28
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	2000003c 	.word	0x2000003c
 800128c:	4325c53f 	.word	0x4325c53f
 8001290:	3a03126f 	.word	0x3a03126f

08001294 <Update_LED_Indicator>:

/* Function to Update LED Indicator */
void Update_LED_Indicator(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LD4_Green_Pin|LD3_Orange_Pin|LD5_Red_Pin|LD6_Blue_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800129e:	4812      	ldr	r0, [pc, #72]	@ (80012e8 <Update_LED_Indicator+0x54>)
 80012a0:	f001 fd4c 	bl	8002d3c <HAL_GPIO_WritePin>

	// Set LED based on the active filter mode
	if (filter_mode == 0) {
 80012a4:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <Update_LED_Indicator+0x58>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d106      	bne.n	80012ba <Update_LED_Indicator+0x26>
		HAL_GPIO_WritePin(GPIOD, LD6_Blue_Pin, GPIO_PIN_SET);   // Blue LED for RAW mode
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012b2:	480d      	ldr	r0, [pc, #52]	@ (80012e8 <Update_LED_Indicator+0x54>)
 80012b4:	f001 fd42 	bl	8002d3c <HAL_GPIO_WritePin>
	} else if (filter_mode == 1) {
		HAL_GPIO_WritePin(GPIOD, LD5_Red_Pin, GPIO_PIN_SET);  // Green LED for FIR mode
	} else if (filter_mode == 2) {
		HAL_GPIO_WritePin(GPIOD, LD3_Orange_Pin, GPIO_PIN_SET); // Orange LED for IIR mode
	}
}
 80012b8:	e014      	b.n	80012e4 <Update_LED_Indicator+0x50>
	} else if (filter_mode == 1) {
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <Update_LED_Indicator+0x58>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d106      	bne.n	80012d0 <Update_LED_Indicator+0x3c>
		HAL_GPIO_WritePin(GPIOD, LD5_Red_Pin, GPIO_PIN_SET);  // Green LED for FIR mode
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012c8:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <Update_LED_Indicator+0x54>)
 80012ca:	f001 fd37 	bl	8002d3c <HAL_GPIO_WritePin>
}
 80012ce:	e009      	b.n	80012e4 <Update_LED_Indicator+0x50>
	} else if (filter_mode == 2) {
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <Update_LED_Indicator+0x58>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d105      	bne.n	80012e4 <Update_LED_Indicator+0x50>
		HAL_GPIO_WritePin(GPIOD, LD3_Orange_Pin, GPIO_PIN_SET); // Orange LED for IIR mode
 80012d8:	2201      	movs	r2, #1
 80012da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012de:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <Update_LED_Indicator+0x54>)
 80012e0:	f001 fd2c 	bl	8002d3c <HAL_GPIO_WritePin>
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	20000000 	.word	0x20000000

080012f0 <Poll_Button>:

void Poll_Button(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIO_BUTTON_GPIO_Port, GPIO_BUTTON_Pin) == GPIO_PIN_RESET) {
 80012f4:	2101      	movs	r1, #1
 80012f6:	4815      	ldr	r0, [pc, #84]	@ (800134c <Poll_Button+0x5c>)
 80012f8:	f001 fd08 	bl	8002d0c <HAL_GPIO_ReadPin>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d122      	bne.n	8001348 <Poll_Button+0x58>
		HAL_Delay(DEBOUNCE_DELAY); // Debounce delay
 8001302:	2032      	movs	r0, #50	@ 0x32
 8001304:	f000 fd22 	bl	8001d4c <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIO_BUTTON_GPIO_Port, GPIO_BUTTON_Pin) == GPIO_PIN_RESET) {
 8001308:	2101      	movs	r1, #1
 800130a:	4810      	ldr	r0, [pc, #64]	@ (800134c <Poll_Button+0x5c>)
 800130c:	f001 fcfe 	bl	8002d0c <HAL_GPIO_ReadPin>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d118      	bne.n	8001348 <Poll_Button+0x58>
			filter_mode = (filter_mode + 1) % 3;  // Cycle through 0 (RAW), 1 (FIR), 2 (IIR)
 8001316:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <Poll_Button+0x60>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <Poll_Button+0x64>)
 800131e:	fb83 3102 	smull	r3, r1, r3, r2
 8001322:	17d3      	asrs	r3, r2, #31
 8001324:	1ac9      	subs	r1, r1, r3
 8001326:	460b      	mov	r3, r1
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	440b      	add	r3, r1
 800132c:	1ad1      	subs	r1, r2, r3
 800132e:	b2ca      	uxtb	r2, r1
 8001330:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <Poll_Button+0x60>)
 8001332:	701a      	strb	r2, [r3, #0]
			Update_LED_Indicator(); // Update LEDs based on the current mode
 8001334:	f7ff ffae 	bl	8001294 <Update_LED_Indicator>
			while (HAL_GPIO_ReadPin(GPIO_BUTTON_GPIO_Port, GPIO_BUTTON_Pin) == GPIO_PIN_RESET); // Wait for button release
 8001338:	bf00      	nop
 800133a:	2101      	movs	r1, #1
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <Poll_Button+0x5c>)
 800133e:	f001 fce5 	bl	8002d0c <HAL_GPIO_ReadPin>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f8      	beq.n	800133a <Poll_Button+0x4a>
		}
	}
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40020000 	.word	0x40020000
 8001350:	20000000 	.word	0x20000000
 8001354:	55555556 	.word	0x55555556

08001358 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af02      	add	r7, sp, #8
 800135e:	6078      	str	r0, [r7, #4]
    // Get the ADC value
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 8001360:	4832      	ldr	r0, [pc, #200]	@ (800142c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001362:	f000 ff49 	bl	80021f8 <HAL_ADC_GetValue>
 8001366:	4603      	mov	r3, r0
 8001368:	81fb      	strh	r3, [r7, #14]
    float voltage = REF_VOLTAGE * adc_val / ADC_MAX_VAL - DC_BIAS;
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001374:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001378:	ee27 7a87 	vmul.f32	s14, s15, s14
 800137c:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001430 <HAL_ADC_ConvCpltCallback+0xd8>
 8001380:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001384:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001434 <HAL_ADC_ConvCpltCallback+0xdc>
 8001388:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800138c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (filter_mode == 0) {
 8001390:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d109      	bne.n	80013ac <HAL_ADC_ConvCpltCallback+0x54>
    	// RAW signal, no filtering just voltage scaling
    	emg_signal_value = voltage * EMG_SIGNAL_MAX_VOLTAGE;
 8001398:	edd7 7a02 	vldr	s15, [r7, #8]
 800139c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800143c <HAL_ADC_ConvCpltCallback+0xe4>
 80013a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a4:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <HAL_ADC_ConvCpltCallback+0xe8>)
 80013a6:	edc3 7a00 	vstr	s15, [r3]
 80013aa:	e01c      	b.n	80013e6 <HAL_ADC_ConvCpltCallback+0x8e>
    } else if (filter_mode == 1) {
 80013ac:	4b22      	ldr	r3, [pc, #136]	@ (8001438 <HAL_ADC_ConvCpltCallback+0xe0>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d10a      	bne.n	80013ca <HAL_ADC_ConvCpltCallback+0x72>
    	// FIR filtering
    	emg_signal_value = FIR_Filter(&cb, voltage);
 80013b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b8:	4822      	ldr	r0, [pc, #136]	@ (8001444 <HAL_ADC_ConvCpltCallback+0xec>)
 80013ba:	f7ff ff05 	bl	80011c8 <FIR_Filter>
 80013be:	eef0 7a40 	vmov.f32	s15, s0
 80013c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001440 <HAL_ADC_ConvCpltCallback+0xe8>)
 80013c4:	edc3 7a00 	vstr	s15, [r3]
 80013c8:	e00d      	b.n	80013e6 <HAL_ADC_ConvCpltCallback+0x8e>
    } else if (filter_mode == 2) {
 80013ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <HAL_ADC_ConvCpltCallback+0xe0>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d109      	bne.n	80013e6 <HAL_ADC_ConvCpltCallback+0x8e>
    	// IIR filtering
//    	emg_signal_value = IIR_Filter(voltage, &emg_signal_value, ALPHA);
    	emg_signal_value = IIR_Filter(&iir_filter, voltage);
 80013d2:	ed97 0a02 	vldr	s0, [r7, #8]
 80013d6:	481c      	ldr	r0, [pc, #112]	@ (8001448 <HAL_ADC_ConvCpltCallback+0xf0>)
 80013d8:	f7ff fe5c 	bl	8001094 <IIR_Filter>
 80013dc:	eef0 7a40 	vmov.f32	s15, s0
 80013e0:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <HAL_ADC_ConvCpltCallback+0xe8>)
 80013e2:	edc3 7a00 	vstr	s15, [r3]
    }

    // Send the processed signal value over UART
   //  sprintf(buffer, "%.6f\r\n", emg_signal_value);
    snprintf(buffer, sizeof(buffer), "%.6f\r\n", emg_signal_value);
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <HAL_ADC_ConvCpltCallback+0xe8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8ac 	bl	8000548 <__aeabi_f2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	e9cd 2300 	strd	r2, r3, [sp]
 80013f8:	4a14      	ldr	r2, [pc, #80]	@ (800144c <HAL_ADC_ConvCpltCallback+0xf4>)
 80013fa:	213d      	movs	r1, #61	@ 0x3d
 80013fc:	4814      	ldr	r0, [pc, #80]	@ (8001450 <HAL_ADC_ConvCpltCallback+0xf8>)
 80013fe:	f004 fd31 	bl	8005e64 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8001402:	4813      	ldr	r0, [pc, #76]	@ (8001450 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001404:	f7fe ff34 	bl	8000270 <strlen>
 8001408:	4603      	mov	r3, r0
 800140a:	b29a      	uxth	r2, r3
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
 8001410:	490f      	ldr	r1, [pc, #60]	@ (8001450 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001412:	4810      	ldr	r0, [pc, #64]	@ (8001454 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001414:	f002 fe46 	bl	80040a4 <HAL_UART_Transmit>
//    UART_Transmit(&huart2, buffer);

    // Toggle the Green LED to indicate ADC activity
    HAL_GPIO_TogglePin(GPIOD, LD4_Green_Pin);
 8001418:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800141c:	480e      	ldr	r0, [pc, #56]	@ (8001458 <HAL_ADC_ConvCpltCallback+0x100>)
 800141e:	f001 fca6 	bl	8002d6e <HAL_GPIO_TogglePin>
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000320 	.word	0x20000320
 8001430:	457ff000 	.word	0x457ff000
 8001434:	3fea3d71 	.word	0x3fea3d71
 8001438:	20000000 	.word	0x20000000
 800143c:	3a03126f 	.word	0x3a03126f
 8001440:	20000560 	.word	0x20000560
 8001444:	200003f8 	.word	0x200003f8
 8001448:	200004f0 	.word	0x200004f0
 800144c:	08009758 	.word	0x08009758
 8001450:	20000564 	.word	0x20000564
 8001454:	200003b0 	.word	0x200003b0
 8001458:	40020c00 	.word	0x40020c00

0800145c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  CircularBuffer_Init(&cb);
 8001460:	4815      	ldr	r0, [pc, #84]	@ (80014b8 <main+0x5c>)
 8001462:	f7ff fe05 	bl	8001070 <CircularBuffer_Init>
  IIRFilter_Init(&iir_filter, b, a);
 8001466:	4a15      	ldr	r2, [pc, #84]	@ (80014bc <main+0x60>)
 8001468:	4915      	ldr	r1, [pc, #84]	@ (80014c0 <main+0x64>)
 800146a:	4816      	ldr	r0, [pc, #88]	@ (80014c4 <main+0x68>)
 800146c:	f7ff fdba 	bl	8000fe4 <IIRFilter_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001470:	f000 fbfa 	bl	8001c68 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001474:	f000 f82c 	bl	80014d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001478:	f000 f966 	bl	8001748 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800147c:	f000 f93a 	bl	80016f4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001480:	f000 f890 	bl	80015a4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001484:	f000 f8e0 	bl	8001648 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 8001488:	2100      	movs	r1, #0
 800148a:	480f      	ldr	r0, [pc, #60]	@ (80014c8 <main+0x6c>)
 800148c:	f002 f932 	bl	80036f4 <HAL_TIM_PWM_Start>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <main+0x3e>
	  Error_Handler();
 8001496:	f000 f9b7 	bl	8001808 <Error_Handler>

  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 800149a:	480c      	ldr	r0, [pc, #48]	@ (80014cc <main+0x70>)
 800149c:	f000 fcbe 	bl	8001e1c <HAL_ADC_Start_IT>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <main+0x4e>
  	  	  Error_Handler();
 80014a6:	f000 f9af 	bl	8001808 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Poll_Button(); // Poll button state and update filter flag
 80014aa:	f7ff ff21 	bl	80012f0 <Poll_Button>

	  // Perform other periodic tasks here if needed
	  // Example: You might want to add some other functionalities or delays
	  HAL_Delay(10); // Small delay to avoid rapid polling
 80014ae:	200a      	movs	r0, #10
 80014b0:	f000 fc4c 	bl	8001d4c <HAL_Delay>
	  Poll_Button(); // Poll button state and update filter flag
 80014b4:	bf00      	nop
 80014b6:	e7f8      	b.n	80014aa <main+0x4e>
 80014b8:	200003f8 	.word	0x200003f8
 80014bc:	20000020 	.word	0x20000020
 80014c0:	20000004 	.word	0x20000004
 80014c4:	200004f0 	.word	0x200004f0
 80014c8:	20000368 	.word	0x20000368
 80014cc:	20000320 	.word	0x20000320

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b094      	sub	sp, #80	@ 0x50
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	2230      	movs	r2, #48	@ 0x30
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f004 fd57 	bl	8005f92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	4b28      	ldr	r3, [pc, #160]	@ (800159c <SystemClock_Config+0xcc>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	4a27      	ldr	r2, [pc, #156]	@ (800159c <SystemClock_Config+0xcc>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001502:	6413      	str	r3, [r2, #64]	@ 0x40
 8001504:	4b25      	ldr	r3, [pc, #148]	@ (800159c <SystemClock_Config+0xcc>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <SystemClock_Config+0xd0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a21      	ldr	r2, [pc, #132]	@ (80015a0 <SystemClock_Config+0xd0>)
 800151a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <SystemClock_Config+0xd0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800152c:	2302      	movs	r3, #2
 800152e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001534:	2310      	movs	r3, #16
 8001536:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001538:	2302      	movs	r3, #2
 800153a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800153c:	2300      	movs	r3, #0
 800153e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001540:	2308      	movs	r3, #8
 8001542:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001544:	23a8      	movs	r3, #168	@ 0xa8
 8001546:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001548:	2302      	movs	r3, #2
 800154a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800154c:	2304      	movs	r3, #4
 800154e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001550:	f107 0320 	add.w	r3, r7, #32
 8001554:	4618      	mov	r0, r3
 8001556:	f001 fc25 	bl	8002da4 <HAL_RCC_OscConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001560:	f000 f952 	bl	8001808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001564:	230f      	movs	r3, #15
 8001566:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001568:	2302      	movs	r3, #2
 800156a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001570:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001574:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800157a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2105      	movs	r1, #5
 8001582:	4618      	mov	r0, r3
 8001584:	f001 fe86 	bl	8003294 <HAL_RCC_ClockConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800158e:	f000 f93b 	bl	8001808 <Error_Handler>
  }
}
 8001592:	bf00      	nop
 8001594:	3750      	adds	r7, #80	@ 0x50
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40007000 	.word	0x40007000

080015a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015aa:	463b      	mov	r3, r7
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015b6:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <MX_ADC1_Init+0x9c>)
 80015b8:	4a22      	ldr	r2, [pc, #136]	@ (8001644 <MX_ADC1_Init+0xa0>)
 80015ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015bc:	4b20      	ldr	r3, [pc, #128]	@ (8001640 <MX_ADC1_Init+0x9c>)
 80015be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001640 <MX_ADC1_Init+0x9c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001640 <MX_ADC1_Init+0x9c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <MX_ADC1_Init+0x9c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <MX_ADC1_Init+0x9c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80015de:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <MX_ADC1_Init+0x9c>)
 80015e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80015e6:	4b16      	ldr	r3, [pc, #88]	@ (8001640 <MX_ADC1_Init+0x9c>)
 80015e8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80015ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ee:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <MX_ADC1_Init+0x9c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015f4:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <MX_ADC1_Init+0x9c>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015fa:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <MX_ADC1_Init+0x9c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <MX_ADC1_Init+0x9c>)
 8001604:	2201      	movs	r2, #1
 8001606:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001608:	480d      	ldr	r0, [pc, #52]	@ (8001640 <MX_ADC1_Init+0x9c>)
 800160a:	f000 fbc3 	bl	8001d94 <HAL_ADC_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001614:	f000 f8f8 	bl	8001808 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001618:	230b      	movs	r3, #11
 800161a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800161c:	2301      	movs	r3, #1
 800161e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001620:	2301      	movs	r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001624:	463b      	mov	r3, r7
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	@ (8001640 <MX_ADC1_Init+0x9c>)
 800162a:	f000 fe07 	bl	800223c <HAL_ADC_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001634:	f000 f8e8 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000320 	.word	0x20000320
 8001644:	40012000 	.word	0x40012000

08001648 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	@ 0x28
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164e:	f107 0320 	add.w	r3, r7, #32
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]
 8001666:	615a      	str	r2, [r3, #20]
 8001668:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800166a:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <MX_TIM2_Init+0xa8>)
 800166c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001670:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001672:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <MX_TIM2_Init+0xa8>)
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <MX_TIM2_Init+0xa8>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 56000;
 800167e:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <MX_TIM2_Init+0xa8>)
 8001680:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8001684:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001686:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <MX_TIM2_Init+0xa8>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <MX_TIM2_Init+0xa8>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001692:	4817      	ldr	r0, [pc, #92]	@ (80016f0 <MX_TIM2_Init+0xa8>)
 8001694:	f001 ffde 	bl	8003654 <HAL_TIM_PWM_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800169e:	f000 f8b3 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016a2:	2320      	movs	r3, #32
 80016a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016aa:	f107 0320 	add.w	r3, r7, #32
 80016ae:	4619      	mov	r1, r3
 80016b0:	480f      	ldr	r0, [pc, #60]	@ (80016f0 <MX_TIM2_Init+0xa8>)
 80016b2:	f002 fc2b 	bl	8003f0c <HAL_TIMEx_MasterConfigSynchronization>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80016bc:	f000 f8a4 	bl	8001808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c0:	2360      	movs	r3, #96	@ 0x60
 80016c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2200      	movs	r2, #0
 80016d4:	4619      	mov	r1, r3
 80016d6:	4806      	ldr	r0, [pc, #24]	@ (80016f0 <MX_TIM2_Init+0xa8>)
 80016d8:	f002 f8d4 	bl	8003884 <HAL_TIM_PWM_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80016e2:	f000 f891 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	@ 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000368 	.word	0x20000368

080016f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <MX_USART2_UART_Init+0x4c>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	@ (8001744 <MX_USART2_UART_Init+0x50>)
 80016fc:	601a      	str	r2, [r3, #0]
//  huart2.Init.BaudRate = 115200;
  huart2.Init.BaudRate = 460800;
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <MX_USART2_UART_Init+0x4c>)
 8001700:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8001704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <MX_USART2_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <MX_USART2_UART_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <MX_USART2_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <MX_USART2_UART_Init+0x4c>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <MX_USART2_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <MX_USART2_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <MX_USART2_UART_Init+0x4c>)
 800172c:	f002 fc6a 	bl	8004004 <HAL_UART_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001736:	f000 f867 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200003b0 	.word	0x200003b0
 8001744:	40004400 	.word	0x40004400

08001748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	4b26      	ldr	r3, [pc, #152]	@ (80017fc <MX_GPIO_Init+0xb4>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a25      	ldr	r2, [pc, #148]	@ (80017fc <MX_GPIO_Init+0xb4>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b23      	ldr	r3, [pc, #140]	@ (80017fc <MX_GPIO_Init+0xb4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <MX_GPIO_Init+0xb4>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a1e      	ldr	r2, [pc, #120]	@ (80017fc <MX_GPIO_Init+0xb4>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <MX_GPIO_Init+0xb4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <MX_GPIO_Init+0xb4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a17      	ldr	r2, [pc, #92]	@ (80017fc <MX_GPIO_Init+0xb4>)
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <MX_GPIO_Init+0xb4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Green_Pin|LD3_Orange_Pin|LD5_Red_Pin|LD6_Blue_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80017b8:	4811      	ldr	r0, [pc, #68]	@ (8001800 <MX_GPIO_Init+0xb8>)
 80017ba:	f001 fabf 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_BUTTON_Pin */
  GPIO_InitStruct.Pin = GPIO_BUTTON_Pin;
 80017be:	2301      	movs	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	480c      	ldr	r0, [pc, #48]	@ (8001804 <MX_GPIO_Init+0xbc>)
 80017d2:	f001 f8ff 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Green_Pin LD3_Orange_Pin LD5_Red_Pin LD6_Blue_Pin */
  GPIO_InitStruct.Pin = LD4_Green_Pin|LD3_Orange_Pin|LD5_Red_Pin|LD6_Blue_Pin;
 80017d6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80017da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	4619      	mov	r1, r3
 80017ee:	4804      	ldr	r0, [pc, #16]	@ (8001800 <MX_GPIO_Init+0xb8>)
 80017f0:	f001 f8f0 	bl	80029d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020c00 	.word	0x40020c00
 8001804:	40020000 	.word	0x40020000

08001808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
}
 800180e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <Error_Handler+0x8>

08001814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <HAL_MspInit+0x4c>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	4a0f      	ldr	r2, [pc, #60]	@ (8001860 <HAL_MspInit+0x4c>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001828:	6453      	str	r3, [r2, #68]	@ 0x44
 800182a:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <HAL_MspInit+0x4c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_MspInit+0x4c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	4a08      	ldr	r2, [pc, #32]	@ (8001860 <HAL_MspInit+0x4c>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001844:	6413      	str	r3, [r2, #64]	@ 0x40
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_MspInit+0x4c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	@ 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1b      	ldr	r2, [pc, #108]	@ (80018f0 <HAL_ADC_MspInit+0x8c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d12f      	bne.n	80018e6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <HAL_ADC_MspInit+0x90>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	4a19      	ldr	r2, [pc, #100]	@ (80018f4 <HAL_ADC_MspInit+0x90>)
 8001890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001894:	6453      	str	r3, [r2, #68]	@ 0x44
 8001896:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <HAL_ADC_MspInit+0x90>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <HAL_ADC_MspInit+0x90>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <HAL_ADC_MspInit+0x90>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <HAL_ADC_MspInit+0x90>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018be:	2302      	movs	r3, #2
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c2:	2303      	movs	r3, #3
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4809      	ldr	r0, [pc, #36]	@ (80018f8 <HAL_ADC_MspInit+0x94>)
 80018d2:	f001 f87f 	bl	80029d4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	2012      	movs	r0, #18
 80018dc:	f000 ffb1 	bl	8002842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80018e0:	2012      	movs	r0, #18
 80018e2:	f000 ffca 	bl	800287a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018e6:	bf00      	nop
 80018e8:	3728      	adds	r7, #40	@ 0x28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40012000 	.word	0x40012000
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020800 	.word	0x40020800

080018fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800190c:	d10d      	bne.n	800192a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <HAL_TIM_PWM_MspInit+0x3c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	4a08      	ldr	r2, [pc, #32]	@ (8001938 <HAL_TIM_PWM_MspInit+0x3c>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6413      	str	r3, [r2, #64]	@ 0x40
 800191e:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <HAL_TIM_PWM_MspInit+0x3c>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800192a:	bf00      	nop
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	@ 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a1d      	ldr	r2, [pc, #116]	@ (80019d0 <HAL_UART_MspInit+0x94>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d133      	bne.n	80019c6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b1c      	ldr	r3, [pc, #112]	@ (80019d4 <HAL_UART_MspInit+0x98>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	4a1b      	ldr	r2, [pc, #108]	@ (80019d4 <HAL_UART_MspInit+0x98>)
 8001968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800196c:	6413      	str	r3, [r2, #64]	@ 0x40
 800196e:	4b19      	ldr	r3, [pc, #100]	@ (80019d4 <HAL_UART_MspInit+0x98>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <HAL_UART_MspInit+0x98>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	4a14      	ldr	r2, [pc, #80]	@ (80019d4 <HAL_UART_MspInit+0x98>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	@ 0x30
 800198a:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_UART_MspInit+0x98>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001996:	230c      	movs	r3, #12
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019a6:	2307      	movs	r3, #7
 80019a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4809      	ldr	r0, [pc, #36]	@ (80019d8 <HAL_UART_MspInit+0x9c>)
 80019b2:	f001 f80f 	bl	80029d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2026      	movs	r0, #38	@ 0x26
 80019bc:	f000 ff41 	bl	8002842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019c0:	2026      	movs	r0, #38	@ 0x26
 80019c2:	f000 ff5a 	bl	800287a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	@ 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40004400 	.word	0x40004400
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <NMI_Handler+0x4>

080019e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <HardFault_Handler+0x4>

080019ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <MemManage_Handler+0x4>

080019f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <BusFault_Handler+0x4>

080019fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <UsageFault_Handler+0x4>

08001a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a32:	f000 f96b 	bl	8001d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a40:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <ADC_IRQHandler+0x10>)
 8001a42:	f000 fac9 	bl	8001fd8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000320 	.word	0x20000320

08001a50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a54:	4802      	ldr	r0, [pc, #8]	@ (8001a60 <USART2_IRQHandler+0x10>)
 8001a56:	f002 fbb1 	bl	80041bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200003b0 	.word	0x200003b0

08001a64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return 1;
 8001a68:	2301      	movs	r3, #1
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_kill>:

int _kill(int pid, int sig)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a7e:	f004 fadb 	bl	8006038 <__errno>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2216      	movs	r2, #22
 8001a86:	601a      	str	r2, [r3, #0]
  return -1;
 8001a88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_exit>:

void _exit (int status)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ffe7 	bl	8001a74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aa6:	bf00      	nop
 8001aa8:	e7fd      	b.n	8001aa6 <_exit+0x12>

08001aaa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e00a      	b.n	8001ad2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001abc:	f3af 8000 	nop.w
 8001ac0:	4601      	mov	r1, r0
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	60ba      	str	r2, [r7, #8]
 8001ac8:	b2ca      	uxtb	r2, r1
 8001aca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	dbf0      	blt.n	8001abc <_read+0x12>
  }

  return len;
 8001ada:	687b      	ldr	r3, [r7, #4]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	e009      	b.n	8001b0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	60ba      	str	r2, [r7, #8]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	dbf1      	blt.n	8001af6 <_write+0x12>
  }
  return len;
 8001b12:	687b      	ldr	r3, [r7, #4]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_close>:

int _close(int file)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b44:	605a      	str	r2, [r3, #4]
  return 0;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_isatty>:

int _isatty(int file)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b5c:	2301      	movs	r3, #1
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	@ (8001be0 <_sbrk+0x5c>)
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <_sbrk+0x60>)
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <_sbrk+0x64>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	@ (8001bec <_sbrk+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d207      	bcs.n	8001bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb4:	f004 fa40 	bl	8006038 <__errno>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	220c      	movs	r2, #12
 8001bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e009      	b.n	8001bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bca:	4b07      	ldr	r3, [pc, #28]	@ (8001be8 <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a05      	ldr	r2, [pc, #20]	@ (8001be8 <_sbrk+0x64>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20020000 	.word	0x20020000
 8001be4:	00000400 	.word	0x00000400
 8001be8:	200005a4 	.word	0x200005a4
 8001bec:	200006f8 	.word	0x200006f8

08001bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf4:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <SystemInit+0x20>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bfa:	4a05      	ldr	r2, [pc, #20]	@ (8001c10 <SystemInit+0x20>)
 8001bfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c18:	f7ff ffea 	bl	8001bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c1c:	480c      	ldr	r0, [pc, #48]	@ (8001c50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c1e:	490d      	ldr	r1, [pc, #52]	@ (8001c54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c20:	4a0d      	ldr	r2, [pc, #52]	@ (8001c58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c24:	e002      	b.n	8001c2c <LoopCopyDataInit>

08001c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2a:	3304      	adds	r3, #4

08001c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c30:	d3f9      	bcc.n	8001c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c32:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c34:	4c0a      	ldr	r4, [pc, #40]	@ (8001c60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c38:	e001      	b.n	8001c3e <LoopFillZerobss>

08001c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c3c:	3204      	adds	r2, #4

08001c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c40:	d3fb      	bcc.n	8001c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c42:	f004 f9ff 	bl	8006044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c46:	f7ff fc09 	bl	800145c <main>
  bx  lr    
 8001c4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c54:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 8001c58:	08009bb8 	.word	0x08009bb8
  ldr r2, =_sbss
 8001c5c:	20000304 	.word	0x20000304
  ldr r4, =_ebss
 8001c60:	200006f8 	.word	0x200006f8

08001c64 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <CAN1_RX0_IRQHandler>
	...

08001c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca8 <HAL_Init+0x40>)
 8001c72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <HAL_Init+0x40>)
 8001c7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c84:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a07      	ldr	r2, [pc, #28]	@ (8001ca8 <HAL_Init+0x40>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f000 fdcb 	bl	800282c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c96:	200f      	movs	r0, #15
 8001c98:	f000 f808 	bl	8001cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9c:	f7ff fdba 	bl	8001814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <HAL_InitTick+0x54>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <HAL_InitTick+0x58>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fde3 	bl	8002896 <HAL_SYSTICK_Config>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00e      	b.n	8001cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b0f      	cmp	r3, #15
 8001cde:	d80a      	bhi.n	8001cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	f000 fdab 	bl	8002842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cec:	4a06      	ldr	r2, [pc, #24]	@ (8001d08 <HAL_InitTick+0x5c>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e000      	b.n	8001cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000130 	.word	0x20000130
 8001d04:	20000138 	.word	0x20000138
 8001d08:	20000134 	.word	0x20000134

08001d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_IncTick+0x20>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_IncTick+0x24>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a04      	ldr	r2, [pc, #16]	@ (8001d30 <HAL_IncTick+0x24>)
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000138 	.word	0x20000138
 8001d30:	200005a8 	.word	0x200005a8

08001d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTick;
 8001d38:	4b03      	ldr	r3, [pc, #12]	@ (8001d48 <HAL_GetTick+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	200005a8 	.word	0x200005a8

08001d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff ffee 	bl	8001d34 <HAL_GetTick>
 8001d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d64:	d005      	beq.n	8001d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <HAL_Delay+0x44>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d72:	bf00      	nop
 8001d74:	f7ff ffde 	bl	8001d34 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d8f7      	bhi.n	8001d74 <HAL_Delay+0x28>
  {
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000138 	.word	0x20000138

08001d94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e033      	b.n	8001e12 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff fd56 	bl	8001864 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d118      	bne.n	8001e04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001dda:	f023 0302 	bic.w	r3, r3, #2
 8001dde:	f043 0202 	orr.w	r2, r3, #2
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fb4a 	bl	8002480 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	f023 0303 	bic.w	r3, r3, #3
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e02:	e001      	b.n	8001e08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_Start_IT+0x1a>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e0bd      	b.n	8001fb2 <HAL_ADC_Start_IT+0x196>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d018      	beq.n	8001e7e <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e5c:	4b58      	ldr	r3, [pc, #352]	@ (8001fc0 <HAL_ADC_Start_IT+0x1a4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a58      	ldr	r2, [pc, #352]	@ (8001fc4 <HAL_ADC_Start_IT+0x1a8>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	0c9a      	lsrs	r2, r3, #18
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e70:	e002      	b.n	8001e78 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f9      	bne.n	8001e72 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	f040 8085 	bne.w	8001f98 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001eb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ecc:	d106      	bne.n	8001edc <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed2:	f023 0206 	bic.w	r2, r3, #6
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001eda:	e002      	b.n	8001ee2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eea:	4b37      	ldr	r3, [pc, #220]	@ (8001fc8 <HAL_ADC_Start_IT+0x1ac>)
 8001eec:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001ef6:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f06:	f043 0320 	orr.w	r3, r3, #32
 8001f0a:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d12a      	bne.n	8001f6e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8001fcc <HAL_ADC_Start_IT+0x1b0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d015      	beq.n	8001f4e <HAL_ADC_Start_IT+0x132>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a2a      	ldr	r2, [pc, #168]	@ (8001fd0 <HAL_ADC_Start_IT+0x1b4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d105      	bne.n	8001f38 <HAL_ADC_Start_IT+0x11c>
 8001f2c:	4b26      	ldr	r3, [pc, #152]	@ (8001fc8 <HAL_ADC_Start_IT+0x1ac>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a25      	ldr	r2, [pc, #148]	@ (8001fd4 <HAL_ADC_Start_IT+0x1b8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d136      	bne.n	8001fb0 <HAL_ADC_Start_IT+0x194>
 8001f42:	4b21      	ldr	r3, [pc, #132]	@ (8001fc8 <HAL_ADC_Start_IT+0x1ac>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d130      	bne.n	8001fb0 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d129      	bne.n	8001fb0 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	e020      	b.n	8001fb0 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a16      	ldr	r2, [pc, #88]	@ (8001fcc <HAL_ADC_Start_IT+0x1b0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d11b      	bne.n	8001fb0 <HAL_ADC_Start_IT+0x194>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d114      	bne.n	8001fb0 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	e00b      	b.n	8001fb0 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	f043 0210 	orr.w	r2, r3, #16
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000130 	.word	0x20000130
 8001fc4:	431bde83 	.word	0x431bde83
 8001fc8:	40012300 	.word	0x40012300
 8001fcc:	40012000 	.word	0x40012000
 8001fd0:	40012100 	.word	0x40012100
 8001fd4:	40012200 	.word	0x40012200

08001fd8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0320 	and.w	r3, r3, #32
 8002006:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d049      	beq.n	80020a2 <HAL_ADC_IRQHandler+0xca>
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d046      	beq.n	80020a2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	d105      	bne.n	800202c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d12b      	bne.n	8002092 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800203e:	2b00      	cmp	r3, #0
 8002040:	d127      	bne.n	8002092 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002048:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800205a:	2b00      	cmp	r3, #0
 800205c:	d119      	bne.n	8002092 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0220 	bic.w	r2, r2, #32
 800206c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d105      	bne.n	8002092 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f043 0201 	orr.w	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff f960 	bl	8001358 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0212 	mvn.w	r2, #18
 80020a0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d057      	beq.n	8002168 <HAL_ADC_IRQHandler+0x190>
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d054      	beq.n	8002168 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d105      	bne.n	80020d6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d139      	bne.n	8002158 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ea:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d12b      	bne.n	8002158 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800210a:	2b00      	cmp	r3, #0
 800210c:	d124      	bne.n	8002158 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002118:	2b00      	cmp	r3, #0
 800211a:	d11d      	bne.n	8002158 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002120:	2b00      	cmp	r3, #0
 8002122:	d119      	bne.n	8002158 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002132:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d105      	bne.n	8002158 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fa8d 	bl	8002678 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f06f 020c 	mvn.w	r2, #12
 8002166:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002176:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d017      	beq.n	80021ae <HAL_ADC_IRQHandler+0x1d6>
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d014      	beq.n	80021ae <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b01      	cmp	r3, #1
 8002190:	d10d      	bne.n	80021ae <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f837 	bl	8002212 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0201 	mvn.w	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021bc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d015      	beq.n	80021f0 <HAL_ADC_IRQHandler+0x218>
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d012      	beq.n	80021f0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	f043 0202 	orr.w	r2, r3, #2
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f06f 0220 	mvn.w	r2, #32
 80021de:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f820 	bl	8002226 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f06f 0220 	mvn.w	r2, #32
 80021ee:	601a      	str	r2, [r3, #0]
  }
}
 80021f0:	bf00      	nop
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x1c>
 8002254:	2302      	movs	r3, #2
 8002256:	e105      	b.n	8002464 <HAL_ADC_ConfigChannel+0x228>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b09      	cmp	r3, #9
 8002266:	d925      	bls.n	80022b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68d9      	ldr	r1, [r3, #12]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	3b1e      	subs	r3, #30
 800227e:	2207      	movs	r2, #7
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43da      	mvns	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	400a      	ands	r2, r1
 800228c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68d9      	ldr	r1, [r3, #12]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	b29b      	uxth	r3, r3
 800229e:	4618      	mov	r0, r3
 80022a0:	4603      	mov	r3, r0
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4403      	add	r3, r0
 80022a6:	3b1e      	subs	r3, #30
 80022a8:	409a      	lsls	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	e022      	b.n	80022fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6919      	ldr	r1, [r3, #16]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	2207      	movs	r2, #7
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	400a      	ands	r2, r1
 80022d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6919      	ldr	r1, [r3, #16]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	4618      	mov	r0, r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4403      	add	r3, r0
 80022f0:	409a      	lsls	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d824      	bhi.n	800234c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	3b05      	subs	r3, #5
 8002314:	221f      	movs	r2, #31
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	400a      	ands	r2, r1
 8002322:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	4618      	mov	r0, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	3b05      	subs	r3, #5
 800233e:	fa00 f203 	lsl.w	r2, r0, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	635a      	str	r2, [r3, #52]	@ 0x34
 800234a:	e04c      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b0c      	cmp	r3, #12
 8002352:	d824      	bhi.n	800239e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	3b23      	subs	r3, #35	@ 0x23
 8002366:	221f      	movs	r2, #31
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43da      	mvns	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	400a      	ands	r2, r1
 8002374:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	4618      	mov	r0, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	3b23      	subs	r3, #35	@ 0x23
 8002390:	fa00 f203 	lsl.w	r2, r0, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	631a      	str	r2, [r3, #48]	@ 0x30
 800239c:	e023      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	3b41      	subs	r3, #65	@ 0x41
 80023b0:	221f      	movs	r2, #31
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	400a      	ands	r2, r1
 80023be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	4618      	mov	r0, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	3b41      	subs	r3, #65	@ 0x41
 80023da:	fa00 f203 	lsl.w	r2, r0, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023e6:	4b22      	ldr	r3, [pc, #136]	@ (8002470 <HAL_ADC_ConfigChannel+0x234>)
 80023e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a21      	ldr	r2, [pc, #132]	@ (8002474 <HAL_ADC_ConfigChannel+0x238>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d109      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x1cc>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b12      	cmp	r3, #18
 80023fa:	d105      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a19      	ldr	r2, [pc, #100]	@ (8002474 <HAL_ADC_ConfigChannel+0x238>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d123      	bne.n	800245a <HAL_ADC_ConfigChannel+0x21e>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b10      	cmp	r3, #16
 8002418:	d003      	beq.n	8002422 <HAL_ADC_ConfigChannel+0x1e6>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b11      	cmp	r3, #17
 8002420:	d11b      	bne.n	800245a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b10      	cmp	r3, #16
 8002434:	d111      	bne.n	800245a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <HAL_ADC_ConfigChannel+0x23c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a10      	ldr	r2, [pc, #64]	@ (800247c <HAL_ADC_ConfigChannel+0x240>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	0c9a      	lsrs	r2, r3, #18
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800244c:	e002      	b.n	8002454 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	3b01      	subs	r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f9      	bne.n	800244e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	40012300 	.word	0x40012300
 8002474:	40012000 	.word	0x40012000
 8002478:	20000130 	.word	0x20000130
 800247c:	431bde83 	.word	0x431bde83

08002480 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002488:	4b79      	ldr	r3, [pc, #484]	@ (8002670 <ADC_Init+0x1f0>)
 800248a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	431a      	orrs	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	021a      	lsls	r2, r3, #8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80024d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6899      	ldr	r1, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002512:	4a58      	ldr	r2, [pc, #352]	@ (8002674 <ADC_Init+0x1f4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d022      	beq.n	800255e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002526:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6899      	ldr	r1, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002548:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6899      	ldr	r1, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	e00f      	b.n	800257e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800256c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800257c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0202 	bic.w	r2, r2, #2
 800258c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6899      	ldr	r1, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7e1b      	ldrb	r3, [r3, #24]
 8002598:	005a      	lsls	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01b      	beq.n	80025e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	3b01      	subs	r3, #1
 80025d8:	035a      	lsls	r2, r3, #13
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	e007      	b.n	80025f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002602:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	3b01      	subs	r3, #1
 8002610:	051a      	lsls	r2, r3, #20
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6899      	ldr	r1, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002636:	025a      	lsls	r2, r3, #9
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800264e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	029a      	lsls	r2, r3, #10
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	609a      	str	r2, [r3, #8]
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	40012300 	.word	0x40012300
 8002674:	0f000001 	.word	0x0f000001

08002678 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800269c:	4b0c      	ldr	r3, [pc, #48]	@ (80026d0 <__NVIC_SetPriorityGrouping+0x44>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026a8:	4013      	ands	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026be:	4a04      	ldr	r2, [pc, #16]	@ (80026d0 <__NVIC_SetPriorityGrouping+0x44>)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	60d3      	str	r3, [r2, #12]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d8:	4b04      	ldr	r3, [pc, #16]	@ (80026ec <__NVIC_GetPriorityGrouping+0x18>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	f003 0307 	and.w	r3, r3, #7
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	db0b      	blt.n	800271a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	4907      	ldr	r1, [pc, #28]	@ (8002728 <__NVIC_EnableIRQ+0x38>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	2001      	movs	r0, #1
 8002712:	fa00 f202 	lsl.w	r2, r0, r2
 8002716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	e000e100 	.word	0xe000e100

0800272c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	6039      	str	r1, [r7, #0]
 8002736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273c:	2b00      	cmp	r3, #0
 800273e:	db0a      	blt.n	8002756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	b2da      	uxtb	r2, r3
 8002744:	490c      	ldr	r1, [pc, #48]	@ (8002778 <__NVIC_SetPriority+0x4c>)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	0112      	lsls	r2, r2, #4
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	440b      	add	r3, r1
 8002750:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002754:	e00a      	b.n	800276c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4908      	ldr	r1, [pc, #32]	@ (800277c <__NVIC_SetPriority+0x50>)
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	3b04      	subs	r3, #4
 8002764:	0112      	lsls	r2, r2, #4
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	440b      	add	r3, r1
 800276a:	761a      	strb	r2, [r3, #24]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000e100 	.word	0xe000e100
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002780:	b480      	push	{r7}
 8002782:	b089      	sub	sp, #36	@ 0x24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f1c3 0307 	rsb	r3, r3, #7
 800279a:	2b04      	cmp	r3, #4
 800279c:	bf28      	it	cs
 800279e:	2304      	movcs	r3, #4
 80027a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3304      	adds	r3, #4
 80027a6:	2b06      	cmp	r3, #6
 80027a8:	d902      	bls.n	80027b0 <NVIC_EncodePriority+0x30>
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3b03      	subs	r3, #3
 80027ae:	e000      	b.n	80027b2 <NVIC_EncodePriority+0x32>
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	f04f 32ff 	mov.w	r2, #4294967295
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43da      	mvns	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	401a      	ands	r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	43d9      	mvns	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	4313      	orrs	r3, r2
         );
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3724      	adds	r7, #36	@ 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027f8:	d301      	bcc.n	80027fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027fa:	2301      	movs	r3, #1
 80027fc:	e00f      	b.n	800281e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002828 <SysTick_Config+0x40>)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002806:	210f      	movs	r1, #15
 8002808:	f04f 30ff 	mov.w	r0, #4294967295
 800280c:	f7ff ff8e 	bl	800272c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002810:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <SysTick_Config+0x40>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002816:	4b04      	ldr	r3, [pc, #16]	@ (8002828 <SysTick_Config+0x40>)
 8002818:	2207      	movs	r2, #7
 800281a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	e000e010 	.word	0xe000e010

0800282c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff ff29 	bl	800268c <__NVIC_SetPriorityGrouping>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002842:	b580      	push	{r7, lr}
 8002844:	b086      	sub	sp, #24
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	607a      	str	r2, [r7, #4]
 800284e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002854:	f7ff ff3e 	bl	80026d4 <__NVIC_GetPriorityGrouping>
 8002858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	6978      	ldr	r0, [r7, #20]
 8002860:	f7ff ff8e 	bl	8002780 <NVIC_EncodePriority>
 8002864:	4602      	mov	r2, r0
 8002866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff5d 	bl	800272c <__NVIC_SetPriority>
}
 8002872:	bf00      	nop
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	4603      	mov	r3, r0
 8002882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff31 	bl	80026f0 <__NVIC_EnableIRQ>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff ffa2 	bl	80027e8 <SysTick_Config>
 80028a4:	4603      	mov	r3, r0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b084      	sub	sp, #16
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028bc:	f7ff fa3a 	bl	8001d34 <HAL_GetTick>
 80028c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d008      	beq.n	80028e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2280      	movs	r2, #128	@ 0x80
 80028d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e052      	b.n	8002986 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0216 	bic.w	r2, r2, #22
 80028ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002904:	2b00      	cmp	r3, #0
 8002906:	d103      	bne.n	8002910 <HAL_DMA_Abort+0x62>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800290c:	2b00      	cmp	r3, #0
 800290e:	d007      	beq.n	8002920 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0208 	bic.w	r2, r2, #8
 800291e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002930:	e013      	b.n	800295a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002932:	f7ff f9ff 	bl	8001d34 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b05      	cmp	r3, #5
 800293e:	d90c      	bls.n	800295a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2220      	movs	r2, #32
 8002944:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2203      	movs	r2, #3
 800294a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e015      	b.n	8002986 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1e4      	bne.n	8002932 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296c:	223f      	movs	r2, #63	@ 0x3f
 800296e:	409a      	lsls	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d004      	beq.n	80029ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2280      	movs	r2, #128	@ 0x80
 80029a6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e00c      	b.n	80029c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2205      	movs	r2, #5
 80029b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	@ 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	e16b      	b.n	8002cc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029f0:	2201      	movs	r2, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	f040 815a 	bne.w	8002cc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d005      	beq.n	8002a26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d130      	bne.n	8002a88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	2203      	movs	r2, #3
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 0201 	and.w	r2, r3, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d017      	beq.n	8002ac4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d123      	bne.n	8002b18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	08da      	lsrs	r2, r3, #3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3208      	adds	r2, #8
 8002ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	220f      	movs	r2, #15
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	08da      	lsrs	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3208      	adds	r2, #8
 8002b12:	69b9      	ldr	r1, [r7, #24]
 8002b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2203      	movs	r2, #3
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0203 	and.w	r2, r3, #3
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80b4 	beq.w	8002cc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	4b60      	ldr	r3, [pc, #384]	@ (8002ce0 <HAL_GPIO_Init+0x30c>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	4a5f      	ldr	r2, [pc, #380]	@ (8002ce0 <HAL_GPIO_Init+0x30c>)
 8002b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ce0 <HAL_GPIO_Init+0x30c>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b76:	4a5b      	ldr	r2, [pc, #364]	@ (8002ce4 <HAL_GPIO_Init+0x310>)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	220f      	movs	r2, #15
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a52      	ldr	r2, [pc, #328]	@ (8002ce8 <HAL_GPIO_Init+0x314>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d02b      	beq.n	8002bfa <HAL_GPIO_Init+0x226>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a51      	ldr	r2, [pc, #324]	@ (8002cec <HAL_GPIO_Init+0x318>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d025      	beq.n	8002bf6 <HAL_GPIO_Init+0x222>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a50      	ldr	r2, [pc, #320]	@ (8002cf0 <HAL_GPIO_Init+0x31c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d01f      	beq.n	8002bf2 <HAL_GPIO_Init+0x21e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4f      	ldr	r2, [pc, #316]	@ (8002cf4 <HAL_GPIO_Init+0x320>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d019      	beq.n	8002bee <HAL_GPIO_Init+0x21a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4e      	ldr	r2, [pc, #312]	@ (8002cf8 <HAL_GPIO_Init+0x324>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_GPIO_Init+0x216>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4d      	ldr	r2, [pc, #308]	@ (8002cfc <HAL_GPIO_Init+0x328>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00d      	beq.n	8002be6 <HAL_GPIO_Init+0x212>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4c      	ldr	r2, [pc, #304]	@ (8002d00 <HAL_GPIO_Init+0x32c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d007      	beq.n	8002be2 <HAL_GPIO_Init+0x20e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4b      	ldr	r2, [pc, #300]	@ (8002d04 <HAL_GPIO_Init+0x330>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <HAL_GPIO_Init+0x20a>
 8002bda:	2307      	movs	r3, #7
 8002bdc:	e00e      	b.n	8002bfc <HAL_GPIO_Init+0x228>
 8002bde:	2308      	movs	r3, #8
 8002be0:	e00c      	b.n	8002bfc <HAL_GPIO_Init+0x228>
 8002be2:	2306      	movs	r3, #6
 8002be4:	e00a      	b.n	8002bfc <HAL_GPIO_Init+0x228>
 8002be6:	2305      	movs	r3, #5
 8002be8:	e008      	b.n	8002bfc <HAL_GPIO_Init+0x228>
 8002bea:	2304      	movs	r3, #4
 8002bec:	e006      	b.n	8002bfc <HAL_GPIO_Init+0x228>
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e004      	b.n	8002bfc <HAL_GPIO_Init+0x228>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e002      	b.n	8002bfc <HAL_GPIO_Init+0x228>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <HAL_GPIO_Init+0x228>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	f002 0203 	and.w	r2, r2, #3
 8002c02:	0092      	lsls	r2, r2, #2
 8002c04:	4093      	lsls	r3, r2
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c0c:	4935      	ldr	r1, [pc, #212]	@ (8002ce4 <HAL_GPIO_Init+0x310>)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	089b      	lsrs	r3, r3, #2
 8002c12:	3302      	adds	r3, #2
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d08 <HAL_GPIO_Init+0x334>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c3e:	4a32      	ldr	r2, [pc, #200]	@ (8002d08 <HAL_GPIO_Init+0x334>)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c44:	4b30      	ldr	r3, [pc, #192]	@ (8002d08 <HAL_GPIO_Init+0x334>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c68:	4a27      	ldr	r2, [pc, #156]	@ (8002d08 <HAL_GPIO_Init+0x334>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c6e:	4b26      	ldr	r3, [pc, #152]	@ (8002d08 <HAL_GPIO_Init+0x334>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c92:	4a1d      	ldr	r2, [pc, #116]	@ (8002d08 <HAL_GPIO_Init+0x334>)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c98:	4b1b      	ldr	r3, [pc, #108]	@ (8002d08 <HAL_GPIO_Init+0x334>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cbc:	4a12      	ldr	r2, [pc, #72]	@ (8002d08 <HAL_GPIO_Init+0x334>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	61fb      	str	r3, [r7, #28]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	2b0f      	cmp	r3, #15
 8002ccc:	f67f ae90 	bls.w	80029f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	bf00      	nop
 8002cd4:	3724      	adds	r7, #36	@ 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40013800 	.word	0x40013800
 8002ce8:	40020000 	.word	0x40020000
 8002cec:	40020400 	.word	0x40020400
 8002cf0:	40020800 	.word	0x40020800
 8002cf4:	40020c00 	.word	0x40020c00
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40021400 	.word	0x40021400
 8002d00:	40021800 	.word	0x40021800
 8002d04:	40021c00 	.word	0x40021c00
 8002d08:	40013c00 	.word	0x40013c00

08002d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
 8002d28:	e001      	b.n	8002d2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d4c:	787b      	ldrb	r3, [r7, #1]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d58:	e003      	b.n	8002d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d5a:	887b      	ldrh	r3, [r7, #2]
 8002d5c:	041a      	lsls	r2, r3, #16
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	619a      	str	r2, [r3, #24]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d80:	887a      	ldrh	r2, [r7, #2]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4013      	ands	r3, r2
 8002d86:	041a      	lsls	r2, r3, #16
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	43d9      	mvns	r1, r3
 8002d8c:	887b      	ldrh	r3, [r7, #2]
 8002d8e:	400b      	ands	r3, r1
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	619a      	str	r2, [r3, #24]
}
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e267      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d075      	beq.n	8002eae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dc2:	4b88      	ldr	r3, [pc, #544]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d00c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dce:	4b85      	ldr	r3, [pc, #532]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d112      	bne.n	8002e00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dda:	4b82      	ldr	r3, [pc, #520]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002de6:	d10b      	bne.n	8002e00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	4b7e      	ldr	r3, [pc, #504]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d05b      	beq.n	8002eac <HAL_RCC_OscConfig+0x108>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d157      	bne.n	8002eac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e242      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e08:	d106      	bne.n	8002e18 <HAL_RCC_OscConfig+0x74>
 8002e0a:	4b76      	ldr	r3, [pc, #472]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a75      	ldr	r2, [pc, #468]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e01d      	b.n	8002e54 <HAL_RCC_OscConfig+0xb0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x98>
 8002e22:	4b70      	ldr	r3, [pc, #448]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a6f      	ldr	r2, [pc, #444]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a6c      	ldr	r2, [pc, #432]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e00b      	b.n	8002e54 <HAL_RCC_OscConfig+0xb0>
 8002e3c:	4b69      	ldr	r3, [pc, #420]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a68      	ldr	r2, [pc, #416]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b66      	ldr	r3, [pc, #408]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a65      	ldr	r2, [pc, #404]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d013      	beq.n	8002e84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe ff6a 	bl	8001d34 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e64:	f7fe ff66 	bl	8001d34 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	@ 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e207      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	4b5b      	ldr	r3, [pc, #364]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0xc0>
 8002e82:	e014      	b.n	8002eae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fe ff56 	bl	8001d34 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7fe ff52 	bl	8001d34 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	@ 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e1f3      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9e:	4b51      	ldr	r3, [pc, #324]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0xe8>
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d063      	beq.n	8002f82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eba:	4b4a      	ldr	r3, [pc, #296]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00b      	beq.n	8002ede <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ec6:	4b47      	ldr	r3, [pc, #284]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d11c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ed2:	4b44      	ldr	r3, [pc, #272]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d116      	bne.n	8002f0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ede:	4b41      	ldr	r3, [pc, #260]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x152>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e1c7      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4937      	ldr	r1, [pc, #220]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0a:	e03a      	b.n	8002f82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d020      	beq.n	8002f56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f14:	4b34      	ldr	r3, [pc, #208]	@ (8002fe8 <HAL_RCC_OscConfig+0x244>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1a:	f7fe ff0b 	bl	8001d34 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f22:	f7fe ff07 	bl	8001d34 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e1a8      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f34:	4b2b      	ldr	r3, [pc, #172]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f40:	4b28      	ldr	r3, [pc, #160]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4925      	ldr	r1, [pc, #148]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]
 8002f54:	e015      	b.n	8002f82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f56:	4b24      	ldr	r3, [pc, #144]	@ (8002fe8 <HAL_RCC_OscConfig+0x244>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe feea 	bl	8001d34 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f64:	f7fe fee6 	bl	8001d34 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e187      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f76:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d036      	beq.n	8002ffc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d016      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f96:	4b15      	ldr	r3, [pc, #84]	@ (8002fec <HAL_RCC_OscConfig+0x248>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fe feca 	bl	8001d34 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa4:	f7fe fec6 	bl	8001d34 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e167      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x200>
 8002fc2:	e01b      	b.n	8002ffc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc4:	4b09      	ldr	r3, [pc, #36]	@ (8002fec <HAL_RCC_OscConfig+0x248>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fca:	f7fe feb3 	bl	8001d34 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd0:	e00e      	b.n	8002ff0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd2:	f7fe feaf 	bl	8001d34 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d907      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e150      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	42470000 	.word	0x42470000
 8002fec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff0:	4b88      	ldr	r3, [pc, #544]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1ea      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8097 	beq.w	8003138 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800300a:	2300      	movs	r3, #0
 800300c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300e:	4b81      	ldr	r3, [pc, #516]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	4b7d      	ldr	r3, [pc, #500]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	4a7c      	ldr	r2, [pc, #496]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003028:	6413      	str	r3, [r2, #64]	@ 0x40
 800302a:	4b7a      	ldr	r3, [pc, #488]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003036:	2301      	movs	r3, #1
 8003038:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303a:	4b77      	ldr	r3, [pc, #476]	@ (8003218 <HAL_RCC_OscConfig+0x474>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003042:	2b00      	cmp	r3, #0
 8003044:	d118      	bne.n	8003078 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003046:	4b74      	ldr	r3, [pc, #464]	@ (8003218 <HAL_RCC_OscConfig+0x474>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a73      	ldr	r2, [pc, #460]	@ (8003218 <HAL_RCC_OscConfig+0x474>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003052:	f7fe fe6f 	bl	8001d34 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800305a:	f7fe fe6b 	bl	8001d34 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e10c      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306c:	4b6a      	ldr	r3, [pc, #424]	@ (8003218 <HAL_RCC_OscConfig+0x474>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d106      	bne.n	800308e <HAL_RCC_OscConfig+0x2ea>
 8003080:	4b64      	ldr	r3, [pc, #400]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003084:	4a63      	ldr	r2, [pc, #396]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6713      	str	r3, [r2, #112]	@ 0x70
 800308c:	e01c      	b.n	80030c8 <HAL_RCC_OscConfig+0x324>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b05      	cmp	r3, #5
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x30c>
 8003096:	4b5f      	ldr	r3, [pc, #380]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309a:	4a5e      	ldr	r2, [pc, #376]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0x324>
 80030b0:	4b58      	ldr	r3, [pc, #352]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b4:	4a57      	ldr	r2, [pc, #348]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030b6:	f023 0301 	bic.w	r3, r3, #1
 80030ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80030bc:	4b55      	ldr	r3, [pc, #340]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c0:	4a54      	ldr	r2, [pc, #336]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030c2:	f023 0304 	bic.w	r3, r3, #4
 80030c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d015      	beq.n	80030fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d0:	f7fe fe30 	bl	8001d34 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d8:	f7fe fe2c 	bl	8001d34 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0cb      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ee:	4b49      	ldr	r3, [pc, #292]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0ee      	beq.n	80030d8 <HAL_RCC_OscConfig+0x334>
 80030fa:	e014      	b.n	8003126 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fc:	f7fe fe1a 	bl	8001d34 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003102:	e00a      	b.n	800311a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003104:	f7fe fe16 	bl	8001d34 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e0b5      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311a:	4b3e      	ldr	r3, [pc, #248]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1ee      	bne.n	8003104 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003126:	7dfb      	ldrb	r3, [r7, #23]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d105      	bne.n	8003138 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800312c:	4b39      	ldr	r3, [pc, #228]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	4a38      	ldr	r2, [pc, #224]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003136:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80a1 	beq.w	8003284 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003142:	4b34      	ldr	r3, [pc, #208]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b08      	cmp	r3, #8
 800314c:	d05c      	beq.n	8003208 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d141      	bne.n	80031da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	4b31      	ldr	r3, [pc, #196]	@ (800321c <HAL_RCC_OscConfig+0x478>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fe fdea 	bl	8001d34 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003164:	f7fe fde6 	bl	8001d34 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e087      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	4b27      	ldr	r3, [pc, #156]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69da      	ldr	r2, [r3, #28]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	019b      	lsls	r3, r3, #6
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	3b01      	subs	r3, #1
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	061b      	lsls	r3, r3, #24
 80031a6:	491b      	ldr	r1, [pc, #108]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ac:	4b1b      	ldr	r3, [pc, #108]	@ (800321c <HAL_RCC_OscConfig+0x478>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7fe fdbf 	bl	8001d34 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ba:	f7fe fdbb 	bl	8001d34 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e05c      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031cc:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0x416>
 80031d8:	e054      	b.n	8003284 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031da:	4b10      	ldr	r3, [pc, #64]	@ (800321c <HAL_RCC_OscConfig+0x478>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fe fda8 	bl	8001d34 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fe fda4 	bl	8001d34 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e045      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x444>
 8003206:	e03d      	b.n	8003284 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d107      	bne.n	8003220 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e038      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
 8003214:	40023800 	.word	0x40023800
 8003218:	40007000 	.word	0x40007000
 800321c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003220:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <HAL_RCC_OscConfig+0x4ec>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d028      	beq.n	8003280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d121      	bne.n	8003280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003246:	429a      	cmp	r2, r3
 8003248:	d11a      	bne.n	8003280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003250:	4013      	ands	r3, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003256:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003258:	4293      	cmp	r3, r2
 800325a:	d111      	bne.n	8003280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003266:	085b      	lsrs	r3, r3, #1
 8003268:	3b01      	subs	r3, #1
 800326a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d107      	bne.n	8003280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800

08003294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0cc      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032a8:	4b68      	ldr	r3, [pc, #416]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d90c      	bls.n	80032d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b65      	ldr	r3, [pc, #404]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b63      	ldr	r3, [pc, #396]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0b8      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d020      	beq.n	800331e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e8:	4b59      	ldr	r3, [pc, #356]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	4a58      	ldr	r2, [pc, #352]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003300:	4b53      	ldr	r3, [pc, #332]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	4a52      	ldr	r2, [pc, #328]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800330a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800330c:	4b50      	ldr	r3, [pc, #320]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	494d      	ldr	r1, [pc, #308]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d044      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003332:	4b47      	ldr	r3, [pc, #284]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d119      	bne.n	8003372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e07f      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d003      	beq.n	8003352 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800334e:	2b03      	cmp	r3, #3
 8003350:	d107      	bne.n	8003362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003352:	4b3f      	ldr	r3, [pc, #252]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e06f      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003362:	4b3b      	ldr	r3, [pc, #236]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e067      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003372:	4b37      	ldr	r3, [pc, #220]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f023 0203 	bic.w	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4934      	ldr	r1, [pc, #208]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	4313      	orrs	r3, r2
 8003382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003384:	f7fe fcd6 	bl	8001d34 <HAL_GetTick>
 8003388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338a:	e00a      	b.n	80033a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338c:	f7fe fcd2 	bl	8001d34 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e04f      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 020c 	and.w	r2, r3, #12
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d1eb      	bne.n	800338c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033b4:	4b25      	ldr	r3, [pc, #148]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d20c      	bcs.n	80033dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b22      	ldr	r3, [pc, #136]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b20      	ldr	r3, [pc, #128]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e032      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e8:	4b19      	ldr	r3, [pc, #100]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4916      	ldr	r1, [pc, #88]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003406:	4b12      	ldr	r3, [pc, #72]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	490e      	ldr	r1, [pc, #56]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800341a:	f000 f821 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 800341e:	4602      	mov	r2, r0
 8003420:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	490a      	ldr	r1, [pc, #40]	@ (8003454 <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	5ccb      	ldrb	r3, [r1, r3]
 800342e:	fa22 f303 	lsr.w	r3, r2, r3
 8003432:	4a09      	ldr	r2, [pc, #36]	@ (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003436:	4b09      	ldr	r3, [pc, #36]	@ (800345c <HAL_RCC_ClockConfig+0x1c8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe fc36 	bl	8001cac <HAL_InitTick>

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40023c00 	.word	0x40023c00
 8003450:	40023800 	.word	0x40023800
 8003454:	08009760 	.word	0x08009760
 8003458:	20000130 	.word	0x20000130
 800345c:	20000134 	.word	0x20000134

08003460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003464:	b090      	sub	sp, #64	@ 0x40
 8003466:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	637b      	str	r3, [r7, #52]	@ 0x34
 800346c:	2300      	movs	r3, #0
 800346e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003470:	2300      	movs	r3, #0
 8003472:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003478:	4b59      	ldr	r3, [pc, #356]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b08      	cmp	r3, #8
 8003482:	d00d      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003484:	2b08      	cmp	r3, #8
 8003486:	f200 80a1 	bhi.w	80035cc <HAL_RCC_GetSysClockFreq+0x16c>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0x34>
 800348e:	2b04      	cmp	r3, #4
 8003490:	d003      	beq.n	800349a <HAL_RCC_GetSysClockFreq+0x3a>
 8003492:	e09b      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003494:	4b53      	ldr	r3, [pc, #332]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003496:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003498:	e09b      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800349a:	4b53      	ldr	r3, [pc, #332]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800349c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800349e:	e098      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a0:	4b4f      	ldr	r3, [pc, #316]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034aa:	4b4d      	ldr	r3, [pc, #308]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d028      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b6:	4b4a      	ldr	r3, [pc, #296]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	099b      	lsrs	r3, r3, #6
 80034bc:	2200      	movs	r2, #0
 80034be:	623b      	str	r3, [r7, #32]
 80034c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034c8:	2100      	movs	r1, #0
 80034ca:	4b47      	ldr	r3, [pc, #284]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80034cc:	fb03 f201 	mul.w	r2, r3, r1
 80034d0:	2300      	movs	r3, #0
 80034d2:	fb00 f303 	mul.w	r3, r0, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	4a43      	ldr	r2, [pc, #268]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80034da:	fba0 1202 	umull	r1, r2, r0, r2
 80034de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034e0:	460a      	mov	r2, r1
 80034e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80034e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034e6:	4413      	add	r3, r2
 80034e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ec:	2200      	movs	r2, #0
 80034ee:	61bb      	str	r3, [r7, #24]
 80034f0:	61fa      	str	r2, [r7, #28]
 80034f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034fa:	f7fd fbc5 	bl	8000c88 <__aeabi_uldivmod>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4613      	mov	r3, r2
 8003504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003506:	e053      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003508:	4b35      	ldr	r3, [pc, #212]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	099b      	lsrs	r3, r3, #6
 800350e:	2200      	movs	r2, #0
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	617a      	str	r2, [r7, #20]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800351a:	f04f 0b00 	mov.w	fp, #0
 800351e:	4652      	mov	r2, sl
 8003520:	465b      	mov	r3, fp
 8003522:	f04f 0000 	mov.w	r0, #0
 8003526:	f04f 0100 	mov.w	r1, #0
 800352a:	0159      	lsls	r1, r3, #5
 800352c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003530:	0150      	lsls	r0, r2, #5
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	ebb2 080a 	subs.w	r8, r2, sl
 800353a:	eb63 090b 	sbc.w	r9, r3, fp
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800354a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800354e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003552:	ebb2 0408 	subs.w	r4, r2, r8
 8003556:	eb63 0509 	sbc.w	r5, r3, r9
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	00eb      	lsls	r3, r5, #3
 8003564:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003568:	00e2      	lsls	r2, r4, #3
 800356a:	4614      	mov	r4, r2
 800356c:	461d      	mov	r5, r3
 800356e:	eb14 030a 	adds.w	r3, r4, sl
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	eb45 030b 	adc.w	r3, r5, fp
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003586:	4629      	mov	r1, r5
 8003588:	028b      	lsls	r3, r1, #10
 800358a:	4621      	mov	r1, r4
 800358c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003590:	4621      	mov	r1, r4
 8003592:	028a      	lsls	r2, r1, #10
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359a:	2200      	movs	r2, #0
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	60fa      	str	r2, [r7, #12]
 80035a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035a4:	f7fd fb70 	bl	8000c88 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4613      	mov	r3, r2
 80035ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035b0:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	3301      	adds	r3, #1
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80035c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035ca:	e002      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80035ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3740      	adds	r7, #64	@ 0x40
 80035d8:	46bd      	mov	sp, r7
 80035da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	00f42400 	.word	0x00f42400
 80035e8:	017d7840 	.word	0x017d7840

080035ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f0:	4b03      	ldr	r3, [pc, #12]	@ (8003600 <HAL_RCC_GetHCLKFreq+0x14>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000130 	.word	0x20000130

08003604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003608:	f7ff fff0 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0a9b      	lsrs	r3, r3, #10
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	@ (8003628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	08009770 	.word	0x08009770

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003630:	f7ff ffdc 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	@ (800364c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0b5b      	lsrs	r3, r3, #13
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4903      	ldr	r1, [pc, #12]	@ (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800
 8003650:	08009770 	.word	0x08009770

08003654 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e041      	b.n	80036ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fe f93e 	bl	80018fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f000 f9b8 	bl	8003a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d109      	bne.n	8003718 <HAL_TIM_PWM_Start+0x24>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	bf14      	ite	ne
 8003710:	2301      	movne	r3, #1
 8003712:	2300      	moveq	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	e022      	b.n	800375e <HAL_TIM_PWM_Start+0x6a>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b04      	cmp	r3, #4
 800371c:	d109      	bne.n	8003732 <HAL_TIM_PWM_Start+0x3e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	bf14      	ite	ne
 800372a:	2301      	movne	r3, #1
 800372c:	2300      	moveq	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	e015      	b.n	800375e <HAL_TIM_PWM_Start+0x6a>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b08      	cmp	r3, #8
 8003736:	d109      	bne.n	800374c <HAL_TIM_PWM_Start+0x58>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	bf14      	ite	ne
 8003744:	2301      	movne	r3, #1
 8003746:	2300      	moveq	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	e008      	b.n	800375e <HAL_TIM_PWM_Start+0x6a>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	bf14      	ite	ne
 8003758:	2301      	movne	r3, #1
 800375a:	2300      	moveq	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e07c      	b.n	8003860 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <HAL_TIM_PWM_Start+0x82>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003774:	e013      	b.n	800379e <HAL_TIM_PWM_Start+0xaa>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b04      	cmp	r3, #4
 800377a:	d104      	bne.n	8003786 <HAL_TIM_PWM_Start+0x92>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003784:	e00b      	b.n	800379e <HAL_TIM_PWM_Start+0xaa>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b08      	cmp	r3, #8
 800378a:	d104      	bne.n	8003796 <HAL_TIM_PWM_Start+0xa2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003794:	e003      	b.n	800379e <HAL_TIM_PWM_Start+0xaa>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2202      	movs	r2, #2
 800379a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2201      	movs	r2, #1
 80037a4:	6839      	ldr	r1, [r7, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fb8a 	bl	8003ec0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003868 <HAL_TIM_PWM_Start+0x174>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d004      	beq.n	80037c0 <HAL_TIM_PWM_Start+0xcc>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2c      	ldr	r2, [pc, #176]	@ (800386c <HAL_TIM_PWM_Start+0x178>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d101      	bne.n	80037c4 <HAL_TIM_PWM_Start+0xd0>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <HAL_TIM_PWM_Start+0xd2>
 80037c4:	2300      	movs	r3, #0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a22      	ldr	r2, [pc, #136]	@ (8003868 <HAL_TIM_PWM_Start+0x174>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d022      	beq.n	800382a <HAL_TIM_PWM_Start+0x136>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ec:	d01d      	beq.n	800382a <HAL_TIM_PWM_Start+0x136>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003870 <HAL_TIM_PWM_Start+0x17c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d018      	beq.n	800382a <HAL_TIM_PWM_Start+0x136>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003874 <HAL_TIM_PWM_Start+0x180>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d013      	beq.n	800382a <HAL_TIM_PWM_Start+0x136>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1c      	ldr	r2, [pc, #112]	@ (8003878 <HAL_TIM_PWM_Start+0x184>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00e      	beq.n	800382a <HAL_TIM_PWM_Start+0x136>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a16      	ldr	r2, [pc, #88]	@ (800386c <HAL_TIM_PWM_Start+0x178>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d009      	beq.n	800382a <HAL_TIM_PWM_Start+0x136>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a18      	ldr	r2, [pc, #96]	@ (800387c <HAL_TIM_PWM_Start+0x188>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d004      	beq.n	800382a <HAL_TIM_PWM_Start+0x136>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a16      	ldr	r2, [pc, #88]	@ (8003880 <HAL_TIM_PWM_Start+0x18c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d111      	bne.n	800384e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b06      	cmp	r3, #6
 800383a:	d010      	beq.n	800385e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384c:	e007      	b.n	800385e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40010000 	.word	0x40010000
 800386c:	40010400 	.word	0x40010400
 8003870:	40000400 	.word	0x40000400
 8003874:	40000800 	.word	0x40000800
 8003878:	40000c00 	.word	0x40000c00
 800387c:	40014000 	.word	0x40014000
 8003880:	40001800 	.word	0x40001800

08003884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800389e:	2302      	movs	r3, #2
 80038a0:	e0ae      	b.n	8003a00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b0c      	cmp	r3, #12
 80038ae:	f200 809f 	bhi.w	80039f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038b2:	a201      	add	r2, pc, #4	@ (adr r2, 80038b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	080038ed 	.word	0x080038ed
 80038bc:	080039f1 	.word	0x080039f1
 80038c0:	080039f1 	.word	0x080039f1
 80038c4:	080039f1 	.word	0x080039f1
 80038c8:	0800392d 	.word	0x0800392d
 80038cc:	080039f1 	.word	0x080039f1
 80038d0:	080039f1 	.word	0x080039f1
 80038d4:	080039f1 	.word	0x080039f1
 80038d8:	0800396f 	.word	0x0800396f
 80038dc:	080039f1 	.word	0x080039f1
 80038e0:	080039f1 	.word	0x080039f1
 80038e4:	080039f1 	.word	0x080039f1
 80038e8:	080039af 	.word	0x080039af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f934 	bl	8003b60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0208 	orr.w	r2, r2, #8
 8003906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0204 	bic.w	r2, r2, #4
 8003916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6999      	ldr	r1, [r3, #24]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	619a      	str	r2, [r3, #24]
      break;
 800392a:	e064      	b.n	80039f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	4618      	mov	r0, r3
 8003934:	f000 f984 	bl	8003c40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6999      	ldr	r1, [r3, #24]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	021a      	lsls	r2, r3, #8
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	619a      	str	r2, [r3, #24]
      break;
 800396c:	e043      	b.n	80039f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 f9d9 	bl	8003d2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0208 	orr.w	r2, r2, #8
 8003988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0204 	bic.w	r2, r2, #4
 8003998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69d9      	ldr	r1, [r3, #28]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	61da      	str	r2, [r3, #28]
      break;
 80039ac:	e023      	b.n	80039f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fa2d 	bl	8003e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69d9      	ldr	r1, [r3, #28]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	021a      	lsls	r2, r3, #8
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	61da      	str	r2, [r3, #28]
      break;
 80039ee:	e002      	b.n	80039f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	75fb      	strb	r3, [r7, #23]
      break;
 80039f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a46      	ldr	r2, [pc, #280]	@ (8003b34 <TIM_Base_SetConfig+0x12c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a26:	d00f      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a43      	ldr	r2, [pc, #268]	@ (8003b38 <TIM_Base_SetConfig+0x130>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00b      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a42      	ldr	r2, [pc, #264]	@ (8003b3c <TIM_Base_SetConfig+0x134>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d007      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a41      	ldr	r2, [pc, #260]	@ (8003b40 <TIM_Base_SetConfig+0x138>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a40      	ldr	r2, [pc, #256]	@ (8003b44 <TIM_Base_SetConfig+0x13c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d108      	bne.n	8003a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a35      	ldr	r2, [pc, #212]	@ (8003b34 <TIM_Base_SetConfig+0x12c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d02b      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a68:	d027      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a32      	ldr	r2, [pc, #200]	@ (8003b38 <TIM_Base_SetConfig+0x130>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d023      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a31      	ldr	r2, [pc, #196]	@ (8003b3c <TIM_Base_SetConfig+0x134>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01f      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a30      	ldr	r2, [pc, #192]	@ (8003b40 <TIM_Base_SetConfig+0x138>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01b      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a2f      	ldr	r2, [pc, #188]	@ (8003b44 <TIM_Base_SetConfig+0x13c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d017      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b48 <TIM_Base_SetConfig+0x140>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a2d      	ldr	r2, [pc, #180]	@ (8003b4c <TIM_Base_SetConfig+0x144>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00f      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a2c      	ldr	r2, [pc, #176]	@ (8003b50 <TIM_Base_SetConfig+0x148>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00b      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a2b      	ldr	r2, [pc, #172]	@ (8003b54 <TIM_Base_SetConfig+0x14c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d007      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a2a      	ldr	r2, [pc, #168]	@ (8003b58 <TIM_Base_SetConfig+0x150>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d003      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a29      	ldr	r2, [pc, #164]	@ (8003b5c <TIM_Base_SetConfig+0x154>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d108      	bne.n	8003acc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a10      	ldr	r2, [pc, #64]	@ (8003b34 <TIM_Base_SetConfig+0x12c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d003      	beq.n	8003b00 <TIM_Base_SetConfig+0xf8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a12      	ldr	r2, [pc, #72]	@ (8003b44 <TIM_Base_SetConfig+0x13c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d103      	bne.n	8003b08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d105      	bne.n	8003b26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f023 0201 	bic.w	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	611a      	str	r2, [r3, #16]
  }
}
 8003b26:	bf00      	nop
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40010000 	.word	0x40010000
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	40000800 	.word	0x40000800
 8003b40:	40000c00 	.word	0x40000c00
 8003b44:	40010400 	.word	0x40010400
 8003b48:	40014000 	.word	0x40014000
 8003b4c:	40014400 	.word	0x40014400
 8003b50:	40014800 	.word	0x40014800
 8003b54:	40001800 	.word	0x40001800
 8003b58:	40001c00 	.word	0x40001c00
 8003b5c:	40002000 	.word	0x40002000

08003b60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f023 0201 	bic.w	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f023 0302 	bic.w	r3, r3, #2
 8003ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a20      	ldr	r2, [pc, #128]	@ (8003c38 <TIM_OC1_SetConfig+0xd8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d003      	beq.n	8003bc4 <TIM_OC1_SetConfig+0x64>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003c3c <TIM_OC1_SetConfig+0xdc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d10c      	bne.n	8003bde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f023 0308 	bic.w	r3, r3, #8
 8003bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f023 0304 	bic.w	r3, r3, #4
 8003bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a15      	ldr	r2, [pc, #84]	@ (8003c38 <TIM_OC1_SetConfig+0xd8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d003      	beq.n	8003bee <TIM_OC1_SetConfig+0x8e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a14      	ldr	r2, [pc, #80]	@ (8003c3c <TIM_OC1_SetConfig+0xdc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d111      	bne.n	8003c12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	621a      	str	r2, [r3, #32]
}
 8003c2c:	bf00      	nop
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	40010400 	.word	0x40010400

08003c40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f023 0210 	bic.w	r2, r3, #16
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f023 0320 	bic.w	r3, r3, #32
 8003c8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a22      	ldr	r2, [pc, #136]	@ (8003d24 <TIM_OC2_SetConfig+0xe4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <TIM_OC2_SetConfig+0x68>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a21      	ldr	r2, [pc, #132]	@ (8003d28 <TIM_OC2_SetConfig+0xe8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d10d      	bne.n	8003cc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a17      	ldr	r2, [pc, #92]	@ (8003d24 <TIM_OC2_SetConfig+0xe4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d003      	beq.n	8003cd4 <TIM_OC2_SetConfig+0x94>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a16      	ldr	r2, [pc, #88]	@ (8003d28 <TIM_OC2_SetConfig+0xe8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d113      	bne.n	8003cfc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	621a      	str	r2, [r3, #32]
}
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40010000 	.word	0x40010000
 8003d28:	40010400 	.word	0x40010400

08003d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0303 	bic.w	r3, r3, #3
 8003d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a21      	ldr	r2, [pc, #132]	@ (8003e0c <TIM_OC3_SetConfig+0xe0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d003      	beq.n	8003d92 <TIM_OC3_SetConfig+0x66>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a20      	ldr	r2, [pc, #128]	@ (8003e10 <TIM_OC3_SetConfig+0xe4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d10d      	bne.n	8003dae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a16      	ldr	r2, [pc, #88]	@ (8003e0c <TIM_OC3_SetConfig+0xe0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d003      	beq.n	8003dbe <TIM_OC3_SetConfig+0x92>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a15      	ldr	r2, [pc, #84]	@ (8003e10 <TIM_OC3_SetConfig+0xe4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d113      	bne.n	8003de6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	621a      	str	r2, [r3, #32]
}
 8003e00:	bf00      	nop
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	40010000 	.word	0x40010000
 8003e10:	40010400 	.word	0x40010400

08003e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	031b      	lsls	r3, r3, #12
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a12      	ldr	r2, [pc, #72]	@ (8003eb8 <TIM_OC4_SetConfig+0xa4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_OC4_SetConfig+0x68>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a11      	ldr	r2, [pc, #68]	@ (8003ebc <TIM_OC4_SetConfig+0xa8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d109      	bne.n	8003e90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	019b      	lsls	r3, r3, #6
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	621a      	str	r2, [r3, #32]
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40010000 	.word	0x40010000
 8003ebc:	40010400 	.word	0x40010400

08003ec0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a1a      	ldr	r2, [r3, #32]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a1a      	ldr	r2, [r3, #32]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	621a      	str	r2, [r3, #32]
}
 8003efe:	bf00      	nop
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e05a      	b.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a21      	ldr	r2, [pc, #132]	@ (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d022      	beq.n	8003fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f70:	d01d      	beq.n	8003fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1d      	ldr	r2, [pc, #116]	@ (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d018      	beq.n	8003fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d013      	beq.n	8003fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00e      	beq.n	8003fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a18      	ldr	r2, [pc, #96]	@ (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d009      	beq.n	8003fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a17      	ldr	r2, [pc, #92]	@ (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d004      	beq.n	8003fae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a15      	ldr	r2, [pc, #84]	@ (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d10c      	bne.n	8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40010000 	.word	0x40010000
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40000800 	.word	0x40000800
 8003ff4:	40000c00 	.word	0x40000c00
 8003ff8:	40010400 	.word	0x40010400
 8003ffc:	40014000 	.word	0x40014000
 8004000:	40001800 	.word	0x40001800

08004004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e042      	b.n	800409c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fd fc86 	bl	800193c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2224      	movs	r2, #36	@ 0x24
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fd69 	bl	8004b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800405c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695a      	ldr	r2, [r3, #20]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800406c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800407c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08a      	sub	sp, #40	@ 0x28
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	4613      	mov	r3, r2
 80040b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d175      	bne.n	80041b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_UART_Transmit+0x2c>
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e06e      	b.n	80041b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2221      	movs	r2, #33	@ 0x21
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040e2:	f7fd fe27 	bl	8001d34 <HAL_GetTick>
 80040e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	88fa      	ldrh	r2, [r7, #6]
 80040ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	88fa      	ldrh	r2, [r7, #6]
 80040f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040fc:	d108      	bne.n	8004110 <HAL_UART_Transmit+0x6c>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d104      	bne.n	8004110 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	e003      	b.n	8004118 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004114:	2300      	movs	r3, #0
 8004116:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004118:	e02e      	b.n	8004178 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2200      	movs	r2, #0
 8004122:	2180      	movs	r1, #128	@ 0x80
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 fb05 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e03a      	b.n	80041b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10b      	bne.n	800415a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004150:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	3302      	adds	r3, #2
 8004156:	61bb      	str	r3, [r7, #24]
 8004158:	e007      	b.n	800416a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	781a      	ldrb	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	3301      	adds	r3, #1
 8004168:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1cb      	bne.n	800411a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2200      	movs	r2, #0
 800418a:	2140      	movs	r1, #64	@ 0x40
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fad1 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e006      	b.n	80041b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e000      	b.n	80041b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
  }
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3720      	adds	r7, #32
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b0ba      	sub	sp, #232	@ 0xe8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80041fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10f      	bne.n	8004222 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <HAL_UART_IRQHandler+0x66>
 800420e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fbc2 	bl	80049a4 <UART_Receive_IT>
      return;
 8004220:	e25b      	b.n	80046da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 80de 	beq.w	80043e8 <HAL_UART_IRQHandler+0x22c>
 800422c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d106      	bne.n	8004246 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800423c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80d1 	beq.w	80043e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <HAL_UART_IRQHandler+0xae>
 8004252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004262:	f043 0201 	orr.w	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800426a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00b      	beq.n	800428e <HAL_UART_IRQHandler+0xd2>
 8004276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004286:	f043 0202 	orr.w	r2, r3, #2
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800428e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00b      	beq.n	80042b2 <HAL_UART_IRQHandler+0xf6>
 800429a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042aa:	f043 0204 	orr.w	r2, r3, #4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d011      	beq.n	80042e2 <HAL_UART_IRQHandler+0x126>
 80042be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d105      	bne.n	80042d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042da:	f043 0208 	orr.w	r2, r3, #8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 81f2 	beq.w	80046d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_UART_IRQHandler+0x14e>
 80042f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fb4d 	bl	80049a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004314:	2b40      	cmp	r3, #64	@ 0x40
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d103      	bne.n	8004336 <HAL_UART_IRQHandler+0x17a>
 800432e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d04f      	beq.n	80043d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fa55 	bl	80047e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004346:	2b40      	cmp	r3, #64	@ 0x40
 8004348:	d141      	bne.n	80043ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3314      	adds	r3, #20
 8004350:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004360:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004368:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3314      	adds	r3, #20
 8004372:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004376:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800437a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004382:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800438e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1d9      	bne.n	800434a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d013      	beq.n	80043c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a2:	4a7e      	ldr	r2, [pc, #504]	@ (800459c <HAL_UART_IRQHandler+0x3e0>)
 80043a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fe faef 	bl	800298e <HAL_DMA_Abort_IT>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d016      	beq.n	80043e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043c0:	4610      	mov	r0, r2
 80043c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c4:	e00e      	b.n	80043e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f99e 	bl	8004708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043cc:	e00a      	b.n	80043e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f99a 	bl	8004708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d4:	e006      	b.n	80043e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f996 	bl	8004708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80043e2:	e175      	b.n	80046d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e4:	bf00      	nop
    return;
 80043e6:	e173      	b.n	80046d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	f040 814f 	bne.w	8004690 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043f6:	f003 0310 	and.w	r3, r3, #16
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 8148 	beq.w	8004690 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8141 	beq.w	8004690 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800440e:	2300      	movs	r3, #0
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442e:	2b40      	cmp	r3, #64	@ 0x40
 8004430:	f040 80b6 	bne.w	80045a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004440:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8145 	beq.w	80046d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800444e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004452:	429a      	cmp	r2, r3
 8004454:	f080 813e 	bcs.w	80046d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800445e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800446a:	f000 8088 	beq.w	800457e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004484:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800448c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	330c      	adds	r3, #12
 8004496:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800449a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800449e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1d9      	bne.n	800446e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3314      	adds	r3, #20
 80044c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044cc:	f023 0301 	bic.w	r3, r3, #1
 80044d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3314      	adds	r3, #20
 80044da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e1      	bne.n	80044ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3314      	adds	r3, #20
 80044fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800450c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3314      	adds	r3, #20
 8004516:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800451a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800451c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004520:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004528:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e3      	bne.n	80044f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	330c      	adds	r3, #12
 8004542:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800454c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800454e:	f023 0310 	bic.w	r3, r3, #16
 8004552:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	330c      	adds	r3, #12
 800455c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004560:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004562:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004566:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800456e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e3      	bne.n	800453c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004578:	4618      	mov	r0, r3
 800457a:	f7fe f998 	bl	80028ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2202      	movs	r2, #2
 8004582:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800458c:	b29b      	uxth	r3, r3
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	b29b      	uxth	r3, r3
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f8c1 	bl	800471c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800459a:	e09b      	b.n	80046d4 <HAL_UART_IRQHandler+0x518>
 800459c:	080048ad 	.word	0x080048ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 808e 	beq.w	80046d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80045bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 8089 	beq.w	80046d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	330c      	adds	r3, #12
 80045cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80045ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80045ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e3      	bne.n	80045c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3314      	adds	r3, #20
 8004604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	623b      	str	r3, [r7, #32]
   return(result);
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3314      	adds	r3, #20
 800461e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004622:	633a      	str	r2, [r7, #48]	@ 0x30
 8004624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e3      	bne.n	80045fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	330c      	adds	r3, #12
 800464a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	e853 3f00 	ldrex	r3, [r3]
 8004652:	60fb      	str	r3, [r7, #12]
   return(result);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0310 	bic.w	r3, r3, #16
 800465a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004668:	61fa      	str	r2, [r7, #28]
 800466a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	69b9      	ldr	r1, [r7, #24]
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	617b      	str	r3, [r7, #20]
   return(result);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e3      	bne.n	8004644 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004682:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004686:	4619      	mov	r1, r3
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f847 	bl	800471c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800468e:	e023      	b.n	80046d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004698:	2b00      	cmp	r3, #0
 800469a:	d009      	beq.n	80046b0 <HAL_UART_IRQHandler+0x4f4>
 800469c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f913 	bl	80048d4 <UART_Transmit_IT>
    return;
 80046ae:	e014      	b.n	80046da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00e      	beq.n	80046da <HAL_UART_IRQHandler+0x51e>
 80046bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f953 	bl	8004974 <UART_EndTransmit_IT>
    return;
 80046ce:	e004      	b.n	80046da <HAL_UART_IRQHandler+0x51e>
    return;
 80046d0:	bf00      	nop
 80046d2:	e002      	b.n	80046da <HAL_UART_IRQHandler+0x51e>
      return;
 80046d4:	bf00      	nop
 80046d6:	e000      	b.n	80046da <HAL_UART_IRQHandler+0x51e>
      return;
 80046d8:	bf00      	nop
  }
}
 80046da:	37e8      	adds	r7, #232	@ 0xe8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004744:	e03b      	b.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d037      	beq.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474e:	f7fd faf1 	bl	8001d34 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	6a3a      	ldr	r2, [r7, #32]
 800475a:	429a      	cmp	r2, r3
 800475c:	d302      	bcc.n	8004764 <UART_WaitOnFlagUntilTimeout+0x30>
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e03a      	b.n	80047de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d023      	beq.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b80      	cmp	r3, #128	@ 0x80
 800477a:	d020      	beq.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b40      	cmp	r3, #64	@ 0x40
 8004780:	d01d      	beq.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b08      	cmp	r3, #8
 800478e:	d116      	bne.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f81d 	bl	80047e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2208      	movs	r2, #8
 80047b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e00f      	b.n	80047de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4013      	ands	r3, r2
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	bf0c      	ite	eq
 80047ce:	2301      	moveq	r3, #1
 80047d0:	2300      	movne	r3, #0
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d0b4      	beq.n	8004746 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b095      	sub	sp, #84	@ 0x54
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	330c      	adds	r3, #12
 80047f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004804:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	330c      	adds	r3, #12
 800480c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800480e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004812:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004814:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800481c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e5      	bne.n	80047ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3314      	adds	r3, #20
 8004828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	61fb      	str	r3, [r7, #28]
   return(result);
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	f023 0301 	bic.w	r3, r3, #1
 8004838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3314      	adds	r3, #20
 8004840:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004842:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004844:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e5      	bne.n	8004822 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485a:	2b01      	cmp	r3, #1
 800485c:	d119      	bne.n	8004892 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	330c      	adds	r3, #12
 8004864:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	60bb      	str	r3, [r7, #8]
   return(result);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f023 0310 	bic.w	r3, r3, #16
 8004874:	647b      	str	r3, [r7, #68]	@ 0x44
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	330c      	adds	r3, #12
 800487c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800487e:	61ba      	str	r2, [r7, #24]
 8004880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6979      	ldr	r1, [r7, #20]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	613b      	str	r3, [r7, #16]
   return(result);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e5      	bne.n	800485e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048a0:	bf00      	nop
 80048a2:	3754      	adds	r7, #84	@ 0x54
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7ff ff1e 	bl	8004708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048cc:	bf00      	nop
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b21      	cmp	r3, #33	@ 0x21
 80048e6:	d13e      	bne.n	8004966 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f0:	d114      	bne.n	800491c <UART_Transmit_IT+0x48>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d110      	bne.n	800491c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800490e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	1c9a      	adds	r2, r3, #2
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	621a      	str	r2, [r3, #32]
 800491a:	e008      	b.n	800492e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	1c59      	adds	r1, r3, #1
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6211      	str	r1, [r2, #32]
 8004926:	781a      	ldrb	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29b      	uxth	r3, r3
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	4619      	mov	r1, r3
 800493c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10f      	bne.n	8004962 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004950:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004960:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	e000      	b.n	8004968 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004966:	2302      	movs	r3, #2
  }
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800498a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7ff fea3 	bl	80046e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08c      	sub	sp, #48	@ 0x30
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b22      	cmp	r3, #34	@ 0x22
 80049b6:	f040 80ae 	bne.w	8004b16 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c2:	d117      	bne.n	80049f4 <UART_Receive_IT+0x50>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d113      	bne.n	80049f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ec:	1c9a      	adds	r2, r3, #2
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80049f2:	e026      	b.n	8004a42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a06:	d007      	beq.n	8004a18 <UART_Receive_IT+0x74>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <UART_Receive_IT+0x82>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	e008      	b.n	8004a38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d15d      	bne.n	8004b12 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0220 	bic.w	r2, r2, #32
 8004a64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695a      	ldr	r2, [r3, #20]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0201 	bic.w	r2, r2, #1
 8004a84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d135      	bne.n	8004b08 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	330c      	adds	r3, #12
 8004aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f023 0310 	bic.w	r3, r3, #16
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	330c      	adds	r3, #12
 8004ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac2:	623a      	str	r2, [r7, #32]
 8004ac4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	69f9      	ldr	r1, [r7, #28]
 8004ac8:	6a3a      	ldr	r2, [r7, #32]
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e5      	bne.n	8004aa2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	d10a      	bne.n	8004afa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff fe0b 	bl	800471c <HAL_UARTEx_RxEventCallback>
 8004b06:	e002      	b.n	8004b0e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fdf3 	bl	80046f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e002      	b.n	8004b18 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e000      	b.n	8004b18 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b16:	2302      	movs	r3, #2
  }
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3730      	adds	r7, #48	@ 0x30
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b24:	b0c0      	sub	sp, #256	@ 0x100
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b3c:	68d9      	ldr	r1, [r3, #12]
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	ea40 0301 	orr.w	r3, r0, r1
 8004b48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b78:	f021 010c 	bic.w	r1, r1, #12
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b86:	430b      	orrs	r3, r1
 8004b88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9a:	6999      	ldr	r1, [r3, #24]
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	ea40 0301 	orr.w	r3, r0, r1
 8004ba6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4b8f      	ldr	r3, [pc, #572]	@ (8004dec <UART_SetConfig+0x2cc>)
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d005      	beq.n	8004bc0 <UART_SetConfig+0xa0>
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	4b8d      	ldr	r3, [pc, #564]	@ (8004df0 <UART_SetConfig+0x2d0>)
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d104      	bne.n	8004bca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bc0:	f7fe fd34 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8004bc4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004bc8:	e003      	b.n	8004bd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bca:	f7fe fd1b 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8004bce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bdc:	f040 810c 	bne.w	8004df8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be4:	2200      	movs	r2, #0
 8004be6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bf2:	4622      	mov	r2, r4
 8004bf4:	462b      	mov	r3, r5
 8004bf6:	1891      	adds	r1, r2, r2
 8004bf8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bfa:	415b      	adcs	r3, r3
 8004bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c02:	4621      	mov	r1, r4
 8004c04:	eb12 0801 	adds.w	r8, r2, r1
 8004c08:	4629      	mov	r1, r5
 8004c0a:	eb43 0901 	adc.w	r9, r3, r1
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c22:	4690      	mov	r8, r2
 8004c24:	4699      	mov	r9, r3
 8004c26:	4623      	mov	r3, r4
 8004c28:	eb18 0303 	adds.w	r3, r8, r3
 8004c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c30:	462b      	mov	r3, r5
 8004c32:	eb49 0303 	adc.w	r3, r9, r3
 8004c36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c4e:	460b      	mov	r3, r1
 8004c50:	18db      	adds	r3, r3, r3
 8004c52:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c54:	4613      	mov	r3, r2
 8004c56:	eb42 0303 	adc.w	r3, r2, r3
 8004c5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c64:	f7fc f810 	bl	8000c88 <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4b61      	ldr	r3, [pc, #388]	@ (8004df4 <UART_SetConfig+0x2d4>)
 8004c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	011c      	lsls	r4, r3, #4
 8004c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c88:	4642      	mov	r2, r8
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	1891      	adds	r1, r2, r2
 8004c8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c90:	415b      	adcs	r3, r3
 8004c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c98:	4641      	mov	r1, r8
 8004c9a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb8:	4692      	mov	sl, r2
 8004cba:	469b      	mov	fp, r3
 8004cbc:	4643      	mov	r3, r8
 8004cbe:	eb1a 0303 	adds.w	r3, sl, r3
 8004cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	eb4b 0303 	adc.w	r3, fp, r3
 8004ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ce0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	18db      	adds	r3, r3, r3
 8004ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cea:	4613      	mov	r3, r2
 8004cec:	eb42 0303 	adc.w	r3, r2, r3
 8004cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cfa:	f7fb ffc5 	bl	8000c88 <__aeabi_uldivmod>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4611      	mov	r1, r2
 8004d04:	4b3b      	ldr	r3, [pc, #236]	@ (8004df4 <UART_SetConfig+0x2d4>)
 8004d06:	fba3 2301 	umull	r2, r3, r3, r1
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	2264      	movs	r2, #100	@ 0x64
 8004d0e:	fb02 f303 	mul.w	r3, r2, r3
 8004d12:	1acb      	subs	r3, r1, r3
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d1a:	4b36      	ldr	r3, [pc, #216]	@ (8004df4 <UART_SetConfig+0x2d4>)
 8004d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d28:	441c      	add	r4, r3
 8004d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	464b      	mov	r3, r9
 8004d40:	1891      	adds	r1, r2, r2
 8004d42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d44:	415b      	adcs	r3, r3
 8004d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d4c:	4641      	mov	r1, r8
 8004d4e:	1851      	adds	r1, r2, r1
 8004d50:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d52:	4649      	mov	r1, r9
 8004d54:	414b      	adcs	r3, r1
 8004d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d64:	4659      	mov	r1, fp
 8004d66:	00cb      	lsls	r3, r1, #3
 8004d68:	4651      	mov	r1, sl
 8004d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d6e:	4651      	mov	r1, sl
 8004d70:	00ca      	lsls	r2, r1, #3
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	4642      	mov	r2, r8
 8004d7a:	189b      	adds	r3, r3, r2
 8004d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d80:	464b      	mov	r3, r9
 8004d82:	460a      	mov	r2, r1
 8004d84:	eb42 0303 	adc.w	r3, r2, r3
 8004d88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004da0:	460b      	mov	r3, r1
 8004da2:	18db      	adds	r3, r3, r3
 8004da4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004da6:	4613      	mov	r3, r2
 8004da8:	eb42 0303 	adc.w	r3, r2, r3
 8004dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004db2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004db6:	f7fb ff67 	bl	8000c88 <__aeabi_uldivmod>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004df4 <UART_SetConfig+0x2d4>)
 8004dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	2164      	movs	r1, #100	@ 0x64
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	3332      	adds	r3, #50	@ 0x32
 8004dd2:	4a08      	ldr	r2, [pc, #32]	@ (8004df4 <UART_SetConfig+0x2d4>)
 8004dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	f003 0207 	and.w	r2, r3, #7
 8004dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4422      	add	r2, r4
 8004de6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004de8:	e106      	b.n	8004ff8 <UART_SetConfig+0x4d8>
 8004dea:	bf00      	nop
 8004dec:	40011000 	.word	0x40011000
 8004df0:	40011400 	.word	0x40011400
 8004df4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e0a:	4642      	mov	r2, r8
 8004e0c:	464b      	mov	r3, r9
 8004e0e:	1891      	adds	r1, r2, r2
 8004e10:	6239      	str	r1, [r7, #32]
 8004e12:	415b      	adcs	r3, r3
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e1a:	4641      	mov	r1, r8
 8004e1c:	1854      	adds	r4, r2, r1
 8004e1e:	4649      	mov	r1, r9
 8004e20:	eb43 0501 	adc.w	r5, r3, r1
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	00eb      	lsls	r3, r5, #3
 8004e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e32:	00e2      	lsls	r2, r4, #3
 8004e34:	4614      	mov	r4, r2
 8004e36:	461d      	mov	r5, r3
 8004e38:	4643      	mov	r3, r8
 8004e3a:	18e3      	adds	r3, r4, r3
 8004e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e40:	464b      	mov	r3, r9
 8004e42:	eb45 0303 	adc.w	r3, r5, r3
 8004e46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e66:	4629      	mov	r1, r5
 8004e68:	008b      	lsls	r3, r1, #2
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e70:	4621      	mov	r1, r4
 8004e72:	008a      	lsls	r2, r1, #2
 8004e74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e78:	f7fb ff06 	bl	8000c88 <__aeabi_uldivmod>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4b60      	ldr	r3, [pc, #384]	@ (8005004 <UART_SetConfig+0x4e4>)
 8004e82:	fba3 2302 	umull	r2, r3, r3, r2
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	011c      	lsls	r4, r3, #4
 8004e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e9c:	4642      	mov	r2, r8
 8004e9e:	464b      	mov	r3, r9
 8004ea0:	1891      	adds	r1, r2, r2
 8004ea2:	61b9      	str	r1, [r7, #24]
 8004ea4:	415b      	adcs	r3, r3
 8004ea6:	61fb      	str	r3, [r7, #28]
 8004ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eac:	4641      	mov	r1, r8
 8004eae:	1851      	adds	r1, r2, r1
 8004eb0:	6139      	str	r1, [r7, #16]
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	414b      	adcs	r3, r1
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	00cb      	lsls	r3, r1, #3
 8004ec8:	4651      	mov	r1, sl
 8004eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ece:	4651      	mov	r1, sl
 8004ed0:	00ca      	lsls	r2, r1, #3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4642      	mov	r2, r8
 8004eda:	189b      	adds	r3, r3, r2
 8004edc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ee0:	464b      	mov	r3, r9
 8004ee2:	460a      	mov	r2, r1
 8004ee4:	eb42 0303 	adc.w	r3, r2, r3
 8004ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ef6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f04:	4649      	mov	r1, r9
 8004f06:	008b      	lsls	r3, r1, #2
 8004f08:	4641      	mov	r1, r8
 8004f0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f0e:	4641      	mov	r1, r8
 8004f10:	008a      	lsls	r2, r1, #2
 8004f12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f16:	f7fb feb7 	bl	8000c88 <__aeabi_uldivmod>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4611      	mov	r1, r2
 8004f20:	4b38      	ldr	r3, [pc, #224]	@ (8005004 <UART_SetConfig+0x4e4>)
 8004f22:	fba3 2301 	umull	r2, r3, r3, r1
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	2264      	movs	r2, #100	@ 0x64
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	1acb      	subs	r3, r1, r3
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	3332      	adds	r3, #50	@ 0x32
 8004f34:	4a33      	ldr	r2, [pc, #204]	@ (8005004 <UART_SetConfig+0x4e4>)
 8004f36:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f40:	441c      	add	r4, r3
 8004f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f46:	2200      	movs	r2, #0
 8004f48:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f50:	4642      	mov	r2, r8
 8004f52:	464b      	mov	r3, r9
 8004f54:	1891      	adds	r1, r2, r2
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	415b      	adcs	r3, r3
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f60:	4641      	mov	r1, r8
 8004f62:	1851      	adds	r1, r2, r1
 8004f64:	6039      	str	r1, [r7, #0]
 8004f66:	4649      	mov	r1, r9
 8004f68:	414b      	adcs	r3, r1
 8004f6a:	607b      	str	r3, [r7, #4]
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f78:	4659      	mov	r1, fp
 8004f7a:	00cb      	lsls	r3, r1, #3
 8004f7c:	4651      	mov	r1, sl
 8004f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f82:	4651      	mov	r1, sl
 8004f84:	00ca      	lsls	r2, r1, #3
 8004f86:	4610      	mov	r0, r2
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	189b      	adds	r3, r3, r2
 8004f90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f92:	464b      	mov	r3, r9
 8004f94:	460a      	mov	r2, r1
 8004f96:	eb42 0303 	adc.w	r3, r2, r3
 8004f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fa6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fb4:	4649      	mov	r1, r9
 8004fb6:	008b      	lsls	r3, r1, #2
 8004fb8:	4641      	mov	r1, r8
 8004fba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fbe:	4641      	mov	r1, r8
 8004fc0:	008a      	lsls	r2, r1, #2
 8004fc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fc6:	f7fb fe5f 	bl	8000c88 <__aeabi_uldivmod>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4b0d      	ldr	r3, [pc, #52]	@ (8005004 <UART_SetConfig+0x4e4>)
 8004fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	2164      	movs	r1, #100	@ 0x64
 8004fd8:	fb01 f303 	mul.w	r3, r1, r3
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	3332      	adds	r3, #50	@ 0x32
 8004fe2:	4a08      	ldr	r2, [pc, #32]	@ (8005004 <UART_SetConfig+0x4e4>)
 8004fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe8:	095b      	lsrs	r3, r3, #5
 8004fea:	f003 020f 	and.w	r2, r3, #15
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4422      	add	r2, r4
 8004ff6:	609a      	str	r2, [r3, #8]
}
 8004ff8:	bf00      	nop
 8004ffa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ffe:	46bd      	mov	sp, r7
 8005000:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005004:	51eb851f 	.word	0x51eb851f

08005008 <__cvt>:
 8005008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	ec57 6b10 	vmov	r6, r7, d0
 8005010:	2f00      	cmp	r7, #0
 8005012:	460c      	mov	r4, r1
 8005014:	4619      	mov	r1, r3
 8005016:	463b      	mov	r3, r7
 8005018:	bfbb      	ittet	lt
 800501a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800501e:	461f      	movlt	r7, r3
 8005020:	2300      	movge	r3, #0
 8005022:	232d      	movlt	r3, #45	@ 0x2d
 8005024:	700b      	strb	r3, [r1, #0]
 8005026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005028:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800502c:	4691      	mov	r9, r2
 800502e:	f023 0820 	bic.w	r8, r3, #32
 8005032:	bfbc      	itt	lt
 8005034:	4632      	movlt	r2, r6
 8005036:	4616      	movlt	r6, r2
 8005038:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800503c:	d005      	beq.n	800504a <__cvt+0x42>
 800503e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005042:	d100      	bne.n	8005046 <__cvt+0x3e>
 8005044:	3401      	adds	r4, #1
 8005046:	2102      	movs	r1, #2
 8005048:	e000      	b.n	800504c <__cvt+0x44>
 800504a:	2103      	movs	r1, #3
 800504c:	ab03      	add	r3, sp, #12
 800504e:	9301      	str	r3, [sp, #4]
 8005050:	ab02      	add	r3, sp, #8
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	ec47 6b10 	vmov	d0, r6, r7
 8005058:	4653      	mov	r3, sl
 800505a:	4622      	mov	r2, r4
 800505c:	f001 f8a8 	bl	80061b0 <_dtoa_r>
 8005060:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005064:	4605      	mov	r5, r0
 8005066:	d119      	bne.n	800509c <__cvt+0x94>
 8005068:	f019 0f01 	tst.w	r9, #1
 800506c:	d00e      	beq.n	800508c <__cvt+0x84>
 800506e:	eb00 0904 	add.w	r9, r0, r4
 8005072:	2200      	movs	r2, #0
 8005074:	2300      	movs	r3, #0
 8005076:	4630      	mov	r0, r6
 8005078:	4639      	mov	r1, r7
 800507a:	f7fb fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800507e:	b108      	cbz	r0, 8005084 <__cvt+0x7c>
 8005080:	f8cd 900c 	str.w	r9, [sp, #12]
 8005084:	2230      	movs	r2, #48	@ 0x30
 8005086:	9b03      	ldr	r3, [sp, #12]
 8005088:	454b      	cmp	r3, r9
 800508a:	d31e      	bcc.n	80050ca <__cvt+0xc2>
 800508c:	9b03      	ldr	r3, [sp, #12]
 800508e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005090:	1b5b      	subs	r3, r3, r5
 8005092:	4628      	mov	r0, r5
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	b004      	add	sp, #16
 8005098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050a0:	eb00 0904 	add.w	r9, r0, r4
 80050a4:	d1e5      	bne.n	8005072 <__cvt+0x6a>
 80050a6:	7803      	ldrb	r3, [r0, #0]
 80050a8:	2b30      	cmp	r3, #48	@ 0x30
 80050aa:	d10a      	bne.n	80050c2 <__cvt+0xba>
 80050ac:	2200      	movs	r2, #0
 80050ae:	2300      	movs	r3, #0
 80050b0:	4630      	mov	r0, r6
 80050b2:	4639      	mov	r1, r7
 80050b4:	f7fb fd08 	bl	8000ac8 <__aeabi_dcmpeq>
 80050b8:	b918      	cbnz	r0, 80050c2 <__cvt+0xba>
 80050ba:	f1c4 0401 	rsb	r4, r4, #1
 80050be:	f8ca 4000 	str.w	r4, [sl]
 80050c2:	f8da 3000 	ldr.w	r3, [sl]
 80050c6:	4499      	add	r9, r3
 80050c8:	e7d3      	b.n	8005072 <__cvt+0x6a>
 80050ca:	1c59      	adds	r1, r3, #1
 80050cc:	9103      	str	r1, [sp, #12]
 80050ce:	701a      	strb	r2, [r3, #0]
 80050d0:	e7d9      	b.n	8005086 <__cvt+0x7e>

080050d2 <__exponent>:
 80050d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050d4:	2900      	cmp	r1, #0
 80050d6:	bfba      	itte	lt
 80050d8:	4249      	neglt	r1, r1
 80050da:	232d      	movlt	r3, #45	@ 0x2d
 80050dc:	232b      	movge	r3, #43	@ 0x2b
 80050de:	2909      	cmp	r1, #9
 80050e0:	7002      	strb	r2, [r0, #0]
 80050e2:	7043      	strb	r3, [r0, #1]
 80050e4:	dd29      	ble.n	800513a <__exponent+0x68>
 80050e6:	f10d 0307 	add.w	r3, sp, #7
 80050ea:	461d      	mov	r5, r3
 80050ec:	270a      	movs	r7, #10
 80050ee:	461a      	mov	r2, r3
 80050f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80050f4:	fb07 1416 	mls	r4, r7, r6, r1
 80050f8:	3430      	adds	r4, #48	@ 0x30
 80050fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80050fe:	460c      	mov	r4, r1
 8005100:	2c63      	cmp	r4, #99	@ 0x63
 8005102:	f103 33ff 	add.w	r3, r3, #4294967295
 8005106:	4631      	mov	r1, r6
 8005108:	dcf1      	bgt.n	80050ee <__exponent+0x1c>
 800510a:	3130      	adds	r1, #48	@ 0x30
 800510c:	1e94      	subs	r4, r2, #2
 800510e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005112:	1c41      	adds	r1, r0, #1
 8005114:	4623      	mov	r3, r4
 8005116:	42ab      	cmp	r3, r5
 8005118:	d30a      	bcc.n	8005130 <__exponent+0x5e>
 800511a:	f10d 0309 	add.w	r3, sp, #9
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	42ac      	cmp	r4, r5
 8005122:	bf88      	it	hi
 8005124:	2300      	movhi	r3, #0
 8005126:	3302      	adds	r3, #2
 8005128:	4403      	add	r3, r0
 800512a:	1a18      	subs	r0, r3, r0
 800512c:	b003      	add	sp, #12
 800512e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005130:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005134:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005138:	e7ed      	b.n	8005116 <__exponent+0x44>
 800513a:	2330      	movs	r3, #48	@ 0x30
 800513c:	3130      	adds	r1, #48	@ 0x30
 800513e:	7083      	strb	r3, [r0, #2]
 8005140:	70c1      	strb	r1, [r0, #3]
 8005142:	1d03      	adds	r3, r0, #4
 8005144:	e7f1      	b.n	800512a <__exponent+0x58>
	...

08005148 <_printf_float>:
 8005148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514c:	b08d      	sub	sp, #52	@ 0x34
 800514e:	460c      	mov	r4, r1
 8005150:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005154:	4616      	mov	r6, r2
 8005156:	461f      	mov	r7, r3
 8005158:	4605      	mov	r5, r0
 800515a:	f000 ff23 	bl	8005fa4 <_localeconv_r>
 800515e:	6803      	ldr	r3, [r0, #0]
 8005160:	9304      	str	r3, [sp, #16]
 8005162:	4618      	mov	r0, r3
 8005164:	f7fb f884 	bl	8000270 <strlen>
 8005168:	2300      	movs	r3, #0
 800516a:	930a      	str	r3, [sp, #40]	@ 0x28
 800516c:	f8d8 3000 	ldr.w	r3, [r8]
 8005170:	9005      	str	r0, [sp, #20]
 8005172:	3307      	adds	r3, #7
 8005174:	f023 0307 	bic.w	r3, r3, #7
 8005178:	f103 0208 	add.w	r2, r3, #8
 800517c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005180:	f8d4 b000 	ldr.w	fp, [r4]
 8005184:	f8c8 2000 	str.w	r2, [r8]
 8005188:	e9d3 8900 	ldrd	r8, r9, [r3]
 800518c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005190:	9307      	str	r3, [sp, #28]
 8005192:	f8cd 8018 	str.w	r8, [sp, #24]
 8005196:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800519a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800519e:	4b9c      	ldr	r3, [pc, #624]	@ (8005410 <_printf_float+0x2c8>)
 80051a0:	f04f 32ff 	mov.w	r2, #4294967295
 80051a4:	f7fb fcc2 	bl	8000b2c <__aeabi_dcmpun>
 80051a8:	bb70      	cbnz	r0, 8005208 <_printf_float+0xc0>
 80051aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051ae:	4b98      	ldr	r3, [pc, #608]	@ (8005410 <_printf_float+0x2c8>)
 80051b0:	f04f 32ff 	mov.w	r2, #4294967295
 80051b4:	f7fb fc9c 	bl	8000af0 <__aeabi_dcmple>
 80051b8:	bb30      	cbnz	r0, 8005208 <_printf_float+0xc0>
 80051ba:	2200      	movs	r2, #0
 80051bc:	2300      	movs	r3, #0
 80051be:	4640      	mov	r0, r8
 80051c0:	4649      	mov	r1, r9
 80051c2:	f7fb fc8b 	bl	8000adc <__aeabi_dcmplt>
 80051c6:	b110      	cbz	r0, 80051ce <_printf_float+0x86>
 80051c8:	232d      	movs	r3, #45	@ 0x2d
 80051ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051ce:	4a91      	ldr	r2, [pc, #580]	@ (8005414 <_printf_float+0x2cc>)
 80051d0:	4b91      	ldr	r3, [pc, #580]	@ (8005418 <_printf_float+0x2d0>)
 80051d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80051d6:	bf94      	ite	ls
 80051d8:	4690      	movls	r8, r2
 80051da:	4698      	movhi	r8, r3
 80051dc:	2303      	movs	r3, #3
 80051de:	6123      	str	r3, [r4, #16]
 80051e0:	f02b 0304 	bic.w	r3, fp, #4
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	f04f 0900 	mov.w	r9, #0
 80051ea:	9700      	str	r7, [sp, #0]
 80051ec:	4633      	mov	r3, r6
 80051ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80051f0:	4621      	mov	r1, r4
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 f9d2 	bl	800559c <_printf_common>
 80051f8:	3001      	adds	r0, #1
 80051fa:	f040 808d 	bne.w	8005318 <_printf_float+0x1d0>
 80051fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005202:	b00d      	add	sp, #52	@ 0x34
 8005204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005208:	4642      	mov	r2, r8
 800520a:	464b      	mov	r3, r9
 800520c:	4640      	mov	r0, r8
 800520e:	4649      	mov	r1, r9
 8005210:	f7fb fc8c 	bl	8000b2c <__aeabi_dcmpun>
 8005214:	b140      	cbz	r0, 8005228 <_printf_float+0xe0>
 8005216:	464b      	mov	r3, r9
 8005218:	2b00      	cmp	r3, #0
 800521a:	bfbc      	itt	lt
 800521c:	232d      	movlt	r3, #45	@ 0x2d
 800521e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005222:	4a7e      	ldr	r2, [pc, #504]	@ (800541c <_printf_float+0x2d4>)
 8005224:	4b7e      	ldr	r3, [pc, #504]	@ (8005420 <_printf_float+0x2d8>)
 8005226:	e7d4      	b.n	80051d2 <_printf_float+0x8a>
 8005228:	6863      	ldr	r3, [r4, #4]
 800522a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800522e:	9206      	str	r2, [sp, #24]
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	d13b      	bne.n	80052ac <_printf_float+0x164>
 8005234:	2306      	movs	r3, #6
 8005236:	6063      	str	r3, [r4, #4]
 8005238:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800523c:	2300      	movs	r3, #0
 800523e:	6022      	str	r2, [r4, #0]
 8005240:	9303      	str	r3, [sp, #12]
 8005242:	ab0a      	add	r3, sp, #40	@ 0x28
 8005244:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005248:	ab09      	add	r3, sp, #36	@ 0x24
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	6861      	ldr	r1, [r4, #4]
 800524e:	ec49 8b10 	vmov	d0, r8, r9
 8005252:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005256:	4628      	mov	r0, r5
 8005258:	f7ff fed6 	bl	8005008 <__cvt>
 800525c:	9b06      	ldr	r3, [sp, #24]
 800525e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005260:	2b47      	cmp	r3, #71	@ 0x47
 8005262:	4680      	mov	r8, r0
 8005264:	d129      	bne.n	80052ba <_printf_float+0x172>
 8005266:	1cc8      	adds	r0, r1, #3
 8005268:	db02      	blt.n	8005270 <_printf_float+0x128>
 800526a:	6863      	ldr	r3, [r4, #4]
 800526c:	4299      	cmp	r1, r3
 800526e:	dd41      	ble.n	80052f4 <_printf_float+0x1ac>
 8005270:	f1aa 0a02 	sub.w	sl, sl, #2
 8005274:	fa5f fa8a 	uxtb.w	sl, sl
 8005278:	3901      	subs	r1, #1
 800527a:	4652      	mov	r2, sl
 800527c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005280:	9109      	str	r1, [sp, #36]	@ 0x24
 8005282:	f7ff ff26 	bl	80050d2 <__exponent>
 8005286:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005288:	1813      	adds	r3, r2, r0
 800528a:	2a01      	cmp	r2, #1
 800528c:	4681      	mov	r9, r0
 800528e:	6123      	str	r3, [r4, #16]
 8005290:	dc02      	bgt.n	8005298 <_printf_float+0x150>
 8005292:	6822      	ldr	r2, [r4, #0]
 8005294:	07d2      	lsls	r2, r2, #31
 8005296:	d501      	bpl.n	800529c <_printf_float+0x154>
 8005298:	3301      	adds	r3, #1
 800529a:	6123      	str	r3, [r4, #16]
 800529c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0a2      	beq.n	80051ea <_printf_float+0xa2>
 80052a4:	232d      	movs	r3, #45	@ 0x2d
 80052a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052aa:	e79e      	b.n	80051ea <_printf_float+0xa2>
 80052ac:	9a06      	ldr	r2, [sp, #24]
 80052ae:	2a47      	cmp	r2, #71	@ 0x47
 80052b0:	d1c2      	bne.n	8005238 <_printf_float+0xf0>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1c0      	bne.n	8005238 <_printf_float+0xf0>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e7bd      	b.n	8005236 <_printf_float+0xee>
 80052ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80052be:	d9db      	bls.n	8005278 <_printf_float+0x130>
 80052c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80052c4:	d118      	bne.n	80052f8 <_printf_float+0x1b0>
 80052c6:	2900      	cmp	r1, #0
 80052c8:	6863      	ldr	r3, [r4, #4]
 80052ca:	dd0b      	ble.n	80052e4 <_printf_float+0x19c>
 80052cc:	6121      	str	r1, [r4, #16]
 80052ce:	b913      	cbnz	r3, 80052d6 <_printf_float+0x18e>
 80052d0:	6822      	ldr	r2, [r4, #0]
 80052d2:	07d0      	lsls	r0, r2, #31
 80052d4:	d502      	bpl.n	80052dc <_printf_float+0x194>
 80052d6:	3301      	adds	r3, #1
 80052d8:	440b      	add	r3, r1
 80052da:	6123      	str	r3, [r4, #16]
 80052dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80052de:	f04f 0900 	mov.w	r9, #0
 80052e2:	e7db      	b.n	800529c <_printf_float+0x154>
 80052e4:	b913      	cbnz	r3, 80052ec <_printf_float+0x1a4>
 80052e6:	6822      	ldr	r2, [r4, #0]
 80052e8:	07d2      	lsls	r2, r2, #31
 80052ea:	d501      	bpl.n	80052f0 <_printf_float+0x1a8>
 80052ec:	3302      	adds	r3, #2
 80052ee:	e7f4      	b.n	80052da <_printf_float+0x192>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e7f2      	b.n	80052da <_printf_float+0x192>
 80052f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80052f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052fa:	4299      	cmp	r1, r3
 80052fc:	db05      	blt.n	800530a <_printf_float+0x1c2>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	6121      	str	r1, [r4, #16]
 8005302:	07d8      	lsls	r0, r3, #31
 8005304:	d5ea      	bpl.n	80052dc <_printf_float+0x194>
 8005306:	1c4b      	adds	r3, r1, #1
 8005308:	e7e7      	b.n	80052da <_printf_float+0x192>
 800530a:	2900      	cmp	r1, #0
 800530c:	bfd4      	ite	le
 800530e:	f1c1 0202 	rsble	r2, r1, #2
 8005312:	2201      	movgt	r2, #1
 8005314:	4413      	add	r3, r2
 8005316:	e7e0      	b.n	80052da <_printf_float+0x192>
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	055a      	lsls	r2, r3, #21
 800531c:	d407      	bmi.n	800532e <_printf_float+0x1e6>
 800531e:	6923      	ldr	r3, [r4, #16]
 8005320:	4642      	mov	r2, r8
 8005322:	4631      	mov	r1, r6
 8005324:	4628      	mov	r0, r5
 8005326:	47b8      	blx	r7
 8005328:	3001      	adds	r0, #1
 800532a:	d12b      	bne.n	8005384 <_printf_float+0x23c>
 800532c:	e767      	b.n	80051fe <_printf_float+0xb6>
 800532e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005332:	f240 80dd 	bls.w	80054f0 <_printf_float+0x3a8>
 8005336:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800533a:	2200      	movs	r2, #0
 800533c:	2300      	movs	r3, #0
 800533e:	f7fb fbc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005342:	2800      	cmp	r0, #0
 8005344:	d033      	beq.n	80053ae <_printf_float+0x266>
 8005346:	4a37      	ldr	r2, [pc, #220]	@ (8005424 <_printf_float+0x2dc>)
 8005348:	2301      	movs	r3, #1
 800534a:	4631      	mov	r1, r6
 800534c:	4628      	mov	r0, r5
 800534e:	47b8      	blx	r7
 8005350:	3001      	adds	r0, #1
 8005352:	f43f af54 	beq.w	80051fe <_printf_float+0xb6>
 8005356:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800535a:	4543      	cmp	r3, r8
 800535c:	db02      	blt.n	8005364 <_printf_float+0x21c>
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	07d8      	lsls	r0, r3, #31
 8005362:	d50f      	bpl.n	8005384 <_printf_float+0x23c>
 8005364:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005368:	4631      	mov	r1, r6
 800536a:	4628      	mov	r0, r5
 800536c:	47b8      	blx	r7
 800536e:	3001      	adds	r0, #1
 8005370:	f43f af45 	beq.w	80051fe <_printf_float+0xb6>
 8005374:	f04f 0900 	mov.w	r9, #0
 8005378:	f108 38ff 	add.w	r8, r8, #4294967295
 800537c:	f104 0a1a 	add.w	sl, r4, #26
 8005380:	45c8      	cmp	r8, r9
 8005382:	dc09      	bgt.n	8005398 <_printf_float+0x250>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	079b      	lsls	r3, r3, #30
 8005388:	f100 8103 	bmi.w	8005592 <_printf_float+0x44a>
 800538c:	68e0      	ldr	r0, [r4, #12]
 800538e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005390:	4298      	cmp	r0, r3
 8005392:	bfb8      	it	lt
 8005394:	4618      	movlt	r0, r3
 8005396:	e734      	b.n	8005202 <_printf_float+0xba>
 8005398:	2301      	movs	r3, #1
 800539a:	4652      	mov	r2, sl
 800539c:	4631      	mov	r1, r6
 800539e:	4628      	mov	r0, r5
 80053a0:	47b8      	blx	r7
 80053a2:	3001      	adds	r0, #1
 80053a4:	f43f af2b 	beq.w	80051fe <_printf_float+0xb6>
 80053a8:	f109 0901 	add.w	r9, r9, #1
 80053ac:	e7e8      	b.n	8005380 <_printf_float+0x238>
 80053ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	dc39      	bgt.n	8005428 <_printf_float+0x2e0>
 80053b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005424 <_printf_float+0x2dc>)
 80053b6:	2301      	movs	r3, #1
 80053b8:	4631      	mov	r1, r6
 80053ba:	4628      	mov	r0, r5
 80053bc:	47b8      	blx	r7
 80053be:	3001      	adds	r0, #1
 80053c0:	f43f af1d 	beq.w	80051fe <_printf_float+0xb6>
 80053c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80053c8:	ea59 0303 	orrs.w	r3, r9, r3
 80053cc:	d102      	bne.n	80053d4 <_printf_float+0x28c>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	07d9      	lsls	r1, r3, #31
 80053d2:	d5d7      	bpl.n	8005384 <_printf_float+0x23c>
 80053d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053d8:	4631      	mov	r1, r6
 80053da:	4628      	mov	r0, r5
 80053dc:	47b8      	blx	r7
 80053de:	3001      	adds	r0, #1
 80053e0:	f43f af0d 	beq.w	80051fe <_printf_float+0xb6>
 80053e4:	f04f 0a00 	mov.w	sl, #0
 80053e8:	f104 0b1a 	add.w	fp, r4, #26
 80053ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053ee:	425b      	negs	r3, r3
 80053f0:	4553      	cmp	r3, sl
 80053f2:	dc01      	bgt.n	80053f8 <_printf_float+0x2b0>
 80053f4:	464b      	mov	r3, r9
 80053f6:	e793      	b.n	8005320 <_printf_float+0x1d8>
 80053f8:	2301      	movs	r3, #1
 80053fa:	465a      	mov	r2, fp
 80053fc:	4631      	mov	r1, r6
 80053fe:	4628      	mov	r0, r5
 8005400:	47b8      	blx	r7
 8005402:	3001      	adds	r0, #1
 8005404:	f43f aefb 	beq.w	80051fe <_printf_float+0xb6>
 8005408:	f10a 0a01 	add.w	sl, sl, #1
 800540c:	e7ee      	b.n	80053ec <_printf_float+0x2a4>
 800540e:	bf00      	nop
 8005410:	7fefffff 	.word	0x7fefffff
 8005414:	08009778 	.word	0x08009778
 8005418:	0800977c 	.word	0x0800977c
 800541c:	08009780 	.word	0x08009780
 8005420:	08009784 	.word	0x08009784
 8005424:	08009788 	.word	0x08009788
 8005428:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800542a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800542e:	4553      	cmp	r3, sl
 8005430:	bfa8      	it	ge
 8005432:	4653      	movge	r3, sl
 8005434:	2b00      	cmp	r3, #0
 8005436:	4699      	mov	r9, r3
 8005438:	dc36      	bgt.n	80054a8 <_printf_float+0x360>
 800543a:	f04f 0b00 	mov.w	fp, #0
 800543e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005442:	f104 021a 	add.w	r2, r4, #26
 8005446:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005448:	9306      	str	r3, [sp, #24]
 800544a:	eba3 0309 	sub.w	r3, r3, r9
 800544e:	455b      	cmp	r3, fp
 8005450:	dc31      	bgt.n	80054b6 <_printf_float+0x36e>
 8005452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005454:	459a      	cmp	sl, r3
 8005456:	dc3a      	bgt.n	80054ce <_printf_float+0x386>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	07da      	lsls	r2, r3, #31
 800545c:	d437      	bmi.n	80054ce <_printf_float+0x386>
 800545e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005460:	ebaa 0903 	sub.w	r9, sl, r3
 8005464:	9b06      	ldr	r3, [sp, #24]
 8005466:	ebaa 0303 	sub.w	r3, sl, r3
 800546a:	4599      	cmp	r9, r3
 800546c:	bfa8      	it	ge
 800546e:	4699      	movge	r9, r3
 8005470:	f1b9 0f00 	cmp.w	r9, #0
 8005474:	dc33      	bgt.n	80054de <_printf_float+0x396>
 8005476:	f04f 0800 	mov.w	r8, #0
 800547a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800547e:	f104 0b1a 	add.w	fp, r4, #26
 8005482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005484:	ebaa 0303 	sub.w	r3, sl, r3
 8005488:	eba3 0309 	sub.w	r3, r3, r9
 800548c:	4543      	cmp	r3, r8
 800548e:	f77f af79 	ble.w	8005384 <_printf_float+0x23c>
 8005492:	2301      	movs	r3, #1
 8005494:	465a      	mov	r2, fp
 8005496:	4631      	mov	r1, r6
 8005498:	4628      	mov	r0, r5
 800549a:	47b8      	blx	r7
 800549c:	3001      	adds	r0, #1
 800549e:	f43f aeae 	beq.w	80051fe <_printf_float+0xb6>
 80054a2:	f108 0801 	add.w	r8, r8, #1
 80054a6:	e7ec      	b.n	8005482 <_printf_float+0x33a>
 80054a8:	4642      	mov	r2, r8
 80054aa:	4631      	mov	r1, r6
 80054ac:	4628      	mov	r0, r5
 80054ae:	47b8      	blx	r7
 80054b0:	3001      	adds	r0, #1
 80054b2:	d1c2      	bne.n	800543a <_printf_float+0x2f2>
 80054b4:	e6a3      	b.n	80051fe <_printf_float+0xb6>
 80054b6:	2301      	movs	r3, #1
 80054b8:	4631      	mov	r1, r6
 80054ba:	4628      	mov	r0, r5
 80054bc:	9206      	str	r2, [sp, #24]
 80054be:	47b8      	blx	r7
 80054c0:	3001      	adds	r0, #1
 80054c2:	f43f ae9c 	beq.w	80051fe <_printf_float+0xb6>
 80054c6:	9a06      	ldr	r2, [sp, #24]
 80054c8:	f10b 0b01 	add.w	fp, fp, #1
 80054cc:	e7bb      	b.n	8005446 <_printf_float+0x2fe>
 80054ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054d2:	4631      	mov	r1, r6
 80054d4:	4628      	mov	r0, r5
 80054d6:	47b8      	blx	r7
 80054d8:	3001      	adds	r0, #1
 80054da:	d1c0      	bne.n	800545e <_printf_float+0x316>
 80054dc:	e68f      	b.n	80051fe <_printf_float+0xb6>
 80054de:	9a06      	ldr	r2, [sp, #24]
 80054e0:	464b      	mov	r3, r9
 80054e2:	4442      	add	r2, r8
 80054e4:	4631      	mov	r1, r6
 80054e6:	4628      	mov	r0, r5
 80054e8:	47b8      	blx	r7
 80054ea:	3001      	adds	r0, #1
 80054ec:	d1c3      	bne.n	8005476 <_printf_float+0x32e>
 80054ee:	e686      	b.n	80051fe <_printf_float+0xb6>
 80054f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80054f4:	f1ba 0f01 	cmp.w	sl, #1
 80054f8:	dc01      	bgt.n	80054fe <_printf_float+0x3b6>
 80054fa:	07db      	lsls	r3, r3, #31
 80054fc:	d536      	bpl.n	800556c <_printf_float+0x424>
 80054fe:	2301      	movs	r3, #1
 8005500:	4642      	mov	r2, r8
 8005502:	4631      	mov	r1, r6
 8005504:	4628      	mov	r0, r5
 8005506:	47b8      	blx	r7
 8005508:	3001      	adds	r0, #1
 800550a:	f43f ae78 	beq.w	80051fe <_printf_float+0xb6>
 800550e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005512:	4631      	mov	r1, r6
 8005514:	4628      	mov	r0, r5
 8005516:	47b8      	blx	r7
 8005518:	3001      	adds	r0, #1
 800551a:	f43f ae70 	beq.w	80051fe <_printf_float+0xb6>
 800551e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005522:	2200      	movs	r2, #0
 8005524:	2300      	movs	r3, #0
 8005526:	f10a 3aff 	add.w	sl, sl, #4294967295
 800552a:	f7fb facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800552e:	b9c0      	cbnz	r0, 8005562 <_printf_float+0x41a>
 8005530:	4653      	mov	r3, sl
 8005532:	f108 0201 	add.w	r2, r8, #1
 8005536:	4631      	mov	r1, r6
 8005538:	4628      	mov	r0, r5
 800553a:	47b8      	blx	r7
 800553c:	3001      	adds	r0, #1
 800553e:	d10c      	bne.n	800555a <_printf_float+0x412>
 8005540:	e65d      	b.n	80051fe <_printf_float+0xb6>
 8005542:	2301      	movs	r3, #1
 8005544:	465a      	mov	r2, fp
 8005546:	4631      	mov	r1, r6
 8005548:	4628      	mov	r0, r5
 800554a:	47b8      	blx	r7
 800554c:	3001      	adds	r0, #1
 800554e:	f43f ae56 	beq.w	80051fe <_printf_float+0xb6>
 8005552:	f108 0801 	add.w	r8, r8, #1
 8005556:	45d0      	cmp	r8, sl
 8005558:	dbf3      	blt.n	8005542 <_printf_float+0x3fa>
 800555a:	464b      	mov	r3, r9
 800555c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005560:	e6df      	b.n	8005322 <_printf_float+0x1da>
 8005562:	f04f 0800 	mov.w	r8, #0
 8005566:	f104 0b1a 	add.w	fp, r4, #26
 800556a:	e7f4      	b.n	8005556 <_printf_float+0x40e>
 800556c:	2301      	movs	r3, #1
 800556e:	4642      	mov	r2, r8
 8005570:	e7e1      	b.n	8005536 <_printf_float+0x3ee>
 8005572:	2301      	movs	r3, #1
 8005574:	464a      	mov	r2, r9
 8005576:	4631      	mov	r1, r6
 8005578:	4628      	mov	r0, r5
 800557a:	47b8      	blx	r7
 800557c:	3001      	adds	r0, #1
 800557e:	f43f ae3e 	beq.w	80051fe <_printf_float+0xb6>
 8005582:	f108 0801 	add.w	r8, r8, #1
 8005586:	68e3      	ldr	r3, [r4, #12]
 8005588:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800558a:	1a5b      	subs	r3, r3, r1
 800558c:	4543      	cmp	r3, r8
 800558e:	dcf0      	bgt.n	8005572 <_printf_float+0x42a>
 8005590:	e6fc      	b.n	800538c <_printf_float+0x244>
 8005592:	f04f 0800 	mov.w	r8, #0
 8005596:	f104 0919 	add.w	r9, r4, #25
 800559a:	e7f4      	b.n	8005586 <_printf_float+0x43e>

0800559c <_printf_common>:
 800559c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a0:	4616      	mov	r6, r2
 80055a2:	4698      	mov	r8, r3
 80055a4:	688a      	ldr	r2, [r1, #8]
 80055a6:	690b      	ldr	r3, [r1, #16]
 80055a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055ac:	4293      	cmp	r3, r2
 80055ae:	bfb8      	it	lt
 80055b0:	4613      	movlt	r3, r2
 80055b2:	6033      	str	r3, [r6, #0]
 80055b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055b8:	4607      	mov	r7, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	b10a      	cbz	r2, 80055c2 <_printf_common+0x26>
 80055be:	3301      	adds	r3, #1
 80055c0:	6033      	str	r3, [r6, #0]
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	0699      	lsls	r1, r3, #26
 80055c6:	bf42      	ittt	mi
 80055c8:	6833      	ldrmi	r3, [r6, #0]
 80055ca:	3302      	addmi	r3, #2
 80055cc:	6033      	strmi	r3, [r6, #0]
 80055ce:	6825      	ldr	r5, [r4, #0]
 80055d0:	f015 0506 	ands.w	r5, r5, #6
 80055d4:	d106      	bne.n	80055e4 <_printf_common+0x48>
 80055d6:	f104 0a19 	add.w	sl, r4, #25
 80055da:	68e3      	ldr	r3, [r4, #12]
 80055dc:	6832      	ldr	r2, [r6, #0]
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	42ab      	cmp	r3, r5
 80055e2:	dc26      	bgt.n	8005632 <_printf_common+0x96>
 80055e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055e8:	6822      	ldr	r2, [r4, #0]
 80055ea:	3b00      	subs	r3, #0
 80055ec:	bf18      	it	ne
 80055ee:	2301      	movne	r3, #1
 80055f0:	0692      	lsls	r2, r2, #26
 80055f2:	d42b      	bmi.n	800564c <_printf_common+0xb0>
 80055f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055f8:	4641      	mov	r1, r8
 80055fa:	4638      	mov	r0, r7
 80055fc:	47c8      	blx	r9
 80055fe:	3001      	adds	r0, #1
 8005600:	d01e      	beq.n	8005640 <_printf_common+0xa4>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	6922      	ldr	r2, [r4, #16]
 8005606:	f003 0306 	and.w	r3, r3, #6
 800560a:	2b04      	cmp	r3, #4
 800560c:	bf02      	ittt	eq
 800560e:	68e5      	ldreq	r5, [r4, #12]
 8005610:	6833      	ldreq	r3, [r6, #0]
 8005612:	1aed      	subeq	r5, r5, r3
 8005614:	68a3      	ldr	r3, [r4, #8]
 8005616:	bf0c      	ite	eq
 8005618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800561c:	2500      	movne	r5, #0
 800561e:	4293      	cmp	r3, r2
 8005620:	bfc4      	itt	gt
 8005622:	1a9b      	subgt	r3, r3, r2
 8005624:	18ed      	addgt	r5, r5, r3
 8005626:	2600      	movs	r6, #0
 8005628:	341a      	adds	r4, #26
 800562a:	42b5      	cmp	r5, r6
 800562c:	d11a      	bne.n	8005664 <_printf_common+0xc8>
 800562e:	2000      	movs	r0, #0
 8005630:	e008      	b.n	8005644 <_printf_common+0xa8>
 8005632:	2301      	movs	r3, #1
 8005634:	4652      	mov	r2, sl
 8005636:	4641      	mov	r1, r8
 8005638:	4638      	mov	r0, r7
 800563a:	47c8      	blx	r9
 800563c:	3001      	adds	r0, #1
 800563e:	d103      	bne.n	8005648 <_printf_common+0xac>
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005648:	3501      	adds	r5, #1
 800564a:	e7c6      	b.n	80055da <_printf_common+0x3e>
 800564c:	18e1      	adds	r1, r4, r3
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	2030      	movs	r0, #48	@ 0x30
 8005652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005656:	4422      	add	r2, r4
 8005658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800565c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005660:	3302      	adds	r3, #2
 8005662:	e7c7      	b.n	80055f4 <_printf_common+0x58>
 8005664:	2301      	movs	r3, #1
 8005666:	4622      	mov	r2, r4
 8005668:	4641      	mov	r1, r8
 800566a:	4638      	mov	r0, r7
 800566c:	47c8      	blx	r9
 800566e:	3001      	adds	r0, #1
 8005670:	d0e6      	beq.n	8005640 <_printf_common+0xa4>
 8005672:	3601      	adds	r6, #1
 8005674:	e7d9      	b.n	800562a <_printf_common+0x8e>
	...

08005678 <_printf_i>:
 8005678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800567c:	7e0f      	ldrb	r7, [r1, #24]
 800567e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005680:	2f78      	cmp	r7, #120	@ 0x78
 8005682:	4691      	mov	r9, r2
 8005684:	4680      	mov	r8, r0
 8005686:	460c      	mov	r4, r1
 8005688:	469a      	mov	sl, r3
 800568a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800568e:	d807      	bhi.n	80056a0 <_printf_i+0x28>
 8005690:	2f62      	cmp	r7, #98	@ 0x62
 8005692:	d80a      	bhi.n	80056aa <_printf_i+0x32>
 8005694:	2f00      	cmp	r7, #0
 8005696:	f000 80d2 	beq.w	800583e <_printf_i+0x1c6>
 800569a:	2f58      	cmp	r7, #88	@ 0x58
 800569c:	f000 80b9 	beq.w	8005812 <_printf_i+0x19a>
 80056a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056a8:	e03a      	b.n	8005720 <_printf_i+0xa8>
 80056aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056ae:	2b15      	cmp	r3, #21
 80056b0:	d8f6      	bhi.n	80056a0 <_printf_i+0x28>
 80056b2:	a101      	add	r1, pc, #4	@ (adr r1, 80056b8 <_printf_i+0x40>)
 80056b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056b8:	08005711 	.word	0x08005711
 80056bc:	08005725 	.word	0x08005725
 80056c0:	080056a1 	.word	0x080056a1
 80056c4:	080056a1 	.word	0x080056a1
 80056c8:	080056a1 	.word	0x080056a1
 80056cc:	080056a1 	.word	0x080056a1
 80056d0:	08005725 	.word	0x08005725
 80056d4:	080056a1 	.word	0x080056a1
 80056d8:	080056a1 	.word	0x080056a1
 80056dc:	080056a1 	.word	0x080056a1
 80056e0:	080056a1 	.word	0x080056a1
 80056e4:	08005825 	.word	0x08005825
 80056e8:	0800574f 	.word	0x0800574f
 80056ec:	080057df 	.word	0x080057df
 80056f0:	080056a1 	.word	0x080056a1
 80056f4:	080056a1 	.word	0x080056a1
 80056f8:	08005847 	.word	0x08005847
 80056fc:	080056a1 	.word	0x080056a1
 8005700:	0800574f 	.word	0x0800574f
 8005704:	080056a1 	.word	0x080056a1
 8005708:	080056a1 	.word	0x080056a1
 800570c:	080057e7 	.word	0x080057e7
 8005710:	6833      	ldr	r3, [r6, #0]
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6032      	str	r2, [r6, #0]
 8005718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800571c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005720:	2301      	movs	r3, #1
 8005722:	e09d      	b.n	8005860 <_printf_i+0x1e8>
 8005724:	6833      	ldr	r3, [r6, #0]
 8005726:	6820      	ldr	r0, [r4, #0]
 8005728:	1d19      	adds	r1, r3, #4
 800572a:	6031      	str	r1, [r6, #0]
 800572c:	0606      	lsls	r6, r0, #24
 800572e:	d501      	bpl.n	8005734 <_printf_i+0xbc>
 8005730:	681d      	ldr	r5, [r3, #0]
 8005732:	e003      	b.n	800573c <_printf_i+0xc4>
 8005734:	0645      	lsls	r5, r0, #25
 8005736:	d5fb      	bpl.n	8005730 <_printf_i+0xb8>
 8005738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800573c:	2d00      	cmp	r5, #0
 800573e:	da03      	bge.n	8005748 <_printf_i+0xd0>
 8005740:	232d      	movs	r3, #45	@ 0x2d
 8005742:	426d      	negs	r5, r5
 8005744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005748:	4859      	ldr	r0, [pc, #356]	@ (80058b0 <_printf_i+0x238>)
 800574a:	230a      	movs	r3, #10
 800574c:	e011      	b.n	8005772 <_printf_i+0xfa>
 800574e:	6821      	ldr	r1, [r4, #0]
 8005750:	6833      	ldr	r3, [r6, #0]
 8005752:	0608      	lsls	r0, r1, #24
 8005754:	f853 5b04 	ldr.w	r5, [r3], #4
 8005758:	d402      	bmi.n	8005760 <_printf_i+0xe8>
 800575a:	0649      	lsls	r1, r1, #25
 800575c:	bf48      	it	mi
 800575e:	b2ad      	uxthmi	r5, r5
 8005760:	2f6f      	cmp	r7, #111	@ 0x6f
 8005762:	4853      	ldr	r0, [pc, #332]	@ (80058b0 <_printf_i+0x238>)
 8005764:	6033      	str	r3, [r6, #0]
 8005766:	bf14      	ite	ne
 8005768:	230a      	movne	r3, #10
 800576a:	2308      	moveq	r3, #8
 800576c:	2100      	movs	r1, #0
 800576e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005772:	6866      	ldr	r6, [r4, #4]
 8005774:	60a6      	str	r6, [r4, #8]
 8005776:	2e00      	cmp	r6, #0
 8005778:	bfa2      	ittt	ge
 800577a:	6821      	ldrge	r1, [r4, #0]
 800577c:	f021 0104 	bicge.w	r1, r1, #4
 8005780:	6021      	strge	r1, [r4, #0]
 8005782:	b90d      	cbnz	r5, 8005788 <_printf_i+0x110>
 8005784:	2e00      	cmp	r6, #0
 8005786:	d04b      	beq.n	8005820 <_printf_i+0x1a8>
 8005788:	4616      	mov	r6, r2
 800578a:	fbb5 f1f3 	udiv	r1, r5, r3
 800578e:	fb03 5711 	mls	r7, r3, r1, r5
 8005792:	5dc7      	ldrb	r7, [r0, r7]
 8005794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005798:	462f      	mov	r7, r5
 800579a:	42bb      	cmp	r3, r7
 800579c:	460d      	mov	r5, r1
 800579e:	d9f4      	bls.n	800578a <_printf_i+0x112>
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d10b      	bne.n	80057bc <_printf_i+0x144>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	07df      	lsls	r7, r3, #31
 80057a8:	d508      	bpl.n	80057bc <_printf_i+0x144>
 80057aa:	6923      	ldr	r3, [r4, #16]
 80057ac:	6861      	ldr	r1, [r4, #4]
 80057ae:	4299      	cmp	r1, r3
 80057b0:	bfde      	ittt	le
 80057b2:	2330      	movle	r3, #48	@ 0x30
 80057b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057bc:	1b92      	subs	r2, r2, r6
 80057be:	6122      	str	r2, [r4, #16]
 80057c0:	f8cd a000 	str.w	sl, [sp]
 80057c4:	464b      	mov	r3, r9
 80057c6:	aa03      	add	r2, sp, #12
 80057c8:	4621      	mov	r1, r4
 80057ca:	4640      	mov	r0, r8
 80057cc:	f7ff fee6 	bl	800559c <_printf_common>
 80057d0:	3001      	adds	r0, #1
 80057d2:	d14a      	bne.n	800586a <_printf_i+0x1f2>
 80057d4:	f04f 30ff 	mov.w	r0, #4294967295
 80057d8:	b004      	add	sp, #16
 80057da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	f043 0320 	orr.w	r3, r3, #32
 80057e4:	6023      	str	r3, [r4, #0]
 80057e6:	4833      	ldr	r0, [pc, #204]	@ (80058b4 <_printf_i+0x23c>)
 80057e8:	2778      	movs	r7, #120	@ 0x78
 80057ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	6831      	ldr	r1, [r6, #0]
 80057f2:	061f      	lsls	r7, r3, #24
 80057f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80057f8:	d402      	bmi.n	8005800 <_printf_i+0x188>
 80057fa:	065f      	lsls	r7, r3, #25
 80057fc:	bf48      	it	mi
 80057fe:	b2ad      	uxthmi	r5, r5
 8005800:	6031      	str	r1, [r6, #0]
 8005802:	07d9      	lsls	r1, r3, #31
 8005804:	bf44      	itt	mi
 8005806:	f043 0320 	orrmi.w	r3, r3, #32
 800580a:	6023      	strmi	r3, [r4, #0]
 800580c:	b11d      	cbz	r5, 8005816 <_printf_i+0x19e>
 800580e:	2310      	movs	r3, #16
 8005810:	e7ac      	b.n	800576c <_printf_i+0xf4>
 8005812:	4827      	ldr	r0, [pc, #156]	@ (80058b0 <_printf_i+0x238>)
 8005814:	e7e9      	b.n	80057ea <_printf_i+0x172>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	f023 0320 	bic.w	r3, r3, #32
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	e7f6      	b.n	800580e <_printf_i+0x196>
 8005820:	4616      	mov	r6, r2
 8005822:	e7bd      	b.n	80057a0 <_printf_i+0x128>
 8005824:	6833      	ldr	r3, [r6, #0]
 8005826:	6825      	ldr	r5, [r4, #0]
 8005828:	6961      	ldr	r1, [r4, #20]
 800582a:	1d18      	adds	r0, r3, #4
 800582c:	6030      	str	r0, [r6, #0]
 800582e:	062e      	lsls	r6, r5, #24
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	d501      	bpl.n	8005838 <_printf_i+0x1c0>
 8005834:	6019      	str	r1, [r3, #0]
 8005836:	e002      	b.n	800583e <_printf_i+0x1c6>
 8005838:	0668      	lsls	r0, r5, #25
 800583a:	d5fb      	bpl.n	8005834 <_printf_i+0x1bc>
 800583c:	8019      	strh	r1, [r3, #0]
 800583e:	2300      	movs	r3, #0
 8005840:	6123      	str	r3, [r4, #16]
 8005842:	4616      	mov	r6, r2
 8005844:	e7bc      	b.n	80057c0 <_printf_i+0x148>
 8005846:	6833      	ldr	r3, [r6, #0]
 8005848:	1d1a      	adds	r2, r3, #4
 800584a:	6032      	str	r2, [r6, #0]
 800584c:	681e      	ldr	r6, [r3, #0]
 800584e:	6862      	ldr	r2, [r4, #4]
 8005850:	2100      	movs	r1, #0
 8005852:	4630      	mov	r0, r6
 8005854:	f7fa fcbc 	bl	80001d0 <memchr>
 8005858:	b108      	cbz	r0, 800585e <_printf_i+0x1e6>
 800585a:	1b80      	subs	r0, r0, r6
 800585c:	6060      	str	r0, [r4, #4]
 800585e:	6863      	ldr	r3, [r4, #4]
 8005860:	6123      	str	r3, [r4, #16]
 8005862:	2300      	movs	r3, #0
 8005864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005868:	e7aa      	b.n	80057c0 <_printf_i+0x148>
 800586a:	6923      	ldr	r3, [r4, #16]
 800586c:	4632      	mov	r2, r6
 800586e:	4649      	mov	r1, r9
 8005870:	4640      	mov	r0, r8
 8005872:	47d0      	blx	sl
 8005874:	3001      	adds	r0, #1
 8005876:	d0ad      	beq.n	80057d4 <_printf_i+0x15c>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	079b      	lsls	r3, r3, #30
 800587c:	d413      	bmi.n	80058a6 <_printf_i+0x22e>
 800587e:	68e0      	ldr	r0, [r4, #12]
 8005880:	9b03      	ldr	r3, [sp, #12]
 8005882:	4298      	cmp	r0, r3
 8005884:	bfb8      	it	lt
 8005886:	4618      	movlt	r0, r3
 8005888:	e7a6      	b.n	80057d8 <_printf_i+0x160>
 800588a:	2301      	movs	r3, #1
 800588c:	4632      	mov	r2, r6
 800588e:	4649      	mov	r1, r9
 8005890:	4640      	mov	r0, r8
 8005892:	47d0      	blx	sl
 8005894:	3001      	adds	r0, #1
 8005896:	d09d      	beq.n	80057d4 <_printf_i+0x15c>
 8005898:	3501      	adds	r5, #1
 800589a:	68e3      	ldr	r3, [r4, #12]
 800589c:	9903      	ldr	r1, [sp, #12]
 800589e:	1a5b      	subs	r3, r3, r1
 80058a0:	42ab      	cmp	r3, r5
 80058a2:	dcf2      	bgt.n	800588a <_printf_i+0x212>
 80058a4:	e7eb      	b.n	800587e <_printf_i+0x206>
 80058a6:	2500      	movs	r5, #0
 80058a8:	f104 0619 	add.w	r6, r4, #25
 80058ac:	e7f5      	b.n	800589a <_printf_i+0x222>
 80058ae:	bf00      	nop
 80058b0:	0800978a 	.word	0x0800978a
 80058b4:	0800979b 	.word	0x0800979b

080058b8 <_scanf_float>:
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	b087      	sub	sp, #28
 80058be:	4617      	mov	r7, r2
 80058c0:	9303      	str	r3, [sp, #12]
 80058c2:	688b      	ldr	r3, [r1, #8]
 80058c4:	1e5a      	subs	r2, r3, #1
 80058c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80058ca:	bf81      	itttt	hi
 80058cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80058d0:	eb03 0b05 	addhi.w	fp, r3, r5
 80058d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80058d8:	608b      	strhi	r3, [r1, #8]
 80058da:	680b      	ldr	r3, [r1, #0]
 80058dc:	460a      	mov	r2, r1
 80058de:	f04f 0500 	mov.w	r5, #0
 80058e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80058e6:	f842 3b1c 	str.w	r3, [r2], #28
 80058ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80058ee:	4680      	mov	r8, r0
 80058f0:	460c      	mov	r4, r1
 80058f2:	bf98      	it	ls
 80058f4:	f04f 0b00 	movls.w	fp, #0
 80058f8:	9201      	str	r2, [sp, #4]
 80058fa:	4616      	mov	r6, r2
 80058fc:	46aa      	mov	sl, r5
 80058fe:	46a9      	mov	r9, r5
 8005900:	9502      	str	r5, [sp, #8]
 8005902:	68a2      	ldr	r2, [r4, #8]
 8005904:	b152      	cbz	r2, 800591c <_scanf_float+0x64>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b4e      	cmp	r3, #78	@ 0x4e
 800590c:	d864      	bhi.n	80059d8 <_scanf_float+0x120>
 800590e:	2b40      	cmp	r3, #64	@ 0x40
 8005910:	d83c      	bhi.n	800598c <_scanf_float+0xd4>
 8005912:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005916:	b2c8      	uxtb	r0, r1
 8005918:	280e      	cmp	r0, #14
 800591a:	d93a      	bls.n	8005992 <_scanf_float+0xda>
 800591c:	f1b9 0f00 	cmp.w	r9, #0
 8005920:	d003      	beq.n	800592a <_scanf_float+0x72>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800592e:	f1ba 0f01 	cmp.w	sl, #1
 8005932:	f200 8117 	bhi.w	8005b64 <_scanf_float+0x2ac>
 8005936:	9b01      	ldr	r3, [sp, #4]
 8005938:	429e      	cmp	r6, r3
 800593a:	f200 8108 	bhi.w	8005b4e <_scanf_float+0x296>
 800593e:	2001      	movs	r0, #1
 8005940:	b007      	add	sp, #28
 8005942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005946:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800594a:	2a0d      	cmp	r2, #13
 800594c:	d8e6      	bhi.n	800591c <_scanf_float+0x64>
 800594e:	a101      	add	r1, pc, #4	@ (adr r1, 8005954 <_scanf_float+0x9c>)
 8005950:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005954:	08005a9b 	.word	0x08005a9b
 8005958:	0800591d 	.word	0x0800591d
 800595c:	0800591d 	.word	0x0800591d
 8005960:	0800591d 	.word	0x0800591d
 8005964:	08005afb 	.word	0x08005afb
 8005968:	08005ad3 	.word	0x08005ad3
 800596c:	0800591d 	.word	0x0800591d
 8005970:	0800591d 	.word	0x0800591d
 8005974:	08005aa9 	.word	0x08005aa9
 8005978:	0800591d 	.word	0x0800591d
 800597c:	0800591d 	.word	0x0800591d
 8005980:	0800591d 	.word	0x0800591d
 8005984:	0800591d 	.word	0x0800591d
 8005988:	08005a61 	.word	0x08005a61
 800598c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005990:	e7db      	b.n	800594a <_scanf_float+0x92>
 8005992:	290e      	cmp	r1, #14
 8005994:	d8c2      	bhi.n	800591c <_scanf_float+0x64>
 8005996:	a001      	add	r0, pc, #4	@ (adr r0, 800599c <_scanf_float+0xe4>)
 8005998:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800599c:	08005a51 	.word	0x08005a51
 80059a0:	0800591d 	.word	0x0800591d
 80059a4:	08005a51 	.word	0x08005a51
 80059a8:	08005ae7 	.word	0x08005ae7
 80059ac:	0800591d 	.word	0x0800591d
 80059b0:	080059f9 	.word	0x080059f9
 80059b4:	08005a37 	.word	0x08005a37
 80059b8:	08005a37 	.word	0x08005a37
 80059bc:	08005a37 	.word	0x08005a37
 80059c0:	08005a37 	.word	0x08005a37
 80059c4:	08005a37 	.word	0x08005a37
 80059c8:	08005a37 	.word	0x08005a37
 80059cc:	08005a37 	.word	0x08005a37
 80059d0:	08005a37 	.word	0x08005a37
 80059d4:	08005a37 	.word	0x08005a37
 80059d8:	2b6e      	cmp	r3, #110	@ 0x6e
 80059da:	d809      	bhi.n	80059f0 <_scanf_float+0x138>
 80059dc:	2b60      	cmp	r3, #96	@ 0x60
 80059de:	d8b2      	bhi.n	8005946 <_scanf_float+0x8e>
 80059e0:	2b54      	cmp	r3, #84	@ 0x54
 80059e2:	d07b      	beq.n	8005adc <_scanf_float+0x224>
 80059e4:	2b59      	cmp	r3, #89	@ 0x59
 80059e6:	d199      	bne.n	800591c <_scanf_float+0x64>
 80059e8:	2d07      	cmp	r5, #7
 80059ea:	d197      	bne.n	800591c <_scanf_float+0x64>
 80059ec:	2508      	movs	r5, #8
 80059ee:	e02c      	b.n	8005a4a <_scanf_float+0x192>
 80059f0:	2b74      	cmp	r3, #116	@ 0x74
 80059f2:	d073      	beq.n	8005adc <_scanf_float+0x224>
 80059f4:	2b79      	cmp	r3, #121	@ 0x79
 80059f6:	e7f6      	b.n	80059e6 <_scanf_float+0x12e>
 80059f8:	6821      	ldr	r1, [r4, #0]
 80059fa:	05c8      	lsls	r0, r1, #23
 80059fc:	d51b      	bpl.n	8005a36 <_scanf_float+0x17e>
 80059fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005a02:	6021      	str	r1, [r4, #0]
 8005a04:	f109 0901 	add.w	r9, r9, #1
 8005a08:	f1bb 0f00 	cmp.w	fp, #0
 8005a0c:	d003      	beq.n	8005a16 <_scanf_float+0x15e>
 8005a0e:	3201      	adds	r2, #1
 8005a10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a14:	60a2      	str	r2, [r4, #8]
 8005a16:	68a3      	ldr	r3, [r4, #8]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	60a3      	str	r3, [r4, #8]
 8005a1c:	6923      	ldr	r3, [r4, #16]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	6123      	str	r3, [r4, #16]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3b01      	subs	r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	607b      	str	r3, [r7, #4]
 8005a2a:	f340 8087 	ble.w	8005b3c <_scanf_float+0x284>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	3301      	adds	r3, #1
 8005a32:	603b      	str	r3, [r7, #0]
 8005a34:	e765      	b.n	8005902 <_scanf_float+0x4a>
 8005a36:	eb1a 0105 	adds.w	r1, sl, r5
 8005a3a:	f47f af6f 	bne.w	800591c <_scanf_float+0x64>
 8005a3e:	6822      	ldr	r2, [r4, #0]
 8005a40:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005a44:	6022      	str	r2, [r4, #0]
 8005a46:	460d      	mov	r5, r1
 8005a48:	468a      	mov	sl, r1
 8005a4a:	f806 3b01 	strb.w	r3, [r6], #1
 8005a4e:	e7e2      	b.n	8005a16 <_scanf_float+0x15e>
 8005a50:	6822      	ldr	r2, [r4, #0]
 8005a52:	0610      	lsls	r0, r2, #24
 8005a54:	f57f af62 	bpl.w	800591c <_scanf_float+0x64>
 8005a58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a5c:	6022      	str	r2, [r4, #0]
 8005a5e:	e7f4      	b.n	8005a4a <_scanf_float+0x192>
 8005a60:	f1ba 0f00 	cmp.w	sl, #0
 8005a64:	d10e      	bne.n	8005a84 <_scanf_float+0x1cc>
 8005a66:	f1b9 0f00 	cmp.w	r9, #0
 8005a6a:	d10e      	bne.n	8005a8a <_scanf_float+0x1d2>
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005a72:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005a76:	d108      	bne.n	8005a8a <_scanf_float+0x1d2>
 8005a78:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005a7c:	6022      	str	r2, [r4, #0]
 8005a7e:	f04f 0a01 	mov.w	sl, #1
 8005a82:	e7e2      	b.n	8005a4a <_scanf_float+0x192>
 8005a84:	f1ba 0f02 	cmp.w	sl, #2
 8005a88:	d055      	beq.n	8005b36 <_scanf_float+0x27e>
 8005a8a:	2d01      	cmp	r5, #1
 8005a8c:	d002      	beq.n	8005a94 <_scanf_float+0x1dc>
 8005a8e:	2d04      	cmp	r5, #4
 8005a90:	f47f af44 	bne.w	800591c <_scanf_float+0x64>
 8005a94:	3501      	adds	r5, #1
 8005a96:	b2ed      	uxtb	r5, r5
 8005a98:	e7d7      	b.n	8005a4a <_scanf_float+0x192>
 8005a9a:	f1ba 0f01 	cmp.w	sl, #1
 8005a9e:	f47f af3d 	bne.w	800591c <_scanf_float+0x64>
 8005aa2:	f04f 0a02 	mov.w	sl, #2
 8005aa6:	e7d0      	b.n	8005a4a <_scanf_float+0x192>
 8005aa8:	b97d      	cbnz	r5, 8005aca <_scanf_float+0x212>
 8005aaa:	f1b9 0f00 	cmp.w	r9, #0
 8005aae:	f47f af38 	bne.w	8005922 <_scanf_float+0x6a>
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005ab8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005abc:	f040 8108 	bne.w	8005cd0 <_scanf_float+0x418>
 8005ac0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005ac4:	6022      	str	r2, [r4, #0]
 8005ac6:	2501      	movs	r5, #1
 8005ac8:	e7bf      	b.n	8005a4a <_scanf_float+0x192>
 8005aca:	2d03      	cmp	r5, #3
 8005acc:	d0e2      	beq.n	8005a94 <_scanf_float+0x1dc>
 8005ace:	2d05      	cmp	r5, #5
 8005ad0:	e7de      	b.n	8005a90 <_scanf_float+0x1d8>
 8005ad2:	2d02      	cmp	r5, #2
 8005ad4:	f47f af22 	bne.w	800591c <_scanf_float+0x64>
 8005ad8:	2503      	movs	r5, #3
 8005ada:	e7b6      	b.n	8005a4a <_scanf_float+0x192>
 8005adc:	2d06      	cmp	r5, #6
 8005ade:	f47f af1d 	bne.w	800591c <_scanf_float+0x64>
 8005ae2:	2507      	movs	r5, #7
 8005ae4:	e7b1      	b.n	8005a4a <_scanf_float+0x192>
 8005ae6:	6822      	ldr	r2, [r4, #0]
 8005ae8:	0591      	lsls	r1, r2, #22
 8005aea:	f57f af17 	bpl.w	800591c <_scanf_float+0x64>
 8005aee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005af2:	6022      	str	r2, [r4, #0]
 8005af4:	f8cd 9008 	str.w	r9, [sp, #8]
 8005af8:	e7a7      	b.n	8005a4a <_scanf_float+0x192>
 8005afa:	6822      	ldr	r2, [r4, #0]
 8005afc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005b00:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005b04:	d006      	beq.n	8005b14 <_scanf_float+0x25c>
 8005b06:	0550      	lsls	r0, r2, #21
 8005b08:	f57f af08 	bpl.w	800591c <_scanf_float+0x64>
 8005b0c:	f1b9 0f00 	cmp.w	r9, #0
 8005b10:	f000 80de 	beq.w	8005cd0 <_scanf_float+0x418>
 8005b14:	0591      	lsls	r1, r2, #22
 8005b16:	bf58      	it	pl
 8005b18:	9902      	ldrpl	r1, [sp, #8]
 8005b1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005b1e:	bf58      	it	pl
 8005b20:	eba9 0101 	subpl.w	r1, r9, r1
 8005b24:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005b28:	bf58      	it	pl
 8005b2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005b2e:	6022      	str	r2, [r4, #0]
 8005b30:	f04f 0900 	mov.w	r9, #0
 8005b34:	e789      	b.n	8005a4a <_scanf_float+0x192>
 8005b36:	f04f 0a03 	mov.w	sl, #3
 8005b3a:	e786      	b.n	8005a4a <_scanf_float+0x192>
 8005b3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005b40:	4639      	mov	r1, r7
 8005b42:	4640      	mov	r0, r8
 8005b44:	4798      	blx	r3
 8005b46:	2800      	cmp	r0, #0
 8005b48:	f43f aedb 	beq.w	8005902 <_scanf_float+0x4a>
 8005b4c:	e6e6      	b.n	800591c <_scanf_float+0x64>
 8005b4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b56:	463a      	mov	r2, r7
 8005b58:	4640      	mov	r0, r8
 8005b5a:	4798      	blx	r3
 8005b5c:	6923      	ldr	r3, [r4, #16]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	6123      	str	r3, [r4, #16]
 8005b62:	e6e8      	b.n	8005936 <_scanf_float+0x7e>
 8005b64:	1e6b      	subs	r3, r5, #1
 8005b66:	2b06      	cmp	r3, #6
 8005b68:	d824      	bhi.n	8005bb4 <_scanf_float+0x2fc>
 8005b6a:	2d02      	cmp	r5, #2
 8005b6c:	d836      	bhi.n	8005bdc <_scanf_float+0x324>
 8005b6e:	9b01      	ldr	r3, [sp, #4]
 8005b70:	429e      	cmp	r6, r3
 8005b72:	f67f aee4 	bls.w	800593e <_scanf_float+0x86>
 8005b76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b7e:	463a      	mov	r2, r7
 8005b80:	4640      	mov	r0, r8
 8005b82:	4798      	blx	r3
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	6123      	str	r3, [r4, #16]
 8005b8a:	e7f0      	b.n	8005b6e <_scanf_float+0x2b6>
 8005b8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b90:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005b94:	463a      	mov	r2, r7
 8005b96:	4640      	mov	r0, r8
 8005b98:	4798      	blx	r3
 8005b9a:	6923      	ldr	r3, [r4, #16]
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	6123      	str	r3, [r4, #16]
 8005ba0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ba4:	fa5f fa8a 	uxtb.w	sl, sl
 8005ba8:	f1ba 0f02 	cmp.w	sl, #2
 8005bac:	d1ee      	bne.n	8005b8c <_scanf_float+0x2d4>
 8005bae:	3d03      	subs	r5, #3
 8005bb0:	b2ed      	uxtb	r5, r5
 8005bb2:	1b76      	subs	r6, r6, r5
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	05da      	lsls	r2, r3, #23
 8005bb8:	d530      	bpl.n	8005c1c <_scanf_float+0x364>
 8005bba:	055b      	lsls	r3, r3, #21
 8005bbc:	d511      	bpl.n	8005be2 <_scanf_float+0x32a>
 8005bbe:	9b01      	ldr	r3, [sp, #4]
 8005bc0:	429e      	cmp	r6, r3
 8005bc2:	f67f aebc 	bls.w	800593e <_scanf_float+0x86>
 8005bc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005bca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bce:	463a      	mov	r2, r7
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	4798      	blx	r3
 8005bd4:	6923      	ldr	r3, [r4, #16]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	6123      	str	r3, [r4, #16]
 8005bda:	e7f0      	b.n	8005bbe <_scanf_float+0x306>
 8005bdc:	46aa      	mov	sl, r5
 8005bde:	46b3      	mov	fp, r6
 8005be0:	e7de      	b.n	8005ba0 <_scanf_float+0x2e8>
 8005be2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005be6:	6923      	ldr	r3, [r4, #16]
 8005be8:	2965      	cmp	r1, #101	@ 0x65
 8005bea:	f103 33ff 	add.w	r3, r3, #4294967295
 8005bee:	f106 35ff 	add.w	r5, r6, #4294967295
 8005bf2:	6123      	str	r3, [r4, #16]
 8005bf4:	d00c      	beq.n	8005c10 <_scanf_float+0x358>
 8005bf6:	2945      	cmp	r1, #69	@ 0x45
 8005bf8:	d00a      	beq.n	8005c10 <_scanf_float+0x358>
 8005bfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005bfe:	463a      	mov	r2, r7
 8005c00:	4640      	mov	r0, r8
 8005c02:	4798      	blx	r3
 8005c04:	6923      	ldr	r3, [r4, #16]
 8005c06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	1eb5      	subs	r5, r6, #2
 8005c0e:	6123      	str	r3, [r4, #16]
 8005c10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c14:	463a      	mov	r2, r7
 8005c16:	4640      	mov	r0, r8
 8005c18:	4798      	blx	r3
 8005c1a:	462e      	mov	r6, r5
 8005c1c:	6822      	ldr	r2, [r4, #0]
 8005c1e:	f012 0210 	ands.w	r2, r2, #16
 8005c22:	d001      	beq.n	8005c28 <_scanf_float+0x370>
 8005c24:	2000      	movs	r0, #0
 8005c26:	e68b      	b.n	8005940 <_scanf_float+0x88>
 8005c28:	7032      	strb	r2, [r6, #0]
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c34:	d11c      	bne.n	8005c70 <_scanf_float+0x3b8>
 8005c36:	9b02      	ldr	r3, [sp, #8]
 8005c38:	454b      	cmp	r3, r9
 8005c3a:	eba3 0209 	sub.w	r2, r3, r9
 8005c3e:	d123      	bne.n	8005c88 <_scanf_float+0x3d0>
 8005c40:	9901      	ldr	r1, [sp, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	4640      	mov	r0, r8
 8005c46:	f002 fc2b 	bl	80084a0 <_strtod_r>
 8005c4a:	9b03      	ldr	r3, [sp, #12]
 8005c4c:	6821      	ldr	r1, [r4, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f011 0f02 	tst.w	r1, #2
 8005c54:	ec57 6b10 	vmov	r6, r7, d0
 8005c58:	f103 0204 	add.w	r2, r3, #4
 8005c5c:	d01f      	beq.n	8005c9e <_scanf_float+0x3e6>
 8005c5e:	9903      	ldr	r1, [sp, #12]
 8005c60:	600a      	str	r2, [r1, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	e9c3 6700 	strd	r6, r7, [r3]
 8005c68:	68e3      	ldr	r3, [r4, #12]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	60e3      	str	r3, [r4, #12]
 8005c6e:	e7d9      	b.n	8005c24 <_scanf_float+0x36c>
 8005c70:	9b04      	ldr	r3, [sp, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0e4      	beq.n	8005c40 <_scanf_float+0x388>
 8005c76:	9905      	ldr	r1, [sp, #20]
 8005c78:	230a      	movs	r3, #10
 8005c7a:	3101      	adds	r1, #1
 8005c7c:	4640      	mov	r0, r8
 8005c7e:	f002 fc8f 	bl	80085a0 <_strtol_r>
 8005c82:	9b04      	ldr	r3, [sp, #16]
 8005c84:	9e05      	ldr	r6, [sp, #20]
 8005c86:	1ac2      	subs	r2, r0, r3
 8005c88:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005c8c:	429e      	cmp	r6, r3
 8005c8e:	bf28      	it	cs
 8005c90:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005c94:	4910      	ldr	r1, [pc, #64]	@ (8005cd8 <_scanf_float+0x420>)
 8005c96:	4630      	mov	r0, r6
 8005c98:	f000 f918 	bl	8005ecc <siprintf>
 8005c9c:	e7d0      	b.n	8005c40 <_scanf_float+0x388>
 8005c9e:	f011 0f04 	tst.w	r1, #4
 8005ca2:	9903      	ldr	r1, [sp, #12]
 8005ca4:	600a      	str	r2, [r1, #0]
 8005ca6:	d1dc      	bne.n	8005c62 <_scanf_float+0x3aa>
 8005ca8:	681d      	ldr	r5, [r3, #0]
 8005caa:	4632      	mov	r2, r6
 8005cac:	463b      	mov	r3, r7
 8005cae:	4630      	mov	r0, r6
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	f7fa ff3b 	bl	8000b2c <__aeabi_dcmpun>
 8005cb6:	b128      	cbz	r0, 8005cc4 <_scanf_float+0x40c>
 8005cb8:	4808      	ldr	r0, [pc, #32]	@ (8005cdc <_scanf_float+0x424>)
 8005cba:	f000 f9eb 	bl	8006094 <nanf>
 8005cbe:	ed85 0a00 	vstr	s0, [r5]
 8005cc2:	e7d1      	b.n	8005c68 <_scanf_float+0x3b0>
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	4639      	mov	r1, r7
 8005cc8:	f7fa ff8e 	bl	8000be8 <__aeabi_d2f>
 8005ccc:	6028      	str	r0, [r5, #0]
 8005cce:	e7cb      	b.n	8005c68 <_scanf_float+0x3b0>
 8005cd0:	f04f 0900 	mov.w	r9, #0
 8005cd4:	e629      	b.n	800592a <_scanf_float+0x72>
 8005cd6:	bf00      	nop
 8005cd8:	080097ac 	.word	0x080097ac
 8005cdc:	08009b45 	.word	0x08009b45

08005ce0 <std>:
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	b510      	push	{r4, lr}
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	e9c0 3300 	strd	r3, r3, [r0]
 8005cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cee:	6083      	str	r3, [r0, #8]
 8005cf0:	8181      	strh	r1, [r0, #12]
 8005cf2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005cf4:	81c2      	strh	r2, [r0, #14]
 8005cf6:	6183      	str	r3, [r0, #24]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	2208      	movs	r2, #8
 8005cfc:	305c      	adds	r0, #92	@ 0x5c
 8005cfe:	f000 f948 	bl	8005f92 <memset>
 8005d02:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <std+0x58>)
 8005d04:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d06:	4b0d      	ldr	r3, [pc, #52]	@ (8005d3c <std+0x5c>)
 8005d08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d40 <std+0x60>)
 8005d0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d44 <std+0x64>)
 8005d10:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d12:	4b0d      	ldr	r3, [pc, #52]	@ (8005d48 <std+0x68>)
 8005d14:	6224      	str	r4, [r4, #32]
 8005d16:	429c      	cmp	r4, r3
 8005d18:	d006      	beq.n	8005d28 <std+0x48>
 8005d1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d1e:	4294      	cmp	r4, r2
 8005d20:	d002      	beq.n	8005d28 <std+0x48>
 8005d22:	33d0      	adds	r3, #208	@ 0xd0
 8005d24:	429c      	cmp	r4, r3
 8005d26:	d105      	bne.n	8005d34 <std+0x54>
 8005d28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d30:	f000 b9ac 	b.w	800608c <__retarget_lock_init_recursive>
 8005d34:	bd10      	pop	{r4, pc}
 8005d36:	bf00      	nop
 8005d38:	08005f0d 	.word	0x08005f0d
 8005d3c:	08005f2f 	.word	0x08005f2f
 8005d40:	08005f67 	.word	0x08005f67
 8005d44:	08005f8b 	.word	0x08005f8b
 8005d48:	200005ac 	.word	0x200005ac

08005d4c <stdio_exit_handler>:
 8005d4c:	4a02      	ldr	r2, [pc, #8]	@ (8005d58 <stdio_exit_handler+0xc>)
 8005d4e:	4903      	ldr	r1, [pc, #12]	@ (8005d5c <stdio_exit_handler+0x10>)
 8005d50:	4803      	ldr	r0, [pc, #12]	@ (8005d60 <stdio_exit_handler+0x14>)
 8005d52:	f000 b869 	b.w	8005e28 <_fwalk_sglue>
 8005d56:	bf00      	nop
 8005d58:	2000013c 	.word	0x2000013c
 8005d5c:	0800895d 	.word	0x0800895d
 8005d60:	2000014c 	.word	0x2000014c

08005d64 <cleanup_stdio>:
 8005d64:	6841      	ldr	r1, [r0, #4]
 8005d66:	4b0c      	ldr	r3, [pc, #48]	@ (8005d98 <cleanup_stdio+0x34>)
 8005d68:	4299      	cmp	r1, r3
 8005d6a:	b510      	push	{r4, lr}
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	d001      	beq.n	8005d74 <cleanup_stdio+0x10>
 8005d70:	f002 fdf4 	bl	800895c <_fflush_r>
 8005d74:	68a1      	ldr	r1, [r4, #8]
 8005d76:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <cleanup_stdio+0x38>)
 8005d78:	4299      	cmp	r1, r3
 8005d7a:	d002      	beq.n	8005d82 <cleanup_stdio+0x1e>
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f002 fded 	bl	800895c <_fflush_r>
 8005d82:	68e1      	ldr	r1, [r4, #12]
 8005d84:	4b06      	ldr	r3, [pc, #24]	@ (8005da0 <cleanup_stdio+0x3c>)
 8005d86:	4299      	cmp	r1, r3
 8005d88:	d004      	beq.n	8005d94 <cleanup_stdio+0x30>
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d90:	f002 bde4 	b.w	800895c <_fflush_r>
 8005d94:	bd10      	pop	{r4, pc}
 8005d96:	bf00      	nop
 8005d98:	200005ac 	.word	0x200005ac
 8005d9c:	20000614 	.word	0x20000614
 8005da0:	2000067c 	.word	0x2000067c

08005da4 <global_stdio_init.part.0>:
 8005da4:	b510      	push	{r4, lr}
 8005da6:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd4 <global_stdio_init.part.0+0x30>)
 8005da8:	4c0b      	ldr	r4, [pc, #44]	@ (8005dd8 <global_stdio_init.part.0+0x34>)
 8005daa:	4a0c      	ldr	r2, [pc, #48]	@ (8005ddc <global_stdio_init.part.0+0x38>)
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	4620      	mov	r0, r4
 8005db0:	2200      	movs	r2, #0
 8005db2:	2104      	movs	r1, #4
 8005db4:	f7ff ff94 	bl	8005ce0 <std>
 8005db8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	2109      	movs	r1, #9
 8005dc0:	f7ff ff8e 	bl	8005ce0 <std>
 8005dc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005dc8:	2202      	movs	r2, #2
 8005dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dce:	2112      	movs	r1, #18
 8005dd0:	f7ff bf86 	b.w	8005ce0 <std>
 8005dd4:	200006e4 	.word	0x200006e4
 8005dd8:	200005ac 	.word	0x200005ac
 8005ddc:	08005d4d 	.word	0x08005d4d

08005de0 <__sfp_lock_acquire>:
 8005de0:	4801      	ldr	r0, [pc, #4]	@ (8005de8 <__sfp_lock_acquire+0x8>)
 8005de2:	f000 b954 	b.w	800608e <__retarget_lock_acquire_recursive>
 8005de6:	bf00      	nop
 8005de8:	200006ed 	.word	0x200006ed

08005dec <__sfp_lock_release>:
 8005dec:	4801      	ldr	r0, [pc, #4]	@ (8005df4 <__sfp_lock_release+0x8>)
 8005dee:	f000 b94f 	b.w	8006090 <__retarget_lock_release_recursive>
 8005df2:	bf00      	nop
 8005df4:	200006ed 	.word	0x200006ed

08005df8 <__sinit>:
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	f7ff fff0 	bl	8005de0 <__sfp_lock_acquire>
 8005e00:	6a23      	ldr	r3, [r4, #32]
 8005e02:	b11b      	cbz	r3, 8005e0c <__sinit+0x14>
 8005e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e08:	f7ff bff0 	b.w	8005dec <__sfp_lock_release>
 8005e0c:	4b04      	ldr	r3, [pc, #16]	@ (8005e20 <__sinit+0x28>)
 8005e0e:	6223      	str	r3, [r4, #32]
 8005e10:	4b04      	ldr	r3, [pc, #16]	@ (8005e24 <__sinit+0x2c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1f5      	bne.n	8005e04 <__sinit+0xc>
 8005e18:	f7ff ffc4 	bl	8005da4 <global_stdio_init.part.0>
 8005e1c:	e7f2      	b.n	8005e04 <__sinit+0xc>
 8005e1e:	bf00      	nop
 8005e20:	08005d65 	.word	0x08005d65
 8005e24:	200006e4 	.word	0x200006e4

08005e28 <_fwalk_sglue>:
 8005e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e2c:	4607      	mov	r7, r0
 8005e2e:	4688      	mov	r8, r1
 8005e30:	4614      	mov	r4, r2
 8005e32:	2600      	movs	r6, #0
 8005e34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e38:	f1b9 0901 	subs.w	r9, r9, #1
 8005e3c:	d505      	bpl.n	8005e4a <_fwalk_sglue+0x22>
 8005e3e:	6824      	ldr	r4, [r4, #0]
 8005e40:	2c00      	cmp	r4, #0
 8005e42:	d1f7      	bne.n	8005e34 <_fwalk_sglue+0xc>
 8005e44:	4630      	mov	r0, r6
 8005e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e4a:	89ab      	ldrh	r3, [r5, #12]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d907      	bls.n	8005e60 <_fwalk_sglue+0x38>
 8005e50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e54:	3301      	adds	r3, #1
 8005e56:	d003      	beq.n	8005e60 <_fwalk_sglue+0x38>
 8005e58:	4629      	mov	r1, r5
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	47c0      	blx	r8
 8005e5e:	4306      	orrs	r6, r0
 8005e60:	3568      	adds	r5, #104	@ 0x68
 8005e62:	e7e9      	b.n	8005e38 <_fwalk_sglue+0x10>

08005e64 <sniprintf>:
 8005e64:	b40c      	push	{r2, r3}
 8005e66:	b530      	push	{r4, r5, lr}
 8005e68:	4b17      	ldr	r3, [pc, #92]	@ (8005ec8 <sniprintf+0x64>)
 8005e6a:	1e0c      	subs	r4, r1, #0
 8005e6c:	681d      	ldr	r5, [r3, #0]
 8005e6e:	b09d      	sub	sp, #116	@ 0x74
 8005e70:	da08      	bge.n	8005e84 <sniprintf+0x20>
 8005e72:	238b      	movs	r3, #139	@ 0x8b
 8005e74:	602b      	str	r3, [r5, #0]
 8005e76:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7a:	b01d      	add	sp, #116	@ 0x74
 8005e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e80:	b002      	add	sp, #8
 8005e82:	4770      	bx	lr
 8005e84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005e88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e8c:	bf14      	ite	ne
 8005e8e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e92:	4623      	moveq	r3, r4
 8005e94:	9304      	str	r3, [sp, #16]
 8005e96:	9307      	str	r3, [sp, #28]
 8005e98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e9c:	9002      	str	r0, [sp, #8]
 8005e9e:	9006      	str	r0, [sp, #24]
 8005ea0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ea4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ea6:	ab21      	add	r3, sp, #132	@ 0x84
 8005ea8:	a902      	add	r1, sp, #8
 8005eaa:	4628      	mov	r0, r5
 8005eac:	9301      	str	r3, [sp, #4]
 8005eae:	f002 fbd5 	bl	800865c <_svfiprintf_r>
 8005eb2:	1c43      	adds	r3, r0, #1
 8005eb4:	bfbc      	itt	lt
 8005eb6:	238b      	movlt	r3, #139	@ 0x8b
 8005eb8:	602b      	strlt	r3, [r5, #0]
 8005eba:	2c00      	cmp	r4, #0
 8005ebc:	d0dd      	beq.n	8005e7a <sniprintf+0x16>
 8005ebe:	9b02      	ldr	r3, [sp, #8]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
 8005ec4:	e7d9      	b.n	8005e7a <sniprintf+0x16>
 8005ec6:	bf00      	nop
 8005ec8:	20000148 	.word	0x20000148

08005ecc <siprintf>:
 8005ecc:	b40e      	push	{r1, r2, r3}
 8005ece:	b500      	push	{lr}
 8005ed0:	b09c      	sub	sp, #112	@ 0x70
 8005ed2:	ab1d      	add	r3, sp, #116	@ 0x74
 8005ed4:	9002      	str	r0, [sp, #8]
 8005ed6:	9006      	str	r0, [sp, #24]
 8005ed8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005edc:	4809      	ldr	r0, [pc, #36]	@ (8005f04 <siprintf+0x38>)
 8005ede:	9107      	str	r1, [sp, #28]
 8005ee0:	9104      	str	r1, [sp, #16]
 8005ee2:	4909      	ldr	r1, [pc, #36]	@ (8005f08 <siprintf+0x3c>)
 8005ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ee8:	9105      	str	r1, [sp, #20]
 8005eea:	6800      	ldr	r0, [r0, #0]
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	a902      	add	r1, sp, #8
 8005ef0:	f002 fbb4 	bl	800865c <_svfiprintf_r>
 8005ef4:	9b02      	ldr	r3, [sp, #8]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	b01c      	add	sp, #112	@ 0x70
 8005efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f00:	b003      	add	sp, #12
 8005f02:	4770      	bx	lr
 8005f04:	20000148 	.word	0x20000148
 8005f08:	ffff0208 	.word	0xffff0208

08005f0c <__sread>:
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	460c      	mov	r4, r1
 8005f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f14:	f000 f86c 	bl	8005ff0 <_read_r>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	bfab      	itete	ge
 8005f1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f20:	181b      	addge	r3, r3, r0
 8005f22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f26:	bfac      	ite	ge
 8005f28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f2a:	81a3      	strhlt	r3, [r4, #12]
 8005f2c:	bd10      	pop	{r4, pc}

08005f2e <__swrite>:
 8005f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f32:	461f      	mov	r7, r3
 8005f34:	898b      	ldrh	r3, [r1, #12]
 8005f36:	05db      	lsls	r3, r3, #23
 8005f38:	4605      	mov	r5, r0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	4616      	mov	r6, r2
 8005f3e:	d505      	bpl.n	8005f4c <__swrite+0x1e>
 8005f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f44:	2302      	movs	r3, #2
 8005f46:	2200      	movs	r2, #0
 8005f48:	f000 f840 	bl	8005fcc <_lseek_r>
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f56:	81a3      	strh	r3, [r4, #12]
 8005f58:	4632      	mov	r2, r6
 8005f5a:	463b      	mov	r3, r7
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f62:	f000 b857 	b.w	8006014 <_write_r>

08005f66 <__sseek>:
 8005f66:	b510      	push	{r4, lr}
 8005f68:	460c      	mov	r4, r1
 8005f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f6e:	f000 f82d 	bl	8005fcc <_lseek_r>
 8005f72:	1c43      	adds	r3, r0, #1
 8005f74:	89a3      	ldrh	r3, [r4, #12]
 8005f76:	bf15      	itete	ne
 8005f78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f82:	81a3      	strheq	r3, [r4, #12]
 8005f84:	bf18      	it	ne
 8005f86:	81a3      	strhne	r3, [r4, #12]
 8005f88:	bd10      	pop	{r4, pc}

08005f8a <__sclose>:
 8005f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f8e:	f000 b80d 	b.w	8005fac <_close_r>

08005f92 <memset>:
 8005f92:	4402      	add	r2, r0
 8005f94:	4603      	mov	r3, r0
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d100      	bne.n	8005f9c <memset+0xa>
 8005f9a:	4770      	bx	lr
 8005f9c:	f803 1b01 	strb.w	r1, [r3], #1
 8005fa0:	e7f9      	b.n	8005f96 <memset+0x4>
	...

08005fa4 <_localeconv_r>:
 8005fa4:	4800      	ldr	r0, [pc, #0]	@ (8005fa8 <_localeconv_r+0x4>)
 8005fa6:	4770      	bx	lr
 8005fa8:	20000288 	.word	0x20000288

08005fac <_close_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4d06      	ldr	r5, [pc, #24]	@ (8005fc8 <_close_r+0x1c>)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	602b      	str	r3, [r5, #0]
 8005fb8:	f7fb fdb0 	bl	8001b1c <_close>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_close_r+0x1a>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_close_r+0x1a>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	200006e8 	.word	0x200006e8

08005fcc <_lseek_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d07      	ldr	r5, [pc, #28]	@ (8005fec <_lseek_r+0x20>)
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	4608      	mov	r0, r1
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	602a      	str	r2, [r5, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f7fb fdc5 	bl	8001b6a <_lseek>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_lseek_r+0x1e>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_lseek_r+0x1e>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	200006e8 	.word	0x200006e8

08005ff0 <_read_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4d07      	ldr	r5, [pc, #28]	@ (8006010 <_read_r+0x20>)
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	4608      	mov	r0, r1
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	602a      	str	r2, [r5, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	f7fb fd53 	bl	8001aaa <_read>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d102      	bne.n	800600e <_read_r+0x1e>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	b103      	cbz	r3, 800600e <_read_r+0x1e>
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	bd38      	pop	{r3, r4, r5, pc}
 8006010:	200006e8 	.word	0x200006e8

08006014 <_write_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	4d07      	ldr	r5, [pc, #28]	@ (8006034 <_write_r+0x20>)
 8006018:	4604      	mov	r4, r0
 800601a:	4608      	mov	r0, r1
 800601c:	4611      	mov	r1, r2
 800601e:	2200      	movs	r2, #0
 8006020:	602a      	str	r2, [r5, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	f7fb fd5e 	bl	8001ae4 <_write>
 8006028:	1c43      	adds	r3, r0, #1
 800602a:	d102      	bne.n	8006032 <_write_r+0x1e>
 800602c:	682b      	ldr	r3, [r5, #0]
 800602e:	b103      	cbz	r3, 8006032 <_write_r+0x1e>
 8006030:	6023      	str	r3, [r4, #0]
 8006032:	bd38      	pop	{r3, r4, r5, pc}
 8006034:	200006e8 	.word	0x200006e8

08006038 <__errno>:
 8006038:	4b01      	ldr	r3, [pc, #4]	@ (8006040 <__errno+0x8>)
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20000148 	.word	0x20000148

08006044 <__libc_init_array>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	4d0d      	ldr	r5, [pc, #52]	@ (800607c <__libc_init_array+0x38>)
 8006048:	4c0d      	ldr	r4, [pc, #52]	@ (8006080 <__libc_init_array+0x3c>)
 800604a:	1b64      	subs	r4, r4, r5
 800604c:	10a4      	asrs	r4, r4, #2
 800604e:	2600      	movs	r6, #0
 8006050:	42a6      	cmp	r6, r4
 8006052:	d109      	bne.n	8006068 <__libc_init_array+0x24>
 8006054:	4d0b      	ldr	r5, [pc, #44]	@ (8006084 <__libc_init_array+0x40>)
 8006056:	4c0c      	ldr	r4, [pc, #48]	@ (8006088 <__libc_init_array+0x44>)
 8006058:	f003 fb70 	bl	800973c <_init>
 800605c:	1b64      	subs	r4, r4, r5
 800605e:	10a4      	asrs	r4, r4, #2
 8006060:	2600      	movs	r6, #0
 8006062:	42a6      	cmp	r6, r4
 8006064:	d105      	bne.n	8006072 <__libc_init_array+0x2e>
 8006066:	bd70      	pop	{r4, r5, r6, pc}
 8006068:	f855 3b04 	ldr.w	r3, [r5], #4
 800606c:	4798      	blx	r3
 800606e:	3601      	adds	r6, #1
 8006070:	e7ee      	b.n	8006050 <__libc_init_array+0xc>
 8006072:	f855 3b04 	ldr.w	r3, [r5], #4
 8006076:	4798      	blx	r3
 8006078:	3601      	adds	r6, #1
 800607a:	e7f2      	b.n	8006062 <__libc_init_array+0x1e>
 800607c:	08009bb0 	.word	0x08009bb0
 8006080:	08009bb0 	.word	0x08009bb0
 8006084:	08009bb0 	.word	0x08009bb0
 8006088:	08009bb4 	.word	0x08009bb4

0800608c <__retarget_lock_init_recursive>:
 800608c:	4770      	bx	lr

0800608e <__retarget_lock_acquire_recursive>:
 800608e:	4770      	bx	lr

08006090 <__retarget_lock_release_recursive>:
 8006090:	4770      	bx	lr
	...

08006094 <nanf>:
 8006094:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800609c <nanf+0x8>
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	7fc00000 	.word	0x7fc00000

080060a0 <quorem>:
 80060a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a4:	6903      	ldr	r3, [r0, #16]
 80060a6:	690c      	ldr	r4, [r1, #16]
 80060a8:	42a3      	cmp	r3, r4
 80060aa:	4607      	mov	r7, r0
 80060ac:	db7e      	blt.n	80061ac <quorem+0x10c>
 80060ae:	3c01      	subs	r4, #1
 80060b0:	f101 0814 	add.w	r8, r1, #20
 80060b4:	00a3      	lsls	r3, r4, #2
 80060b6:	f100 0514 	add.w	r5, r0, #20
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060c0:	9301      	str	r3, [sp, #4]
 80060c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060ca:	3301      	adds	r3, #1
 80060cc:	429a      	cmp	r2, r3
 80060ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80060d6:	d32e      	bcc.n	8006136 <quorem+0x96>
 80060d8:	f04f 0a00 	mov.w	sl, #0
 80060dc:	46c4      	mov	ip, r8
 80060de:	46ae      	mov	lr, r5
 80060e0:	46d3      	mov	fp, sl
 80060e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060e6:	b298      	uxth	r0, r3
 80060e8:	fb06 a000 	mla	r0, r6, r0, sl
 80060ec:	0c02      	lsrs	r2, r0, #16
 80060ee:	0c1b      	lsrs	r3, r3, #16
 80060f0:	fb06 2303 	mla	r3, r6, r3, r2
 80060f4:	f8de 2000 	ldr.w	r2, [lr]
 80060f8:	b280      	uxth	r0, r0
 80060fa:	b292      	uxth	r2, r2
 80060fc:	1a12      	subs	r2, r2, r0
 80060fe:	445a      	add	r2, fp
 8006100:	f8de 0000 	ldr.w	r0, [lr]
 8006104:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006108:	b29b      	uxth	r3, r3
 800610a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800610e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006112:	b292      	uxth	r2, r2
 8006114:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006118:	45e1      	cmp	r9, ip
 800611a:	f84e 2b04 	str.w	r2, [lr], #4
 800611e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006122:	d2de      	bcs.n	80060e2 <quorem+0x42>
 8006124:	9b00      	ldr	r3, [sp, #0]
 8006126:	58eb      	ldr	r3, [r5, r3]
 8006128:	b92b      	cbnz	r3, 8006136 <quorem+0x96>
 800612a:	9b01      	ldr	r3, [sp, #4]
 800612c:	3b04      	subs	r3, #4
 800612e:	429d      	cmp	r5, r3
 8006130:	461a      	mov	r2, r3
 8006132:	d32f      	bcc.n	8006194 <quorem+0xf4>
 8006134:	613c      	str	r4, [r7, #16]
 8006136:	4638      	mov	r0, r7
 8006138:	f001 f9c2 	bl	80074c0 <__mcmp>
 800613c:	2800      	cmp	r0, #0
 800613e:	db25      	blt.n	800618c <quorem+0xec>
 8006140:	4629      	mov	r1, r5
 8006142:	2000      	movs	r0, #0
 8006144:	f858 2b04 	ldr.w	r2, [r8], #4
 8006148:	f8d1 c000 	ldr.w	ip, [r1]
 800614c:	fa1f fe82 	uxth.w	lr, r2
 8006150:	fa1f f38c 	uxth.w	r3, ip
 8006154:	eba3 030e 	sub.w	r3, r3, lr
 8006158:	4403      	add	r3, r0
 800615a:	0c12      	lsrs	r2, r2, #16
 800615c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006160:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006164:	b29b      	uxth	r3, r3
 8006166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800616a:	45c1      	cmp	r9, r8
 800616c:	f841 3b04 	str.w	r3, [r1], #4
 8006170:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006174:	d2e6      	bcs.n	8006144 <quorem+0xa4>
 8006176:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800617a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800617e:	b922      	cbnz	r2, 800618a <quorem+0xea>
 8006180:	3b04      	subs	r3, #4
 8006182:	429d      	cmp	r5, r3
 8006184:	461a      	mov	r2, r3
 8006186:	d30b      	bcc.n	80061a0 <quorem+0x100>
 8006188:	613c      	str	r4, [r7, #16]
 800618a:	3601      	adds	r6, #1
 800618c:	4630      	mov	r0, r6
 800618e:	b003      	add	sp, #12
 8006190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006194:	6812      	ldr	r2, [r2, #0]
 8006196:	3b04      	subs	r3, #4
 8006198:	2a00      	cmp	r2, #0
 800619a:	d1cb      	bne.n	8006134 <quorem+0x94>
 800619c:	3c01      	subs	r4, #1
 800619e:	e7c6      	b.n	800612e <quorem+0x8e>
 80061a0:	6812      	ldr	r2, [r2, #0]
 80061a2:	3b04      	subs	r3, #4
 80061a4:	2a00      	cmp	r2, #0
 80061a6:	d1ef      	bne.n	8006188 <quorem+0xe8>
 80061a8:	3c01      	subs	r4, #1
 80061aa:	e7ea      	b.n	8006182 <quorem+0xe2>
 80061ac:	2000      	movs	r0, #0
 80061ae:	e7ee      	b.n	800618e <quorem+0xee>

080061b0 <_dtoa_r>:
 80061b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b4:	69c7      	ldr	r7, [r0, #28]
 80061b6:	b099      	sub	sp, #100	@ 0x64
 80061b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80061bc:	ec55 4b10 	vmov	r4, r5, d0
 80061c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80061c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80061c4:	4683      	mov	fp, r0
 80061c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80061c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80061ca:	b97f      	cbnz	r7, 80061ec <_dtoa_r+0x3c>
 80061cc:	2010      	movs	r0, #16
 80061ce:	f000 fdfd 	bl	8006dcc <malloc>
 80061d2:	4602      	mov	r2, r0
 80061d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80061d8:	b920      	cbnz	r0, 80061e4 <_dtoa_r+0x34>
 80061da:	4ba7      	ldr	r3, [pc, #668]	@ (8006478 <_dtoa_r+0x2c8>)
 80061dc:	21ef      	movs	r1, #239	@ 0xef
 80061de:	48a7      	ldr	r0, [pc, #668]	@ (800647c <_dtoa_r+0x2cc>)
 80061e0:	f002 fc36 	bl	8008a50 <__assert_func>
 80061e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80061e8:	6007      	str	r7, [r0, #0]
 80061ea:	60c7      	str	r7, [r0, #12]
 80061ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061f0:	6819      	ldr	r1, [r3, #0]
 80061f2:	b159      	cbz	r1, 800620c <_dtoa_r+0x5c>
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	604a      	str	r2, [r1, #4]
 80061f8:	2301      	movs	r3, #1
 80061fa:	4093      	lsls	r3, r2
 80061fc:	608b      	str	r3, [r1, #8]
 80061fe:	4658      	mov	r0, fp
 8006200:	f000 feda 	bl	8006fb8 <_Bfree>
 8006204:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	1e2b      	subs	r3, r5, #0
 800620e:	bfb9      	ittee	lt
 8006210:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006214:	9303      	strlt	r3, [sp, #12]
 8006216:	2300      	movge	r3, #0
 8006218:	6033      	strge	r3, [r6, #0]
 800621a:	9f03      	ldr	r7, [sp, #12]
 800621c:	4b98      	ldr	r3, [pc, #608]	@ (8006480 <_dtoa_r+0x2d0>)
 800621e:	bfbc      	itt	lt
 8006220:	2201      	movlt	r2, #1
 8006222:	6032      	strlt	r2, [r6, #0]
 8006224:	43bb      	bics	r3, r7
 8006226:	d112      	bne.n	800624e <_dtoa_r+0x9e>
 8006228:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800622a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006234:	4323      	orrs	r3, r4
 8006236:	f000 854d 	beq.w	8006cd4 <_dtoa_r+0xb24>
 800623a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800623c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006494 <_dtoa_r+0x2e4>
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 854f 	beq.w	8006ce4 <_dtoa_r+0xb34>
 8006246:	f10a 0303 	add.w	r3, sl, #3
 800624a:	f000 bd49 	b.w	8006ce0 <_dtoa_r+0xb30>
 800624e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006252:	2200      	movs	r2, #0
 8006254:	ec51 0b17 	vmov	r0, r1, d7
 8006258:	2300      	movs	r3, #0
 800625a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800625e:	f7fa fc33 	bl	8000ac8 <__aeabi_dcmpeq>
 8006262:	4680      	mov	r8, r0
 8006264:	b158      	cbz	r0, 800627e <_dtoa_r+0xce>
 8006266:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006268:	2301      	movs	r3, #1
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800626e:	b113      	cbz	r3, 8006276 <_dtoa_r+0xc6>
 8006270:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006272:	4b84      	ldr	r3, [pc, #528]	@ (8006484 <_dtoa_r+0x2d4>)
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006498 <_dtoa_r+0x2e8>
 800627a:	f000 bd33 	b.w	8006ce4 <_dtoa_r+0xb34>
 800627e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006282:	aa16      	add	r2, sp, #88	@ 0x58
 8006284:	a917      	add	r1, sp, #92	@ 0x5c
 8006286:	4658      	mov	r0, fp
 8006288:	f001 fa3a 	bl	8007700 <__d2b>
 800628c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006290:	4681      	mov	r9, r0
 8006292:	2e00      	cmp	r6, #0
 8006294:	d077      	beq.n	8006386 <_dtoa_r+0x1d6>
 8006296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006298:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800629c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062b0:	4619      	mov	r1, r3
 80062b2:	2200      	movs	r2, #0
 80062b4:	4b74      	ldr	r3, [pc, #464]	@ (8006488 <_dtoa_r+0x2d8>)
 80062b6:	f7f9 ffe7 	bl	8000288 <__aeabi_dsub>
 80062ba:	a369      	add	r3, pc, #420	@ (adr r3, 8006460 <_dtoa_r+0x2b0>)
 80062bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c0:	f7fa f99a 	bl	80005f8 <__aeabi_dmul>
 80062c4:	a368      	add	r3, pc, #416	@ (adr r3, 8006468 <_dtoa_r+0x2b8>)
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	f7f9 ffdf 	bl	800028c <__adddf3>
 80062ce:	4604      	mov	r4, r0
 80062d0:	4630      	mov	r0, r6
 80062d2:	460d      	mov	r5, r1
 80062d4:	f7fa f926 	bl	8000524 <__aeabi_i2d>
 80062d8:	a365      	add	r3, pc, #404	@ (adr r3, 8006470 <_dtoa_r+0x2c0>)
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	f7fa f98b 	bl	80005f8 <__aeabi_dmul>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4620      	mov	r0, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	f7f9 ffcf 	bl	800028c <__adddf3>
 80062ee:	4604      	mov	r4, r0
 80062f0:	460d      	mov	r5, r1
 80062f2:	f7fa fc31 	bl	8000b58 <__aeabi_d2iz>
 80062f6:	2200      	movs	r2, #0
 80062f8:	4607      	mov	r7, r0
 80062fa:	2300      	movs	r3, #0
 80062fc:	4620      	mov	r0, r4
 80062fe:	4629      	mov	r1, r5
 8006300:	f7fa fbec 	bl	8000adc <__aeabi_dcmplt>
 8006304:	b140      	cbz	r0, 8006318 <_dtoa_r+0x168>
 8006306:	4638      	mov	r0, r7
 8006308:	f7fa f90c 	bl	8000524 <__aeabi_i2d>
 800630c:	4622      	mov	r2, r4
 800630e:	462b      	mov	r3, r5
 8006310:	f7fa fbda 	bl	8000ac8 <__aeabi_dcmpeq>
 8006314:	b900      	cbnz	r0, 8006318 <_dtoa_r+0x168>
 8006316:	3f01      	subs	r7, #1
 8006318:	2f16      	cmp	r7, #22
 800631a:	d851      	bhi.n	80063c0 <_dtoa_r+0x210>
 800631c:	4b5b      	ldr	r3, [pc, #364]	@ (800648c <_dtoa_r+0x2dc>)
 800631e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800632a:	f7fa fbd7 	bl	8000adc <__aeabi_dcmplt>
 800632e:	2800      	cmp	r0, #0
 8006330:	d048      	beq.n	80063c4 <_dtoa_r+0x214>
 8006332:	3f01      	subs	r7, #1
 8006334:	2300      	movs	r3, #0
 8006336:	9312      	str	r3, [sp, #72]	@ 0x48
 8006338:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800633a:	1b9b      	subs	r3, r3, r6
 800633c:	1e5a      	subs	r2, r3, #1
 800633e:	bf44      	itt	mi
 8006340:	f1c3 0801 	rsbmi	r8, r3, #1
 8006344:	2300      	movmi	r3, #0
 8006346:	9208      	str	r2, [sp, #32]
 8006348:	bf54      	ite	pl
 800634a:	f04f 0800 	movpl.w	r8, #0
 800634e:	9308      	strmi	r3, [sp, #32]
 8006350:	2f00      	cmp	r7, #0
 8006352:	db39      	blt.n	80063c8 <_dtoa_r+0x218>
 8006354:	9b08      	ldr	r3, [sp, #32]
 8006356:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006358:	443b      	add	r3, r7
 800635a:	9308      	str	r3, [sp, #32]
 800635c:	2300      	movs	r3, #0
 800635e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006362:	2b09      	cmp	r3, #9
 8006364:	d864      	bhi.n	8006430 <_dtoa_r+0x280>
 8006366:	2b05      	cmp	r3, #5
 8006368:	bfc4      	itt	gt
 800636a:	3b04      	subgt	r3, #4
 800636c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800636e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006370:	f1a3 0302 	sub.w	r3, r3, #2
 8006374:	bfcc      	ite	gt
 8006376:	2400      	movgt	r4, #0
 8006378:	2401      	movle	r4, #1
 800637a:	2b03      	cmp	r3, #3
 800637c:	d863      	bhi.n	8006446 <_dtoa_r+0x296>
 800637e:	e8df f003 	tbb	[pc, r3]
 8006382:	372a      	.short	0x372a
 8006384:	5535      	.short	0x5535
 8006386:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800638a:	441e      	add	r6, r3
 800638c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006390:	2b20      	cmp	r3, #32
 8006392:	bfc1      	itttt	gt
 8006394:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006398:	409f      	lslgt	r7, r3
 800639a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800639e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063a2:	bfd6      	itet	le
 80063a4:	f1c3 0320 	rsble	r3, r3, #32
 80063a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80063ac:	fa04 f003 	lslle.w	r0, r4, r3
 80063b0:	f7fa f8a8 	bl	8000504 <__aeabi_ui2d>
 80063b4:	2201      	movs	r2, #1
 80063b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063ba:	3e01      	subs	r6, #1
 80063bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80063be:	e777      	b.n	80062b0 <_dtoa_r+0x100>
 80063c0:	2301      	movs	r3, #1
 80063c2:	e7b8      	b.n	8006336 <_dtoa_r+0x186>
 80063c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80063c6:	e7b7      	b.n	8006338 <_dtoa_r+0x188>
 80063c8:	427b      	negs	r3, r7
 80063ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80063cc:	2300      	movs	r3, #0
 80063ce:	eba8 0807 	sub.w	r8, r8, r7
 80063d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80063d4:	e7c4      	b.n	8006360 <_dtoa_r+0x1b0>
 80063d6:	2300      	movs	r3, #0
 80063d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063dc:	2b00      	cmp	r3, #0
 80063de:	dc35      	bgt.n	800644c <_dtoa_r+0x29c>
 80063e0:	2301      	movs	r3, #1
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	9307      	str	r3, [sp, #28]
 80063e6:	461a      	mov	r2, r3
 80063e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80063ea:	e00b      	b.n	8006404 <_dtoa_r+0x254>
 80063ec:	2301      	movs	r3, #1
 80063ee:	e7f3      	b.n	80063d8 <_dtoa_r+0x228>
 80063f0:	2300      	movs	r3, #0
 80063f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063f6:	18fb      	adds	r3, r7, r3
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	3301      	adds	r3, #1
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	9307      	str	r3, [sp, #28]
 8006400:	bfb8      	it	lt
 8006402:	2301      	movlt	r3, #1
 8006404:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006408:	2100      	movs	r1, #0
 800640a:	2204      	movs	r2, #4
 800640c:	f102 0514 	add.w	r5, r2, #20
 8006410:	429d      	cmp	r5, r3
 8006412:	d91f      	bls.n	8006454 <_dtoa_r+0x2a4>
 8006414:	6041      	str	r1, [r0, #4]
 8006416:	4658      	mov	r0, fp
 8006418:	f000 fd8e 	bl	8006f38 <_Balloc>
 800641c:	4682      	mov	sl, r0
 800641e:	2800      	cmp	r0, #0
 8006420:	d13c      	bne.n	800649c <_dtoa_r+0x2ec>
 8006422:	4b1b      	ldr	r3, [pc, #108]	@ (8006490 <_dtoa_r+0x2e0>)
 8006424:	4602      	mov	r2, r0
 8006426:	f240 11af 	movw	r1, #431	@ 0x1af
 800642a:	e6d8      	b.n	80061de <_dtoa_r+0x2e>
 800642c:	2301      	movs	r3, #1
 800642e:	e7e0      	b.n	80063f2 <_dtoa_r+0x242>
 8006430:	2401      	movs	r4, #1
 8006432:	2300      	movs	r3, #0
 8006434:	9309      	str	r3, [sp, #36]	@ 0x24
 8006436:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006438:	f04f 33ff 	mov.w	r3, #4294967295
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	9307      	str	r3, [sp, #28]
 8006440:	2200      	movs	r2, #0
 8006442:	2312      	movs	r3, #18
 8006444:	e7d0      	b.n	80063e8 <_dtoa_r+0x238>
 8006446:	2301      	movs	r3, #1
 8006448:	930b      	str	r3, [sp, #44]	@ 0x2c
 800644a:	e7f5      	b.n	8006438 <_dtoa_r+0x288>
 800644c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	9307      	str	r3, [sp, #28]
 8006452:	e7d7      	b.n	8006404 <_dtoa_r+0x254>
 8006454:	3101      	adds	r1, #1
 8006456:	0052      	lsls	r2, r2, #1
 8006458:	e7d8      	b.n	800640c <_dtoa_r+0x25c>
 800645a:	bf00      	nop
 800645c:	f3af 8000 	nop.w
 8006460:	636f4361 	.word	0x636f4361
 8006464:	3fd287a7 	.word	0x3fd287a7
 8006468:	8b60c8b3 	.word	0x8b60c8b3
 800646c:	3fc68a28 	.word	0x3fc68a28
 8006470:	509f79fb 	.word	0x509f79fb
 8006474:	3fd34413 	.word	0x3fd34413
 8006478:	080097be 	.word	0x080097be
 800647c:	080097d5 	.word	0x080097d5
 8006480:	7ff00000 	.word	0x7ff00000
 8006484:	08009789 	.word	0x08009789
 8006488:	3ff80000 	.word	0x3ff80000
 800648c:	080098d0 	.word	0x080098d0
 8006490:	0800982d 	.word	0x0800982d
 8006494:	080097ba 	.word	0x080097ba
 8006498:	08009788 	.word	0x08009788
 800649c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064a0:	6018      	str	r0, [r3, #0]
 80064a2:	9b07      	ldr	r3, [sp, #28]
 80064a4:	2b0e      	cmp	r3, #14
 80064a6:	f200 80a4 	bhi.w	80065f2 <_dtoa_r+0x442>
 80064aa:	2c00      	cmp	r4, #0
 80064ac:	f000 80a1 	beq.w	80065f2 <_dtoa_r+0x442>
 80064b0:	2f00      	cmp	r7, #0
 80064b2:	dd33      	ble.n	800651c <_dtoa_r+0x36c>
 80064b4:	4bad      	ldr	r3, [pc, #692]	@ (800676c <_dtoa_r+0x5bc>)
 80064b6:	f007 020f 	and.w	r2, r7, #15
 80064ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064be:	ed93 7b00 	vldr	d7, [r3]
 80064c2:	05f8      	lsls	r0, r7, #23
 80064c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80064c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064cc:	d516      	bpl.n	80064fc <_dtoa_r+0x34c>
 80064ce:	4ba8      	ldr	r3, [pc, #672]	@ (8006770 <_dtoa_r+0x5c0>)
 80064d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064d8:	f7fa f9b8 	bl	800084c <__aeabi_ddiv>
 80064dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064e0:	f004 040f 	and.w	r4, r4, #15
 80064e4:	2603      	movs	r6, #3
 80064e6:	4da2      	ldr	r5, [pc, #648]	@ (8006770 <_dtoa_r+0x5c0>)
 80064e8:	b954      	cbnz	r4, 8006500 <_dtoa_r+0x350>
 80064ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064f2:	f7fa f9ab 	bl	800084c <__aeabi_ddiv>
 80064f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064fa:	e028      	b.n	800654e <_dtoa_r+0x39e>
 80064fc:	2602      	movs	r6, #2
 80064fe:	e7f2      	b.n	80064e6 <_dtoa_r+0x336>
 8006500:	07e1      	lsls	r1, r4, #31
 8006502:	d508      	bpl.n	8006516 <_dtoa_r+0x366>
 8006504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006508:	e9d5 2300 	ldrd	r2, r3, [r5]
 800650c:	f7fa f874 	bl	80005f8 <__aeabi_dmul>
 8006510:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006514:	3601      	adds	r6, #1
 8006516:	1064      	asrs	r4, r4, #1
 8006518:	3508      	adds	r5, #8
 800651a:	e7e5      	b.n	80064e8 <_dtoa_r+0x338>
 800651c:	f000 80d2 	beq.w	80066c4 <_dtoa_r+0x514>
 8006520:	427c      	negs	r4, r7
 8006522:	4b92      	ldr	r3, [pc, #584]	@ (800676c <_dtoa_r+0x5bc>)
 8006524:	4d92      	ldr	r5, [pc, #584]	@ (8006770 <_dtoa_r+0x5c0>)
 8006526:	f004 020f 	and.w	r2, r4, #15
 800652a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006532:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006536:	f7fa f85f 	bl	80005f8 <__aeabi_dmul>
 800653a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800653e:	1124      	asrs	r4, r4, #4
 8006540:	2300      	movs	r3, #0
 8006542:	2602      	movs	r6, #2
 8006544:	2c00      	cmp	r4, #0
 8006546:	f040 80b2 	bne.w	80066ae <_dtoa_r+0x4fe>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1d3      	bne.n	80064f6 <_dtoa_r+0x346>
 800654e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006550:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 80b7 	beq.w	80066c8 <_dtoa_r+0x518>
 800655a:	4b86      	ldr	r3, [pc, #536]	@ (8006774 <_dtoa_r+0x5c4>)
 800655c:	2200      	movs	r2, #0
 800655e:	4620      	mov	r0, r4
 8006560:	4629      	mov	r1, r5
 8006562:	f7fa fabb 	bl	8000adc <__aeabi_dcmplt>
 8006566:	2800      	cmp	r0, #0
 8006568:	f000 80ae 	beq.w	80066c8 <_dtoa_r+0x518>
 800656c:	9b07      	ldr	r3, [sp, #28]
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 80aa 	beq.w	80066c8 <_dtoa_r+0x518>
 8006574:	9b00      	ldr	r3, [sp, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	dd37      	ble.n	80065ea <_dtoa_r+0x43a>
 800657a:	1e7b      	subs	r3, r7, #1
 800657c:	9304      	str	r3, [sp, #16]
 800657e:	4620      	mov	r0, r4
 8006580:	4b7d      	ldr	r3, [pc, #500]	@ (8006778 <_dtoa_r+0x5c8>)
 8006582:	2200      	movs	r2, #0
 8006584:	4629      	mov	r1, r5
 8006586:	f7fa f837 	bl	80005f8 <__aeabi_dmul>
 800658a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800658e:	9c00      	ldr	r4, [sp, #0]
 8006590:	3601      	adds	r6, #1
 8006592:	4630      	mov	r0, r6
 8006594:	f7f9 ffc6 	bl	8000524 <__aeabi_i2d>
 8006598:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800659c:	f7fa f82c 	bl	80005f8 <__aeabi_dmul>
 80065a0:	4b76      	ldr	r3, [pc, #472]	@ (800677c <_dtoa_r+0x5cc>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	f7f9 fe72 	bl	800028c <__adddf3>
 80065a8:	4605      	mov	r5, r0
 80065aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80065ae:	2c00      	cmp	r4, #0
 80065b0:	f040 808d 	bne.w	80066ce <_dtoa_r+0x51e>
 80065b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065b8:	4b71      	ldr	r3, [pc, #452]	@ (8006780 <_dtoa_r+0x5d0>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	f7f9 fe64 	bl	8000288 <__aeabi_dsub>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065c8:	462a      	mov	r2, r5
 80065ca:	4633      	mov	r3, r6
 80065cc:	f7fa faa4 	bl	8000b18 <__aeabi_dcmpgt>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	f040 828b 	bne.w	8006aec <_dtoa_r+0x93c>
 80065d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065da:	462a      	mov	r2, r5
 80065dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80065e0:	f7fa fa7c 	bl	8000adc <__aeabi_dcmplt>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	f040 8128 	bne.w	800683a <_dtoa_r+0x68a>
 80065ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80065ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80065f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f2c0 815a 	blt.w	80068ae <_dtoa_r+0x6fe>
 80065fa:	2f0e      	cmp	r7, #14
 80065fc:	f300 8157 	bgt.w	80068ae <_dtoa_r+0x6fe>
 8006600:	4b5a      	ldr	r3, [pc, #360]	@ (800676c <_dtoa_r+0x5bc>)
 8006602:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006606:	ed93 7b00 	vldr	d7, [r3]
 800660a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800660c:	2b00      	cmp	r3, #0
 800660e:	ed8d 7b00 	vstr	d7, [sp]
 8006612:	da03      	bge.n	800661c <_dtoa_r+0x46c>
 8006614:	9b07      	ldr	r3, [sp, #28]
 8006616:	2b00      	cmp	r3, #0
 8006618:	f340 8101 	ble.w	800681e <_dtoa_r+0x66e>
 800661c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006620:	4656      	mov	r6, sl
 8006622:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006626:	4620      	mov	r0, r4
 8006628:	4629      	mov	r1, r5
 800662a:	f7fa f90f 	bl	800084c <__aeabi_ddiv>
 800662e:	f7fa fa93 	bl	8000b58 <__aeabi_d2iz>
 8006632:	4680      	mov	r8, r0
 8006634:	f7f9 ff76 	bl	8000524 <__aeabi_i2d>
 8006638:	e9dd 2300 	ldrd	r2, r3, [sp]
 800663c:	f7f9 ffdc 	bl	80005f8 <__aeabi_dmul>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4620      	mov	r0, r4
 8006646:	4629      	mov	r1, r5
 8006648:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800664c:	f7f9 fe1c 	bl	8000288 <__aeabi_dsub>
 8006650:	f806 4b01 	strb.w	r4, [r6], #1
 8006654:	9d07      	ldr	r5, [sp, #28]
 8006656:	eba6 040a 	sub.w	r4, r6, sl
 800665a:	42a5      	cmp	r5, r4
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	f040 8117 	bne.w	8006892 <_dtoa_r+0x6e2>
 8006664:	f7f9 fe12 	bl	800028c <__adddf3>
 8006668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800666c:	4604      	mov	r4, r0
 800666e:	460d      	mov	r5, r1
 8006670:	f7fa fa52 	bl	8000b18 <__aeabi_dcmpgt>
 8006674:	2800      	cmp	r0, #0
 8006676:	f040 80f9 	bne.w	800686c <_dtoa_r+0x6bc>
 800667a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800667e:	4620      	mov	r0, r4
 8006680:	4629      	mov	r1, r5
 8006682:	f7fa fa21 	bl	8000ac8 <__aeabi_dcmpeq>
 8006686:	b118      	cbz	r0, 8006690 <_dtoa_r+0x4e0>
 8006688:	f018 0f01 	tst.w	r8, #1
 800668c:	f040 80ee 	bne.w	800686c <_dtoa_r+0x6bc>
 8006690:	4649      	mov	r1, r9
 8006692:	4658      	mov	r0, fp
 8006694:	f000 fc90 	bl	8006fb8 <_Bfree>
 8006698:	2300      	movs	r3, #0
 800669a:	7033      	strb	r3, [r6, #0]
 800669c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800669e:	3701      	adds	r7, #1
 80066a0:	601f      	str	r7, [r3, #0]
 80066a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 831d 	beq.w	8006ce4 <_dtoa_r+0xb34>
 80066aa:	601e      	str	r6, [r3, #0]
 80066ac:	e31a      	b.n	8006ce4 <_dtoa_r+0xb34>
 80066ae:	07e2      	lsls	r2, r4, #31
 80066b0:	d505      	bpl.n	80066be <_dtoa_r+0x50e>
 80066b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066b6:	f7f9 ff9f 	bl	80005f8 <__aeabi_dmul>
 80066ba:	3601      	adds	r6, #1
 80066bc:	2301      	movs	r3, #1
 80066be:	1064      	asrs	r4, r4, #1
 80066c0:	3508      	adds	r5, #8
 80066c2:	e73f      	b.n	8006544 <_dtoa_r+0x394>
 80066c4:	2602      	movs	r6, #2
 80066c6:	e742      	b.n	800654e <_dtoa_r+0x39e>
 80066c8:	9c07      	ldr	r4, [sp, #28]
 80066ca:	9704      	str	r7, [sp, #16]
 80066cc:	e761      	b.n	8006592 <_dtoa_r+0x3e2>
 80066ce:	4b27      	ldr	r3, [pc, #156]	@ (800676c <_dtoa_r+0x5bc>)
 80066d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066da:	4454      	add	r4, sl
 80066dc:	2900      	cmp	r1, #0
 80066de:	d053      	beq.n	8006788 <_dtoa_r+0x5d8>
 80066e0:	4928      	ldr	r1, [pc, #160]	@ (8006784 <_dtoa_r+0x5d4>)
 80066e2:	2000      	movs	r0, #0
 80066e4:	f7fa f8b2 	bl	800084c <__aeabi_ddiv>
 80066e8:	4633      	mov	r3, r6
 80066ea:	462a      	mov	r2, r5
 80066ec:	f7f9 fdcc 	bl	8000288 <__aeabi_dsub>
 80066f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066f4:	4656      	mov	r6, sl
 80066f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066fa:	f7fa fa2d 	bl	8000b58 <__aeabi_d2iz>
 80066fe:	4605      	mov	r5, r0
 8006700:	f7f9 ff10 	bl	8000524 <__aeabi_i2d>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800670c:	f7f9 fdbc 	bl	8000288 <__aeabi_dsub>
 8006710:	3530      	adds	r5, #48	@ 0x30
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800671a:	f806 5b01 	strb.w	r5, [r6], #1
 800671e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006722:	f7fa f9db 	bl	8000adc <__aeabi_dcmplt>
 8006726:	2800      	cmp	r0, #0
 8006728:	d171      	bne.n	800680e <_dtoa_r+0x65e>
 800672a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800672e:	4911      	ldr	r1, [pc, #68]	@ (8006774 <_dtoa_r+0x5c4>)
 8006730:	2000      	movs	r0, #0
 8006732:	f7f9 fda9 	bl	8000288 <__aeabi_dsub>
 8006736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800673a:	f7fa f9cf 	bl	8000adc <__aeabi_dcmplt>
 800673e:	2800      	cmp	r0, #0
 8006740:	f040 8095 	bne.w	800686e <_dtoa_r+0x6be>
 8006744:	42a6      	cmp	r6, r4
 8006746:	f43f af50 	beq.w	80065ea <_dtoa_r+0x43a>
 800674a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800674e:	4b0a      	ldr	r3, [pc, #40]	@ (8006778 <_dtoa_r+0x5c8>)
 8006750:	2200      	movs	r2, #0
 8006752:	f7f9 ff51 	bl	80005f8 <__aeabi_dmul>
 8006756:	4b08      	ldr	r3, [pc, #32]	@ (8006778 <_dtoa_r+0x5c8>)
 8006758:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800675c:	2200      	movs	r2, #0
 800675e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006762:	f7f9 ff49 	bl	80005f8 <__aeabi_dmul>
 8006766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800676a:	e7c4      	b.n	80066f6 <_dtoa_r+0x546>
 800676c:	080098d0 	.word	0x080098d0
 8006770:	080098a8 	.word	0x080098a8
 8006774:	3ff00000 	.word	0x3ff00000
 8006778:	40240000 	.word	0x40240000
 800677c:	401c0000 	.word	0x401c0000
 8006780:	40140000 	.word	0x40140000
 8006784:	3fe00000 	.word	0x3fe00000
 8006788:	4631      	mov	r1, r6
 800678a:	4628      	mov	r0, r5
 800678c:	f7f9 ff34 	bl	80005f8 <__aeabi_dmul>
 8006790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006794:	9415      	str	r4, [sp, #84]	@ 0x54
 8006796:	4656      	mov	r6, sl
 8006798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800679c:	f7fa f9dc 	bl	8000b58 <__aeabi_d2iz>
 80067a0:	4605      	mov	r5, r0
 80067a2:	f7f9 febf 	bl	8000524 <__aeabi_i2d>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067ae:	f7f9 fd6b 	bl	8000288 <__aeabi_dsub>
 80067b2:	3530      	adds	r5, #48	@ 0x30
 80067b4:	f806 5b01 	strb.w	r5, [r6], #1
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	42a6      	cmp	r6, r4
 80067be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067c2:	f04f 0200 	mov.w	r2, #0
 80067c6:	d124      	bne.n	8006812 <_dtoa_r+0x662>
 80067c8:	4bac      	ldr	r3, [pc, #688]	@ (8006a7c <_dtoa_r+0x8cc>)
 80067ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80067ce:	f7f9 fd5d 	bl	800028c <__adddf3>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067da:	f7fa f99d 	bl	8000b18 <__aeabi_dcmpgt>
 80067de:	2800      	cmp	r0, #0
 80067e0:	d145      	bne.n	800686e <_dtoa_r+0x6be>
 80067e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80067e6:	49a5      	ldr	r1, [pc, #660]	@ (8006a7c <_dtoa_r+0x8cc>)
 80067e8:	2000      	movs	r0, #0
 80067ea:	f7f9 fd4d 	bl	8000288 <__aeabi_dsub>
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067f6:	f7fa f971 	bl	8000adc <__aeabi_dcmplt>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	f43f aef5 	beq.w	80065ea <_dtoa_r+0x43a>
 8006800:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006802:	1e73      	subs	r3, r6, #1
 8006804:	9315      	str	r3, [sp, #84]	@ 0x54
 8006806:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800680a:	2b30      	cmp	r3, #48	@ 0x30
 800680c:	d0f8      	beq.n	8006800 <_dtoa_r+0x650>
 800680e:	9f04      	ldr	r7, [sp, #16]
 8006810:	e73e      	b.n	8006690 <_dtoa_r+0x4e0>
 8006812:	4b9b      	ldr	r3, [pc, #620]	@ (8006a80 <_dtoa_r+0x8d0>)
 8006814:	f7f9 fef0 	bl	80005f8 <__aeabi_dmul>
 8006818:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800681c:	e7bc      	b.n	8006798 <_dtoa_r+0x5e8>
 800681e:	d10c      	bne.n	800683a <_dtoa_r+0x68a>
 8006820:	4b98      	ldr	r3, [pc, #608]	@ (8006a84 <_dtoa_r+0x8d4>)
 8006822:	2200      	movs	r2, #0
 8006824:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006828:	f7f9 fee6 	bl	80005f8 <__aeabi_dmul>
 800682c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006830:	f7fa f968 	bl	8000b04 <__aeabi_dcmpge>
 8006834:	2800      	cmp	r0, #0
 8006836:	f000 8157 	beq.w	8006ae8 <_dtoa_r+0x938>
 800683a:	2400      	movs	r4, #0
 800683c:	4625      	mov	r5, r4
 800683e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006840:	43db      	mvns	r3, r3
 8006842:	9304      	str	r3, [sp, #16]
 8006844:	4656      	mov	r6, sl
 8006846:	2700      	movs	r7, #0
 8006848:	4621      	mov	r1, r4
 800684a:	4658      	mov	r0, fp
 800684c:	f000 fbb4 	bl	8006fb8 <_Bfree>
 8006850:	2d00      	cmp	r5, #0
 8006852:	d0dc      	beq.n	800680e <_dtoa_r+0x65e>
 8006854:	b12f      	cbz	r7, 8006862 <_dtoa_r+0x6b2>
 8006856:	42af      	cmp	r7, r5
 8006858:	d003      	beq.n	8006862 <_dtoa_r+0x6b2>
 800685a:	4639      	mov	r1, r7
 800685c:	4658      	mov	r0, fp
 800685e:	f000 fbab 	bl	8006fb8 <_Bfree>
 8006862:	4629      	mov	r1, r5
 8006864:	4658      	mov	r0, fp
 8006866:	f000 fba7 	bl	8006fb8 <_Bfree>
 800686a:	e7d0      	b.n	800680e <_dtoa_r+0x65e>
 800686c:	9704      	str	r7, [sp, #16]
 800686e:	4633      	mov	r3, r6
 8006870:	461e      	mov	r6, r3
 8006872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006876:	2a39      	cmp	r2, #57	@ 0x39
 8006878:	d107      	bne.n	800688a <_dtoa_r+0x6da>
 800687a:	459a      	cmp	sl, r3
 800687c:	d1f8      	bne.n	8006870 <_dtoa_r+0x6c0>
 800687e:	9a04      	ldr	r2, [sp, #16]
 8006880:	3201      	adds	r2, #1
 8006882:	9204      	str	r2, [sp, #16]
 8006884:	2230      	movs	r2, #48	@ 0x30
 8006886:	f88a 2000 	strb.w	r2, [sl]
 800688a:	781a      	ldrb	r2, [r3, #0]
 800688c:	3201      	adds	r2, #1
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	e7bd      	b.n	800680e <_dtoa_r+0x65e>
 8006892:	4b7b      	ldr	r3, [pc, #492]	@ (8006a80 <_dtoa_r+0x8d0>)
 8006894:	2200      	movs	r2, #0
 8006896:	f7f9 feaf 	bl	80005f8 <__aeabi_dmul>
 800689a:	2200      	movs	r2, #0
 800689c:	2300      	movs	r3, #0
 800689e:	4604      	mov	r4, r0
 80068a0:	460d      	mov	r5, r1
 80068a2:	f7fa f911 	bl	8000ac8 <__aeabi_dcmpeq>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	f43f aebb 	beq.w	8006622 <_dtoa_r+0x472>
 80068ac:	e6f0      	b.n	8006690 <_dtoa_r+0x4e0>
 80068ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068b0:	2a00      	cmp	r2, #0
 80068b2:	f000 80db 	beq.w	8006a6c <_dtoa_r+0x8bc>
 80068b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068b8:	2a01      	cmp	r2, #1
 80068ba:	f300 80bf 	bgt.w	8006a3c <_dtoa_r+0x88c>
 80068be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80068c0:	2a00      	cmp	r2, #0
 80068c2:	f000 80b7 	beq.w	8006a34 <_dtoa_r+0x884>
 80068c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80068ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068cc:	4646      	mov	r6, r8
 80068ce:	9a08      	ldr	r2, [sp, #32]
 80068d0:	2101      	movs	r1, #1
 80068d2:	441a      	add	r2, r3
 80068d4:	4658      	mov	r0, fp
 80068d6:	4498      	add	r8, r3
 80068d8:	9208      	str	r2, [sp, #32]
 80068da:	f000 fc6b 	bl	80071b4 <__i2b>
 80068de:	4605      	mov	r5, r0
 80068e0:	b15e      	cbz	r6, 80068fa <_dtoa_r+0x74a>
 80068e2:	9b08      	ldr	r3, [sp, #32]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	dd08      	ble.n	80068fa <_dtoa_r+0x74a>
 80068e8:	42b3      	cmp	r3, r6
 80068ea:	9a08      	ldr	r2, [sp, #32]
 80068ec:	bfa8      	it	ge
 80068ee:	4633      	movge	r3, r6
 80068f0:	eba8 0803 	sub.w	r8, r8, r3
 80068f4:	1af6      	subs	r6, r6, r3
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	9308      	str	r3, [sp, #32]
 80068fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068fc:	b1f3      	cbz	r3, 800693c <_dtoa_r+0x78c>
 80068fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 80b7 	beq.w	8006a74 <_dtoa_r+0x8c4>
 8006906:	b18c      	cbz	r4, 800692c <_dtoa_r+0x77c>
 8006908:	4629      	mov	r1, r5
 800690a:	4622      	mov	r2, r4
 800690c:	4658      	mov	r0, fp
 800690e:	f000 fd11 	bl	8007334 <__pow5mult>
 8006912:	464a      	mov	r2, r9
 8006914:	4601      	mov	r1, r0
 8006916:	4605      	mov	r5, r0
 8006918:	4658      	mov	r0, fp
 800691a:	f000 fc61 	bl	80071e0 <__multiply>
 800691e:	4649      	mov	r1, r9
 8006920:	9004      	str	r0, [sp, #16]
 8006922:	4658      	mov	r0, fp
 8006924:	f000 fb48 	bl	8006fb8 <_Bfree>
 8006928:	9b04      	ldr	r3, [sp, #16]
 800692a:	4699      	mov	r9, r3
 800692c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800692e:	1b1a      	subs	r2, r3, r4
 8006930:	d004      	beq.n	800693c <_dtoa_r+0x78c>
 8006932:	4649      	mov	r1, r9
 8006934:	4658      	mov	r0, fp
 8006936:	f000 fcfd 	bl	8007334 <__pow5mult>
 800693a:	4681      	mov	r9, r0
 800693c:	2101      	movs	r1, #1
 800693e:	4658      	mov	r0, fp
 8006940:	f000 fc38 	bl	80071b4 <__i2b>
 8006944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006946:	4604      	mov	r4, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 81cf 	beq.w	8006cec <_dtoa_r+0xb3c>
 800694e:	461a      	mov	r2, r3
 8006950:	4601      	mov	r1, r0
 8006952:	4658      	mov	r0, fp
 8006954:	f000 fcee 	bl	8007334 <__pow5mult>
 8006958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800695a:	2b01      	cmp	r3, #1
 800695c:	4604      	mov	r4, r0
 800695e:	f300 8095 	bgt.w	8006a8c <_dtoa_r+0x8dc>
 8006962:	9b02      	ldr	r3, [sp, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	f040 8087 	bne.w	8006a78 <_dtoa_r+0x8c8>
 800696a:	9b03      	ldr	r3, [sp, #12]
 800696c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006970:	2b00      	cmp	r3, #0
 8006972:	f040 8089 	bne.w	8006a88 <_dtoa_r+0x8d8>
 8006976:	9b03      	ldr	r3, [sp, #12]
 8006978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800697c:	0d1b      	lsrs	r3, r3, #20
 800697e:	051b      	lsls	r3, r3, #20
 8006980:	b12b      	cbz	r3, 800698e <_dtoa_r+0x7de>
 8006982:	9b08      	ldr	r3, [sp, #32]
 8006984:	3301      	adds	r3, #1
 8006986:	9308      	str	r3, [sp, #32]
 8006988:	f108 0801 	add.w	r8, r8, #1
 800698c:	2301      	movs	r3, #1
 800698e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 81b0 	beq.w	8006cf8 <_dtoa_r+0xb48>
 8006998:	6923      	ldr	r3, [r4, #16]
 800699a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800699e:	6918      	ldr	r0, [r3, #16]
 80069a0:	f000 fbbc 	bl	800711c <__hi0bits>
 80069a4:	f1c0 0020 	rsb	r0, r0, #32
 80069a8:	9b08      	ldr	r3, [sp, #32]
 80069aa:	4418      	add	r0, r3
 80069ac:	f010 001f 	ands.w	r0, r0, #31
 80069b0:	d077      	beq.n	8006aa2 <_dtoa_r+0x8f2>
 80069b2:	f1c0 0320 	rsb	r3, r0, #32
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	dd6b      	ble.n	8006a92 <_dtoa_r+0x8e2>
 80069ba:	9b08      	ldr	r3, [sp, #32]
 80069bc:	f1c0 001c 	rsb	r0, r0, #28
 80069c0:	4403      	add	r3, r0
 80069c2:	4480      	add	r8, r0
 80069c4:	4406      	add	r6, r0
 80069c6:	9308      	str	r3, [sp, #32]
 80069c8:	f1b8 0f00 	cmp.w	r8, #0
 80069cc:	dd05      	ble.n	80069da <_dtoa_r+0x82a>
 80069ce:	4649      	mov	r1, r9
 80069d0:	4642      	mov	r2, r8
 80069d2:	4658      	mov	r0, fp
 80069d4:	f000 fd08 	bl	80073e8 <__lshift>
 80069d8:	4681      	mov	r9, r0
 80069da:	9b08      	ldr	r3, [sp, #32]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	dd05      	ble.n	80069ec <_dtoa_r+0x83c>
 80069e0:	4621      	mov	r1, r4
 80069e2:	461a      	mov	r2, r3
 80069e4:	4658      	mov	r0, fp
 80069e6:	f000 fcff 	bl	80073e8 <__lshift>
 80069ea:	4604      	mov	r4, r0
 80069ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d059      	beq.n	8006aa6 <_dtoa_r+0x8f6>
 80069f2:	4621      	mov	r1, r4
 80069f4:	4648      	mov	r0, r9
 80069f6:	f000 fd63 	bl	80074c0 <__mcmp>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	da53      	bge.n	8006aa6 <_dtoa_r+0x8f6>
 80069fe:	1e7b      	subs	r3, r7, #1
 8006a00:	9304      	str	r3, [sp, #16]
 8006a02:	4649      	mov	r1, r9
 8006a04:	2300      	movs	r3, #0
 8006a06:	220a      	movs	r2, #10
 8006a08:	4658      	mov	r0, fp
 8006a0a:	f000 faf7 	bl	8006ffc <__multadd>
 8006a0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a10:	4681      	mov	r9, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 8172 	beq.w	8006cfc <_dtoa_r+0xb4c>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	220a      	movs	r2, #10
 8006a1e:	4658      	mov	r0, fp
 8006a20:	f000 faec 	bl	8006ffc <__multadd>
 8006a24:	9b00      	ldr	r3, [sp, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	4605      	mov	r5, r0
 8006a2a:	dc67      	bgt.n	8006afc <_dtoa_r+0x94c>
 8006a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	dc41      	bgt.n	8006ab6 <_dtoa_r+0x906>
 8006a32:	e063      	b.n	8006afc <_dtoa_r+0x94c>
 8006a34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a3a:	e746      	b.n	80068ca <_dtoa_r+0x71a>
 8006a3c:	9b07      	ldr	r3, [sp, #28]
 8006a3e:	1e5c      	subs	r4, r3, #1
 8006a40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a42:	42a3      	cmp	r3, r4
 8006a44:	bfbf      	itttt	lt
 8006a46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006a4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a4c:	1ae3      	sublt	r3, r4, r3
 8006a4e:	bfb4      	ite	lt
 8006a50:	18d2      	addlt	r2, r2, r3
 8006a52:	1b1c      	subge	r4, r3, r4
 8006a54:	9b07      	ldr	r3, [sp, #28]
 8006a56:	bfbc      	itt	lt
 8006a58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006a5a:	2400      	movlt	r4, #0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	bfb5      	itete	lt
 8006a60:	eba8 0603 	sublt.w	r6, r8, r3
 8006a64:	9b07      	ldrge	r3, [sp, #28]
 8006a66:	2300      	movlt	r3, #0
 8006a68:	4646      	movge	r6, r8
 8006a6a:	e730      	b.n	80068ce <_dtoa_r+0x71e>
 8006a6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006a70:	4646      	mov	r6, r8
 8006a72:	e735      	b.n	80068e0 <_dtoa_r+0x730>
 8006a74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a76:	e75c      	b.n	8006932 <_dtoa_r+0x782>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e788      	b.n	800698e <_dtoa_r+0x7de>
 8006a7c:	3fe00000 	.word	0x3fe00000
 8006a80:	40240000 	.word	0x40240000
 8006a84:	40140000 	.word	0x40140000
 8006a88:	9b02      	ldr	r3, [sp, #8]
 8006a8a:	e780      	b.n	800698e <_dtoa_r+0x7de>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a90:	e782      	b.n	8006998 <_dtoa_r+0x7e8>
 8006a92:	d099      	beq.n	80069c8 <_dtoa_r+0x818>
 8006a94:	9a08      	ldr	r2, [sp, #32]
 8006a96:	331c      	adds	r3, #28
 8006a98:	441a      	add	r2, r3
 8006a9a:	4498      	add	r8, r3
 8006a9c:	441e      	add	r6, r3
 8006a9e:	9208      	str	r2, [sp, #32]
 8006aa0:	e792      	b.n	80069c8 <_dtoa_r+0x818>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	e7f6      	b.n	8006a94 <_dtoa_r+0x8e4>
 8006aa6:	9b07      	ldr	r3, [sp, #28]
 8006aa8:	9704      	str	r7, [sp, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	dc20      	bgt.n	8006af0 <_dtoa_r+0x940>
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	dd1e      	ble.n	8006af4 <_dtoa_r+0x944>
 8006ab6:	9b00      	ldr	r3, [sp, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f47f aec0 	bne.w	800683e <_dtoa_r+0x68e>
 8006abe:	4621      	mov	r1, r4
 8006ac0:	2205      	movs	r2, #5
 8006ac2:	4658      	mov	r0, fp
 8006ac4:	f000 fa9a 	bl	8006ffc <__multadd>
 8006ac8:	4601      	mov	r1, r0
 8006aca:	4604      	mov	r4, r0
 8006acc:	4648      	mov	r0, r9
 8006ace:	f000 fcf7 	bl	80074c0 <__mcmp>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	f77f aeb3 	ble.w	800683e <_dtoa_r+0x68e>
 8006ad8:	4656      	mov	r6, sl
 8006ada:	2331      	movs	r3, #49	@ 0x31
 8006adc:	f806 3b01 	strb.w	r3, [r6], #1
 8006ae0:	9b04      	ldr	r3, [sp, #16]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	9304      	str	r3, [sp, #16]
 8006ae6:	e6ae      	b.n	8006846 <_dtoa_r+0x696>
 8006ae8:	9c07      	ldr	r4, [sp, #28]
 8006aea:	9704      	str	r7, [sp, #16]
 8006aec:	4625      	mov	r5, r4
 8006aee:	e7f3      	b.n	8006ad8 <_dtoa_r+0x928>
 8006af0:	9b07      	ldr	r3, [sp, #28]
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 8104 	beq.w	8006d04 <_dtoa_r+0xb54>
 8006afc:	2e00      	cmp	r6, #0
 8006afe:	dd05      	ble.n	8006b0c <_dtoa_r+0x95c>
 8006b00:	4629      	mov	r1, r5
 8006b02:	4632      	mov	r2, r6
 8006b04:	4658      	mov	r0, fp
 8006b06:	f000 fc6f 	bl	80073e8 <__lshift>
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d05a      	beq.n	8006bc8 <_dtoa_r+0xa18>
 8006b12:	6869      	ldr	r1, [r5, #4]
 8006b14:	4658      	mov	r0, fp
 8006b16:	f000 fa0f 	bl	8006f38 <_Balloc>
 8006b1a:	4606      	mov	r6, r0
 8006b1c:	b928      	cbnz	r0, 8006b2a <_dtoa_r+0x97a>
 8006b1e:	4b84      	ldr	r3, [pc, #528]	@ (8006d30 <_dtoa_r+0xb80>)
 8006b20:	4602      	mov	r2, r0
 8006b22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b26:	f7ff bb5a 	b.w	80061de <_dtoa_r+0x2e>
 8006b2a:	692a      	ldr	r2, [r5, #16]
 8006b2c:	3202      	adds	r2, #2
 8006b2e:	0092      	lsls	r2, r2, #2
 8006b30:	f105 010c 	add.w	r1, r5, #12
 8006b34:	300c      	adds	r0, #12
 8006b36:	f001 ff75 	bl	8008a24 <memcpy>
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4658      	mov	r0, fp
 8006b40:	f000 fc52 	bl	80073e8 <__lshift>
 8006b44:	f10a 0301 	add.w	r3, sl, #1
 8006b48:	9307      	str	r3, [sp, #28]
 8006b4a:	9b00      	ldr	r3, [sp, #0]
 8006b4c:	4453      	add	r3, sl
 8006b4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b50:	9b02      	ldr	r3, [sp, #8]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	462f      	mov	r7, r5
 8006b58:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	9b07      	ldr	r3, [sp, #28]
 8006b5e:	4621      	mov	r1, r4
 8006b60:	3b01      	subs	r3, #1
 8006b62:	4648      	mov	r0, r9
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	f7ff fa9b 	bl	80060a0 <quorem>
 8006b6a:	4639      	mov	r1, r7
 8006b6c:	9002      	str	r0, [sp, #8]
 8006b6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b72:	4648      	mov	r0, r9
 8006b74:	f000 fca4 	bl	80074c0 <__mcmp>
 8006b78:	462a      	mov	r2, r5
 8006b7a:	9008      	str	r0, [sp, #32]
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	4658      	mov	r0, fp
 8006b80:	f000 fcba 	bl	80074f8 <__mdiff>
 8006b84:	68c2      	ldr	r2, [r0, #12]
 8006b86:	4606      	mov	r6, r0
 8006b88:	bb02      	cbnz	r2, 8006bcc <_dtoa_r+0xa1c>
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	4648      	mov	r0, r9
 8006b8e:	f000 fc97 	bl	80074c0 <__mcmp>
 8006b92:	4602      	mov	r2, r0
 8006b94:	4631      	mov	r1, r6
 8006b96:	4658      	mov	r0, fp
 8006b98:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b9a:	f000 fa0d 	bl	8006fb8 <_Bfree>
 8006b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ba2:	9e07      	ldr	r6, [sp, #28]
 8006ba4:	ea43 0102 	orr.w	r1, r3, r2
 8006ba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006baa:	4319      	orrs	r1, r3
 8006bac:	d110      	bne.n	8006bd0 <_dtoa_r+0xa20>
 8006bae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bb2:	d029      	beq.n	8006c08 <_dtoa_r+0xa58>
 8006bb4:	9b08      	ldr	r3, [sp, #32]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	dd02      	ble.n	8006bc0 <_dtoa_r+0xa10>
 8006bba:	9b02      	ldr	r3, [sp, #8]
 8006bbc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006bc0:	9b00      	ldr	r3, [sp, #0]
 8006bc2:	f883 8000 	strb.w	r8, [r3]
 8006bc6:	e63f      	b.n	8006848 <_dtoa_r+0x698>
 8006bc8:	4628      	mov	r0, r5
 8006bca:	e7bb      	b.n	8006b44 <_dtoa_r+0x994>
 8006bcc:	2201      	movs	r2, #1
 8006bce:	e7e1      	b.n	8006b94 <_dtoa_r+0x9e4>
 8006bd0:	9b08      	ldr	r3, [sp, #32]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	db04      	blt.n	8006be0 <_dtoa_r+0xa30>
 8006bd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bd8:	430b      	orrs	r3, r1
 8006bda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	d120      	bne.n	8006c22 <_dtoa_r+0xa72>
 8006be0:	2a00      	cmp	r2, #0
 8006be2:	dded      	ble.n	8006bc0 <_dtoa_r+0xa10>
 8006be4:	4649      	mov	r1, r9
 8006be6:	2201      	movs	r2, #1
 8006be8:	4658      	mov	r0, fp
 8006bea:	f000 fbfd 	bl	80073e8 <__lshift>
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4681      	mov	r9, r0
 8006bf2:	f000 fc65 	bl	80074c0 <__mcmp>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	dc03      	bgt.n	8006c02 <_dtoa_r+0xa52>
 8006bfa:	d1e1      	bne.n	8006bc0 <_dtoa_r+0xa10>
 8006bfc:	f018 0f01 	tst.w	r8, #1
 8006c00:	d0de      	beq.n	8006bc0 <_dtoa_r+0xa10>
 8006c02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c06:	d1d8      	bne.n	8006bba <_dtoa_r+0xa0a>
 8006c08:	9a00      	ldr	r2, [sp, #0]
 8006c0a:	2339      	movs	r3, #57	@ 0x39
 8006c0c:	7013      	strb	r3, [r2, #0]
 8006c0e:	4633      	mov	r3, r6
 8006c10:	461e      	mov	r6, r3
 8006c12:	3b01      	subs	r3, #1
 8006c14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c18:	2a39      	cmp	r2, #57	@ 0x39
 8006c1a:	d052      	beq.n	8006cc2 <_dtoa_r+0xb12>
 8006c1c:	3201      	adds	r2, #1
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	e612      	b.n	8006848 <_dtoa_r+0x698>
 8006c22:	2a00      	cmp	r2, #0
 8006c24:	dd07      	ble.n	8006c36 <_dtoa_r+0xa86>
 8006c26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c2a:	d0ed      	beq.n	8006c08 <_dtoa_r+0xa58>
 8006c2c:	9a00      	ldr	r2, [sp, #0]
 8006c2e:	f108 0301 	add.w	r3, r8, #1
 8006c32:	7013      	strb	r3, [r2, #0]
 8006c34:	e608      	b.n	8006848 <_dtoa_r+0x698>
 8006c36:	9b07      	ldr	r3, [sp, #28]
 8006c38:	9a07      	ldr	r2, [sp, #28]
 8006c3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d028      	beq.n	8006c96 <_dtoa_r+0xae6>
 8006c44:	4649      	mov	r1, r9
 8006c46:	2300      	movs	r3, #0
 8006c48:	220a      	movs	r2, #10
 8006c4a:	4658      	mov	r0, fp
 8006c4c:	f000 f9d6 	bl	8006ffc <__multadd>
 8006c50:	42af      	cmp	r7, r5
 8006c52:	4681      	mov	r9, r0
 8006c54:	f04f 0300 	mov.w	r3, #0
 8006c58:	f04f 020a 	mov.w	r2, #10
 8006c5c:	4639      	mov	r1, r7
 8006c5e:	4658      	mov	r0, fp
 8006c60:	d107      	bne.n	8006c72 <_dtoa_r+0xac2>
 8006c62:	f000 f9cb 	bl	8006ffc <__multadd>
 8006c66:	4607      	mov	r7, r0
 8006c68:	4605      	mov	r5, r0
 8006c6a:	9b07      	ldr	r3, [sp, #28]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	9307      	str	r3, [sp, #28]
 8006c70:	e774      	b.n	8006b5c <_dtoa_r+0x9ac>
 8006c72:	f000 f9c3 	bl	8006ffc <__multadd>
 8006c76:	4629      	mov	r1, r5
 8006c78:	4607      	mov	r7, r0
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	220a      	movs	r2, #10
 8006c7e:	4658      	mov	r0, fp
 8006c80:	f000 f9bc 	bl	8006ffc <__multadd>
 8006c84:	4605      	mov	r5, r0
 8006c86:	e7f0      	b.n	8006c6a <_dtoa_r+0xaba>
 8006c88:	9b00      	ldr	r3, [sp, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	bfcc      	ite	gt
 8006c8e:	461e      	movgt	r6, r3
 8006c90:	2601      	movle	r6, #1
 8006c92:	4456      	add	r6, sl
 8006c94:	2700      	movs	r7, #0
 8006c96:	4649      	mov	r1, r9
 8006c98:	2201      	movs	r2, #1
 8006c9a:	4658      	mov	r0, fp
 8006c9c:	f000 fba4 	bl	80073e8 <__lshift>
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	4681      	mov	r9, r0
 8006ca4:	f000 fc0c 	bl	80074c0 <__mcmp>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	dcb0      	bgt.n	8006c0e <_dtoa_r+0xa5e>
 8006cac:	d102      	bne.n	8006cb4 <_dtoa_r+0xb04>
 8006cae:	f018 0f01 	tst.w	r8, #1
 8006cb2:	d1ac      	bne.n	8006c0e <_dtoa_r+0xa5e>
 8006cb4:	4633      	mov	r3, r6
 8006cb6:	461e      	mov	r6, r3
 8006cb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cbc:	2a30      	cmp	r2, #48	@ 0x30
 8006cbe:	d0fa      	beq.n	8006cb6 <_dtoa_r+0xb06>
 8006cc0:	e5c2      	b.n	8006848 <_dtoa_r+0x698>
 8006cc2:	459a      	cmp	sl, r3
 8006cc4:	d1a4      	bne.n	8006c10 <_dtoa_r+0xa60>
 8006cc6:	9b04      	ldr	r3, [sp, #16]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	9304      	str	r3, [sp, #16]
 8006ccc:	2331      	movs	r3, #49	@ 0x31
 8006cce:	f88a 3000 	strb.w	r3, [sl]
 8006cd2:	e5b9      	b.n	8006848 <_dtoa_r+0x698>
 8006cd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006cd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006d34 <_dtoa_r+0xb84>
 8006cda:	b11b      	cbz	r3, 8006ce4 <_dtoa_r+0xb34>
 8006cdc:	f10a 0308 	add.w	r3, sl, #8
 8006ce0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ce2:	6013      	str	r3, [r2, #0]
 8006ce4:	4650      	mov	r0, sl
 8006ce6:	b019      	add	sp, #100	@ 0x64
 8006ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	f77f ae37 	ble.w	8006962 <_dtoa_r+0x7b2>
 8006cf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cf8:	2001      	movs	r0, #1
 8006cfa:	e655      	b.n	80069a8 <_dtoa_r+0x7f8>
 8006cfc:	9b00      	ldr	r3, [sp, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f77f aed6 	ble.w	8006ab0 <_dtoa_r+0x900>
 8006d04:	4656      	mov	r6, sl
 8006d06:	4621      	mov	r1, r4
 8006d08:	4648      	mov	r0, r9
 8006d0a:	f7ff f9c9 	bl	80060a0 <quorem>
 8006d0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d12:	f806 8b01 	strb.w	r8, [r6], #1
 8006d16:	9b00      	ldr	r3, [sp, #0]
 8006d18:	eba6 020a 	sub.w	r2, r6, sl
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	ddb3      	ble.n	8006c88 <_dtoa_r+0xad8>
 8006d20:	4649      	mov	r1, r9
 8006d22:	2300      	movs	r3, #0
 8006d24:	220a      	movs	r2, #10
 8006d26:	4658      	mov	r0, fp
 8006d28:	f000 f968 	bl	8006ffc <__multadd>
 8006d2c:	4681      	mov	r9, r0
 8006d2e:	e7ea      	b.n	8006d06 <_dtoa_r+0xb56>
 8006d30:	0800982d 	.word	0x0800982d
 8006d34:	080097b1 	.word	0x080097b1

08006d38 <_free_r>:
 8006d38:	b538      	push	{r3, r4, r5, lr}
 8006d3a:	4605      	mov	r5, r0
 8006d3c:	2900      	cmp	r1, #0
 8006d3e:	d041      	beq.n	8006dc4 <_free_r+0x8c>
 8006d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d44:	1f0c      	subs	r4, r1, #4
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	bfb8      	it	lt
 8006d4a:	18e4      	addlt	r4, r4, r3
 8006d4c:	f000 f8e8 	bl	8006f20 <__malloc_lock>
 8006d50:	4a1d      	ldr	r2, [pc, #116]	@ (8006dc8 <_free_r+0x90>)
 8006d52:	6813      	ldr	r3, [r2, #0]
 8006d54:	b933      	cbnz	r3, 8006d64 <_free_r+0x2c>
 8006d56:	6063      	str	r3, [r4, #4]
 8006d58:	6014      	str	r4, [r2, #0]
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d60:	f000 b8e4 	b.w	8006f2c <__malloc_unlock>
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	d908      	bls.n	8006d7a <_free_r+0x42>
 8006d68:	6820      	ldr	r0, [r4, #0]
 8006d6a:	1821      	adds	r1, r4, r0
 8006d6c:	428b      	cmp	r3, r1
 8006d6e:	bf01      	itttt	eq
 8006d70:	6819      	ldreq	r1, [r3, #0]
 8006d72:	685b      	ldreq	r3, [r3, #4]
 8006d74:	1809      	addeq	r1, r1, r0
 8006d76:	6021      	streq	r1, [r4, #0]
 8006d78:	e7ed      	b.n	8006d56 <_free_r+0x1e>
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	b10b      	cbz	r3, 8006d84 <_free_r+0x4c>
 8006d80:	42a3      	cmp	r3, r4
 8006d82:	d9fa      	bls.n	8006d7a <_free_r+0x42>
 8006d84:	6811      	ldr	r1, [r2, #0]
 8006d86:	1850      	adds	r0, r2, r1
 8006d88:	42a0      	cmp	r0, r4
 8006d8a:	d10b      	bne.n	8006da4 <_free_r+0x6c>
 8006d8c:	6820      	ldr	r0, [r4, #0]
 8006d8e:	4401      	add	r1, r0
 8006d90:	1850      	adds	r0, r2, r1
 8006d92:	4283      	cmp	r3, r0
 8006d94:	6011      	str	r1, [r2, #0]
 8006d96:	d1e0      	bne.n	8006d5a <_free_r+0x22>
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	6053      	str	r3, [r2, #4]
 8006d9e:	4408      	add	r0, r1
 8006da0:	6010      	str	r0, [r2, #0]
 8006da2:	e7da      	b.n	8006d5a <_free_r+0x22>
 8006da4:	d902      	bls.n	8006dac <_free_r+0x74>
 8006da6:	230c      	movs	r3, #12
 8006da8:	602b      	str	r3, [r5, #0]
 8006daa:	e7d6      	b.n	8006d5a <_free_r+0x22>
 8006dac:	6820      	ldr	r0, [r4, #0]
 8006dae:	1821      	adds	r1, r4, r0
 8006db0:	428b      	cmp	r3, r1
 8006db2:	bf04      	itt	eq
 8006db4:	6819      	ldreq	r1, [r3, #0]
 8006db6:	685b      	ldreq	r3, [r3, #4]
 8006db8:	6063      	str	r3, [r4, #4]
 8006dba:	bf04      	itt	eq
 8006dbc:	1809      	addeq	r1, r1, r0
 8006dbe:	6021      	streq	r1, [r4, #0]
 8006dc0:	6054      	str	r4, [r2, #4]
 8006dc2:	e7ca      	b.n	8006d5a <_free_r+0x22>
 8006dc4:	bd38      	pop	{r3, r4, r5, pc}
 8006dc6:	bf00      	nop
 8006dc8:	200006f4 	.word	0x200006f4

08006dcc <malloc>:
 8006dcc:	4b02      	ldr	r3, [pc, #8]	@ (8006dd8 <malloc+0xc>)
 8006dce:	4601      	mov	r1, r0
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	f000 b825 	b.w	8006e20 <_malloc_r>
 8006dd6:	bf00      	nop
 8006dd8:	20000148 	.word	0x20000148

08006ddc <sbrk_aligned>:
 8006ddc:	b570      	push	{r4, r5, r6, lr}
 8006dde:	4e0f      	ldr	r6, [pc, #60]	@ (8006e1c <sbrk_aligned+0x40>)
 8006de0:	460c      	mov	r4, r1
 8006de2:	6831      	ldr	r1, [r6, #0]
 8006de4:	4605      	mov	r5, r0
 8006de6:	b911      	cbnz	r1, 8006dee <sbrk_aligned+0x12>
 8006de8:	f001 fe0c 	bl	8008a04 <_sbrk_r>
 8006dec:	6030      	str	r0, [r6, #0]
 8006dee:	4621      	mov	r1, r4
 8006df0:	4628      	mov	r0, r5
 8006df2:	f001 fe07 	bl	8008a04 <_sbrk_r>
 8006df6:	1c43      	adds	r3, r0, #1
 8006df8:	d103      	bne.n	8006e02 <sbrk_aligned+0x26>
 8006dfa:	f04f 34ff 	mov.w	r4, #4294967295
 8006dfe:	4620      	mov	r0, r4
 8006e00:	bd70      	pop	{r4, r5, r6, pc}
 8006e02:	1cc4      	adds	r4, r0, #3
 8006e04:	f024 0403 	bic.w	r4, r4, #3
 8006e08:	42a0      	cmp	r0, r4
 8006e0a:	d0f8      	beq.n	8006dfe <sbrk_aligned+0x22>
 8006e0c:	1a21      	subs	r1, r4, r0
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f001 fdf8 	bl	8008a04 <_sbrk_r>
 8006e14:	3001      	adds	r0, #1
 8006e16:	d1f2      	bne.n	8006dfe <sbrk_aligned+0x22>
 8006e18:	e7ef      	b.n	8006dfa <sbrk_aligned+0x1e>
 8006e1a:	bf00      	nop
 8006e1c:	200006f0 	.word	0x200006f0

08006e20 <_malloc_r>:
 8006e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e24:	1ccd      	adds	r5, r1, #3
 8006e26:	f025 0503 	bic.w	r5, r5, #3
 8006e2a:	3508      	adds	r5, #8
 8006e2c:	2d0c      	cmp	r5, #12
 8006e2e:	bf38      	it	cc
 8006e30:	250c      	movcc	r5, #12
 8006e32:	2d00      	cmp	r5, #0
 8006e34:	4606      	mov	r6, r0
 8006e36:	db01      	blt.n	8006e3c <_malloc_r+0x1c>
 8006e38:	42a9      	cmp	r1, r5
 8006e3a:	d904      	bls.n	8006e46 <_malloc_r+0x26>
 8006e3c:	230c      	movs	r3, #12
 8006e3e:	6033      	str	r3, [r6, #0]
 8006e40:	2000      	movs	r0, #0
 8006e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f1c <_malloc_r+0xfc>
 8006e4a:	f000 f869 	bl	8006f20 <__malloc_lock>
 8006e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e52:	461c      	mov	r4, r3
 8006e54:	bb44      	cbnz	r4, 8006ea8 <_malloc_r+0x88>
 8006e56:	4629      	mov	r1, r5
 8006e58:	4630      	mov	r0, r6
 8006e5a:	f7ff ffbf 	bl	8006ddc <sbrk_aligned>
 8006e5e:	1c43      	adds	r3, r0, #1
 8006e60:	4604      	mov	r4, r0
 8006e62:	d158      	bne.n	8006f16 <_malloc_r+0xf6>
 8006e64:	f8d8 4000 	ldr.w	r4, [r8]
 8006e68:	4627      	mov	r7, r4
 8006e6a:	2f00      	cmp	r7, #0
 8006e6c:	d143      	bne.n	8006ef6 <_malloc_r+0xd6>
 8006e6e:	2c00      	cmp	r4, #0
 8006e70:	d04b      	beq.n	8006f0a <_malloc_r+0xea>
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	4639      	mov	r1, r7
 8006e76:	4630      	mov	r0, r6
 8006e78:	eb04 0903 	add.w	r9, r4, r3
 8006e7c:	f001 fdc2 	bl	8008a04 <_sbrk_r>
 8006e80:	4581      	cmp	r9, r0
 8006e82:	d142      	bne.n	8006f0a <_malloc_r+0xea>
 8006e84:	6821      	ldr	r1, [r4, #0]
 8006e86:	1a6d      	subs	r5, r5, r1
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f7ff ffa6 	bl	8006ddc <sbrk_aligned>
 8006e90:	3001      	adds	r0, #1
 8006e92:	d03a      	beq.n	8006f0a <_malloc_r+0xea>
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	442b      	add	r3, r5
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	bb62      	cbnz	r2, 8006efc <_malloc_r+0xdc>
 8006ea2:	f8c8 7000 	str.w	r7, [r8]
 8006ea6:	e00f      	b.n	8006ec8 <_malloc_r+0xa8>
 8006ea8:	6822      	ldr	r2, [r4, #0]
 8006eaa:	1b52      	subs	r2, r2, r5
 8006eac:	d420      	bmi.n	8006ef0 <_malloc_r+0xd0>
 8006eae:	2a0b      	cmp	r2, #11
 8006eb0:	d917      	bls.n	8006ee2 <_malloc_r+0xc2>
 8006eb2:	1961      	adds	r1, r4, r5
 8006eb4:	42a3      	cmp	r3, r4
 8006eb6:	6025      	str	r5, [r4, #0]
 8006eb8:	bf18      	it	ne
 8006eba:	6059      	strne	r1, [r3, #4]
 8006ebc:	6863      	ldr	r3, [r4, #4]
 8006ebe:	bf08      	it	eq
 8006ec0:	f8c8 1000 	streq.w	r1, [r8]
 8006ec4:	5162      	str	r2, [r4, r5]
 8006ec6:	604b      	str	r3, [r1, #4]
 8006ec8:	4630      	mov	r0, r6
 8006eca:	f000 f82f 	bl	8006f2c <__malloc_unlock>
 8006ece:	f104 000b 	add.w	r0, r4, #11
 8006ed2:	1d23      	adds	r3, r4, #4
 8006ed4:	f020 0007 	bic.w	r0, r0, #7
 8006ed8:	1ac2      	subs	r2, r0, r3
 8006eda:	bf1c      	itt	ne
 8006edc:	1a1b      	subne	r3, r3, r0
 8006ede:	50a3      	strne	r3, [r4, r2]
 8006ee0:	e7af      	b.n	8006e42 <_malloc_r+0x22>
 8006ee2:	6862      	ldr	r2, [r4, #4]
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	bf0c      	ite	eq
 8006ee8:	f8c8 2000 	streq.w	r2, [r8]
 8006eec:	605a      	strne	r2, [r3, #4]
 8006eee:	e7eb      	b.n	8006ec8 <_malloc_r+0xa8>
 8006ef0:	4623      	mov	r3, r4
 8006ef2:	6864      	ldr	r4, [r4, #4]
 8006ef4:	e7ae      	b.n	8006e54 <_malloc_r+0x34>
 8006ef6:	463c      	mov	r4, r7
 8006ef8:	687f      	ldr	r7, [r7, #4]
 8006efa:	e7b6      	b.n	8006e6a <_malloc_r+0x4a>
 8006efc:	461a      	mov	r2, r3
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	d1fb      	bne.n	8006efc <_malloc_r+0xdc>
 8006f04:	2300      	movs	r3, #0
 8006f06:	6053      	str	r3, [r2, #4]
 8006f08:	e7de      	b.n	8006ec8 <_malloc_r+0xa8>
 8006f0a:	230c      	movs	r3, #12
 8006f0c:	6033      	str	r3, [r6, #0]
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f000 f80c 	bl	8006f2c <__malloc_unlock>
 8006f14:	e794      	b.n	8006e40 <_malloc_r+0x20>
 8006f16:	6005      	str	r5, [r0, #0]
 8006f18:	e7d6      	b.n	8006ec8 <_malloc_r+0xa8>
 8006f1a:	bf00      	nop
 8006f1c:	200006f4 	.word	0x200006f4

08006f20 <__malloc_lock>:
 8006f20:	4801      	ldr	r0, [pc, #4]	@ (8006f28 <__malloc_lock+0x8>)
 8006f22:	f7ff b8b4 	b.w	800608e <__retarget_lock_acquire_recursive>
 8006f26:	bf00      	nop
 8006f28:	200006ec 	.word	0x200006ec

08006f2c <__malloc_unlock>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	@ (8006f34 <__malloc_unlock+0x8>)
 8006f2e:	f7ff b8af 	b.w	8006090 <__retarget_lock_release_recursive>
 8006f32:	bf00      	nop
 8006f34:	200006ec 	.word	0x200006ec

08006f38 <_Balloc>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	69c6      	ldr	r6, [r0, #28]
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	460d      	mov	r5, r1
 8006f40:	b976      	cbnz	r6, 8006f60 <_Balloc+0x28>
 8006f42:	2010      	movs	r0, #16
 8006f44:	f7ff ff42 	bl	8006dcc <malloc>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	61e0      	str	r0, [r4, #28]
 8006f4c:	b920      	cbnz	r0, 8006f58 <_Balloc+0x20>
 8006f4e:	4b18      	ldr	r3, [pc, #96]	@ (8006fb0 <_Balloc+0x78>)
 8006f50:	4818      	ldr	r0, [pc, #96]	@ (8006fb4 <_Balloc+0x7c>)
 8006f52:	216b      	movs	r1, #107	@ 0x6b
 8006f54:	f001 fd7c 	bl	8008a50 <__assert_func>
 8006f58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f5c:	6006      	str	r6, [r0, #0]
 8006f5e:	60c6      	str	r6, [r0, #12]
 8006f60:	69e6      	ldr	r6, [r4, #28]
 8006f62:	68f3      	ldr	r3, [r6, #12]
 8006f64:	b183      	cbz	r3, 8006f88 <_Balloc+0x50>
 8006f66:	69e3      	ldr	r3, [r4, #28]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f6e:	b9b8      	cbnz	r0, 8006fa0 <_Balloc+0x68>
 8006f70:	2101      	movs	r1, #1
 8006f72:	fa01 f605 	lsl.w	r6, r1, r5
 8006f76:	1d72      	adds	r2, r6, #5
 8006f78:	0092      	lsls	r2, r2, #2
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f001 fd86 	bl	8008a8c <_calloc_r>
 8006f80:	b160      	cbz	r0, 8006f9c <_Balloc+0x64>
 8006f82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f86:	e00e      	b.n	8006fa6 <_Balloc+0x6e>
 8006f88:	2221      	movs	r2, #33	@ 0x21
 8006f8a:	2104      	movs	r1, #4
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f001 fd7d 	bl	8008a8c <_calloc_r>
 8006f92:	69e3      	ldr	r3, [r4, #28]
 8006f94:	60f0      	str	r0, [r6, #12]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e4      	bne.n	8006f66 <_Balloc+0x2e>
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	6802      	ldr	r2, [r0, #0]
 8006fa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fac:	e7f7      	b.n	8006f9e <_Balloc+0x66>
 8006fae:	bf00      	nop
 8006fb0:	080097be 	.word	0x080097be
 8006fb4:	0800983e 	.word	0x0800983e

08006fb8 <_Bfree>:
 8006fb8:	b570      	push	{r4, r5, r6, lr}
 8006fba:	69c6      	ldr	r6, [r0, #28]
 8006fbc:	4605      	mov	r5, r0
 8006fbe:	460c      	mov	r4, r1
 8006fc0:	b976      	cbnz	r6, 8006fe0 <_Bfree+0x28>
 8006fc2:	2010      	movs	r0, #16
 8006fc4:	f7ff ff02 	bl	8006dcc <malloc>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	61e8      	str	r0, [r5, #28]
 8006fcc:	b920      	cbnz	r0, 8006fd8 <_Bfree+0x20>
 8006fce:	4b09      	ldr	r3, [pc, #36]	@ (8006ff4 <_Bfree+0x3c>)
 8006fd0:	4809      	ldr	r0, [pc, #36]	@ (8006ff8 <_Bfree+0x40>)
 8006fd2:	218f      	movs	r1, #143	@ 0x8f
 8006fd4:	f001 fd3c 	bl	8008a50 <__assert_func>
 8006fd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fdc:	6006      	str	r6, [r0, #0]
 8006fde:	60c6      	str	r6, [r0, #12]
 8006fe0:	b13c      	cbz	r4, 8006ff2 <_Bfree+0x3a>
 8006fe2:	69eb      	ldr	r3, [r5, #28]
 8006fe4:	6862      	ldr	r2, [r4, #4]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fec:	6021      	str	r1, [r4, #0]
 8006fee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}
 8006ff4:	080097be 	.word	0x080097be
 8006ff8:	0800983e 	.word	0x0800983e

08006ffc <__multadd>:
 8006ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007000:	690d      	ldr	r5, [r1, #16]
 8007002:	4607      	mov	r7, r0
 8007004:	460c      	mov	r4, r1
 8007006:	461e      	mov	r6, r3
 8007008:	f101 0c14 	add.w	ip, r1, #20
 800700c:	2000      	movs	r0, #0
 800700e:	f8dc 3000 	ldr.w	r3, [ip]
 8007012:	b299      	uxth	r1, r3
 8007014:	fb02 6101 	mla	r1, r2, r1, r6
 8007018:	0c1e      	lsrs	r6, r3, #16
 800701a:	0c0b      	lsrs	r3, r1, #16
 800701c:	fb02 3306 	mla	r3, r2, r6, r3
 8007020:	b289      	uxth	r1, r1
 8007022:	3001      	adds	r0, #1
 8007024:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007028:	4285      	cmp	r5, r0
 800702a:	f84c 1b04 	str.w	r1, [ip], #4
 800702e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007032:	dcec      	bgt.n	800700e <__multadd+0x12>
 8007034:	b30e      	cbz	r6, 800707a <__multadd+0x7e>
 8007036:	68a3      	ldr	r3, [r4, #8]
 8007038:	42ab      	cmp	r3, r5
 800703a:	dc19      	bgt.n	8007070 <__multadd+0x74>
 800703c:	6861      	ldr	r1, [r4, #4]
 800703e:	4638      	mov	r0, r7
 8007040:	3101      	adds	r1, #1
 8007042:	f7ff ff79 	bl	8006f38 <_Balloc>
 8007046:	4680      	mov	r8, r0
 8007048:	b928      	cbnz	r0, 8007056 <__multadd+0x5a>
 800704a:	4602      	mov	r2, r0
 800704c:	4b0c      	ldr	r3, [pc, #48]	@ (8007080 <__multadd+0x84>)
 800704e:	480d      	ldr	r0, [pc, #52]	@ (8007084 <__multadd+0x88>)
 8007050:	21ba      	movs	r1, #186	@ 0xba
 8007052:	f001 fcfd 	bl	8008a50 <__assert_func>
 8007056:	6922      	ldr	r2, [r4, #16]
 8007058:	3202      	adds	r2, #2
 800705a:	f104 010c 	add.w	r1, r4, #12
 800705e:	0092      	lsls	r2, r2, #2
 8007060:	300c      	adds	r0, #12
 8007062:	f001 fcdf 	bl	8008a24 <memcpy>
 8007066:	4621      	mov	r1, r4
 8007068:	4638      	mov	r0, r7
 800706a:	f7ff ffa5 	bl	8006fb8 <_Bfree>
 800706e:	4644      	mov	r4, r8
 8007070:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007074:	3501      	adds	r5, #1
 8007076:	615e      	str	r6, [r3, #20]
 8007078:	6125      	str	r5, [r4, #16]
 800707a:	4620      	mov	r0, r4
 800707c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007080:	0800982d 	.word	0x0800982d
 8007084:	0800983e 	.word	0x0800983e

08007088 <__s2b>:
 8007088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800708c:	460c      	mov	r4, r1
 800708e:	4615      	mov	r5, r2
 8007090:	461f      	mov	r7, r3
 8007092:	2209      	movs	r2, #9
 8007094:	3308      	adds	r3, #8
 8007096:	4606      	mov	r6, r0
 8007098:	fb93 f3f2 	sdiv	r3, r3, r2
 800709c:	2100      	movs	r1, #0
 800709e:	2201      	movs	r2, #1
 80070a0:	429a      	cmp	r2, r3
 80070a2:	db09      	blt.n	80070b8 <__s2b+0x30>
 80070a4:	4630      	mov	r0, r6
 80070a6:	f7ff ff47 	bl	8006f38 <_Balloc>
 80070aa:	b940      	cbnz	r0, 80070be <__s2b+0x36>
 80070ac:	4602      	mov	r2, r0
 80070ae:	4b19      	ldr	r3, [pc, #100]	@ (8007114 <__s2b+0x8c>)
 80070b0:	4819      	ldr	r0, [pc, #100]	@ (8007118 <__s2b+0x90>)
 80070b2:	21d3      	movs	r1, #211	@ 0xd3
 80070b4:	f001 fccc 	bl	8008a50 <__assert_func>
 80070b8:	0052      	lsls	r2, r2, #1
 80070ba:	3101      	adds	r1, #1
 80070bc:	e7f0      	b.n	80070a0 <__s2b+0x18>
 80070be:	9b08      	ldr	r3, [sp, #32]
 80070c0:	6143      	str	r3, [r0, #20]
 80070c2:	2d09      	cmp	r5, #9
 80070c4:	f04f 0301 	mov.w	r3, #1
 80070c8:	6103      	str	r3, [r0, #16]
 80070ca:	dd16      	ble.n	80070fa <__s2b+0x72>
 80070cc:	f104 0909 	add.w	r9, r4, #9
 80070d0:	46c8      	mov	r8, r9
 80070d2:	442c      	add	r4, r5
 80070d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80070d8:	4601      	mov	r1, r0
 80070da:	3b30      	subs	r3, #48	@ 0x30
 80070dc:	220a      	movs	r2, #10
 80070de:	4630      	mov	r0, r6
 80070e0:	f7ff ff8c 	bl	8006ffc <__multadd>
 80070e4:	45a0      	cmp	r8, r4
 80070e6:	d1f5      	bne.n	80070d4 <__s2b+0x4c>
 80070e8:	f1a5 0408 	sub.w	r4, r5, #8
 80070ec:	444c      	add	r4, r9
 80070ee:	1b2d      	subs	r5, r5, r4
 80070f0:	1963      	adds	r3, r4, r5
 80070f2:	42bb      	cmp	r3, r7
 80070f4:	db04      	blt.n	8007100 <__s2b+0x78>
 80070f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070fa:	340a      	adds	r4, #10
 80070fc:	2509      	movs	r5, #9
 80070fe:	e7f6      	b.n	80070ee <__s2b+0x66>
 8007100:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007104:	4601      	mov	r1, r0
 8007106:	3b30      	subs	r3, #48	@ 0x30
 8007108:	220a      	movs	r2, #10
 800710a:	4630      	mov	r0, r6
 800710c:	f7ff ff76 	bl	8006ffc <__multadd>
 8007110:	e7ee      	b.n	80070f0 <__s2b+0x68>
 8007112:	bf00      	nop
 8007114:	0800982d 	.word	0x0800982d
 8007118:	0800983e 	.word	0x0800983e

0800711c <__hi0bits>:
 800711c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007120:	4603      	mov	r3, r0
 8007122:	bf36      	itet	cc
 8007124:	0403      	lslcc	r3, r0, #16
 8007126:	2000      	movcs	r0, #0
 8007128:	2010      	movcc	r0, #16
 800712a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800712e:	bf3c      	itt	cc
 8007130:	021b      	lslcc	r3, r3, #8
 8007132:	3008      	addcc	r0, #8
 8007134:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007138:	bf3c      	itt	cc
 800713a:	011b      	lslcc	r3, r3, #4
 800713c:	3004      	addcc	r0, #4
 800713e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007142:	bf3c      	itt	cc
 8007144:	009b      	lslcc	r3, r3, #2
 8007146:	3002      	addcc	r0, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	db05      	blt.n	8007158 <__hi0bits+0x3c>
 800714c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007150:	f100 0001 	add.w	r0, r0, #1
 8007154:	bf08      	it	eq
 8007156:	2020      	moveq	r0, #32
 8007158:	4770      	bx	lr

0800715a <__lo0bits>:
 800715a:	6803      	ldr	r3, [r0, #0]
 800715c:	4602      	mov	r2, r0
 800715e:	f013 0007 	ands.w	r0, r3, #7
 8007162:	d00b      	beq.n	800717c <__lo0bits+0x22>
 8007164:	07d9      	lsls	r1, r3, #31
 8007166:	d421      	bmi.n	80071ac <__lo0bits+0x52>
 8007168:	0798      	lsls	r0, r3, #30
 800716a:	bf49      	itett	mi
 800716c:	085b      	lsrmi	r3, r3, #1
 800716e:	089b      	lsrpl	r3, r3, #2
 8007170:	2001      	movmi	r0, #1
 8007172:	6013      	strmi	r3, [r2, #0]
 8007174:	bf5c      	itt	pl
 8007176:	6013      	strpl	r3, [r2, #0]
 8007178:	2002      	movpl	r0, #2
 800717a:	4770      	bx	lr
 800717c:	b299      	uxth	r1, r3
 800717e:	b909      	cbnz	r1, 8007184 <__lo0bits+0x2a>
 8007180:	0c1b      	lsrs	r3, r3, #16
 8007182:	2010      	movs	r0, #16
 8007184:	b2d9      	uxtb	r1, r3
 8007186:	b909      	cbnz	r1, 800718c <__lo0bits+0x32>
 8007188:	3008      	adds	r0, #8
 800718a:	0a1b      	lsrs	r3, r3, #8
 800718c:	0719      	lsls	r1, r3, #28
 800718e:	bf04      	itt	eq
 8007190:	091b      	lsreq	r3, r3, #4
 8007192:	3004      	addeq	r0, #4
 8007194:	0799      	lsls	r1, r3, #30
 8007196:	bf04      	itt	eq
 8007198:	089b      	lsreq	r3, r3, #2
 800719a:	3002      	addeq	r0, #2
 800719c:	07d9      	lsls	r1, r3, #31
 800719e:	d403      	bmi.n	80071a8 <__lo0bits+0x4e>
 80071a0:	085b      	lsrs	r3, r3, #1
 80071a2:	f100 0001 	add.w	r0, r0, #1
 80071a6:	d003      	beq.n	80071b0 <__lo0bits+0x56>
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	4770      	bx	lr
 80071ac:	2000      	movs	r0, #0
 80071ae:	4770      	bx	lr
 80071b0:	2020      	movs	r0, #32
 80071b2:	4770      	bx	lr

080071b4 <__i2b>:
 80071b4:	b510      	push	{r4, lr}
 80071b6:	460c      	mov	r4, r1
 80071b8:	2101      	movs	r1, #1
 80071ba:	f7ff febd 	bl	8006f38 <_Balloc>
 80071be:	4602      	mov	r2, r0
 80071c0:	b928      	cbnz	r0, 80071ce <__i2b+0x1a>
 80071c2:	4b05      	ldr	r3, [pc, #20]	@ (80071d8 <__i2b+0x24>)
 80071c4:	4805      	ldr	r0, [pc, #20]	@ (80071dc <__i2b+0x28>)
 80071c6:	f240 1145 	movw	r1, #325	@ 0x145
 80071ca:	f001 fc41 	bl	8008a50 <__assert_func>
 80071ce:	2301      	movs	r3, #1
 80071d0:	6144      	str	r4, [r0, #20]
 80071d2:	6103      	str	r3, [r0, #16]
 80071d4:	bd10      	pop	{r4, pc}
 80071d6:	bf00      	nop
 80071d8:	0800982d 	.word	0x0800982d
 80071dc:	0800983e 	.word	0x0800983e

080071e0 <__multiply>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	4614      	mov	r4, r2
 80071e6:	690a      	ldr	r2, [r1, #16]
 80071e8:	6923      	ldr	r3, [r4, #16]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	bfa8      	it	ge
 80071ee:	4623      	movge	r3, r4
 80071f0:	460f      	mov	r7, r1
 80071f2:	bfa4      	itt	ge
 80071f4:	460c      	movge	r4, r1
 80071f6:	461f      	movge	r7, r3
 80071f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80071fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007200:	68a3      	ldr	r3, [r4, #8]
 8007202:	6861      	ldr	r1, [r4, #4]
 8007204:	eb0a 0609 	add.w	r6, sl, r9
 8007208:	42b3      	cmp	r3, r6
 800720a:	b085      	sub	sp, #20
 800720c:	bfb8      	it	lt
 800720e:	3101      	addlt	r1, #1
 8007210:	f7ff fe92 	bl	8006f38 <_Balloc>
 8007214:	b930      	cbnz	r0, 8007224 <__multiply+0x44>
 8007216:	4602      	mov	r2, r0
 8007218:	4b44      	ldr	r3, [pc, #272]	@ (800732c <__multiply+0x14c>)
 800721a:	4845      	ldr	r0, [pc, #276]	@ (8007330 <__multiply+0x150>)
 800721c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007220:	f001 fc16 	bl	8008a50 <__assert_func>
 8007224:	f100 0514 	add.w	r5, r0, #20
 8007228:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800722c:	462b      	mov	r3, r5
 800722e:	2200      	movs	r2, #0
 8007230:	4543      	cmp	r3, r8
 8007232:	d321      	bcc.n	8007278 <__multiply+0x98>
 8007234:	f107 0114 	add.w	r1, r7, #20
 8007238:	f104 0214 	add.w	r2, r4, #20
 800723c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007240:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007244:	9302      	str	r3, [sp, #8]
 8007246:	1b13      	subs	r3, r2, r4
 8007248:	3b15      	subs	r3, #21
 800724a:	f023 0303 	bic.w	r3, r3, #3
 800724e:	3304      	adds	r3, #4
 8007250:	f104 0715 	add.w	r7, r4, #21
 8007254:	42ba      	cmp	r2, r7
 8007256:	bf38      	it	cc
 8007258:	2304      	movcc	r3, #4
 800725a:	9301      	str	r3, [sp, #4]
 800725c:	9b02      	ldr	r3, [sp, #8]
 800725e:	9103      	str	r1, [sp, #12]
 8007260:	428b      	cmp	r3, r1
 8007262:	d80c      	bhi.n	800727e <__multiply+0x9e>
 8007264:	2e00      	cmp	r6, #0
 8007266:	dd03      	ble.n	8007270 <__multiply+0x90>
 8007268:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800726c:	2b00      	cmp	r3, #0
 800726e:	d05b      	beq.n	8007328 <__multiply+0x148>
 8007270:	6106      	str	r6, [r0, #16]
 8007272:	b005      	add	sp, #20
 8007274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007278:	f843 2b04 	str.w	r2, [r3], #4
 800727c:	e7d8      	b.n	8007230 <__multiply+0x50>
 800727e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007282:	f1ba 0f00 	cmp.w	sl, #0
 8007286:	d024      	beq.n	80072d2 <__multiply+0xf2>
 8007288:	f104 0e14 	add.w	lr, r4, #20
 800728c:	46a9      	mov	r9, r5
 800728e:	f04f 0c00 	mov.w	ip, #0
 8007292:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007296:	f8d9 3000 	ldr.w	r3, [r9]
 800729a:	fa1f fb87 	uxth.w	fp, r7
 800729e:	b29b      	uxth	r3, r3
 80072a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80072a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80072a8:	f8d9 7000 	ldr.w	r7, [r9]
 80072ac:	4463      	add	r3, ip
 80072ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80072b2:	fb0a c70b 	mla	r7, sl, fp, ip
 80072b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80072c0:	4572      	cmp	r2, lr
 80072c2:	f849 3b04 	str.w	r3, [r9], #4
 80072c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80072ca:	d8e2      	bhi.n	8007292 <__multiply+0xb2>
 80072cc:	9b01      	ldr	r3, [sp, #4]
 80072ce:	f845 c003 	str.w	ip, [r5, r3]
 80072d2:	9b03      	ldr	r3, [sp, #12]
 80072d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80072d8:	3104      	adds	r1, #4
 80072da:	f1b9 0f00 	cmp.w	r9, #0
 80072de:	d021      	beq.n	8007324 <__multiply+0x144>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	f104 0c14 	add.w	ip, r4, #20
 80072e6:	46ae      	mov	lr, r5
 80072e8:	f04f 0a00 	mov.w	sl, #0
 80072ec:	f8bc b000 	ldrh.w	fp, [ip]
 80072f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80072f4:	fb09 770b 	mla	r7, r9, fp, r7
 80072f8:	4457      	add	r7, sl
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007300:	f84e 3b04 	str.w	r3, [lr], #4
 8007304:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007308:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800730c:	f8be 3000 	ldrh.w	r3, [lr]
 8007310:	fb09 330a 	mla	r3, r9, sl, r3
 8007314:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007318:	4562      	cmp	r2, ip
 800731a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800731e:	d8e5      	bhi.n	80072ec <__multiply+0x10c>
 8007320:	9f01      	ldr	r7, [sp, #4]
 8007322:	51eb      	str	r3, [r5, r7]
 8007324:	3504      	adds	r5, #4
 8007326:	e799      	b.n	800725c <__multiply+0x7c>
 8007328:	3e01      	subs	r6, #1
 800732a:	e79b      	b.n	8007264 <__multiply+0x84>
 800732c:	0800982d 	.word	0x0800982d
 8007330:	0800983e 	.word	0x0800983e

08007334 <__pow5mult>:
 8007334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007338:	4615      	mov	r5, r2
 800733a:	f012 0203 	ands.w	r2, r2, #3
 800733e:	4607      	mov	r7, r0
 8007340:	460e      	mov	r6, r1
 8007342:	d007      	beq.n	8007354 <__pow5mult+0x20>
 8007344:	4c25      	ldr	r4, [pc, #148]	@ (80073dc <__pow5mult+0xa8>)
 8007346:	3a01      	subs	r2, #1
 8007348:	2300      	movs	r3, #0
 800734a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800734e:	f7ff fe55 	bl	8006ffc <__multadd>
 8007352:	4606      	mov	r6, r0
 8007354:	10ad      	asrs	r5, r5, #2
 8007356:	d03d      	beq.n	80073d4 <__pow5mult+0xa0>
 8007358:	69fc      	ldr	r4, [r7, #28]
 800735a:	b97c      	cbnz	r4, 800737c <__pow5mult+0x48>
 800735c:	2010      	movs	r0, #16
 800735e:	f7ff fd35 	bl	8006dcc <malloc>
 8007362:	4602      	mov	r2, r0
 8007364:	61f8      	str	r0, [r7, #28]
 8007366:	b928      	cbnz	r0, 8007374 <__pow5mult+0x40>
 8007368:	4b1d      	ldr	r3, [pc, #116]	@ (80073e0 <__pow5mult+0xac>)
 800736a:	481e      	ldr	r0, [pc, #120]	@ (80073e4 <__pow5mult+0xb0>)
 800736c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007370:	f001 fb6e 	bl	8008a50 <__assert_func>
 8007374:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007378:	6004      	str	r4, [r0, #0]
 800737a:	60c4      	str	r4, [r0, #12]
 800737c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007380:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007384:	b94c      	cbnz	r4, 800739a <__pow5mult+0x66>
 8007386:	f240 2171 	movw	r1, #625	@ 0x271
 800738a:	4638      	mov	r0, r7
 800738c:	f7ff ff12 	bl	80071b4 <__i2b>
 8007390:	2300      	movs	r3, #0
 8007392:	f8c8 0008 	str.w	r0, [r8, #8]
 8007396:	4604      	mov	r4, r0
 8007398:	6003      	str	r3, [r0, #0]
 800739a:	f04f 0900 	mov.w	r9, #0
 800739e:	07eb      	lsls	r3, r5, #31
 80073a0:	d50a      	bpl.n	80073b8 <__pow5mult+0x84>
 80073a2:	4631      	mov	r1, r6
 80073a4:	4622      	mov	r2, r4
 80073a6:	4638      	mov	r0, r7
 80073a8:	f7ff ff1a 	bl	80071e0 <__multiply>
 80073ac:	4631      	mov	r1, r6
 80073ae:	4680      	mov	r8, r0
 80073b0:	4638      	mov	r0, r7
 80073b2:	f7ff fe01 	bl	8006fb8 <_Bfree>
 80073b6:	4646      	mov	r6, r8
 80073b8:	106d      	asrs	r5, r5, #1
 80073ba:	d00b      	beq.n	80073d4 <__pow5mult+0xa0>
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	b938      	cbnz	r0, 80073d0 <__pow5mult+0x9c>
 80073c0:	4622      	mov	r2, r4
 80073c2:	4621      	mov	r1, r4
 80073c4:	4638      	mov	r0, r7
 80073c6:	f7ff ff0b 	bl	80071e0 <__multiply>
 80073ca:	6020      	str	r0, [r4, #0]
 80073cc:	f8c0 9000 	str.w	r9, [r0]
 80073d0:	4604      	mov	r4, r0
 80073d2:	e7e4      	b.n	800739e <__pow5mult+0x6a>
 80073d4:	4630      	mov	r0, r6
 80073d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073da:	bf00      	nop
 80073dc:	08009898 	.word	0x08009898
 80073e0:	080097be 	.word	0x080097be
 80073e4:	0800983e 	.word	0x0800983e

080073e8 <__lshift>:
 80073e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ec:	460c      	mov	r4, r1
 80073ee:	6849      	ldr	r1, [r1, #4]
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073f6:	68a3      	ldr	r3, [r4, #8]
 80073f8:	4607      	mov	r7, r0
 80073fa:	4691      	mov	r9, r2
 80073fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007400:	f108 0601 	add.w	r6, r8, #1
 8007404:	42b3      	cmp	r3, r6
 8007406:	db0b      	blt.n	8007420 <__lshift+0x38>
 8007408:	4638      	mov	r0, r7
 800740a:	f7ff fd95 	bl	8006f38 <_Balloc>
 800740e:	4605      	mov	r5, r0
 8007410:	b948      	cbnz	r0, 8007426 <__lshift+0x3e>
 8007412:	4602      	mov	r2, r0
 8007414:	4b28      	ldr	r3, [pc, #160]	@ (80074b8 <__lshift+0xd0>)
 8007416:	4829      	ldr	r0, [pc, #164]	@ (80074bc <__lshift+0xd4>)
 8007418:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800741c:	f001 fb18 	bl	8008a50 <__assert_func>
 8007420:	3101      	adds	r1, #1
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	e7ee      	b.n	8007404 <__lshift+0x1c>
 8007426:	2300      	movs	r3, #0
 8007428:	f100 0114 	add.w	r1, r0, #20
 800742c:	f100 0210 	add.w	r2, r0, #16
 8007430:	4618      	mov	r0, r3
 8007432:	4553      	cmp	r3, sl
 8007434:	db33      	blt.n	800749e <__lshift+0xb6>
 8007436:	6920      	ldr	r0, [r4, #16]
 8007438:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800743c:	f104 0314 	add.w	r3, r4, #20
 8007440:	f019 091f 	ands.w	r9, r9, #31
 8007444:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007448:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800744c:	d02b      	beq.n	80074a6 <__lshift+0xbe>
 800744e:	f1c9 0e20 	rsb	lr, r9, #32
 8007452:	468a      	mov	sl, r1
 8007454:	2200      	movs	r2, #0
 8007456:	6818      	ldr	r0, [r3, #0]
 8007458:	fa00 f009 	lsl.w	r0, r0, r9
 800745c:	4310      	orrs	r0, r2
 800745e:	f84a 0b04 	str.w	r0, [sl], #4
 8007462:	f853 2b04 	ldr.w	r2, [r3], #4
 8007466:	459c      	cmp	ip, r3
 8007468:	fa22 f20e 	lsr.w	r2, r2, lr
 800746c:	d8f3      	bhi.n	8007456 <__lshift+0x6e>
 800746e:	ebac 0304 	sub.w	r3, ip, r4
 8007472:	3b15      	subs	r3, #21
 8007474:	f023 0303 	bic.w	r3, r3, #3
 8007478:	3304      	adds	r3, #4
 800747a:	f104 0015 	add.w	r0, r4, #21
 800747e:	4584      	cmp	ip, r0
 8007480:	bf38      	it	cc
 8007482:	2304      	movcc	r3, #4
 8007484:	50ca      	str	r2, [r1, r3]
 8007486:	b10a      	cbz	r2, 800748c <__lshift+0xa4>
 8007488:	f108 0602 	add.w	r6, r8, #2
 800748c:	3e01      	subs	r6, #1
 800748e:	4638      	mov	r0, r7
 8007490:	612e      	str	r6, [r5, #16]
 8007492:	4621      	mov	r1, r4
 8007494:	f7ff fd90 	bl	8006fb8 <_Bfree>
 8007498:	4628      	mov	r0, r5
 800749a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749e:	f842 0f04 	str.w	r0, [r2, #4]!
 80074a2:	3301      	adds	r3, #1
 80074a4:	e7c5      	b.n	8007432 <__lshift+0x4a>
 80074a6:	3904      	subs	r1, #4
 80074a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80074b0:	459c      	cmp	ip, r3
 80074b2:	d8f9      	bhi.n	80074a8 <__lshift+0xc0>
 80074b4:	e7ea      	b.n	800748c <__lshift+0xa4>
 80074b6:	bf00      	nop
 80074b8:	0800982d 	.word	0x0800982d
 80074bc:	0800983e 	.word	0x0800983e

080074c0 <__mcmp>:
 80074c0:	690a      	ldr	r2, [r1, #16]
 80074c2:	4603      	mov	r3, r0
 80074c4:	6900      	ldr	r0, [r0, #16]
 80074c6:	1a80      	subs	r0, r0, r2
 80074c8:	b530      	push	{r4, r5, lr}
 80074ca:	d10e      	bne.n	80074ea <__mcmp+0x2a>
 80074cc:	3314      	adds	r3, #20
 80074ce:	3114      	adds	r1, #20
 80074d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80074d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80074d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80074dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80074e0:	4295      	cmp	r5, r2
 80074e2:	d003      	beq.n	80074ec <__mcmp+0x2c>
 80074e4:	d205      	bcs.n	80074f2 <__mcmp+0x32>
 80074e6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ea:	bd30      	pop	{r4, r5, pc}
 80074ec:	42a3      	cmp	r3, r4
 80074ee:	d3f3      	bcc.n	80074d8 <__mcmp+0x18>
 80074f0:	e7fb      	b.n	80074ea <__mcmp+0x2a>
 80074f2:	2001      	movs	r0, #1
 80074f4:	e7f9      	b.n	80074ea <__mcmp+0x2a>
	...

080074f8 <__mdiff>:
 80074f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	4689      	mov	r9, r1
 80074fe:	4606      	mov	r6, r0
 8007500:	4611      	mov	r1, r2
 8007502:	4648      	mov	r0, r9
 8007504:	4614      	mov	r4, r2
 8007506:	f7ff ffdb 	bl	80074c0 <__mcmp>
 800750a:	1e05      	subs	r5, r0, #0
 800750c:	d112      	bne.n	8007534 <__mdiff+0x3c>
 800750e:	4629      	mov	r1, r5
 8007510:	4630      	mov	r0, r6
 8007512:	f7ff fd11 	bl	8006f38 <_Balloc>
 8007516:	4602      	mov	r2, r0
 8007518:	b928      	cbnz	r0, 8007526 <__mdiff+0x2e>
 800751a:	4b3f      	ldr	r3, [pc, #252]	@ (8007618 <__mdiff+0x120>)
 800751c:	f240 2137 	movw	r1, #567	@ 0x237
 8007520:	483e      	ldr	r0, [pc, #248]	@ (800761c <__mdiff+0x124>)
 8007522:	f001 fa95 	bl	8008a50 <__assert_func>
 8007526:	2301      	movs	r3, #1
 8007528:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800752c:	4610      	mov	r0, r2
 800752e:	b003      	add	sp, #12
 8007530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007534:	bfbc      	itt	lt
 8007536:	464b      	movlt	r3, r9
 8007538:	46a1      	movlt	r9, r4
 800753a:	4630      	mov	r0, r6
 800753c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007540:	bfba      	itte	lt
 8007542:	461c      	movlt	r4, r3
 8007544:	2501      	movlt	r5, #1
 8007546:	2500      	movge	r5, #0
 8007548:	f7ff fcf6 	bl	8006f38 <_Balloc>
 800754c:	4602      	mov	r2, r0
 800754e:	b918      	cbnz	r0, 8007558 <__mdiff+0x60>
 8007550:	4b31      	ldr	r3, [pc, #196]	@ (8007618 <__mdiff+0x120>)
 8007552:	f240 2145 	movw	r1, #581	@ 0x245
 8007556:	e7e3      	b.n	8007520 <__mdiff+0x28>
 8007558:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800755c:	6926      	ldr	r6, [r4, #16]
 800755e:	60c5      	str	r5, [r0, #12]
 8007560:	f109 0310 	add.w	r3, r9, #16
 8007564:	f109 0514 	add.w	r5, r9, #20
 8007568:	f104 0e14 	add.w	lr, r4, #20
 800756c:	f100 0b14 	add.w	fp, r0, #20
 8007570:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007574:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	46d9      	mov	r9, fp
 800757c:	f04f 0c00 	mov.w	ip, #0
 8007580:	9b01      	ldr	r3, [sp, #4]
 8007582:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007586:	f853 af04 	ldr.w	sl, [r3, #4]!
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	fa1f f38a 	uxth.w	r3, sl
 8007590:	4619      	mov	r1, r3
 8007592:	b283      	uxth	r3, r0
 8007594:	1acb      	subs	r3, r1, r3
 8007596:	0c00      	lsrs	r0, r0, #16
 8007598:	4463      	add	r3, ip
 800759a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800759e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80075a8:	4576      	cmp	r6, lr
 80075aa:	f849 3b04 	str.w	r3, [r9], #4
 80075ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075b2:	d8e5      	bhi.n	8007580 <__mdiff+0x88>
 80075b4:	1b33      	subs	r3, r6, r4
 80075b6:	3b15      	subs	r3, #21
 80075b8:	f023 0303 	bic.w	r3, r3, #3
 80075bc:	3415      	adds	r4, #21
 80075be:	3304      	adds	r3, #4
 80075c0:	42a6      	cmp	r6, r4
 80075c2:	bf38      	it	cc
 80075c4:	2304      	movcc	r3, #4
 80075c6:	441d      	add	r5, r3
 80075c8:	445b      	add	r3, fp
 80075ca:	461e      	mov	r6, r3
 80075cc:	462c      	mov	r4, r5
 80075ce:	4544      	cmp	r4, r8
 80075d0:	d30e      	bcc.n	80075f0 <__mdiff+0xf8>
 80075d2:	f108 0103 	add.w	r1, r8, #3
 80075d6:	1b49      	subs	r1, r1, r5
 80075d8:	f021 0103 	bic.w	r1, r1, #3
 80075dc:	3d03      	subs	r5, #3
 80075de:	45a8      	cmp	r8, r5
 80075e0:	bf38      	it	cc
 80075e2:	2100      	movcc	r1, #0
 80075e4:	440b      	add	r3, r1
 80075e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075ea:	b191      	cbz	r1, 8007612 <__mdiff+0x11a>
 80075ec:	6117      	str	r7, [r2, #16]
 80075ee:	e79d      	b.n	800752c <__mdiff+0x34>
 80075f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80075f4:	46e6      	mov	lr, ip
 80075f6:	0c08      	lsrs	r0, r1, #16
 80075f8:	fa1c fc81 	uxtah	ip, ip, r1
 80075fc:	4471      	add	r1, lr
 80075fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007602:	b289      	uxth	r1, r1
 8007604:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007608:	f846 1b04 	str.w	r1, [r6], #4
 800760c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007610:	e7dd      	b.n	80075ce <__mdiff+0xd6>
 8007612:	3f01      	subs	r7, #1
 8007614:	e7e7      	b.n	80075e6 <__mdiff+0xee>
 8007616:	bf00      	nop
 8007618:	0800982d 	.word	0x0800982d
 800761c:	0800983e 	.word	0x0800983e

08007620 <__ulp>:
 8007620:	b082      	sub	sp, #8
 8007622:	ed8d 0b00 	vstr	d0, [sp]
 8007626:	9a01      	ldr	r2, [sp, #4]
 8007628:	4b0f      	ldr	r3, [pc, #60]	@ (8007668 <__ulp+0x48>)
 800762a:	4013      	ands	r3, r2
 800762c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007630:	2b00      	cmp	r3, #0
 8007632:	dc08      	bgt.n	8007646 <__ulp+0x26>
 8007634:	425b      	negs	r3, r3
 8007636:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800763a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800763e:	da04      	bge.n	800764a <__ulp+0x2a>
 8007640:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007644:	4113      	asrs	r3, r2
 8007646:	2200      	movs	r2, #0
 8007648:	e008      	b.n	800765c <__ulp+0x3c>
 800764a:	f1a2 0314 	sub.w	r3, r2, #20
 800764e:	2b1e      	cmp	r3, #30
 8007650:	bfda      	itte	le
 8007652:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007656:	40da      	lsrle	r2, r3
 8007658:	2201      	movgt	r2, #1
 800765a:	2300      	movs	r3, #0
 800765c:	4619      	mov	r1, r3
 800765e:	4610      	mov	r0, r2
 8007660:	ec41 0b10 	vmov	d0, r0, r1
 8007664:	b002      	add	sp, #8
 8007666:	4770      	bx	lr
 8007668:	7ff00000 	.word	0x7ff00000

0800766c <__b2d>:
 800766c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007670:	6906      	ldr	r6, [r0, #16]
 8007672:	f100 0814 	add.w	r8, r0, #20
 8007676:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800767a:	1f37      	subs	r7, r6, #4
 800767c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007680:	4610      	mov	r0, r2
 8007682:	f7ff fd4b 	bl	800711c <__hi0bits>
 8007686:	f1c0 0320 	rsb	r3, r0, #32
 800768a:	280a      	cmp	r0, #10
 800768c:	600b      	str	r3, [r1, #0]
 800768e:	491b      	ldr	r1, [pc, #108]	@ (80076fc <__b2d+0x90>)
 8007690:	dc15      	bgt.n	80076be <__b2d+0x52>
 8007692:	f1c0 0c0b 	rsb	ip, r0, #11
 8007696:	fa22 f30c 	lsr.w	r3, r2, ip
 800769a:	45b8      	cmp	r8, r7
 800769c:	ea43 0501 	orr.w	r5, r3, r1
 80076a0:	bf34      	ite	cc
 80076a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80076a6:	2300      	movcs	r3, #0
 80076a8:	3015      	adds	r0, #21
 80076aa:	fa02 f000 	lsl.w	r0, r2, r0
 80076ae:	fa23 f30c 	lsr.w	r3, r3, ip
 80076b2:	4303      	orrs	r3, r0
 80076b4:	461c      	mov	r4, r3
 80076b6:	ec45 4b10 	vmov	d0, r4, r5
 80076ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076be:	45b8      	cmp	r8, r7
 80076c0:	bf3a      	itte	cc
 80076c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80076c6:	f1a6 0708 	subcc.w	r7, r6, #8
 80076ca:	2300      	movcs	r3, #0
 80076cc:	380b      	subs	r0, #11
 80076ce:	d012      	beq.n	80076f6 <__b2d+0x8a>
 80076d0:	f1c0 0120 	rsb	r1, r0, #32
 80076d4:	fa23 f401 	lsr.w	r4, r3, r1
 80076d8:	4082      	lsls	r2, r0
 80076da:	4322      	orrs	r2, r4
 80076dc:	4547      	cmp	r7, r8
 80076de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80076e2:	bf8c      	ite	hi
 80076e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80076e8:	2200      	movls	r2, #0
 80076ea:	4083      	lsls	r3, r0
 80076ec:	40ca      	lsrs	r2, r1
 80076ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80076f2:	4313      	orrs	r3, r2
 80076f4:	e7de      	b.n	80076b4 <__b2d+0x48>
 80076f6:	ea42 0501 	orr.w	r5, r2, r1
 80076fa:	e7db      	b.n	80076b4 <__b2d+0x48>
 80076fc:	3ff00000 	.word	0x3ff00000

08007700 <__d2b>:
 8007700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007704:	460f      	mov	r7, r1
 8007706:	2101      	movs	r1, #1
 8007708:	ec59 8b10 	vmov	r8, r9, d0
 800770c:	4616      	mov	r6, r2
 800770e:	f7ff fc13 	bl	8006f38 <_Balloc>
 8007712:	4604      	mov	r4, r0
 8007714:	b930      	cbnz	r0, 8007724 <__d2b+0x24>
 8007716:	4602      	mov	r2, r0
 8007718:	4b23      	ldr	r3, [pc, #140]	@ (80077a8 <__d2b+0xa8>)
 800771a:	4824      	ldr	r0, [pc, #144]	@ (80077ac <__d2b+0xac>)
 800771c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007720:	f001 f996 	bl	8008a50 <__assert_func>
 8007724:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007728:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800772c:	b10d      	cbz	r5, 8007732 <__d2b+0x32>
 800772e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007732:	9301      	str	r3, [sp, #4]
 8007734:	f1b8 0300 	subs.w	r3, r8, #0
 8007738:	d023      	beq.n	8007782 <__d2b+0x82>
 800773a:	4668      	mov	r0, sp
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	f7ff fd0c 	bl	800715a <__lo0bits>
 8007742:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007746:	b1d0      	cbz	r0, 800777e <__d2b+0x7e>
 8007748:	f1c0 0320 	rsb	r3, r0, #32
 800774c:	fa02 f303 	lsl.w	r3, r2, r3
 8007750:	430b      	orrs	r3, r1
 8007752:	40c2      	lsrs	r2, r0
 8007754:	6163      	str	r3, [r4, #20]
 8007756:	9201      	str	r2, [sp, #4]
 8007758:	9b01      	ldr	r3, [sp, #4]
 800775a:	61a3      	str	r3, [r4, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	bf0c      	ite	eq
 8007760:	2201      	moveq	r2, #1
 8007762:	2202      	movne	r2, #2
 8007764:	6122      	str	r2, [r4, #16]
 8007766:	b1a5      	cbz	r5, 8007792 <__d2b+0x92>
 8007768:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800776c:	4405      	add	r5, r0
 800776e:	603d      	str	r5, [r7, #0]
 8007770:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007774:	6030      	str	r0, [r6, #0]
 8007776:	4620      	mov	r0, r4
 8007778:	b003      	add	sp, #12
 800777a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800777e:	6161      	str	r1, [r4, #20]
 8007780:	e7ea      	b.n	8007758 <__d2b+0x58>
 8007782:	a801      	add	r0, sp, #4
 8007784:	f7ff fce9 	bl	800715a <__lo0bits>
 8007788:	9b01      	ldr	r3, [sp, #4]
 800778a:	6163      	str	r3, [r4, #20]
 800778c:	3020      	adds	r0, #32
 800778e:	2201      	movs	r2, #1
 8007790:	e7e8      	b.n	8007764 <__d2b+0x64>
 8007792:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007796:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800779a:	6038      	str	r0, [r7, #0]
 800779c:	6918      	ldr	r0, [r3, #16]
 800779e:	f7ff fcbd 	bl	800711c <__hi0bits>
 80077a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077a6:	e7e5      	b.n	8007774 <__d2b+0x74>
 80077a8:	0800982d 	.word	0x0800982d
 80077ac:	0800983e 	.word	0x0800983e

080077b0 <__ratio>:
 80077b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b4:	b085      	sub	sp, #20
 80077b6:	e9cd 1000 	strd	r1, r0, [sp]
 80077ba:	a902      	add	r1, sp, #8
 80077bc:	f7ff ff56 	bl	800766c <__b2d>
 80077c0:	9800      	ldr	r0, [sp, #0]
 80077c2:	a903      	add	r1, sp, #12
 80077c4:	ec55 4b10 	vmov	r4, r5, d0
 80077c8:	f7ff ff50 	bl	800766c <__b2d>
 80077cc:	9b01      	ldr	r3, [sp, #4]
 80077ce:	6919      	ldr	r1, [r3, #16]
 80077d0:	9b00      	ldr	r3, [sp, #0]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	1ac9      	subs	r1, r1, r3
 80077d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80077da:	1a9b      	subs	r3, r3, r2
 80077dc:	ec5b ab10 	vmov	sl, fp, d0
 80077e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	bfce      	itee	gt
 80077e8:	462a      	movgt	r2, r5
 80077ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80077ee:	465a      	movle	r2, fp
 80077f0:	462f      	mov	r7, r5
 80077f2:	46d9      	mov	r9, fp
 80077f4:	bfcc      	ite	gt
 80077f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80077fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80077fe:	464b      	mov	r3, r9
 8007800:	4652      	mov	r2, sl
 8007802:	4620      	mov	r0, r4
 8007804:	4639      	mov	r1, r7
 8007806:	f7f9 f821 	bl	800084c <__aeabi_ddiv>
 800780a:	ec41 0b10 	vmov	d0, r0, r1
 800780e:	b005      	add	sp, #20
 8007810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007814 <__copybits>:
 8007814:	3901      	subs	r1, #1
 8007816:	b570      	push	{r4, r5, r6, lr}
 8007818:	1149      	asrs	r1, r1, #5
 800781a:	6914      	ldr	r4, [r2, #16]
 800781c:	3101      	adds	r1, #1
 800781e:	f102 0314 	add.w	r3, r2, #20
 8007822:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007826:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800782a:	1f05      	subs	r5, r0, #4
 800782c:	42a3      	cmp	r3, r4
 800782e:	d30c      	bcc.n	800784a <__copybits+0x36>
 8007830:	1aa3      	subs	r3, r4, r2
 8007832:	3b11      	subs	r3, #17
 8007834:	f023 0303 	bic.w	r3, r3, #3
 8007838:	3211      	adds	r2, #17
 800783a:	42a2      	cmp	r2, r4
 800783c:	bf88      	it	hi
 800783e:	2300      	movhi	r3, #0
 8007840:	4418      	add	r0, r3
 8007842:	2300      	movs	r3, #0
 8007844:	4288      	cmp	r0, r1
 8007846:	d305      	bcc.n	8007854 <__copybits+0x40>
 8007848:	bd70      	pop	{r4, r5, r6, pc}
 800784a:	f853 6b04 	ldr.w	r6, [r3], #4
 800784e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007852:	e7eb      	b.n	800782c <__copybits+0x18>
 8007854:	f840 3b04 	str.w	r3, [r0], #4
 8007858:	e7f4      	b.n	8007844 <__copybits+0x30>

0800785a <__any_on>:
 800785a:	f100 0214 	add.w	r2, r0, #20
 800785e:	6900      	ldr	r0, [r0, #16]
 8007860:	114b      	asrs	r3, r1, #5
 8007862:	4298      	cmp	r0, r3
 8007864:	b510      	push	{r4, lr}
 8007866:	db11      	blt.n	800788c <__any_on+0x32>
 8007868:	dd0a      	ble.n	8007880 <__any_on+0x26>
 800786a:	f011 011f 	ands.w	r1, r1, #31
 800786e:	d007      	beq.n	8007880 <__any_on+0x26>
 8007870:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007874:	fa24 f001 	lsr.w	r0, r4, r1
 8007878:	fa00 f101 	lsl.w	r1, r0, r1
 800787c:	428c      	cmp	r4, r1
 800787e:	d10b      	bne.n	8007898 <__any_on+0x3e>
 8007880:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007884:	4293      	cmp	r3, r2
 8007886:	d803      	bhi.n	8007890 <__any_on+0x36>
 8007888:	2000      	movs	r0, #0
 800788a:	bd10      	pop	{r4, pc}
 800788c:	4603      	mov	r3, r0
 800788e:	e7f7      	b.n	8007880 <__any_on+0x26>
 8007890:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007894:	2900      	cmp	r1, #0
 8007896:	d0f5      	beq.n	8007884 <__any_on+0x2a>
 8007898:	2001      	movs	r0, #1
 800789a:	e7f6      	b.n	800788a <__any_on+0x30>

0800789c <sulp>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	4604      	mov	r4, r0
 80078a0:	460d      	mov	r5, r1
 80078a2:	ec45 4b10 	vmov	d0, r4, r5
 80078a6:	4616      	mov	r6, r2
 80078a8:	f7ff feba 	bl	8007620 <__ulp>
 80078ac:	ec51 0b10 	vmov	r0, r1, d0
 80078b0:	b17e      	cbz	r6, 80078d2 <sulp+0x36>
 80078b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80078b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	dd09      	ble.n	80078d2 <sulp+0x36>
 80078be:	051b      	lsls	r3, r3, #20
 80078c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80078c4:	2400      	movs	r4, #0
 80078c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80078ca:	4622      	mov	r2, r4
 80078cc:	462b      	mov	r3, r5
 80078ce:	f7f8 fe93 	bl	80005f8 <__aeabi_dmul>
 80078d2:	ec41 0b10 	vmov	d0, r0, r1
 80078d6:	bd70      	pop	{r4, r5, r6, pc}

080078d8 <_strtod_l>:
 80078d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	b09f      	sub	sp, #124	@ 0x7c
 80078de:	460c      	mov	r4, r1
 80078e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80078e2:	2200      	movs	r2, #0
 80078e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80078e6:	9005      	str	r0, [sp, #20]
 80078e8:	f04f 0a00 	mov.w	sl, #0
 80078ec:	f04f 0b00 	mov.w	fp, #0
 80078f0:	460a      	mov	r2, r1
 80078f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80078f4:	7811      	ldrb	r1, [r2, #0]
 80078f6:	292b      	cmp	r1, #43	@ 0x2b
 80078f8:	d04a      	beq.n	8007990 <_strtod_l+0xb8>
 80078fa:	d838      	bhi.n	800796e <_strtod_l+0x96>
 80078fc:	290d      	cmp	r1, #13
 80078fe:	d832      	bhi.n	8007966 <_strtod_l+0x8e>
 8007900:	2908      	cmp	r1, #8
 8007902:	d832      	bhi.n	800796a <_strtod_l+0x92>
 8007904:	2900      	cmp	r1, #0
 8007906:	d03b      	beq.n	8007980 <_strtod_l+0xa8>
 8007908:	2200      	movs	r2, #0
 800790a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800790c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800790e:	782a      	ldrb	r2, [r5, #0]
 8007910:	2a30      	cmp	r2, #48	@ 0x30
 8007912:	f040 80b3 	bne.w	8007a7c <_strtod_l+0x1a4>
 8007916:	786a      	ldrb	r2, [r5, #1]
 8007918:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800791c:	2a58      	cmp	r2, #88	@ 0x58
 800791e:	d16e      	bne.n	80079fe <_strtod_l+0x126>
 8007920:	9302      	str	r3, [sp, #8]
 8007922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007924:	9301      	str	r3, [sp, #4]
 8007926:	ab1a      	add	r3, sp, #104	@ 0x68
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	4a8e      	ldr	r2, [pc, #568]	@ (8007b64 <_strtod_l+0x28c>)
 800792c:	9805      	ldr	r0, [sp, #20]
 800792e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007930:	a919      	add	r1, sp, #100	@ 0x64
 8007932:	f001 f927 	bl	8008b84 <__gethex>
 8007936:	f010 060f 	ands.w	r6, r0, #15
 800793a:	4604      	mov	r4, r0
 800793c:	d005      	beq.n	800794a <_strtod_l+0x72>
 800793e:	2e06      	cmp	r6, #6
 8007940:	d128      	bne.n	8007994 <_strtod_l+0xbc>
 8007942:	3501      	adds	r5, #1
 8007944:	2300      	movs	r3, #0
 8007946:	9519      	str	r5, [sp, #100]	@ 0x64
 8007948:	930b      	str	r3, [sp, #44]	@ 0x2c
 800794a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800794c:	2b00      	cmp	r3, #0
 800794e:	f040 858e 	bne.w	800846e <_strtod_l+0xb96>
 8007952:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007954:	b1cb      	cbz	r3, 800798a <_strtod_l+0xb2>
 8007956:	4652      	mov	r2, sl
 8007958:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800795c:	ec43 2b10 	vmov	d0, r2, r3
 8007960:	b01f      	add	sp, #124	@ 0x7c
 8007962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007966:	2920      	cmp	r1, #32
 8007968:	d1ce      	bne.n	8007908 <_strtod_l+0x30>
 800796a:	3201      	adds	r2, #1
 800796c:	e7c1      	b.n	80078f2 <_strtod_l+0x1a>
 800796e:	292d      	cmp	r1, #45	@ 0x2d
 8007970:	d1ca      	bne.n	8007908 <_strtod_l+0x30>
 8007972:	2101      	movs	r1, #1
 8007974:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007976:	1c51      	adds	r1, r2, #1
 8007978:	9119      	str	r1, [sp, #100]	@ 0x64
 800797a:	7852      	ldrb	r2, [r2, #1]
 800797c:	2a00      	cmp	r2, #0
 800797e:	d1c5      	bne.n	800790c <_strtod_l+0x34>
 8007980:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007982:	9419      	str	r4, [sp, #100]	@ 0x64
 8007984:	2b00      	cmp	r3, #0
 8007986:	f040 8570 	bne.w	800846a <_strtod_l+0xb92>
 800798a:	4652      	mov	r2, sl
 800798c:	465b      	mov	r3, fp
 800798e:	e7e5      	b.n	800795c <_strtod_l+0x84>
 8007990:	2100      	movs	r1, #0
 8007992:	e7ef      	b.n	8007974 <_strtod_l+0x9c>
 8007994:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007996:	b13a      	cbz	r2, 80079a8 <_strtod_l+0xd0>
 8007998:	2135      	movs	r1, #53	@ 0x35
 800799a:	a81c      	add	r0, sp, #112	@ 0x70
 800799c:	f7ff ff3a 	bl	8007814 <__copybits>
 80079a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079a2:	9805      	ldr	r0, [sp, #20]
 80079a4:	f7ff fb08 	bl	8006fb8 <_Bfree>
 80079a8:	3e01      	subs	r6, #1
 80079aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80079ac:	2e04      	cmp	r6, #4
 80079ae:	d806      	bhi.n	80079be <_strtod_l+0xe6>
 80079b0:	e8df f006 	tbb	[pc, r6]
 80079b4:	201d0314 	.word	0x201d0314
 80079b8:	14          	.byte	0x14
 80079b9:	00          	.byte	0x00
 80079ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80079be:	05e1      	lsls	r1, r4, #23
 80079c0:	bf48      	it	mi
 80079c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80079c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80079ca:	0d1b      	lsrs	r3, r3, #20
 80079cc:	051b      	lsls	r3, r3, #20
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1bb      	bne.n	800794a <_strtod_l+0x72>
 80079d2:	f7fe fb31 	bl	8006038 <__errno>
 80079d6:	2322      	movs	r3, #34	@ 0x22
 80079d8:	6003      	str	r3, [r0, #0]
 80079da:	e7b6      	b.n	800794a <_strtod_l+0x72>
 80079dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80079e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80079e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80079e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80079ec:	e7e7      	b.n	80079be <_strtod_l+0xe6>
 80079ee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007b6c <_strtod_l+0x294>
 80079f2:	e7e4      	b.n	80079be <_strtod_l+0xe6>
 80079f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80079f8:	f04f 3aff 	mov.w	sl, #4294967295
 80079fc:	e7df      	b.n	80079be <_strtod_l+0xe6>
 80079fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a04:	785b      	ldrb	r3, [r3, #1]
 8007a06:	2b30      	cmp	r3, #48	@ 0x30
 8007a08:	d0f9      	beq.n	80079fe <_strtod_l+0x126>
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d09d      	beq.n	800794a <_strtod_l+0x72>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a14:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a16:	2300      	movs	r3, #0
 8007a18:	9308      	str	r3, [sp, #32]
 8007a1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a1c:	461f      	mov	r7, r3
 8007a1e:	220a      	movs	r2, #10
 8007a20:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007a22:	7805      	ldrb	r5, [r0, #0]
 8007a24:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007a28:	b2d9      	uxtb	r1, r3
 8007a2a:	2909      	cmp	r1, #9
 8007a2c:	d928      	bls.n	8007a80 <_strtod_l+0x1a8>
 8007a2e:	494e      	ldr	r1, [pc, #312]	@ (8007b68 <_strtod_l+0x290>)
 8007a30:	2201      	movs	r2, #1
 8007a32:	f000 ffd5 	bl	80089e0 <strncmp>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d032      	beq.n	8007aa0 <_strtod_l+0x1c8>
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	462a      	mov	r2, r5
 8007a3e:	4681      	mov	r9, r0
 8007a40:	463d      	mov	r5, r7
 8007a42:	4603      	mov	r3, r0
 8007a44:	2a65      	cmp	r2, #101	@ 0x65
 8007a46:	d001      	beq.n	8007a4c <_strtod_l+0x174>
 8007a48:	2a45      	cmp	r2, #69	@ 0x45
 8007a4a:	d114      	bne.n	8007a76 <_strtod_l+0x19e>
 8007a4c:	b91d      	cbnz	r5, 8007a56 <_strtod_l+0x17e>
 8007a4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a50:	4302      	orrs	r2, r0
 8007a52:	d095      	beq.n	8007980 <_strtod_l+0xa8>
 8007a54:	2500      	movs	r5, #0
 8007a56:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007a58:	1c62      	adds	r2, r4, #1
 8007a5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a5c:	7862      	ldrb	r2, [r4, #1]
 8007a5e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007a60:	d077      	beq.n	8007b52 <_strtod_l+0x27a>
 8007a62:	2a2d      	cmp	r2, #45	@ 0x2d
 8007a64:	d07b      	beq.n	8007b5e <_strtod_l+0x286>
 8007a66:	f04f 0c00 	mov.w	ip, #0
 8007a6a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007a6e:	2909      	cmp	r1, #9
 8007a70:	f240 8082 	bls.w	8007b78 <_strtod_l+0x2a0>
 8007a74:	9419      	str	r4, [sp, #100]	@ 0x64
 8007a76:	f04f 0800 	mov.w	r8, #0
 8007a7a:	e0a2      	b.n	8007bc2 <_strtod_l+0x2ea>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	e7c7      	b.n	8007a10 <_strtod_l+0x138>
 8007a80:	2f08      	cmp	r7, #8
 8007a82:	bfd5      	itete	le
 8007a84:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007a86:	9908      	ldrgt	r1, [sp, #32]
 8007a88:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a8c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007a90:	f100 0001 	add.w	r0, r0, #1
 8007a94:	bfd4      	ite	le
 8007a96:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007a98:	9308      	strgt	r3, [sp, #32]
 8007a9a:	3701      	adds	r7, #1
 8007a9c:	9019      	str	r0, [sp, #100]	@ 0x64
 8007a9e:	e7bf      	b.n	8007a20 <_strtod_l+0x148>
 8007aa0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007aa2:	1c5a      	adds	r2, r3, #1
 8007aa4:	9219      	str	r2, [sp, #100]	@ 0x64
 8007aa6:	785a      	ldrb	r2, [r3, #1]
 8007aa8:	b37f      	cbz	r7, 8007b0a <_strtod_l+0x232>
 8007aaa:	4681      	mov	r9, r0
 8007aac:	463d      	mov	r5, r7
 8007aae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007ab2:	2b09      	cmp	r3, #9
 8007ab4:	d912      	bls.n	8007adc <_strtod_l+0x204>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e7c4      	b.n	8007a44 <_strtod_l+0x16c>
 8007aba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ac0:	785a      	ldrb	r2, [r3, #1]
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	2a30      	cmp	r2, #48	@ 0x30
 8007ac6:	d0f8      	beq.n	8007aba <_strtod_l+0x1e2>
 8007ac8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	f200 84d3 	bhi.w	8008478 <_strtod_l+0xba0>
 8007ad2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ad4:	930c      	str	r3, [sp, #48]	@ 0x30
 8007ad6:	4681      	mov	r9, r0
 8007ad8:	2000      	movs	r0, #0
 8007ada:	4605      	mov	r5, r0
 8007adc:	3a30      	subs	r2, #48	@ 0x30
 8007ade:	f100 0301 	add.w	r3, r0, #1
 8007ae2:	d02a      	beq.n	8007b3a <_strtod_l+0x262>
 8007ae4:	4499      	add	r9, r3
 8007ae6:	eb00 0c05 	add.w	ip, r0, r5
 8007aea:	462b      	mov	r3, r5
 8007aec:	210a      	movs	r1, #10
 8007aee:	4563      	cmp	r3, ip
 8007af0:	d10d      	bne.n	8007b0e <_strtod_l+0x236>
 8007af2:	1c69      	adds	r1, r5, #1
 8007af4:	4401      	add	r1, r0
 8007af6:	4428      	add	r0, r5
 8007af8:	2808      	cmp	r0, #8
 8007afa:	dc16      	bgt.n	8007b2a <_strtod_l+0x252>
 8007afc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007afe:	230a      	movs	r3, #10
 8007b00:	fb03 2300 	mla	r3, r3, r0, r2
 8007b04:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b06:	2300      	movs	r3, #0
 8007b08:	e018      	b.n	8007b3c <_strtod_l+0x264>
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	e7da      	b.n	8007ac4 <_strtod_l+0x1ec>
 8007b0e:	2b08      	cmp	r3, #8
 8007b10:	f103 0301 	add.w	r3, r3, #1
 8007b14:	dc03      	bgt.n	8007b1e <_strtod_l+0x246>
 8007b16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007b18:	434e      	muls	r6, r1
 8007b1a:	960a      	str	r6, [sp, #40]	@ 0x28
 8007b1c:	e7e7      	b.n	8007aee <_strtod_l+0x216>
 8007b1e:	2b10      	cmp	r3, #16
 8007b20:	bfde      	ittt	le
 8007b22:	9e08      	ldrle	r6, [sp, #32]
 8007b24:	434e      	mulle	r6, r1
 8007b26:	9608      	strle	r6, [sp, #32]
 8007b28:	e7e1      	b.n	8007aee <_strtod_l+0x216>
 8007b2a:	280f      	cmp	r0, #15
 8007b2c:	dceb      	bgt.n	8007b06 <_strtod_l+0x22e>
 8007b2e:	9808      	ldr	r0, [sp, #32]
 8007b30:	230a      	movs	r3, #10
 8007b32:	fb03 2300 	mla	r3, r3, r0, r2
 8007b36:	9308      	str	r3, [sp, #32]
 8007b38:	e7e5      	b.n	8007b06 <_strtod_l+0x22e>
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b3e:	1c50      	adds	r0, r2, #1
 8007b40:	9019      	str	r0, [sp, #100]	@ 0x64
 8007b42:	7852      	ldrb	r2, [r2, #1]
 8007b44:	4618      	mov	r0, r3
 8007b46:	460d      	mov	r5, r1
 8007b48:	e7b1      	b.n	8007aae <_strtod_l+0x1d6>
 8007b4a:	f04f 0900 	mov.w	r9, #0
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e77d      	b.n	8007a4e <_strtod_l+0x176>
 8007b52:	f04f 0c00 	mov.w	ip, #0
 8007b56:	1ca2      	adds	r2, r4, #2
 8007b58:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b5a:	78a2      	ldrb	r2, [r4, #2]
 8007b5c:	e785      	b.n	8007a6a <_strtod_l+0x192>
 8007b5e:	f04f 0c01 	mov.w	ip, #1
 8007b62:	e7f8      	b.n	8007b56 <_strtod_l+0x27e>
 8007b64:	080099b0 	.word	0x080099b0
 8007b68:	08009998 	.word	0x08009998
 8007b6c:	7ff00000 	.word	0x7ff00000
 8007b70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b72:	1c51      	adds	r1, r2, #1
 8007b74:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b76:	7852      	ldrb	r2, [r2, #1]
 8007b78:	2a30      	cmp	r2, #48	@ 0x30
 8007b7a:	d0f9      	beq.n	8007b70 <_strtod_l+0x298>
 8007b7c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007b80:	2908      	cmp	r1, #8
 8007b82:	f63f af78 	bhi.w	8007a76 <_strtod_l+0x19e>
 8007b86:	3a30      	subs	r2, #48	@ 0x30
 8007b88:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b8c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007b8e:	f04f 080a 	mov.w	r8, #10
 8007b92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b94:	1c56      	adds	r6, r2, #1
 8007b96:	9619      	str	r6, [sp, #100]	@ 0x64
 8007b98:	7852      	ldrb	r2, [r2, #1]
 8007b9a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007b9e:	f1be 0f09 	cmp.w	lr, #9
 8007ba2:	d939      	bls.n	8007c18 <_strtod_l+0x340>
 8007ba4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007ba6:	1a76      	subs	r6, r6, r1
 8007ba8:	2e08      	cmp	r6, #8
 8007baa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007bae:	dc03      	bgt.n	8007bb8 <_strtod_l+0x2e0>
 8007bb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007bb2:	4588      	cmp	r8, r1
 8007bb4:	bfa8      	it	ge
 8007bb6:	4688      	movge	r8, r1
 8007bb8:	f1bc 0f00 	cmp.w	ip, #0
 8007bbc:	d001      	beq.n	8007bc2 <_strtod_l+0x2ea>
 8007bbe:	f1c8 0800 	rsb	r8, r8, #0
 8007bc2:	2d00      	cmp	r5, #0
 8007bc4:	d14e      	bne.n	8007c64 <_strtod_l+0x38c>
 8007bc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007bc8:	4308      	orrs	r0, r1
 8007bca:	f47f aebe 	bne.w	800794a <_strtod_l+0x72>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f47f aed6 	bne.w	8007980 <_strtod_l+0xa8>
 8007bd4:	2a69      	cmp	r2, #105	@ 0x69
 8007bd6:	d028      	beq.n	8007c2a <_strtod_l+0x352>
 8007bd8:	dc25      	bgt.n	8007c26 <_strtod_l+0x34e>
 8007bda:	2a49      	cmp	r2, #73	@ 0x49
 8007bdc:	d025      	beq.n	8007c2a <_strtod_l+0x352>
 8007bde:	2a4e      	cmp	r2, #78	@ 0x4e
 8007be0:	f47f aece 	bne.w	8007980 <_strtod_l+0xa8>
 8007be4:	499b      	ldr	r1, [pc, #620]	@ (8007e54 <_strtod_l+0x57c>)
 8007be6:	a819      	add	r0, sp, #100	@ 0x64
 8007be8:	f001 f9ee 	bl	8008fc8 <__match>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	f43f aec7 	beq.w	8007980 <_strtod_l+0xa8>
 8007bf2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	2b28      	cmp	r3, #40	@ 0x28
 8007bf8:	d12e      	bne.n	8007c58 <_strtod_l+0x380>
 8007bfa:	4997      	ldr	r1, [pc, #604]	@ (8007e58 <_strtod_l+0x580>)
 8007bfc:	aa1c      	add	r2, sp, #112	@ 0x70
 8007bfe:	a819      	add	r0, sp, #100	@ 0x64
 8007c00:	f001 f9f6 	bl	8008ff0 <__hexnan>
 8007c04:	2805      	cmp	r0, #5
 8007c06:	d127      	bne.n	8007c58 <_strtod_l+0x380>
 8007c08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007c0a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007c0e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007c12:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007c16:	e698      	b.n	800794a <_strtod_l+0x72>
 8007c18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007c1a:	fb08 2101 	mla	r1, r8, r1, r2
 8007c1e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007c22:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c24:	e7b5      	b.n	8007b92 <_strtod_l+0x2ba>
 8007c26:	2a6e      	cmp	r2, #110	@ 0x6e
 8007c28:	e7da      	b.n	8007be0 <_strtod_l+0x308>
 8007c2a:	498c      	ldr	r1, [pc, #560]	@ (8007e5c <_strtod_l+0x584>)
 8007c2c:	a819      	add	r0, sp, #100	@ 0x64
 8007c2e:	f001 f9cb 	bl	8008fc8 <__match>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	f43f aea4 	beq.w	8007980 <_strtod_l+0xa8>
 8007c38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c3a:	4989      	ldr	r1, [pc, #548]	@ (8007e60 <_strtod_l+0x588>)
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	a819      	add	r0, sp, #100	@ 0x64
 8007c40:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c42:	f001 f9c1 	bl	8008fc8 <__match>
 8007c46:	b910      	cbnz	r0, 8007c4e <_strtod_l+0x376>
 8007c48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c4e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007e70 <_strtod_l+0x598>
 8007c52:	f04f 0a00 	mov.w	sl, #0
 8007c56:	e678      	b.n	800794a <_strtod_l+0x72>
 8007c58:	4882      	ldr	r0, [pc, #520]	@ (8007e64 <_strtod_l+0x58c>)
 8007c5a:	f000 fef1 	bl	8008a40 <nan>
 8007c5e:	ec5b ab10 	vmov	sl, fp, d0
 8007c62:	e672      	b.n	800794a <_strtod_l+0x72>
 8007c64:	eba8 0309 	sub.w	r3, r8, r9
 8007c68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c6c:	2f00      	cmp	r7, #0
 8007c6e:	bf08      	it	eq
 8007c70:	462f      	moveq	r7, r5
 8007c72:	2d10      	cmp	r5, #16
 8007c74:	462c      	mov	r4, r5
 8007c76:	bfa8      	it	ge
 8007c78:	2410      	movge	r4, #16
 8007c7a:	f7f8 fc43 	bl	8000504 <__aeabi_ui2d>
 8007c7e:	2d09      	cmp	r5, #9
 8007c80:	4682      	mov	sl, r0
 8007c82:	468b      	mov	fp, r1
 8007c84:	dc13      	bgt.n	8007cae <_strtod_l+0x3d6>
 8007c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f43f ae5e 	beq.w	800794a <_strtod_l+0x72>
 8007c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c90:	dd78      	ble.n	8007d84 <_strtod_l+0x4ac>
 8007c92:	2b16      	cmp	r3, #22
 8007c94:	dc5f      	bgt.n	8007d56 <_strtod_l+0x47e>
 8007c96:	4974      	ldr	r1, [pc, #464]	@ (8007e68 <_strtod_l+0x590>)
 8007c98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ca0:	4652      	mov	r2, sl
 8007ca2:	465b      	mov	r3, fp
 8007ca4:	f7f8 fca8 	bl	80005f8 <__aeabi_dmul>
 8007ca8:	4682      	mov	sl, r0
 8007caa:	468b      	mov	fp, r1
 8007cac:	e64d      	b.n	800794a <_strtod_l+0x72>
 8007cae:	4b6e      	ldr	r3, [pc, #440]	@ (8007e68 <_strtod_l+0x590>)
 8007cb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007cb8:	f7f8 fc9e 	bl	80005f8 <__aeabi_dmul>
 8007cbc:	4682      	mov	sl, r0
 8007cbe:	9808      	ldr	r0, [sp, #32]
 8007cc0:	468b      	mov	fp, r1
 8007cc2:	f7f8 fc1f 	bl	8000504 <__aeabi_ui2d>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4650      	mov	r0, sl
 8007ccc:	4659      	mov	r1, fp
 8007cce:	f7f8 fadd 	bl	800028c <__adddf3>
 8007cd2:	2d0f      	cmp	r5, #15
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	468b      	mov	fp, r1
 8007cd8:	ddd5      	ble.n	8007c86 <_strtod_l+0x3ae>
 8007cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cdc:	1b2c      	subs	r4, r5, r4
 8007cde:	441c      	add	r4, r3
 8007ce0:	2c00      	cmp	r4, #0
 8007ce2:	f340 8096 	ble.w	8007e12 <_strtod_l+0x53a>
 8007ce6:	f014 030f 	ands.w	r3, r4, #15
 8007cea:	d00a      	beq.n	8007d02 <_strtod_l+0x42a>
 8007cec:	495e      	ldr	r1, [pc, #376]	@ (8007e68 <_strtod_l+0x590>)
 8007cee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cf2:	4652      	mov	r2, sl
 8007cf4:	465b      	mov	r3, fp
 8007cf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cfa:	f7f8 fc7d 	bl	80005f8 <__aeabi_dmul>
 8007cfe:	4682      	mov	sl, r0
 8007d00:	468b      	mov	fp, r1
 8007d02:	f034 040f 	bics.w	r4, r4, #15
 8007d06:	d073      	beq.n	8007df0 <_strtod_l+0x518>
 8007d08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007d0c:	dd48      	ble.n	8007da0 <_strtod_l+0x4c8>
 8007d0e:	2400      	movs	r4, #0
 8007d10:	46a0      	mov	r8, r4
 8007d12:	940a      	str	r4, [sp, #40]	@ 0x28
 8007d14:	46a1      	mov	r9, r4
 8007d16:	9a05      	ldr	r2, [sp, #20]
 8007d18:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007e70 <_strtod_l+0x598>
 8007d1c:	2322      	movs	r3, #34	@ 0x22
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	f04f 0a00 	mov.w	sl, #0
 8007d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f43f ae0f 	beq.w	800794a <_strtod_l+0x72>
 8007d2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d2e:	9805      	ldr	r0, [sp, #20]
 8007d30:	f7ff f942 	bl	8006fb8 <_Bfree>
 8007d34:	9805      	ldr	r0, [sp, #20]
 8007d36:	4649      	mov	r1, r9
 8007d38:	f7ff f93e 	bl	8006fb8 <_Bfree>
 8007d3c:	9805      	ldr	r0, [sp, #20]
 8007d3e:	4641      	mov	r1, r8
 8007d40:	f7ff f93a 	bl	8006fb8 <_Bfree>
 8007d44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d46:	9805      	ldr	r0, [sp, #20]
 8007d48:	f7ff f936 	bl	8006fb8 <_Bfree>
 8007d4c:	9805      	ldr	r0, [sp, #20]
 8007d4e:	4621      	mov	r1, r4
 8007d50:	f7ff f932 	bl	8006fb8 <_Bfree>
 8007d54:	e5f9      	b.n	800794a <_strtod_l+0x72>
 8007d56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	dbbc      	blt.n	8007cda <_strtod_l+0x402>
 8007d60:	4c41      	ldr	r4, [pc, #260]	@ (8007e68 <_strtod_l+0x590>)
 8007d62:	f1c5 050f 	rsb	r5, r5, #15
 8007d66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007d6a:	4652      	mov	r2, sl
 8007d6c:	465b      	mov	r3, fp
 8007d6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d72:	f7f8 fc41 	bl	80005f8 <__aeabi_dmul>
 8007d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d78:	1b5d      	subs	r5, r3, r5
 8007d7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007d7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d82:	e78f      	b.n	8007ca4 <_strtod_l+0x3cc>
 8007d84:	3316      	adds	r3, #22
 8007d86:	dba8      	blt.n	8007cda <_strtod_l+0x402>
 8007d88:	4b37      	ldr	r3, [pc, #220]	@ (8007e68 <_strtod_l+0x590>)
 8007d8a:	eba9 0808 	sub.w	r8, r9, r8
 8007d8e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007d92:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007d96:	4650      	mov	r0, sl
 8007d98:	4659      	mov	r1, fp
 8007d9a:	f7f8 fd57 	bl	800084c <__aeabi_ddiv>
 8007d9e:	e783      	b.n	8007ca8 <_strtod_l+0x3d0>
 8007da0:	4b32      	ldr	r3, [pc, #200]	@ (8007e6c <_strtod_l+0x594>)
 8007da2:	9308      	str	r3, [sp, #32]
 8007da4:	2300      	movs	r3, #0
 8007da6:	1124      	asrs	r4, r4, #4
 8007da8:	4650      	mov	r0, sl
 8007daa:	4659      	mov	r1, fp
 8007dac:	461e      	mov	r6, r3
 8007dae:	2c01      	cmp	r4, #1
 8007db0:	dc21      	bgt.n	8007df6 <_strtod_l+0x51e>
 8007db2:	b10b      	cbz	r3, 8007db8 <_strtod_l+0x4e0>
 8007db4:	4682      	mov	sl, r0
 8007db6:	468b      	mov	fp, r1
 8007db8:	492c      	ldr	r1, [pc, #176]	@ (8007e6c <_strtod_l+0x594>)
 8007dba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007dbe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007dc2:	4652      	mov	r2, sl
 8007dc4:	465b      	mov	r3, fp
 8007dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dca:	f7f8 fc15 	bl	80005f8 <__aeabi_dmul>
 8007dce:	4b28      	ldr	r3, [pc, #160]	@ (8007e70 <_strtod_l+0x598>)
 8007dd0:	460a      	mov	r2, r1
 8007dd2:	400b      	ands	r3, r1
 8007dd4:	4927      	ldr	r1, [pc, #156]	@ (8007e74 <_strtod_l+0x59c>)
 8007dd6:	428b      	cmp	r3, r1
 8007dd8:	4682      	mov	sl, r0
 8007dda:	d898      	bhi.n	8007d0e <_strtod_l+0x436>
 8007ddc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007de0:	428b      	cmp	r3, r1
 8007de2:	bf86      	itte	hi
 8007de4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007e78 <_strtod_l+0x5a0>
 8007de8:	f04f 3aff 	movhi.w	sl, #4294967295
 8007dec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007df0:	2300      	movs	r3, #0
 8007df2:	9308      	str	r3, [sp, #32]
 8007df4:	e07a      	b.n	8007eec <_strtod_l+0x614>
 8007df6:	07e2      	lsls	r2, r4, #31
 8007df8:	d505      	bpl.n	8007e06 <_strtod_l+0x52e>
 8007dfa:	9b08      	ldr	r3, [sp, #32]
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f7f8 fbfa 	bl	80005f8 <__aeabi_dmul>
 8007e04:	2301      	movs	r3, #1
 8007e06:	9a08      	ldr	r2, [sp, #32]
 8007e08:	3208      	adds	r2, #8
 8007e0a:	3601      	adds	r6, #1
 8007e0c:	1064      	asrs	r4, r4, #1
 8007e0e:	9208      	str	r2, [sp, #32]
 8007e10:	e7cd      	b.n	8007dae <_strtod_l+0x4d6>
 8007e12:	d0ed      	beq.n	8007df0 <_strtod_l+0x518>
 8007e14:	4264      	negs	r4, r4
 8007e16:	f014 020f 	ands.w	r2, r4, #15
 8007e1a:	d00a      	beq.n	8007e32 <_strtod_l+0x55a>
 8007e1c:	4b12      	ldr	r3, [pc, #72]	@ (8007e68 <_strtod_l+0x590>)
 8007e1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e22:	4650      	mov	r0, sl
 8007e24:	4659      	mov	r1, fp
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	f7f8 fd0f 	bl	800084c <__aeabi_ddiv>
 8007e2e:	4682      	mov	sl, r0
 8007e30:	468b      	mov	fp, r1
 8007e32:	1124      	asrs	r4, r4, #4
 8007e34:	d0dc      	beq.n	8007df0 <_strtod_l+0x518>
 8007e36:	2c1f      	cmp	r4, #31
 8007e38:	dd20      	ble.n	8007e7c <_strtod_l+0x5a4>
 8007e3a:	2400      	movs	r4, #0
 8007e3c:	46a0      	mov	r8, r4
 8007e3e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007e40:	46a1      	mov	r9, r4
 8007e42:	9a05      	ldr	r2, [sp, #20]
 8007e44:	2322      	movs	r3, #34	@ 0x22
 8007e46:	f04f 0a00 	mov.w	sl, #0
 8007e4a:	f04f 0b00 	mov.w	fp, #0
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	e768      	b.n	8007d24 <_strtod_l+0x44c>
 8007e52:	bf00      	nop
 8007e54:	08009785 	.word	0x08009785
 8007e58:	0800999c 	.word	0x0800999c
 8007e5c:	0800977d 	.word	0x0800977d
 8007e60:	080097b4 	.word	0x080097b4
 8007e64:	08009b45 	.word	0x08009b45
 8007e68:	080098d0 	.word	0x080098d0
 8007e6c:	080098a8 	.word	0x080098a8
 8007e70:	7ff00000 	.word	0x7ff00000
 8007e74:	7ca00000 	.word	0x7ca00000
 8007e78:	7fefffff 	.word	0x7fefffff
 8007e7c:	f014 0310 	ands.w	r3, r4, #16
 8007e80:	bf18      	it	ne
 8007e82:	236a      	movne	r3, #106	@ 0x6a
 8007e84:	4ea9      	ldr	r6, [pc, #676]	@ (800812c <_strtod_l+0x854>)
 8007e86:	9308      	str	r3, [sp, #32]
 8007e88:	4650      	mov	r0, sl
 8007e8a:	4659      	mov	r1, fp
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	07e2      	lsls	r2, r4, #31
 8007e90:	d504      	bpl.n	8007e9c <_strtod_l+0x5c4>
 8007e92:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e96:	f7f8 fbaf 	bl	80005f8 <__aeabi_dmul>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	1064      	asrs	r4, r4, #1
 8007e9e:	f106 0608 	add.w	r6, r6, #8
 8007ea2:	d1f4      	bne.n	8007e8e <_strtod_l+0x5b6>
 8007ea4:	b10b      	cbz	r3, 8007eaa <_strtod_l+0x5d2>
 8007ea6:	4682      	mov	sl, r0
 8007ea8:	468b      	mov	fp, r1
 8007eaa:	9b08      	ldr	r3, [sp, #32]
 8007eac:	b1b3      	cbz	r3, 8007edc <_strtod_l+0x604>
 8007eae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007eb2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	4659      	mov	r1, fp
 8007eba:	dd0f      	ble.n	8007edc <_strtod_l+0x604>
 8007ebc:	2b1f      	cmp	r3, #31
 8007ebe:	dd55      	ble.n	8007f6c <_strtod_l+0x694>
 8007ec0:	2b34      	cmp	r3, #52	@ 0x34
 8007ec2:	bfde      	ittt	le
 8007ec4:	f04f 33ff 	movle.w	r3, #4294967295
 8007ec8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007ecc:	4093      	lslle	r3, r2
 8007ece:	f04f 0a00 	mov.w	sl, #0
 8007ed2:	bfcc      	ite	gt
 8007ed4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007ed8:	ea03 0b01 	andle.w	fp, r3, r1
 8007edc:	2200      	movs	r2, #0
 8007ede:	2300      	movs	r3, #0
 8007ee0:	4650      	mov	r0, sl
 8007ee2:	4659      	mov	r1, fp
 8007ee4:	f7f8 fdf0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d1a6      	bne.n	8007e3a <_strtod_l+0x562>
 8007eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007ef2:	9805      	ldr	r0, [sp, #20]
 8007ef4:	462b      	mov	r3, r5
 8007ef6:	463a      	mov	r2, r7
 8007ef8:	f7ff f8c6 	bl	8007088 <__s2b>
 8007efc:	900a      	str	r0, [sp, #40]	@ 0x28
 8007efe:	2800      	cmp	r0, #0
 8007f00:	f43f af05 	beq.w	8007d0e <_strtod_l+0x436>
 8007f04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f06:	2a00      	cmp	r2, #0
 8007f08:	eba9 0308 	sub.w	r3, r9, r8
 8007f0c:	bfa8      	it	ge
 8007f0e:	2300      	movge	r3, #0
 8007f10:	9312      	str	r3, [sp, #72]	@ 0x48
 8007f12:	2400      	movs	r4, #0
 8007f14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007f18:	9316      	str	r3, [sp, #88]	@ 0x58
 8007f1a:	46a0      	mov	r8, r4
 8007f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f1e:	9805      	ldr	r0, [sp, #20]
 8007f20:	6859      	ldr	r1, [r3, #4]
 8007f22:	f7ff f809 	bl	8006f38 <_Balloc>
 8007f26:	4681      	mov	r9, r0
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	f43f aef4 	beq.w	8007d16 <_strtod_l+0x43e>
 8007f2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f30:	691a      	ldr	r2, [r3, #16]
 8007f32:	3202      	adds	r2, #2
 8007f34:	f103 010c 	add.w	r1, r3, #12
 8007f38:	0092      	lsls	r2, r2, #2
 8007f3a:	300c      	adds	r0, #12
 8007f3c:	f000 fd72 	bl	8008a24 <memcpy>
 8007f40:	ec4b ab10 	vmov	d0, sl, fp
 8007f44:	9805      	ldr	r0, [sp, #20]
 8007f46:	aa1c      	add	r2, sp, #112	@ 0x70
 8007f48:	a91b      	add	r1, sp, #108	@ 0x6c
 8007f4a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007f4e:	f7ff fbd7 	bl	8007700 <__d2b>
 8007f52:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f54:	2800      	cmp	r0, #0
 8007f56:	f43f aede 	beq.w	8007d16 <_strtod_l+0x43e>
 8007f5a:	9805      	ldr	r0, [sp, #20]
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	f7ff f929 	bl	80071b4 <__i2b>
 8007f62:	4680      	mov	r8, r0
 8007f64:	b948      	cbnz	r0, 8007f7a <_strtod_l+0x6a2>
 8007f66:	f04f 0800 	mov.w	r8, #0
 8007f6a:	e6d4      	b.n	8007d16 <_strtod_l+0x43e>
 8007f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f70:	fa02 f303 	lsl.w	r3, r2, r3
 8007f74:	ea03 0a0a 	and.w	sl, r3, sl
 8007f78:	e7b0      	b.n	8007edc <_strtod_l+0x604>
 8007f7a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007f7c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007f7e:	2d00      	cmp	r5, #0
 8007f80:	bfab      	itete	ge
 8007f82:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007f84:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007f86:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007f88:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007f8a:	bfac      	ite	ge
 8007f8c:	18ef      	addge	r7, r5, r3
 8007f8e:	1b5e      	sublt	r6, r3, r5
 8007f90:	9b08      	ldr	r3, [sp, #32]
 8007f92:	1aed      	subs	r5, r5, r3
 8007f94:	4415      	add	r5, r2
 8007f96:	4b66      	ldr	r3, [pc, #408]	@ (8008130 <_strtod_l+0x858>)
 8007f98:	3d01      	subs	r5, #1
 8007f9a:	429d      	cmp	r5, r3
 8007f9c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007fa0:	da50      	bge.n	8008044 <_strtod_l+0x76c>
 8007fa2:	1b5b      	subs	r3, r3, r5
 8007fa4:	2b1f      	cmp	r3, #31
 8007fa6:	eba2 0203 	sub.w	r2, r2, r3
 8007faa:	f04f 0101 	mov.w	r1, #1
 8007fae:	dc3d      	bgt.n	800802c <_strtod_l+0x754>
 8007fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007fba:	18bd      	adds	r5, r7, r2
 8007fbc:	9b08      	ldr	r3, [sp, #32]
 8007fbe:	42af      	cmp	r7, r5
 8007fc0:	4416      	add	r6, r2
 8007fc2:	441e      	add	r6, r3
 8007fc4:	463b      	mov	r3, r7
 8007fc6:	bfa8      	it	ge
 8007fc8:	462b      	movge	r3, r5
 8007fca:	42b3      	cmp	r3, r6
 8007fcc:	bfa8      	it	ge
 8007fce:	4633      	movge	r3, r6
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	bfc2      	ittt	gt
 8007fd4:	1aed      	subgt	r5, r5, r3
 8007fd6:	1af6      	subgt	r6, r6, r3
 8007fd8:	1aff      	subgt	r7, r7, r3
 8007fda:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	dd16      	ble.n	800800e <_strtod_l+0x736>
 8007fe0:	4641      	mov	r1, r8
 8007fe2:	9805      	ldr	r0, [sp, #20]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	f7ff f9a5 	bl	8007334 <__pow5mult>
 8007fea:	4680      	mov	r8, r0
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d0ba      	beq.n	8007f66 <_strtod_l+0x68e>
 8007ff0:	4601      	mov	r1, r0
 8007ff2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007ff4:	9805      	ldr	r0, [sp, #20]
 8007ff6:	f7ff f8f3 	bl	80071e0 <__multiply>
 8007ffa:	900e      	str	r0, [sp, #56]	@ 0x38
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	f43f ae8a 	beq.w	8007d16 <_strtod_l+0x43e>
 8008002:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008004:	9805      	ldr	r0, [sp, #20]
 8008006:	f7fe ffd7 	bl	8006fb8 <_Bfree>
 800800a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800800c:	931a      	str	r3, [sp, #104]	@ 0x68
 800800e:	2d00      	cmp	r5, #0
 8008010:	dc1d      	bgt.n	800804e <_strtod_l+0x776>
 8008012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008014:	2b00      	cmp	r3, #0
 8008016:	dd23      	ble.n	8008060 <_strtod_l+0x788>
 8008018:	4649      	mov	r1, r9
 800801a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800801c:	9805      	ldr	r0, [sp, #20]
 800801e:	f7ff f989 	bl	8007334 <__pow5mult>
 8008022:	4681      	mov	r9, r0
 8008024:	b9e0      	cbnz	r0, 8008060 <_strtod_l+0x788>
 8008026:	f04f 0900 	mov.w	r9, #0
 800802a:	e674      	b.n	8007d16 <_strtod_l+0x43e>
 800802c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008030:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008034:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008038:	35e2      	adds	r5, #226	@ 0xe2
 800803a:	fa01 f305 	lsl.w	r3, r1, r5
 800803e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008040:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008042:	e7ba      	b.n	8007fba <_strtod_l+0x6e2>
 8008044:	2300      	movs	r3, #0
 8008046:	9310      	str	r3, [sp, #64]	@ 0x40
 8008048:	2301      	movs	r3, #1
 800804a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800804c:	e7b5      	b.n	8007fba <_strtod_l+0x6e2>
 800804e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008050:	9805      	ldr	r0, [sp, #20]
 8008052:	462a      	mov	r2, r5
 8008054:	f7ff f9c8 	bl	80073e8 <__lshift>
 8008058:	901a      	str	r0, [sp, #104]	@ 0x68
 800805a:	2800      	cmp	r0, #0
 800805c:	d1d9      	bne.n	8008012 <_strtod_l+0x73a>
 800805e:	e65a      	b.n	8007d16 <_strtod_l+0x43e>
 8008060:	2e00      	cmp	r6, #0
 8008062:	dd07      	ble.n	8008074 <_strtod_l+0x79c>
 8008064:	4649      	mov	r1, r9
 8008066:	9805      	ldr	r0, [sp, #20]
 8008068:	4632      	mov	r2, r6
 800806a:	f7ff f9bd 	bl	80073e8 <__lshift>
 800806e:	4681      	mov	r9, r0
 8008070:	2800      	cmp	r0, #0
 8008072:	d0d8      	beq.n	8008026 <_strtod_l+0x74e>
 8008074:	2f00      	cmp	r7, #0
 8008076:	dd08      	ble.n	800808a <_strtod_l+0x7b2>
 8008078:	4641      	mov	r1, r8
 800807a:	9805      	ldr	r0, [sp, #20]
 800807c:	463a      	mov	r2, r7
 800807e:	f7ff f9b3 	bl	80073e8 <__lshift>
 8008082:	4680      	mov	r8, r0
 8008084:	2800      	cmp	r0, #0
 8008086:	f43f ae46 	beq.w	8007d16 <_strtod_l+0x43e>
 800808a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800808c:	9805      	ldr	r0, [sp, #20]
 800808e:	464a      	mov	r2, r9
 8008090:	f7ff fa32 	bl	80074f8 <__mdiff>
 8008094:	4604      	mov	r4, r0
 8008096:	2800      	cmp	r0, #0
 8008098:	f43f ae3d 	beq.w	8007d16 <_strtod_l+0x43e>
 800809c:	68c3      	ldr	r3, [r0, #12]
 800809e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080a0:	2300      	movs	r3, #0
 80080a2:	60c3      	str	r3, [r0, #12]
 80080a4:	4641      	mov	r1, r8
 80080a6:	f7ff fa0b 	bl	80074c0 <__mcmp>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	da46      	bge.n	800813c <_strtod_l+0x864>
 80080ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080b0:	ea53 030a 	orrs.w	r3, r3, sl
 80080b4:	d16c      	bne.n	8008190 <_strtod_l+0x8b8>
 80080b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d168      	bne.n	8008190 <_strtod_l+0x8b8>
 80080be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080c2:	0d1b      	lsrs	r3, r3, #20
 80080c4:	051b      	lsls	r3, r3, #20
 80080c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80080ca:	d961      	bls.n	8008190 <_strtod_l+0x8b8>
 80080cc:	6963      	ldr	r3, [r4, #20]
 80080ce:	b913      	cbnz	r3, 80080d6 <_strtod_l+0x7fe>
 80080d0:	6923      	ldr	r3, [r4, #16]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	dd5c      	ble.n	8008190 <_strtod_l+0x8b8>
 80080d6:	4621      	mov	r1, r4
 80080d8:	2201      	movs	r2, #1
 80080da:	9805      	ldr	r0, [sp, #20]
 80080dc:	f7ff f984 	bl	80073e8 <__lshift>
 80080e0:	4641      	mov	r1, r8
 80080e2:	4604      	mov	r4, r0
 80080e4:	f7ff f9ec 	bl	80074c0 <__mcmp>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	dd51      	ble.n	8008190 <_strtod_l+0x8b8>
 80080ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080f0:	9a08      	ldr	r2, [sp, #32]
 80080f2:	0d1b      	lsrs	r3, r3, #20
 80080f4:	051b      	lsls	r3, r3, #20
 80080f6:	2a00      	cmp	r2, #0
 80080f8:	d06b      	beq.n	80081d2 <_strtod_l+0x8fa>
 80080fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80080fe:	d868      	bhi.n	80081d2 <_strtod_l+0x8fa>
 8008100:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008104:	f67f ae9d 	bls.w	8007e42 <_strtod_l+0x56a>
 8008108:	4b0a      	ldr	r3, [pc, #40]	@ (8008134 <_strtod_l+0x85c>)
 800810a:	4650      	mov	r0, sl
 800810c:	4659      	mov	r1, fp
 800810e:	2200      	movs	r2, #0
 8008110:	f7f8 fa72 	bl	80005f8 <__aeabi_dmul>
 8008114:	4b08      	ldr	r3, [pc, #32]	@ (8008138 <_strtod_l+0x860>)
 8008116:	400b      	ands	r3, r1
 8008118:	4682      	mov	sl, r0
 800811a:	468b      	mov	fp, r1
 800811c:	2b00      	cmp	r3, #0
 800811e:	f47f ae05 	bne.w	8007d2c <_strtod_l+0x454>
 8008122:	9a05      	ldr	r2, [sp, #20]
 8008124:	2322      	movs	r3, #34	@ 0x22
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	e600      	b.n	8007d2c <_strtod_l+0x454>
 800812a:	bf00      	nop
 800812c:	080099c8 	.word	0x080099c8
 8008130:	fffffc02 	.word	0xfffffc02
 8008134:	39500000 	.word	0x39500000
 8008138:	7ff00000 	.word	0x7ff00000
 800813c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008140:	d165      	bne.n	800820e <_strtod_l+0x936>
 8008142:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008144:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008148:	b35a      	cbz	r2, 80081a2 <_strtod_l+0x8ca>
 800814a:	4a9f      	ldr	r2, [pc, #636]	@ (80083c8 <_strtod_l+0xaf0>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d12b      	bne.n	80081a8 <_strtod_l+0x8d0>
 8008150:	9b08      	ldr	r3, [sp, #32]
 8008152:	4651      	mov	r1, sl
 8008154:	b303      	cbz	r3, 8008198 <_strtod_l+0x8c0>
 8008156:	4b9d      	ldr	r3, [pc, #628]	@ (80083cc <_strtod_l+0xaf4>)
 8008158:	465a      	mov	r2, fp
 800815a:	4013      	ands	r3, r2
 800815c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008160:	f04f 32ff 	mov.w	r2, #4294967295
 8008164:	d81b      	bhi.n	800819e <_strtod_l+0x8c6>
 8008166:	0d1b      	lsrs	r3, r3, #20
 8008168:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800816c:	fa02 f303 	lsl.w	r3, r2, r3
 8008170:	4299      	cmp	r1, r3
 8008172:	d119      	bne.n	80081a8 <_strtod_l+0x8d0>
 8008174:	4b96      	ldr	r3, [pc, #600]	@ (80083d0 <_strtod_l+0xaf8>)
 8008176:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008178:	429a      	cmp	r2, r3
 800817a:	d102      	bne.n	8008182 <_strtod_l+0x8aa>
 800817c:	3101      	adds	r1, #1
 800817e:	f43f adca 	beq.w	8007d16 <_strtod_l+0x43e>
 8008182:	4b92      	ldr	r3, [pc, #584]	@ (80083cc <_strtod_l+0xaf4>)
 8008184:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008186:	401a      	ands	r2, r3
 8008188:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800818c:	f04f 0a00 	mov.w	sl, #0
 8008190:	9b08      	ldr	r3, [sp, #32]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1b8      	bne.n	8008108 <_strtod_l+0x830>
 8008196:	e5c9      	b.n	8007d2c <_strtod_l+0x454>
 8008198:	f04f 33ff 	mov.w	r3, #4294967295
 800819c:	e7e8      	b.n	8008170 <_strtod_l+0x898>
 800819e:	4613      	mov	r3, r2
 80081a0:	e7e6      	b.n	8008170 <_strtod_l+0x898>
 80081a2:	ea53 030a 	orrs.w	r3, r3, sl
 80081a6:	d0a1      	beq.n	80080ec <_strtod_l+0x814>
 80081a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80081aa:	b1db      	cbz	r3, 80081e4 <_strtod_l+0x90c>
 80081ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081ae:	4213      	tst	r3, r2
 80081b0:	d0ee      	beq.n	8008190 <_strtod_l+0x8b8>
 80081b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081b4:	9a08      	ldr	r2, [sp, #32]
 80081b6:	4650      	mov	r0, sl
 80081b8:	4659      	mov	r1, fp
 80081ba:	b1bb      	cbz	r3, 80081ec <_strtod_l+0x914>
 80081bc:	f7ff fb6e 	bl	800789c <sulp>
 80081c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081c4:	ec53 2b10 	vmov	r2, r3, d0
 80081c8:	f7f8 f860 	bl	800028c <__adddf3>
 80081cc:	4682      	mov	sl, r0
 80081ce:	468b      	mov	fp, r1
 80081d0:	e7de      	b.n	8008190 <_strtod_l+0x8b8>
 80081d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80081d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80081da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80081de:	f04f 3aff 	mov.w	sl, #4294967295
 80081e2:	e7d5      	b.n	8008190 <_strtod_l+0x8b8>
 80081e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80081e6:	ea13 0f0a 	tst.w	r3, sl
 80081ea:	e7e1      	b.n	80081b0 <_strtod_l+0x8d8>
 80081ec:	f7ff fb56 	bl	800789c <sulp>
 80081f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081f4:	ec53 2b10 	vmov	r2, r3, d0
 80081f8:	f7f8 f846 	bl	8000288 <__aeabi_dsub>
 80081fc:	2200      	movs	r2, #0
 80081fe:	2300      	movs	r3, #0
 8008200:	4682      	mov	sl, r0
 8008202:	468b      	mov	fp, r1
 8008204:	f7f8 fc60 	bl	8000ac8 <__aeabi_dcmpeq>
 8008208:	2800      	cmp	r0, #0
 800820a:	d0c1      	beq.n	8008190 <_strtod_l+0x8b8>
 800820c:	e619      	b.n	8007e42 <_strtod_l+0x56a>
 800820e:	4641      	mov	r1, r8
 8008210:	4620      	mov	r0, r4
 8008212:	f7ff facd 	bl	80077b0 <__ratio>
 8008216:	ec57 6b10 	vmov	r6, r7, d0
 800821a:	2200      	movs	r2, #0
 800821c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008220:	4630      	mov	r0, r6
 8008222:	4639      	mov	r1, r7
 8008224:	f7f8 fc64 	bl	8000af0 <__aeabi_dcmple>
 8008228:	2800      	cmp	r0, #0
 800822a:	d06f      	beq.n	800830c <_strtod_l+0xa34>
 800822c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800822e:	2b00      	cmp	r3, #0
 8008230:	d17a      	bne.n	8008328 <_strtod_l+0xa50>
 8008232:	f1ba 0f00 	cmp.w	sl, #0
 8008236:	d158      	bne.n	80082ea <_strtod_l+0xa12>
 8008238:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800823a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800823e:	2b00      	cmp	r3, #0
 8008240:	d15a      	bne.n	80082f8 <_strtod_l+0xa20>
 8008242:	4b64      	ldr	r3, [pc, #400]	@ (80083d4 <_strtod_l+0xafc>)
 8008244:	2200      	movs	r2, #0
 8008246:	4630      	mov	r0, r6
 8008248:	4639      	mov	r1, r7
 800824a:	f7f8 fc47 	bl	8000adc <__aeabi_dcmplt>
 800824e:	2800      	cmp	r0, #0
 8008250:	d159      	bne.n	8008306 <_strtod_l+0xa2e>
 8008252:	4630      	mov	r0, r6
 8008254:	4639      	mov	r1, r7
 8008256:	4b60      	ldr	r3, [pc, #384]	@ (80083d8 <_strtod_l+0xb00>)
 8008258:	2200      	movs	r2, #0
 800825a:	f7f8 f9cd 	bl	80005f8 <__aeabi_dmul>
 800825e:	4606      	mov	r6, r0
 8008260:	460f      	mov	r7, r1
 8008262:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008266:	9606      	str	r6, [sp, #24]
 8008268:	9307      	str	r3, [sp, #28]
 800826a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800826e:	4d57      	ldr	r5, [pc, #348]	@ (80083cc <_strtod_l+0xaf4>)
 8008270:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008276:	401d      	ands	r5, r3
 8008278:	4b58      	ldr	r3, [pc, #352]	@ (80083dc <_strtod_l+0xb04>)
 800827a:	429d      	cmp	r5, r3
 800827c:	f040 80b2 	bne.w	80083e4 <_strtod_l+0xb0c>
 8008280:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008282:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008286:	ec4b ab10 	vmov	d0, sl, fp
 800828a:	f7ff f9c9 	bl	8007620 <__ulp>
 800828e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008292:	ec51 0b10 	vmov	r0, r1, d0
 8008296:	f7f8 f9af 	bl	80005f8 <__aeabi_dmul>
 800829a:	4652      	mov	r2, sl
 800829c:	465b      	mov	r3, fp
 800829e:	f7f7 fff5 	bl	800028c <__adddf3>
 80082a2:	460b      	mov	r3, r1
 80082a4:	4949      	ldr	r1, [pc, #292]	@ (80083cc <_strtod_l+0xaf4>)
 80082a6:	4a4e      	ldr	r2, [pc, #312]	@ (80083e0 <_strtod_l+0xb08>)
 80082a8:	4019      	ands	r1, r3
 80082aa:	4291      	cmp	r1, r2
 80082ac:	4682      	mov	sl, r0
 80082ae:	d942      	bls.n	8008336 <_strtod_l+0xa5e>
 80082b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082b2:	4b47      	ldr	r3, [pc, #284]	@ (80083d0 <_strtod_l+0xaf8>)
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d103      	bne.n	80082c0 <_strtod_l+0x9e8>
 80082b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082ba:	3301      	adds	r3, #1
 80082bc:	f43f ad2b 	beq.w	8007d16 <_strtod_l+0x43e>
 80082c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80083d0 <_strtod_l+0xaf8>
 80082c4:	f04f 3aff 	mov.w	sl, #4294967295
 80082c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082ca:	9805      	ldr	r0, [sp, #20]
 80082cc:	f7fe fe74 	bl	8006fb8 <_Bfree>
 80082d0:	9805      	ldr	r0, [sp, #20]
 80082d2:	4649      	mov	r1, r9
 80082d4:	f7fe fe70 	bl	8006fb8 <_Bfree>
 80082d8:	9805      	ldr	r0, [sp, #20]
 80082da:	4641      	mov	r1, r8
 80082dc:	f7fe fe6c 	bl	8006fb8 <_Bfree>
 80082e0:	9805      	ldr	r0, [sp, #20]
 80082e2:	4621      	mov	r1, r4
 80082e4:	f7fe fe68 	bl	8006fb8 <_Bfree>
 80082e8:	e618      	b.n	8007f1c <_strtod_l+0x644>
 80082ea:	f1ba 0f01 	cmp.w	sl, #1
 80082ee:	d103      	bne.n	80082f8 <_strtod_l+0xa20>
 80082f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f43f ada5 	beq.w	8007e42 <_strtod_l+0x56a>
 80082f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80083a8 <_strtod_l+0xad0>
 80082fc:	4f35      	ldr	r7, [pc, #212]	@ (80083d4 <_strtod_l+0xafc>)
 80082fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008302:	2600      	movs	r6, #0
 8008304:	e7b1      	b.n	800826a <_strtod_l+0x992>
 8008306:	4f34      	ldr	r7, [pc, #208]	@ (80083d8 <_strtod_l+0xb00>)
 8008308:	2600      	movs	r6, #0
 800830a:	e7aa      	b.n	8008262 <_strtod_l+0x98a>
 800830c:	4b32      	ldr	r3, [pc, #200]	@ (80083d8 <_strtod_l+0xb00>)
 800830e:	4630      	mov	r0, r6
 8008310:	4639      	mov	r1, r7
 8008312:	2200      	movs	r2, #0
 8008314:	f7f8 f970 	bl	80005f8 <__aeabi_dmul>
 8008318:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800831a:	4606      	mov	r6, r0
 800831c:	460f      	mov	r7, r1
 800831e:	2b00      	cmp	r3, #0
 8008320:	d09f      	beq.n	8008262 <_strtod_l+0x98a>
 8008322:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008326:	e7a0      	b.n	800826a <_strtod_l+0x992>
 8008328:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80083b0 <_strtod_l+0xad8>
 800832c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008330:	ec57 6b17 	vmov	r6, r7, d7
 8008334:	e799      	b.n	800826a <_strtod_l+0x992>
 8008336:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800833a:	9b08      	ldr	r3, [sp, #32]
 800833c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1c1      	bne.n	80082c8 <_strtod_l+0x9f0>
 8008344:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008348:	0d1b      	lsrs	r3, r3, #20
 800834a:	051b      	lsls	r3, r3, #20
 800834c:	429d      	cmp	r5, r3
 800834e:	d1bb      	bne.n	80082c8 <_strtod_l+0x9f0>
 8008350:	4630      	mov	r0, r6
 8008352:	4639      	mov	r1, r7
 8008354:	f7f8 fcb0 	bl	8000cb8 <__aeabi_d2lz>
 8008358:	f7f8 f920 	bl	800059c <__aeabi_l2d>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4630      	mov	r0, r6
 8008362:	4639      	mov	r1, r7
 8008364:	f7f7 ff90 	bl	8000288 <__aeabi_dsub>
 8008368:	460b      	mov	r3, r1
 800836a:	4602      	mov	r2, r0
 800836c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008370:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008376:	ea46 060a 	orr.w	r6, r6, sl
 800837a:	431e      	orrs	r6, r3
 800837c:	d06f      	beq.n	800845e <_strtod_l+0xb86>
 800837e:	a30e      	add	r3, pc, #56	@ (adr r3, 80083b8 <_strtod_l+0xae0>)
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	f7f8 fbaa 	bl	8000adc <__aeabi_dcmplt>
 8008388:	2800      	cmp	r0, #0
 800838a:	f47f accf 	bne.w	8007d2c <_strtod_l+0x454>
 800838e:	a30c      	add	r3, pc, #48	@ (adr r3, 80083c0 <_strtod_l+0xae8>)
 8008390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008394:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008398:	f7f8 fbbe 	bl	8000b18 <__aeabi_dcmpgt>
 800839c:	2800      	cmp	r0, #0
 800839e:	d093      	beq.n	80082c8 <_strtod_l+0x9f0>
 80083a0:	e4c4      	b.n	8007d2c <_strtod_l+0x454>
 80083a2:	bf00      	nop
 80083a4:	f3af 8000 	nop.w
 80083a8:	00000000 	.word	0x00000000
 80083ac:	bff00000 	.word	0xbff00000
 80083b0:	00000000 	.word	0x00000000
 80083b4:	3ff00000 	.word	0x3ff00000
 80083b8:	94a03595 	.word	0x94a03595
 80083bc:	3fdfffff 	.word	0x3fdfffff
 80083c0:	35afe535 	.word	0x35afe535
 80083c4:	3fe00000 	.word	0x3fe00000
 80083c8:	000fffff 	.word	0x000fffff
 80083cc:	7ff00000 	.word	0x7ff00000
 80083d0:	7fefffff 	.word	0x7fefffff
 80083d4:	3ff00000 	.word	0x3ff00000
 80083d8:	3fe00000 	.word	0x3fe00000
 80083dc:	7fe00000 	.word	0x7fe00000
 80083e0:	7c9fffff 	.word	0x7c9fffff
 80083e4:	9b08      	ldr	r3, [sp, #32]
 80083e6:	b323      	cbz	r3, 8008432 <_strtod_l+0xb5a>
 80083e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80083ec:	d821      	bhi.n	8008432 <_strtod_l+0xb5a>
 80083ee:	a328      	add	r3, pc, #160	@ (adr r3, 8008490 <_strtod_l+0xbb8>)
 80083f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f4:	4630      	mov	r0, r6
 80083f6:	4639      	mov	r1, r7
 80083f8:	f7f8 fb7a 	bl	8000af0 <__aeabi_dcmple>
 80083fc:	b1a0      	cbz	r0, 8008428 <_strtod_l+0xb50>
 80083fe:	4639      	mov	r1, r7
 8008400:	4630      	mov	r0, r6
 8008402:	f7f8 fbd1 	bl	8000ba8 <__aeabi_d2uiz>
 8008406:	2801      	cmp	r0, #1
 8008408:	bf38      	it	cc
 800840a:	2001      	movcc	r0, #1
 800840c:	f7f8 f87a 	bl	8000504 <__aeabi_ui2d>
 8008410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008412:	4606      	mov	r6, r0
 8008414:	460f      	mov	r7, r1
 8008416:	b9fb      	cbnz	r3, 8008458 <_strtod_l+0xb80>
 8008418:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800841c:	9014      	str	r0, [sp, #80]	@ 0x50
 800841e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008420:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008424:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008428:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800842a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800842e:	1b5b      	subs	r3, r3, r5
 8008430:	9311      	str	r3, [sp, #68]	@ 0x44
 8008432:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008436:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800843a:	f7ff f8f1 	bl	8007620 <__ulp>
 800843e:	4650      	mov	r0, sl
 8008440:	ec53 2b10 	vmov	r2, r3, d0
 8008444:	4659      	mov	r1, fp
 8008446:	f7f8 f8d7 	bl	80005f8 <__aeabi_dmul>
 800844a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800844e:	f7f7 ff1d 	bl	800028c <__adddf3>
 8008452:	4682      	mov	sl, r0
 8008454:	468b      	mov	fp, r1
 8008456:	e770      	b.n	800833a <_strtod_l+0xa62>
 8008458:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800845c:	e7e0      	b.n	8008420 <_strtod_l+0xb48>
 800845e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008498 <_strtod_l+0xbc0>)
 8008460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008464:	f7f8 fb3a 	bl	8000adc <__aeabi_dcmplt>
 8008468:	e798      	b.n	800839c <_strtod_l+0xac4>
 800846a:	2300      	movs	r3, #0
 800846c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800846e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008470:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	f7ff ba6d 	b.w	8007952 <_strtod_l+0x7a>
 8008478:	2a65      	cmp	r2, #101	@ 0x65
 800847a:	f43f ab66 	beq.w	8007b4a <_strtod_l+0x272>
 800847e:	2a45      	cmp	r2, #69	@ 0x45
 8008480:	f43f ab63 	beq.w	8007b4a <_strtod_l+0x272>
 8008484:	2301      	movs	r3, #1
 8008486:	f7ff bb9e 	b.w	8007bc6 <_strtod_l+0x2ee>
 800848a:	bf00      	nop
 800848c:	f3af 8000 	nop.w
 8008490:	ffc00000 	.word	0xffc00000
 8008494:	41dfffff 	.word	0x41dfffff
 8008498:	94a03595 	.word	0x94a03595
 800849c:	3fcfffff 	.word	0x3fcfffff

080084a0 <_strtod_r>:
 80084a0:	4b01      	ldr	r3, [pc, #4]	@ (80084a8 <_strtod_r+0x8>)
 80084a2:	f7ff ba19 	b.w	80078d8 <_strtod_l>
 80084a6:	bf00      	nop
 80084a8:	20000198 	.word	0x20000198

080084ac <_strtol_l.constprop.0>:
 80084ac:	2b24      	cmp	r3, #36	@ 0x24
 80084ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b2:	4686      	mov	lr, r0
 80084b4:	4690      	mov	r8, r2
 80084b6:	d801      	bhi.n	80084bc <_strtol_l.constprop.0+0x10>
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d106      	bne.n	80084ca <_strtol_l.constprop.0+0x1e>
 80084bc:	f7fd fdbc 	bl	8006038 <__errno>
 80084c0:	2316      	movs	r3, #22
 80084c2:	6003      	str	r3, [r0, #0]
 80084c4:	2000      	movs	r0, #0
 80084c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ca:	4834      	ldr	r0, [pc, #208]	@ (800859c <_strtol_l.constprop.0+0xf0>)
 80084cc:	460d      	mov	r5, r1
 80084ce:	462a      	mov	r2, r5
 80084d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084d4:	5d06      	ldrb	r6, [r0, r4]
 80084d6:	f016 0608 	ands.w	r6, r6, #8
 80084da:	d1f8      	bne.n	80084ce <_strtol_l.constprop.0+0x22>
 80084dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80084de:	d12d      	bne.n	800853c <_strtol_l.constprop.0+0x90>
 80084e0:	782c      	ldrb	r4, [r5, #0]
 80084e2:	2601      	movs	r6, #1
 80084e4:	1c95      	adds	r5, r2, #2
 80084e6:	f033 0210 	bics.w	r2, r3, #16
 80084ea:	d109      	bne.n	8008500 <_strtol_l.constprop.0+0x54>
 80084ec:	2c30      	cmp	r4, #48	@ 0x30
 80084ee:	d12a      	bne.n	8008546 <_strtol_l.constprop.0+0x9a>
 80084f0:	782a      	ldrb	r2, [r5, #0]
 80084f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80084f6:	2a58      	cmp	r2, #88	@ 0x58
 80084f8:	d125      	bne.n	8008546 <_strtol_l.constprop.0+0x9a>
 80084fa:	786c      	ldrb	r4, [r5, #1]
 80084fc:	2310      	movs	r3, #16
 80084fe:	3502      	adds	r5, #2
 8008500:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008504:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008508:	2200      	movs	r2, #0
 800850a:	fbbc f9f3 	udiv	r9, ip, r3
 800850e:	4610      	mov	r0, r2
 8008510:	fb03 ca19 	mls	sl, r3, r9, ip
 8008514:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008518:	2f09      	cmp	r7, #9
 800851a:	d81b      	bhi.n	8008554 <_strtol_l.constprop.0+0xa8>
 800851c:	463c      	mov	r4, r7
 800851e:	42a3      	cmp	r3, r4
 8008520:	dd27      	ble.n	8008572 <_strtol_l.constprop.0+0xc6>
 8008522:	1c57      	adds	r7, r2, #1
 8008524:	d007      	beq.n	8008536 <_strtol_l.constprop.0+0x8a>
 8008526:	4581      	cmp	r9, r0
 8008528:	d320      	bcc.n	800856c <_strtol_l.constprop.0+0xc0>
 800852a:	d101      	bne.n	8008530 <_strtol_l.constprop.0+0x84>
 800852c:	45a2      	cmp	sl, r4
 800852e:	db1d      	blt.n	800856c <_strtol_l.constprop.0+0xc0>
 8008530:	fb00 4003 	mla	r0, r0, r3, r4
 8008534:	2201      	movs	r2, #1
 8008536:	f815 4b01 	ldrb.w	r4, [r5], #1
 800853a:	e7eb      	b.n	8008514 <_strtol_l.constprop.0+0x68>
 800853c:	2c2b      	cmp	r4, #43	@ 0x2b
 800853e:	bf04      	itt	eq
 8008540:	782c      	ldrbeq	r4, [r5, #0]
 8008542:	1c95      	addeq	r5, r2, #2
 8008544:	e7cf      	b.n	80084e6 <_strtol_l.constprop.0+0x3a>
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1da      	bne.n	8008500 <_strtol_l.constprop.0+0x54>
 800854a:	2c30      	cmp	r4, #48	@ 0x30
 800854c:	bf0c      	ite	eq
 800854e:	2308      	moveq	r3, #8
 8008550:	230a      	movne	r3, #10
 8008552:	e7d5      	b.n	8008500 <_strtol_l.constprop.0+0x54>
 8008554:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008558:	2f19      	cmp	r7, #25
 800855a:	d801      	bhi.n	8008560 <_strtol_l.constprop.0+0xb4>
 800855c:	3c37      	subs	r4, #55	@ 0x37
 800855e:	e7de      	b.n	800851e <_strtol_l.constprop.0+0x72>
 8008560:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008564:	2f19      	cmp	r7, #25
 8008566:	d804      	bhi.n	8008572 <_strtol_l.constprop.0+0xc6>
 8008568:	3c57      	subs	r4, #87	@ 0x57
 800856a:	e7d8      	b.n	800851e <_strtol_l.constprop.0+0x72>
 800856c:	f04f 32ff 	mov.w	r2, #4294967295
 8008570:	e7e1      	b.n	8008536 <_strtol_l.constprop.0+0x8a>
 8008572:	1c53      	adds	r3, r2, #1
 8008574:	d108      	bne.n	8008588 <_strtol_l.constprop.0+0xdc>
 8008576:	2322      	movs	r3, #34	@ 0x22
 8008578:	f8ce 3000 	str.w	r3, [lr]
 800857c:	4660      	mov	r0, ip
 800857e:	f1b8 0f00 	cmp.w	r8, #0
 8008582:	d0a0      	beq.n	80084c6 <_strtol_l.constprop.0+0x1a>
 8008584:	1e69      	subs	r1, r5, #1
 8008586:	e006      	b.n	8008596 <_strtol_l.constprop.0+0xea>
 8008588:	b106      	cbz	r6, 800858c <_strtol_l.constprop.0+0xe0>
 800858a:	4240      	negs	r0, r0
 800858c:	f1b8 0f00 	cmp.w	r8, #0
 8008590:	d099      	beq.n	80084c6 <_strtol_l.constprop.0+0x1a>
 8008592:	2a00      	cmp	r2, #0
 8008594:	d1f6      	bne.n	8008584 <_strtol_l.constprop.0+0xd8>
 8008596:	f8c8 1000 	str.w	r1, [r8]
 800859a:	e794      	b.n	80084c6 <_strtol_l.constprop.0+0x1a>
 800859c:	080099f1 	.word	0x080099f1

080085a0 <_strtol_r>:
 80085a0:	f7ff bf84 	b.w	80084ac <_strtol_l.constprop.0>

080085a4 <__ssputs_r>:
 80085a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a8:	688e      	ldr	r6, [r1, #8]
 80085aa:	461f      	mov	r7, r3
 80085ac:	42be      	cmp	r6, r7
 80085ae:	680b      	ldr	r3, [r1, #0]
 80085b0:	4682      	mov	sl, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	4690      	mov	r8, r2
 80085b6:	d82d      	bhi.n	8008614 <__ssputs_r+0x70>
 80085b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80085c0:	d026      	beq.n	8008610 <__ssputs_r+0x6c>
 80085c2:	6965      	ldr	r5, [r4, #20]
 80085c4:	6909      	ldr	r1, [r1, #16]
 80085c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085ca:	eba3 0901 	sub.w	r9, r3, r1
 80085ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085d2:	1c7b      	adds	r3, r7, #1
 80085d4:	444b      	add	r3, r9
 80085d6:	106d      	asrs	r5, r5, #1
 80085d8:	429d      	cmp	r5, r3
 80085da:	bf38      	it	cc
 80085dc:	461d      	movcc	r5, r3
 80085de:	0553      	lsls	r3, r2, #21
 80085e0:	d527      	bpl.n	8008632 <__ssputs_r+0x8e>
 80085e2:	4629      	mov	r1, r5
 80085e4:	f7fe fc1c 	bl	8006e20 <_malloc_r>
 80085e8:	4606      	mov	r6, r0
 80085ea:	b360      	cbz	r0, 8008646 <__ssputs_r+0xa2>
 80085ec:	6921      	ldr	r1, [r4, #16]
 80085ee:	464a      	mov	r2, r9
 80085f0:	f000 fa18 	bl	8008a24 <memcpy>
 80085f4:	89a3      	ldrh	r3, [r4, #12]
 80085f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80085fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085fe:	81a3      	strh	r3, [r4, #12]
 8008600:	6126      	str	r6, [r4, #16]
 8008602:	6165      	str	r5, [r4, #20]
 8008604:	444e      	add	r6, r9
 8008606:	eba5 0509 	sub.w	r5, r5, r9
 800860a:	6026      	str	r6, [r4, #0]
 800860c:	60a5      	str	r5, [r4, #8]
 800860e:	463e      	mov	r6, r7
 8008610:	42be      	cmp	r6, r7
 8008612:	d900      	bls.n	8008616 <__ssputs_r+0x72>
 8008614:	463e      	mov	r6, r7
 8008616:	6820      	ldr	r0, [r4, #0]
 8008618:	4632      	mov	r2, r6
 800861a:	4641      	mov	r1, r8
 800861c:	f000 f9c6 	bl	80089ac <memmove>
 8008620:	68a3      	ldr	r3, [r4, #8]
 8008622:	1b9b      	subs	r3, r3, r6
 8008624:	60a3      	str	r3, [r4, #8]
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	4433      	add	r3, r6
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	2000      	movs	r0, #0
 800862e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008632:	462a      	mov	r2, r5
 8008634:	f000 fd89 	bl	800914a <_realloc_r>
 8008638:	4606      	mov	r6, r0
 800863a:	2800      	cmp	r0, #0
 800863c:	d1e0      	bne.n	8008600 <__ssputs_r+0x5c>
 800863e:	6921      	ldr	r1, [r4, #16]
 8008640:	4650      	mov	r0, sl
 8008642:	f7fe fb79 	bl	8006d38 <_free_r>
 8008646:	230c      	movs	r3, #12
 8008648:	f8ca 3000 	str.w	r3, [sl]
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008652:	81a3      	strh	r3, [r4, #12]
 8008654:	f04f 30ff 	mov.w	r0, #4294967295
 8008658:	e7e9      	b.n	800862e <__ssputs_r+0x8a>
	...

0800865c <_svfiprintf_r>:
 800865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	4698      	mov	r8, r3
 8008662:	898b      	ldrh	r3, [r1, #12]
 8008664:	061b      	lsls	r3, r3, #24
 8008666:	b09d      	sub	sp, #116	@ 0x74
 8008668:	4607      	mov	r7, r0
 800866a:	460d      	mov	r5, r1
 800866c:	4614      	mov	r4, r2
 800866e:	d510      	bpl.n	8008692 <_svfiprintf_r+0x36>
 8008670:	690b      	ldr	r3, [r1, #16]
 8008672:	b973      	cbnz	r3, 8008692 <_svfiprintf_r+0x36>
 8008674:	2140      	movs	r1, #64	@ 0x40
 8008676:	f7fe fbd3 	bl	8006e20 <_malloc_r>
 800867a:	6028      	str	r0, [r5, #0]
 800867c:	6128      	str	r0, [r5, #16]
 800867e:	b930      	cbnz	r0, 800868e <_svfiprintf_r+0x32>
 8008680:	230c      	movs	r3, #12
 8008682:	603b      	str	r3, [r7, #0]
 8008684:	f04f 30ff 	mov.w	r0, #4294967295
 8008688:	b01d      	add	sp, #116	@ 0x74
 800868a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868e:	2340      	movs	r3, #64	@ 0x40
 8008690:	616b      	str	r3, [r5, #20]
 8008692:	2300      	movs	r3, #0
 8008694:	9309      	str	r3, [sp, #36]	@ 0x24
 8008696:	2320      	movs	r3, #32
 8008698:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800869c:	f8cd 800c 	str.w	r8, [sp, #12]
 80086a0:	2330      	movs	r3, #48	@ 0x30
 80086a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008840 <_svfiprintf_r+0x1e4>
 80086a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086aa:	f04f 0901 	mov.w	r9, #1
 80086ae:	4623      	mov	r3, r4
 80086b0:	469a      	mov	sl, r3
 80086b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086b6:	b10a      	cbz	r2, 80086bc <_svfiprintf_r+0x60>
 80086b8:	2a25      	cmp	r2, #37	@ 0x25
 80086ba:	d1f9      	bne.n	80086b0 <_svfiprintf_r+0x54>
 80086bc:	ebba 0b04 	subs.w	fp, sl, r4
 80086c0:	d00b      	beq.n	80086da <_svfiprintf_r+0x7e>
 80086c2:	465b      	mov	r3, fp
 80086c4:	4622      	mov	r2, r4
 80086c6:	4629      	mov	r1, r5
 80086c8:	4638      	mov	r0, r7
 80086ca:	f7ff ff6b 	bl	80085a4 <__ssputs_r>
 80086ce:	3001      	adds	r0, #1
 80086d0:	f000 80a7 	beq.w	8008822 <_svfiprintf_r+0x1c6>
 80086d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086d6:	445a      	add	r2, fp
 80086d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80086da:	f89a 3000 	ldrb.w	r3, [sl]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 809f 	beq.w	8008822 <_svfiprintf_r+0x1c6>
 80086e4:	2300      	movs	r3, #0
 80086e6:	f04f 32ff 	mov.w	r2, #4294967295
 80086ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086ee:	f10a 0a01 	add.w	sl, sl, #1
 80086f2:	9304      	str	r3, [sp, #16]
 80086f4:	9307      	str	r3, [sp, #28]
 80086f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80086fc:	4654      	mov	r4, sl
 80086fe:	2205      	movs	r2, #5
 8008700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008704:	484e      	ldr	r0, [pc, #312]	@ (8008840 <_svfiprintf_r+0x1e4>)
 8008706:	f7f7 fd63 	bl	80001d0 <memchr>
 800870a:	9a04      	ldr	r2, [sp, #16]
 800870c:	b9d8      	cbnz	r0, 8008746 <_svfiprintf_r+0xea>
 800870e:	06d0      	lsls	r0, r2, #27
 8008710:	bf44      	itt	mi
 8008712:	2320      	movmi	r3, #32
 8008714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008718:	0711      	lsls	r1, r2, #28
 800871a:	bf44      	itt	mi
 800871c:	232b      	movmi	r3, #43	@ 0x2b
 800871e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008722:	f89a 3000 	ldrb.w	r3, [sl]
 8008726:	2b2a      	cmp	r3, #42	@ 0x2a
 8008728:	d015      	beq.n	8008756 <_svfiprintf_r+0xfa>
 800872a:	9a07      	ldr	r2, [sp, #28]
 800872c:	4654      	mov	r4, sl
 800872e:	2000      	movs	r0, #0
 8008730:	f04f 0c0a 	mov.w	ip, #10
 8008734:	4621      	mov	r1, r4
 8008736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800873a:	3b30      	subs	r3, #48	@ 0x30
 800873c:	2b09      	cmp	r3, #9
 800873e:	d94b      	bls.n	80087d8 <_svfiprintf_r+0x17c>
 8008740:	b1b0      	cbz	r0, 8008770 <_svfiprintf_r+0x114>
 8008742:	9207      	str	r2, [sp, #28]
 8008744:	e014      	b.n	8008770 <_svfiprintf_r+0x114>
 8008746:	eba0 0308 	sub.w	r3, r0, r8
 800874a:	fa09 f303 	lsl.w	r3, r9, r3
 800874e:	4313      	orrs	r3, r2
 8008750:	9304      	str	r3, [sp, #16]
 8008752:	46a2      	mov	sl, r4
 8008754:	e7d2      	b.n	80086fc <_svfiprintf_r+0xa0>
 8008756:	9b03      	ldr	r3, [sp, #12]
 8008758:	1d19      	adds	r1, r3, #4
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	9103      	str	r1, [sp, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	bfbb      	ittet	lt
 8008762:	425b      	neglt	r3, r3
 8008764:	f042 0202 	orrlt.w	r2, r2, #2
 8008768:	9307      	strge	r3, [sp, #28]
 800876a:	9307      	strlt	r3, [sp, #28]
 800876c:	bfb8      	it	lt
 800876e:	9204      	strlt	r2, [sp, #16]
 8008770:	7823      	ldrb	r3, [r4, #0]
 8008772:	2b2e      	cmp	r3, #46	@ 0x2e
 8008774:	d10a      	bne.n	800878c <_svfiprintf_r+0x130>
 8008776:	7863      	ldrb	r3, [r4, #1]
 8008778:	2b2a      	cmp	r3, #42	@ 0x2a
 800877a:	d132      	bne.n	80087e2 <_svfiprintf_r+0x186>
 800877c:	9b03      	ldr	r3, [sp, #12]
 800877e:	1d1a      	adds	r2, r3, #4
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	9203      	str	r2, [sp, #12]
 8008784:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008788:	3402      	adds	r4, #2
 800878a:	9305      	str	r3, [sp, #20]
 800878c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008850 <_svfiprintf_r+0x1f4>
 8008790:	7821      	ldrb	r1, [r4, #0]
 8008792:	2203      	movs	r2, #3
 8008794:	4650      	mov	r0, sl
 8008796:	f7f7 fd1b 	bl	80001d0 <memchr>
 800879a:	b138      	cbz	r0, 80087ac <_svfiprintf_r+0x150>
 800879c:	9b04      	ldr	r3, [sp, #16]
 800879e:	eba0 000a 	sub.w	r0, r0, sl
 80087a2:	2240      	movs	r2, #64	@ 0x40
 80087a4:	4082      	lsls	r2, r0
 80087a6:	4313      	orrs	r3, r2
 80087a8:	3401      	adds	r4, #1
 80087aa:	9304      	str	r3, [sp, #16]
 80087ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b0:	4824      	ldr	r0, [pc, #144]	@ (8008844 <_svfiprintf_r+0x1e8>)
 80087b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087b6:	2206      	movs	r2, #6
 80087b8:	f7f7 fd0a 	bl	80001d0 <memchr>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d036      	beq.n	800882e <_svfiprintf_r+0x1d2>
 80087c0:	4b21      	ldr	r3, [pc, #132]	@ (8008848 <_svfiprintf_r+0x1ec>)
 80087c2:	bb1b      	cbnz	r3, 800880c <_svfiprintf_r+0x1b0>
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	3307      	adds	r3, #7
 80087c8:	f023 0307 	bic.w	r3, r3, #7
 80087cc:	3308      	adds	r3, #8
 80087ce:	9303      	str	r3, [sp, #12]
 80087d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d2:	4433      	add	r3, r6
 80087d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087d6:	e76a      	b.n	80086ae <_svfiprintf_r+0x52>
 80087d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80087dc:	460c      	mov	r4, r1
 80087de:	2001      	movs	r0, #1
 80087e0:	e7a8      	b.n	8008734 <_svfiprintf_r+0xd8>
 80087e2:	2300      	movs	r3, #0
 80087e4:	3401      	adds	r4, #1
 80087e6:	9305      	str	r3, [sp, #20]
 80087e8:	4619      	mov	r1, r3
 80087ea:	f04f 0c0a 	mov.w	ip, #10
 80087ee:	4620      	mov	r0, r4
 80087f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087f4:	3a30      	subs	r2, #48	@ 0x30
 80087f6:	2a09      	cmp	r2, #9
 80087f8:	d903      	bls.n	8008802 <_svfiprintf_r+0x1a6>
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d0c6      	beq.n	800878c <_svfiprintf_r+0x130>
 80087fe:	9105      	str	r1, [sp, #20]
 8008800:	e7c4      	b.n	800878c <_svfiprintf_r+0x130>
 8008802:	fb0c 2101 	mla	r1, ip, r1, r2
 8008806:	4604      	mov	r4, r0
 8008808:	2301      	movs	r3, #1
 800880a:	e7f0      	b.n	80087ee <_svfiprintf_r+0x192>
 800880c:	ab03      	add	r3, sp, #12
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	462a      	mov	r2, r5
 8008812:	4b0e      	ldr	r3, [pc, #56]	@ (800884c <_svfiprintf_r+0x1f0>)
 8008814:	a904      	add	r1, sp, #16
 8008816:	4638      	mov	r0, r7
 8008818:	f7fc fc96 	bl	8005148 <_printf_float>
 800881c:	1c42      	adds	r2, r0, #1
 800881e:	4606      	mov	r6, r0
 8008820:	d1d6      	bne.n	80087d0 <_svfiprintf_r+0x174>
 8008822:	89ab      	ldrh	r3, [r5, #12]
 8008824:	065b      	lsls	r3, r3, #25
 8008826:	f53f af2d 	bmi.w	8008684 <_svfiprintf_r+0x28>
 800882a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800882c:	e72c      	b.n	8008688 <_svfiprintf_r+0x2c>
 800882e:	ab03      	add	r3, sp, #12
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	462a      	mov	r2, r5
 8008834:	4b05      	ldr	r3, [pc, #20]	@ (800884c <_svfiprintf_r+0x1f0>)
 8008836:	a904      	add	r1, sp, #16
 8008838:	4638      	mov	r0, r7
 800883a:	f7fc ff1d 	bl	8005678 <_printf_i>
 800883e:	e7ed      	b.n	800881c <_svfiprintf_r+0x1c0>
 8008840:	08009af1 	.word	0x08009af1
 8008844:	08009afb 	.word	0x08009afb
 8008848:	08005149 	.word	0x08005149
 800884c:	080085a5 	.word	0x080085a5
 8008850:	08009af7 	.word	0x08009af7

08008854 <__sflush_r>:
 8008854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885c:	0716      	lsls	r6, r2, #28
 800885e:	4605      	mov	r5, r0
 8008860:	460c      	mov	r4, r1
 8008862:	d454      	bmi.n	800890e <__sflush_r+0xba>
 8008864:	684b      	ldr	r3, [r1, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	dc02      	bgt.n	8008870 <__sflush_r+0x1c>
 800886a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800886c:	2b00      	cmp	r3, #0
 800886e:	dd48      	ble.n	8008902 <__sflush_r+0xae>
 8008870:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008872:	2e00      	cmp	r6, #0
 8008874:	d045      	beq.n	8008902 <__sflush_r+0xae>
 8008876:	2300      	movs	r3, #0
 8008878:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800887c:	682f      	ldr	r7, [r5, #0]
 800887e:	6a21      	ldr	r1, [r4, #32]
 8008880:	602b      	str	r3, [r5, #0]
 8008882:	d030      	beq.n	80088e6 <__sflush_r+0x92>
 8008884:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	0759      	lsls	r1, r3, #29
 800888a:	d505      	bpl.n	8008898 <__sflush_r+0x44>
 800888c:	6863      	ldr	r3, [r4, #4]
 800888e:	1ad2      	subs	r2, r2, r3
 8008890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008892:	b10b      	cbz	r3, 8008898 <__sflush_r+0x44>
 8008894:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008896:	1ad2      	subs	r2, r2, r3
 8008898:	2300      	movs	r3, #0
 800889a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800889c:	6a21      	ldr	r1, [r4, #32]
 800889e:	4628      	mov	r0, r5
 80088a0:	47b0      	blx	r6
 80088a2:	1c43      	adds	r3, r0, #1
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	d106      	bne.n	80088b6 <__sflush_r+0x62>
 80088a8:	6829      	ldr	r1, [r5, #0]
 80088aa:	291d      	cmp	r1, #29
 80088ac:	d82b      	bhi.n	8008906 <__sflush_r+0xb2>
 80088ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008958 <__sflush_r+0x104>)
 80088b0:	410a      	asrs	r2, r1
 80088b2:	07d6      	lsls	r6, r2, #31
 80088b4:	d427      	bmi.n	8008906 <__sflush_r+0xb2>
 80088b6:	2200      	movs	r2, #0
 80088b8:	6062      	str	r2, [r4, #4]
 80088ba:	04d9      	lsls	r1, r3, #19
 80088bc:	6922      	ldr	r2, [r4, #16]
 80088be:	6022      	str	r2, [r4, #0]
 80088c0:	d504      	bpl.n	80088cc <__sflush_r+0x78>
 80088c2:	1c42      	adds	r2, r0, #1
 80088c4:	d101      	bne.n	80088ca <__sflush_r+0x76>
 80088c6:	682b      	ldr	r3, [r5, #0]
 80088c8:	b903      	cbnz	r3, 80088cc <__sflush_r+0x78>
 80088ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80088cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088ce:	602f      	str	r7, [r5, #0]
 80088d0:	b1b9      	cbz	r1, 8008902 <__sflush_r+0xae>
 80088d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088d6:	4299      	cmp	r1, r3
 80088d8:	d002      	beq.n	80088e0 <__sflush_r+0x8c>
 80088da:	4628      	mov	r0, r5
 80088dc:	f7fe fa2c 	bl	8006d38 <_free_r>
 80088e0:	2300      	movs	r3, #0
 80088e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80088e4:	e00d      	b.n	8008902 <__sflush_r+0xae>
 80088e6:	2301      	movs	r3, #1
 80088e8:	4628      	mov	r0, r5
 80088ea:	47b0      	blx	r6
 80088ec:	4602      	mov	r2, r0
 80088ee:	1c50      	adds	r0, r2, #1
 80088f0:	d1c9      	bne.n	8008886 <__sflush_r+0x32>
 80088f2:	682b      	ldr	r3, [r5, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0c6      	beq.n	8008886 <__sflush_r+0x32>
 80088f8:	2b1d      	cmp	r3, #29
 80088fa:	d001      	beq.n	8008900 <__sflush_r+0xac>
 80088fc:	2b16      	cmp	r3, #22
 80088fe:	d11e      	bne.n	800893e <__sflush_r+0xea>
 8008900:	602f      	str	r7, [r5, #0]
 8008902:	2000      	movs	r0, #0
 8008904:	e022      	b.n	800894c <__sflush_r+0xf8>
 8008906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800890a:	b21b      	sxth	r3, r3
 800890c:	e01b      	b.n	8008946 <__sflush_r+0xf2>
 800890e:	690f      	ldr	r7, [r1, #16]
 8008910:	2f00      	cmp	r7, #0
 8008912:	d0f6      	beq.n	8008902 <__sflush_r+0xae>
 8008914:	0793      	lsls	r3, r2, #30
 8008916:	680e      	ldr	r6, [r1, #0]
 8008918:	bf08      	it	eq
 800891a:	694b      	ldreq	r3, [r1, #20]
 800891c:	600f      	str	r7, [r1, #0]
 800891e:	bf18      	it	ne
 8008920:	2300      	movne	r3, #0
 8008922:	eba6 0807 	sub.w	r8, r6, r7
 8008926:	608b      	str	r3, [r1, #8]
 8008928:	f1b8 0f00 	cmp.w	r8, #0
 800892c:	dde9      	ble.n	8008902 <__sflush_r+0xae>
 800892e:	6a21      	ldr	r1, [r4, #32]
 8008930:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008932:	4643      	mov	r3, r8
 8008934:	463a      	mov	r2, r7
 8008936:	4628      	mov	r0, r5
 8008938:	47b0      	blx	r6
 800893a:	2800      	cmp	r0, #0
 800893c:	dc08      	bgt.n	8008950 <__sflush_r+0xfc>
 800893e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008946:	81a3      	strh	r3, [r4, #12]
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008950:	4407      	add	r7, r0
 8008952:	eba8 0800 	sub.w	r8, r8, r0
 8008956:	e7e7      	b.n	8008928 <__sflush_r+0xd4>
 8008958:	dfbffffe 	.word	0xdfbffffe

0800895c <_fflush_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	690b      	ldr	r3, [r1, #16]
 8008960:	4605      	mov	r5, r0
 8008962:	460c      	mov	r4, r1
 8008964:	b913      	cbnz	r3, 800896c <_fflush_r+0x10>
 8008966:	2500      	movs	r5, #0
 8008968:	4628      	mov	r0, r5
 800896a:	bd38      	pop	{r3, r4, r5, pc}
 800896c:	b118      	cbz	r0, 8008976 <_fflush_r+0x1a>
 800896e:	6a03      	ldr	r3, [r0, #32]
 8008970:	b90b      	cbnz	r3, 8008976 <_fflush_r+0x1a>
 8008972:	f7fd fa41 	bl	8005df8 <__sinit>
 8008976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0f3      	beq.n	8008966 <_fflush_r+0xa>
 800897e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008980:	07d0      	lsls	r0, r2, #31
 8008982:	d404      	bmi.n	800898e <_fflush_r+0x32>
 8008984:	0599      	lsls	r1, r3, #22
 8008986:	d402      	bmi.n	800898e <_fflush_r+0x32>
 8008988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800898a:	f7fd fb80 	bl	800608e <__retarget_lock_acquire_recursive>
 800898e:	4628      	mov	r0, r5
 8008990:	4621      	mov	r1, r4
 8008992:	f7ff ff5f 	bl	8008854 <__sflush_r>
 8008996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008998:	07da      	lsls	r2, r3, #31
 800899a:	4605      	mov	r5, r0
 800899c:	d4e4      	bmi.n	8008968 <_fflush_r+0xc>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	059b      	lsls	r3, r3, #22
 80089a2:	d4e1      	bmi.n	8008968 <_fflush_r+0xc>
 80089a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089a6:	f7fd fb73 	bl	8006090 <__retarget_lock_release_recursive>
 80089aa:	e7dd      	b.n	8008968 <_fflush_r+0xc>

080089ac <memmove>:
 80089ac:	4288      	cmp	r0, r1
 80089ae:	b510      	push	{r4, lr}
 80089b0:	eb01 0402 	add.w	r4, r1, r2
 80089b4:	d902      	bls.n	80089bc <memmove+0x10>
 80089b6:	4284      	cmp	r4, r0
 80089b8:	4623      	mov	r3, r4
 80089ba:	d807      	bhi.n	80089cc <memmove+0x20>
 80089bc:	1e43      	subs	r3, r0, #1
 80089be:	42a1      	cmp	r1, r4
 80089c0:	d008      	beq.n	80089d4 <memmove+0x28>
 80089c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089ca:	e7f8      	b.n	80089be <memmove+0x12>
 80089cc:	4402      	add	r2, r0
 80089ce:	4601      	mov	r1, r0
 80089d0:	428a      	cmp	r2, r1
 80089d2:	d100      	bne.n	80089d6 <memmove+0x2a>
 80089d4:	bd10      	pop	{r4, pc}
 80089d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089de:	e7f7      	b.n	80089d0 <memmove+0x24>

080089e0 <strncmp>:
 80089e0:	b510      	push	{r4, lr}
 80089e2:	b16a      	cbz	r2, 8008a00 <strncmp+0x20>
 80089e4:	3901      	subs	r1, #1
 80089e6:	1884      	adds	r4, r0, r2
 80089e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d103      	bne.n	80089fc <strncmp+0x1c>
 80089f4:	42a0      	cmp	r0, r4
 80089f6:	d001      	beq.n	80089fc <strncmp+0x1c>
 80089f8:	2a00      	cmp	r2, #0
 80089fa:	d1f5      	bne.n	80089e8 <strncmp+0x8>
 80089fc:	1ad0      	subs	r0, r2, r3
 80089fe:	bd10      	pop	{r4, pc}
 8008a00:	4610      	mov	r0, r2
 8008a02:	e7fc      	b.n	80089fe <strncmp+0x1e>

08008a04 <_sbrk_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4d06      	ldr	r5, [pc, #24]	@ (8008a20 <_sbrk_r+0x1c>)
 8008a08:	2300      	movs	r3, #0
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	602b      	str	r3, [r5, #0]
 8008a10:	f7f9 f8b8 	bl	8001b84 <_sbrk>
 8008a14:	1c43      	adds	r3, r0, #1
 8008a16:	d102      	bne.n	8008a1e <_sbrk_r+0x1a>
 8008a18:	682b      	ldr	r3, [r5, #0]
 8008a1a:	b103      	cbz	r3, 8008a1e <_sbrk_r+0x1a>
 8008a1c:	6023      	str	r3, [r4, #0]
 8008a1e:	bd38      	pop	{r3, r4, r5, pc}
 8008a20:	200006e8 	.word	0x200006e8

08008a24 <memcpy>:
 8008a24:	440a      	add	r2, r1
 8008a26:	4291      	cmp	r1, r2
 8008a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a2c:	d100      	bne.n	8008a30 <memcpy+0xc>
 8008a2e:	4770      	bx	lr
 8008a30:	b510      	push	{r4, lr}
 8008a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a3a:	4291      	cmp	r1, r2
 8008a3c:	d1f9      	bne.n	8008a32 <memcpy+0xe>
 8008a3e:	bd10      	pop	{r4, pc}

08008a40 <nan>:
 8008a40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008a48 <nan+0x8>
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	00000000 	.word	0x00000000
 8008a4c:	7ff80000 	.word	0x7ff80000

08008a50 <__assert_func>:
 8008a50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a52:	4614      	mov	r4, r2
 8008a54:	461a      	mov	r2, r3
 8008a56:	4b09      	ldr	r3, [pc, #36]	@ (8008a7c <__assert_func+0x2c>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	68d8      	ldr	r0, [r3, #12]
 8008a5e:	b954      	cbnz	r4, 8008a76 <__assert_func+0x26>
 8008a60:	4b07      	ldr	r3, [pc, #28]	@ (8008a80 <__assert_func+0x30>)
 8008a62:	461c      	mov	r4, r3
 8008a64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a68:	9100      	str	r1, [sp, #0]
 8008a6a:	462b      	mov	r3, r5
 8008a6c:	4905      	ldr	r1, [pc, #20]	@ (8008a84 <__assert_func+0x34>)
 8008a6e:	f000 fba7 	bl	80091c0 <fiprintf>
 8008a72:	f000 fbb7 	bl	80091e4 <abort>
 8008a76:	4b04      	ldr	r3, [pc, #16]	@ (8008a88 <__assert_func+0x38>)
 8008a78:	e7f4      	b.n	8008a64 <__assert_func+0x14>
 8008a7a:	bf00      	nop
 8008a7c:	20000148 	.word	0x20000148
 8008a80:	08009b45 	.word	0x08009b45
 8008a84:	08009b17 	.word	0x08009b17
 8008a88:	08009b0a 	.word	0x08009b0a

08008a8c <_calloc_r>:
 8008a8c:	b570      	push	{r4, r5, r6, lr}
 8008a8e:	fba1 5402 	umull	r5, r4, r1, r2
 8008a92:	b93c      	cbnz	r4, 8008aa4 <_calloc_r+0x18>
 8008a94:	4629      	mov	r1, r5
 8008a96:	f7fe f9c3 	bl	8006e20 <_malloc_r>
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	b928      	cbnz	r0, 8008aaa <_calloc_r+0x1e>
 8008a9e:	2600      	movs	r6, #0
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}
 8008aa4:	220c      	movs	r2, #12
 8008aa6:	6002      	str	r2, [r0, #0]
 8008aa8:	e7f9      	b.n	8008a9e <_calloc_r+0x12>
 8008aaa:	462a      	mov	r2, r5
 8008aac:	4621      	mov	r1, r4
 8008aae:	f7fd fa70 	bl	8005f92 <memset>
 8008ab2:	e7f5      	b.n	8008aa0 <_calloc_r+0x14>

08008ab4 <rshift>:
 8008ab4:	6903      	ldr	r3, [r0, #16]
 8008ab6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008aba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008abe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008ac2:	f100 0414 	add.w	r4, r0, #20
 8008ac6:	dd45      	ble.n	8008b54 <rshift+0xa0>
 8008ac8:	f011 011f 	ands.w	r1, r1, #31
 8008acc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008ad0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008ad4:	d10c      	bne.n	8008af0 <rshift+0x3c>
 8008ad6:	f100 0710 	add.w	r7, r0, #16
 8008ada:	4629      	mov	r1, r5
 8008adc:	42b1      	cmp	r1, r6
 8008ade:	d334      	bcc.n	8008b4a <rshift+0x96>
 8008ae0:	1a9b      	subs	r3, r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	1eea      	subs	r2, r5, #3
 8008ae6:	4296      	cmp	r6, r2
 8008ae8:	bf38      	it	cc
 8008aea:	2300      	movcc	r3, #0
 8008aec:	4423      	add	r3, r4
 8008aee:	e015      	b.n	8008b1c <rshift+0x68>
 8008af0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008af4:	f1c1 0820 	rsb	r8, r1, #32
 8008af8:	40cf      	lsrs	r7, r1
 8008afa:	f105 0e04 	add.w	lr, r5, #4
 8008afe:	46a1      	mov	r9, r4
 8008b00:	4576      	cmp	r6, lr
 8008b02:	46f4      	mov	ip, lr
 8008b04:	d815      	bhi.n	8008b32 <rshift+0x7e>
 8008b06:	1a9a      	subs	r2, r3, r2
 8008b08:	0092      	lsls	r2, r2, #2
 8008b0a:	3a04      	subs	r2, #4
 8008b0c:	3501      	adds	r5, #1
 8008b0e:	42ae      	cmp	r6, r5
 8008b10:	bf38      	it	cc
 8008b12:	2200      	movcc	r2, #0
 8008b14:	18a3      	adds	r3, r4, r2
 8008b16:	50a7      	str	r7, [r4, r2]
 8008b18:	b107      	cbz	r7, 8008b1c <rshift+0x68>
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	1b1a      	subs	r2, r3, r4
 8008b1e:	42a3      	cmp	r3, r4
 8008b20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b24:	bf08      	it	eq
 8008b26:	2300      	moveq	r3, #0
 8008b28:	6102      	str	r2, [r0, #16]
 8008b2a:	bf08      	it	eq
 8008b2c:	6143      	streq	r3, [r0, #20]
 8008b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b32:	f8dc c000 	ldr.w	ip, [ip]
 8008b36:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b3a:	ea4c 0707 	orr.w	r7, ip, r7
 8008b3e:	f849 7b04 	str.w	r7, [r9], #4
 8008b42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b46:	40cf      	lsrs	r7, r1
 8008b48:	e7da      	b.n	8008b00 <rshift+0x4c>
 8008b4a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b4e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b52:	e7c3      	b.n	8008adc <rshift+0x28>
 8008b54:	4623      	mov	r3, r4
 8008b56:	e7e1      	b.n	8008b1c <rshift+0x68>

08008b58 <__hexdig_fun>:
 8008b58:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008b5c:	2b09      	cmp	r3, #9
 8008b5e:	d802      	bhi.n	8008b66 <__hexdig_fun+0xe>
 8008b60:	3820      	subs	r0, #32
 8008b62:	b2c0      	uxtb	r0, r0
 8008b64:	4770      	bx	lr
 8008b66:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008b6a:	2b05      	cmp	r3, #5
 8008b6c:	d801      	bhi.n	8008b72 <__hexdig_fun+0x1a>
 8008b6e:	3847      	subs	r0, #71	@ 0x47
 8008b70:	e7f7      	b.n	8008b62 <__hexdig_fun+0xa>
 8008b72:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008b76:	2b05      	cmp	r3, #5
 8008b78:	d801      	bhi.n	8008b7e <__hexdig_fun+0x26>
 8008b7a:	3827      	subs	r0, #39	@ 0x27
 8008b7c:	e7f1      	b.n	8008b62 <__hexdig_fun+0xa>
 8008b7e:	2000      	movs	r0, #0
 8008b80:	4770      	bx	lr
	...

08008b84 <__gethex>:
 8008b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b88:	b085      	sub	sp, #20
 8008b8a:	468a      	mov	sl, r1
 8008b8c:	9302      	str	r3, [sp, #8]
 8008b8e:	680b      	ldr	r3, [r1, #0]
 8008b90:	9001      	str	r0, [sp, #4]
 8008b92:	4690      	mov	r8, r2
 8008b94:	1c9c      	adds	r4, r3, #2
 8008b96:	46a1      	mov	r9, r4
 8008b98:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008b9c:	2830      	cmp	r0, #48	@ 0x30
 8008b9e:	d0fa      	beq.n	8008b96 <__gethex+0x12>
 8008ba0:	eba9 0303 	sub.w	r3, r9, r3
 8008ba4:	f1a3 0b02 	sub.w	fp, r3, #2
 8008ba8:	f7ff ffd6 	bl	8008b58 <__hexdig_fun>
 8008bac:	4605      	mov	r5, r0
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d168      	bne.n	8008c84 <__gethex+0x100>
 8008bb2:	49a0      	ldr	r1, [pc, #640]	@ (8008e34 <__gethex+0x2b0>)
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	4648      	mov	r0, r9
 8008bb8:	f7ff ff12 	bl	80089e0 <strncmp>
 8008bbc:	4607      	mov	r7, r0
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d167      	bne.n	8008c92 <__gethex+0x10e>
 8008bc2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008bc6:	4626      	mov	r6, r4
 8008bc8:	f7ff ffc6 	bl	8008b58 <__hexdig_fun>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d062      	beq.n	8008c96 <__gethex+0x112>
 8008bd0:	4623      	mov	r3, r4
 8008bd2:	7818      	ldrb	r0, [r3, #0]
 8008bd4:	2830      	cmp	r0, #48	@ 0x30
 8008bd6:	4699      	mov	r9, r3
 8008bd8:	f103 0301 	add.w	r3, r3, #1
 8008bdc:	d0f9      	beq.n	8008bd2 <__gethex+0x4e>
 8008bde:	f7ff ffbb 	bl	8008b58 <__hexdig_fun>
 8008be2:	fab0 f580 	clz	r5, r0
 8008be6:	096d      	lsrs	r5, r5, #5
 8008be8:	f04f 0b01 	mov.w	fp, #1
 8008bec:	464a      	mov	r2, r9
 8008bee:	4616      	mov	r6, r2
 8008bf0:	3201      	adds	r2, #1
 8008bf2:	7830      	ldrb	r0, [r6, #0]
 8008bf4:	f7ff ffb0 	bl	8008b58 <__hexdig_fun>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d1f8      	bne.n	8008bee <__gethex+0x6a>
 8008bfc:	498d      	ldr	r1, [pc, #564]	@ (8008e34 <__gethex+0x2b0>)
 8008bfe:	2201      	movs	r2, #1
 8008c00:	4630      	mov	r0, r6
 8008c02:	f7ff feed 	bl	80089e0 <strncmp>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d13f      	bne.n	8008c8a <__gethex+0x106>
 8008c0a:	b944      	cbnz	r4, 8008c1e <__gethex+0x9a>
 8008c0c:	1c74      	adds	r4, r6, #1
 8008c0e:	4622      	mov	r2, r4
 8008c10:	4616      	mov	r6, r2
 8008c12:	3201      	adds	r2, #1
 8008c14:	7830      	ldrb	r0, [r6, #0]
 8008c16:	f7ff ff9f 	bl	8008b58 <__hexdig_fun>
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	d1f8      	bne.n	8008c10 <__gethex+0x8c>
 8008c1e:	1ba4      	subs	r4, r4, r6
 8008c20:	00a7      	lsls	r7, r4, #2
 8008c22:	7833      	ldrb	r3, [r6, #0]
 8008c24:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008c28:	2b50      	cmp	r3, #80	@ 0x50
 8008c2a:	d13e      	bne.n	8008caa <__gethex+0x126>
 8008c2c:	7873      	ldrb	r3, [r6, #1]
 8008c2e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008c30:	d033      	beq.n	8008c9a <__gethex+0x116>
 8008c32:	2b2d      	cmp	r3, #45	@ 0x2d
 8008c34:	d034      	beq.n	8008ca0 <__gethex+0x11c>
 8008c36:	1c71      	adds	r1, r6, #1
 8008c38:	2400      	movs	r4, #0
 8008c3a:	7808      	ldrb	r0, [r1, #0]
 8008c3c:	f7ff ff8c 	bl	8008b58 <__hexdig_fun>
 8008c40:	1e43      	subs	r3, r0, #1
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b18      	cmp	r3, #24
 8008c46:	d830      	bhi.n	8008caa <__gethex+0x126>
 8008c48:	f1a0 0210 	sub.w	r2, r0, #16
 8008c4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c50:	f7ff ff82 	bl	8008b58 <__hexdig_fun>
 8008c54:	f100 3cff 	add.w	ip, r0, #4294967295
 8008c58:	fa5f fc8c 	uxtb.w	ip, ip
 8008c5c:	f1bc 0f18 	cmp.w	ip, #24
 8008c60:	f04f 030a 	mov.w	r3, #10
 8008c64:	d91e      	bls.n	8008ca4 <__gethex+0x120>
 8008c66:	b104      	cbz	r4, 8008c6a <__gethex+0xe6>
 8008c68:	4252      	negs	r2, r2
 8008c6a:	4417      	add	r7, r2
 8008c6c:	f8ca 1000 	str.w	r1, [sl]
 8008c70:	b1ed      	cbz	r5, 8008cae <__gethex+0x12a>
 8008c72:	f1bb 0f00 	cmp.w	fp, #0
 8008c76:	bf0c      	ite	eq
 8008c78:	2506      	moveq	r5, #6
 8008c7a:	2500      	movne	r5, #0
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	b005      	add	sp, #20
 8008c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c84:	2500      	movs	r5, #0
 8008c86:	462c      	mov	r4, r5
 8008c88:	e7b0      	b.n	8008bec <__gethex+0x68>
 8008c8a:	2c00      	cmp	r4, #0
 8008c8c:	d1c7      	bne.n	8008c1e <__gethex+0x9a>
 8008c8e:	4627      	mov	r7, r4
 8008c90:	e7c7      	b.n	8008c22 <__gethex+0x9e>
 8008c92:	464e      	mov	r6, r9
 8008c94:	462f      	mov	r7, r5
 8008c96:	2501      	movs	r5, #1
 8008c98:	e7c3      	b.n	8008c22 <__gethex+0x9e>
 8008c9a:	2400      	movs	r4, #0
 8008c9c:	1cb1      	adds	r1, r6, #2
 8008c9e:	e7cc      	b.n	8008c3a <__gethex+0xb6>
 8008ca0:	2401      	movs	r4, #1
 8008ca2:	e7fb      	b.n	8008c9c <__gethex+0x118>
 8008ca4:	fb03 0002 	mla	r0, r3, r2, r0
 8008ca8:	e7ce      	b.n	8008c48 <__gethex+0xc4>
 8008caa:	4631      	mov	r1, r6
 8008cac:	e7de      	b.n	8008c6c <__gethex+0xe8>
 8008cae:	eba6 0309 	sub.w	r3, r6, r9
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	2b07      	cmp	r3, #7
 8008cb8:	dc0a      	bgt.n	8008cd0 <__gethex+0x14c>
 8008cba:	9801      	ldr	r0, [sp, #4]
 8008cbc:	f7fe f93c 	bl	8006f38 <_Balloc>
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	b940      	cbnz	r0, 8008cd6 <__gethex+0x152>
 8008cc4:	4b5c      	ldr	r3, [pc, #368]	@ (8008e38 <__gethex+0x2b4>)
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	21e4      	movs	r1, #228	@ 0xe4
 8008cca:	485c      	ldr	r0, [pc, #368]	@ (8008e3c <__gethex+0x2b8>)
 8008ccc:	f7ff fec0 	bl	8008a50 <__assert_func>
 8008cd0:	3101      	adds	r1, #1
 8008cd2:	105b      	asrs	r3, r3, #1
 8008cd4:	e7ef      	b.n	8008cb6 <__gethex+0x132>
 8008cd6:	f100 0a14 	add.w	sl, r0, #20
 8008cda:	2300      	movs	r3, #0
 8008cdc:	4655      	mov	r5, sl
 8008cde:	469b      	mov	fp, r3
 8008ce0:	45b1      	cmp	r9, r6
 8008ce2:	d337      	bcc.n	8008d54 <__gethex+0x1d0>
 8008ce4:	f845 bb04 	str.w	fp, [r5], #4
 8008ce8:	eba5 050a 	sub.w	r5, r5, sl
 8008cec:	10ad      	asrs	r5, r5, #2
 8008cee:	6125      	str	r5, [r4, #16]
 8008cf0:	4658      	mov	r0, fp
 8008cf2:	f7fe fa13 	bl	800711c <__hi0bits>
 8008cf6:	016d      	lsls	r5, r5, #5
 8008cf8:	f8d8 6000 	ldr.w	r6, [r8]
 8008cfc:	1a2d      	subs	r5, r5, r0
 8008cfe:	42b5      	cmp	r5, r6
 8008d00:	dd54      	ble.n	8008dac <__gethex+0x228>
 8008d02:	1bad      	subs	r5, r5, r6
 8008d04:	4629      	mov	r1, r5
 8008d06:	4620      	mov	r0, r4
 8008d08:	f7fe fda7 	bl	800785a <__any_on>
 8008d0c:	4681      	mov	r9, r0
 8008d0e:	b178      	cbz	r0, 8008d30 <__gethex+0x1ac>
 8008d10:	1e6b      	subs	r3, r5, #1
 8008d12:	1159      	asrs	r1, r3, #5
 8008d14:	f003 021f 	and.w	r2, r3, #31
 8008d18:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008d1c:	f04f 0901 	mov.w	r9, #1
 8008d20:	fa09 f202 	lsl.w	r2, r9, r2
 8008d24:	420a      	tst	r2, r1
 8008d26:	d003      	beq.n	8008d30 <__gethex+0x1ac>
 8008d28:	454b      	cmp	r3, r9
 8008d2a:	dc36      	bgt.n	8008d9a <__gethex+0x216>
 8008d2c:	f04f 0902 	mov.w	r9, #2
 8008d30:	4629      	mov	r1, r5
 8008d32:	4620      	mov	r0, r4
 8008d34:	f7ff febe 	bl	8008ab4 <rshift>
 8008d38:	442f      	add	r7, r5
 8008d3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d3e:	42bb      	cmp	r3, r7
 8008d40:	da42      	bge.n	8008dc8 <__gethex+0x244>
 8008d42:	9801      	ldr	r0, [sp, #4]
 8008d44:	4621      	mov	r1, r4
 8008d46:	f7fe f937 	bl	8006fb8 <_Bfree>
 8008d4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	6013      	str	r3, [r2, #0]
 8008d50:	25a3      	movs	r5, #163	@ 0xa3
 8008d52:	e793      	b.n	8008c7c <__gethex+0xf8>
 8008d54:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008d58:	2a2e      	cmp	r2, #46	@ 0x2e
 8008d5a:	d012      	beq.n	8008d82 <__gethex+0x1fe>
 8008d5c:	2b20      	cmp	r3, #32
 8008d5e:	d104      	bne.n	8008d6a <__gethex+0x1e6>
 8008d60:	f845 bb04 	str.w	fp, [r5], #4
 8008d64:	f04f 0b00 	mov.w	fp, #0
 8008d68:	465b      	mov	r3, fp
 8008d6a:	7830      	ldrb	r0, [r6, #0]
 8008d6c:	9303      	str	r3, [sp, #12]
 8008d6e:	f7ff fef3 	bl	8008b58 <__hexdig_fun>
 8008d72:	9b03      	ldr	r3, [sp, #12]
 8008d74:	f000 000f 	and.w	r0, r0, #15
 8008d78:	4098      	lsls	r0, r3
 8008d7a:	ea4b 0b00 	orr.w	fp, fp, r0
 8008d7e:	3304      	adds	r3, #4
 8008d80:	e7ae      	b.n	8008ce0 <__gethex+0x15c>
 8008d82:	45b1      	cmp	r9, r6
 8008d84:	d8ea      	bhi.n	8008d5c <__gethex+0x1d8>
 8008d86:	492b      	ldr	r1, [pc, #172]	@ (8008e34 <__gethex+0x2b0>)
 8008d88:	9303      	str	r3, [sp, #12]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f7ff fe27 	bl	80089e0 <strncmp>
 8008d92:	9b03      	ldr	r3, [sp, #12]
 8008d94:	2800      	cmp	r0, #0
 8008d96:	d1e1      	bne.n	8008d5c <__gethex+0x1d8>
 8008d98:	e7a2      	b.n	8008ce0 <__gethex+0x15c>
 8008d9a:	1ea9      	subs	r1, r5, #2
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f7fe fd5c 	bl	800785a <__any_on>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d0c2      	beq.n	8008d2c <__gethex+0x1a8>
 8008da6:	f04f 0903 	mov.w	r9, #3
 8008daa:	e7c1      	b.n	8008d30 <__gethex+0x1ac>
 8008dac:	da09      	bge.n	8008dc2 <__gethex+0x23e>
 8008dae:	1b75      	subs	r5, r6, r5
 8008db0:	4621      	mov	r1, r4
 8008db2:	9801      	ldr	r0, [sp, #4]
 8008db4:	462a      	mov	r2, r5
 8008db6:	f7fe fb17 	bl	80073e8 <__lshift>
 8008dba:	1b7f      	subs	r7, r7, r5
 8008dbc:	4604      	mov	r4, r0
 8008dbe:	f100 0a14 	add.w	sl, r0, #20
 8008dc2:	f04f 0900 	mov.w	r9, #0
 8008dc6:	e7b8      	b.n	8008d3a <__gethex+0x1b6>
 8008dc8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008dcc:	42bd      	cmp	r5, r7
 8008dce:	dd6f      	ble.n	8008eb0 <__gethex+0x32c>
 8008dd0:	1bed      	subs	r5, r5, r7
 8008dd2:	42ae      	cmp	r6, r5
 8008dd4:	dc34      	bgt.n	8008e40 <__gethex+0x2bc>
 8008dd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d022      	beq.n	8008e24 <__gethex+0x2a0>
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d024      	beq.n	8008e2c <__gethex+0x2a8>
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d115      	bne.n	8008e12 <__gethex+0x28e>
 8008de6:	42ae      	cmp	r6, r5
 8008de8:	d113      	bne.n	8008e12 <__gethex+0x28e>
 8008dea:	2e01      	cmp	r6, #1
 8008dec:	d10b      	bne.n	8008e06 <__gethex+0x282>
 8008dee:	9a02      	ldr	r2, [sp, #8]
 8008df0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	2301      	movs	r3, #1
 8008df8:	6123      	str	r3, [r4, #16]
 8008dfa:	f8ca 3000 	str.w	r3, [sl]
 8008dfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e00:	2562      	movs	r5, #98	@ 0x62
 8008e02:	601c      	str	r4, [r3, #0]
 8008e04:	e73a      	b.n	8008c7c <__gethex+0xf8>
 8008e06:	1e71      	subs	r1, r6, #1
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f7fe fd26 	bl	800785a <__any_on>
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d1ed      	bne.n	8008dee <__gethex+0x26a>
 8008e12:	9801      	ldr	r0, [sp, #4]
 8008e14:	4621      	mov	r1, r4
 8008e16:	f7fe f8cf 	bl	8006fb8 <_Bfree>
 8008e1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	2550      	movs	r5, #80	@ 0x50
 8008e22:	e72b      	b.n	8008c7c <__gethex+0xf8>
 8008e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1f3      	bne.n	8008e12 <__gethex+0x28e>
 8008e2a:	e7e0      	b.n	8008dee <__gethex+0x26a>
 8008e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1dd      	bne.n	8008dee <__gethex+0x26a>
 8008e32:	e7ee      	b.n	8008e12 <__gethex+0x28e>
 8008e34:	08009998 	.word	0x08009998
 8008e38:	0800982d 	.word	0x0800982d
 8008e3c:	08009b46 	.word	0x08009b46
 8008e40:	1e6f      	subs	r7, r5, #1
 8008e42:	f1b9 0f00 	cmp.w	r9, #0
 8008e46:	d130      	bne.n	8008eaa <__gethex+0x326>
 8008e48:	b127      	cbz	r7, 8008e54 <__gethex+0x2d0>
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f7fe fd04 	bl	800785a <__any_on>
 8008e52:	4681      	mov	r9, r0
 8008e54:	117a      	asrs	r2, r7, #5
 8008e56:	2301      	movs	r3, #1
 8008e58:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008e5c:	f007 071f 	and.w	r7, r7, #31
 8008e60:	40bb      	lsls	r3, r7
 8008e62:	4213      	tst	r3, r2
 8008e64:	4629      	mov	r1, r5
 8008e66:	4620      	mov	r0, r4
 8008e68:	bf18      	it	ne
 8008e6a:	f049 0902 	orrne.w	r9, r9, #2
 8008e6e:	f7ff fe21 	bl	8008ab4 <rshift>
 8008e72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008e76:	1b76      	subs	r6, r6, r5
 8008e78:	2502      	movs	r5, #2
 8008e7a:	f1b9 0f00 	cmp.w	r9, #0
 8008e7e:	d047      	beq.n	8008f10 <__gethex+0x38c>
 8008e80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d015      	beq.n	8008eb4 <__gethex+0x330>
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d017      	beq.n	8008ebc <__gethex+0x338>
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d109      	bne.n	8008ea4 <__gethex+0x320>
 8008e90:	f019 0f02 	tst.w	r9, #2
 8008e94:	d006      	beq.n	8008ea4 <__gethex+0x320>
 8008e96:	f8da 3000 	ldr.w	r3, [sl]
 8008e9a:	ea49 0903 	orr.w	r9, r9, r3
 8008e9e:	f019 0f01 	tst.w	r9, #1
 8008ea2:	d10e      	bne.n	8008ec2 <__gethex+0x33e>
 8008ea4:	f045 0510 	orr.w	r5, r5, #16
 8008ea8:	e032      	b.n	8008f10 <__gethex+0x38c>
 8008eaa:	f04f 0901 	mov.w	r9, #1
 8008eae:	e7d1      	b.n	8008e54 <__gethex+0x2d0>
 8008eb0:	2501      	movs	r5, #1
 8008eb2:	e7e2      	b.n	8008e7a <__gethex+0x2f6>
 8008eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eb6:	f1c3 0301 	rsb	r3, r3, #1
 8008eba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0f0      	beq.n	8008ea4 <__gethex+0x320>
 8008ec2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ec6:	f104 0314 	add.w	r3, r4, #20
 8008eca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008ece:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008ed2:	f04f 0c00 	mov.w	ip, #0
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008edc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ee0:	d01b      	beq.n	8008f1a <__gethex+0x396>
 8008ee2:	3201      	adds	r2, #1
 8008ee4:	6002      	str	r2, [r0, #0]
 8008ee6:	2d02      	cmp	r5, #2
 8008ee8:	f104 0314 	add.w	r3, r4, #20
 8008eec:	d13c      	bne.n	8008f68 <__gethex+0x3e4>
 8008eee:	f8d8 2000 	ldr.w	r2, [r8]
 8008ef2:	3a01      	subs	r2, #1
 8008ef4:	42b2      	cmp	r2, r6
 8008ef6:	d109      	bne.n	8008f0c <__gethex+0x388>
 8008ef8:	1171      	asrs	r1, r6, #5
 8008efa:	2201      	movs	r2, #1
 8008efc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f00:	f006 061f 	and.w	r6, r6, #31
 8008f04:	fa02 f606 	lsl.w	r6, r2, r6
 8008f08:	421e      	tst	r6, r3
 8008f0a:	d13a      	bne.n	8008f82 <__gethex+0x3fe>
 8008f0c:	f045 0520 	orr.w	r5, r5, #32
 8008f10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f12:	601c      	str	r4, [r3, #0]
 8008f14:	9b02      	ldr	r3, [sp, #8]
 8008f16:	601f      	str	r7, [r3, #0]
 8008f18:	e6b0      	b.n	8008c7c <__gethex+0xf8>
 8008f1a:	4299      	cmp	r1, r3
 8008f1c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f20:	d8d9      	bhi.n	8008ed6 <__gethex+0x352>
 8008f22:	68a3      	ldr	r3, [r4, #8]
 8008f24:	459b      	cmp	fp, r3
 8008f26:	db17      	blt.n	8008f58 <__gethex+0x3d4>
 8008f28:	6861      	ldr	r1, [r4, #4]
 8008f2a:	9801      	ldr	r0, [sp, #4]
 8008f2c:	3101      	adds	r1, #1
 8008f2e:	f7fe f803 	bl	8006f38 <_Balloc>
 8008f32:	4681      	mov	r9, r0
 8008f34:	b918      	cbnz	r0, 8008f3e <__gethex+0x3ba>
 8008f36:	4b1a      	ldr	r3, [pc, #104]	@ (8008fa0 <__gethex+0x41c>)
 8008f38:	4602      	mov	r2, r0
 8008f3a:	2184      	movs	r1, #132	@ 0x84
 8008f3c:	e6c5      	b.n	8008cca <__gethex+0x146>
 8008f3e:	6922      	ldr	r2, [r4, #16]
 8008f40:	3202      	adds	r2, #2
 8008f42:	f104 010c 	add.w	r1, r4, #12
 8008f46:	0092      	lsls	r2, r2, #2
 8008f48:	300c      	adds	r0, #12
 8008f4a:	f7ff fd6b 	bl	8008a24 <memcpy>
 8008f4e:	4621      	mov	r1, r4
 8008f50:	9801      	ldr	r0, [sp, #4]
 8008f52:	f7fe f831 	bl	8006fb8 <_Bfree>
 8008f56:	464c      	mov	r4, r9
 8008f58:	6923      	ldr	r3, [r4, #16]
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f60:	6122      	str	r2, [r4, #16]
 8008f62:	2201      	movs	r2, #1
 8008f64:	615a      	str	r2, [r3, #20]
 8008f66:	e7be      	b.n	8008ee6 <__gethex+0x362>
 8008f68:	6922      	ldr	r2, [r4, #16]
 8008f6a:	455a      	cmp	r2, fp
 8008f6c:	dd0b      	ble.n	8008f86 <__gethex+0x402>
 8008f6e:	2101      	movs	r1, #1
 8008f70:	4620      	mov	r0, r4
 8008f72:	f7ff fd9f 	bl	8008ab4 <rshift>
 8008f76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f7a:	3701      	adds	r7, #1
 8008f7c:	42bb      	cmp	r3, r7
 8008f7e:	f6ff aee0 	blt.w	8008d42 <__gethex+0x1be>
 8008f82:	2501      	movs	r5, #1
 8008f84:	e7c2      	b.n	8008f0c <__gethex+0x388>
 8008f86:	f016 061f 	ands.w	r6, r6, #31
 8008f8a:	d0fa      	beq.n	8008f82 <__gethex+0x3fe>
 8008f8c:	4453      	add	r3, sl
 8008f8e:	f1c6 0620 	rsb	r6, r6, #32
 8008f92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008f96:	f7fe f8c1 	bl	800711c <__hi0bits>
 8008f9a:	42b0      	cmp	r0, r6
 8008f9c:	dbe7      	blt.n	8008f6e <__gethex+0x3ea>
 8008f9e:	e7f0      	b.n	8008f82 <__gethex+0x3fe>
 8008fa0:	0800982d 	.word	0x0800982d

08008fa4 <L_shift>:
 8008fa4:	f1c2 0208 	rsb	r2, r2, #8
 8008fa8:	0092      	lsls	r2, r2, #2
 8008faa:	b570      	push	{r4, r5, r6, lr}
 8008fac:	f1c2 0620 	rsb	r6, r2, #32
 8008fb0:	6843      	ldr	r3, [r0, #4]
 8008fb2:	6804      	ldr	r4, [r0, #0]
 8008fb4:	fa03 f506 	lsl.w	r5, r3, r6
 8008fb8:	432c      	orrs	r4, r5
 8008fba:	40d3      	lsrs	r3, r2
 8008fbc:	6004      	str	r4, [r0, #0]
 8008fbe:	f840 3f04 	str.w	r3, [r0, #4]!
 8008fc2:	4288      	cmp	r0, r1
 8008fc4:	d3f4      	bcc.n	8008fb0 <L_shift+0xc>
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}

08008fc8 <__match>:
 8008fc8:	b530      	push	{r4, r5, lr}
 8008fca:	6803      	ldr	r3, [r0, #0]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fd2:	b914      	cbnz	r4, 8008fda <__match+0x12>
 8008fd4:	6003      	str	r3, [r0, #0]
 8008fd6:	2001      	movs	r0, #1
 8008fd8:	bd30      	pop	{r4, r5, pc}
 8008fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fde:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008fe2:	2d19      	cmp	r5, #25
 8008fe4:	bf98      	it	ls
 8008fe6:	3220      	addls	r2, #32
 8008fe8:	42a2      	cmp	r2, r4
 8008fea:	d0f0      	beq.n	8008fce <__match+0x6>
 8008fec:	2000      	movs	r0, #0
 8008fee:	e7f3      	b.n	8008fd8 <__match+0x10>

08008ff0 <__hexnan>:
 8008ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	680b      	ldr	r3, [r1, #0]
 8008ff6:	6801      	ldr	r1, [r0, #0]
 8008ff8:	115e      	asrs	r6, r3, #5
 8008ffa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ffe:	f013 031f 	ands.w	r3, r3, #31
 8009002:	b087      	sub	sp, #28
 8009004:	bf18      	it	ne
 8009006:	3604      	addne	r6, #4
 8009008:	2500      	movs	r5, #0
 800900a:	1f37      	subs	r7, r6, #4
 800900c:	4682      	mov	sl, r0
 800900e:	4690      	mov	r8, r2
 8009010:	9301      	str	r3, [sp, #4]
 8009012:	f846 5c04 	str.w	r5, [r6, #-4]
 8009016:	46b9      	mov	r9, r7
 8009018:	463c      	mov	r4, r7
 800901a:	9502      	str	r5, [sp, #8]
 800901c:	46ab      	mov	fp, r5
 800901e:	784a      	ldrb	r2, [r1, #1]
 8009020:	1c4b      	adds	r3, r1, #1
 8009022:	9303      	str	r3, [sp, #12]
 8009024:	b342      	cbz	r2, 8009078 <__hexnan+0x88>
 8009026:	4610      	mov	r0, r2
 8009028:	9105      	str	r1, [sp, #20]
 800902a:	9204      	str	r2, [sp, #16]
 800902c:	f7ff fd94 	bl	8008b58 <__hexdig_fun>
 8009030:	2800      	cmp	r0, #0
 8009032:	d151      	bne.n	80090d8 <__hexnan+0xe8>
 8009034:	9a04      	ldr	r2, [sp, #16]
 8009036:	9905      	ldr	r1, [sp, #20]
 8009038:	2a20      	cmp	r2, #32
 800903a:	d818      	bhi.n	800906e <__hexnan+0x7e>
 800903c:	9b02      	ldr	r3, [sp, #8]
 800903e:	459b      	cmp	fp, r3
 8009040:	dd13      	ble.n	800906a <__hexnan+0x7a>
 8009042:	454c      	cmp	r4, r9
 8009044:	d206      	bcs.n	8009054 <__hexnan+0x64>
 8009046:	2d07      	cmp	r5, #7
 8009048:	dc04      	bgt.n	8009054 <__hexnan+0x64>
 800904a:	462a      	mov	r2, r5
 800904c:	4649      	mov	r1, r9
 800904e:	4620      	mov	r0, r4
 8009050:	f7ff ffa8 	bl	8008fa4 <L_shift>
 8009054:	4544      	cmp	r4, r8
 8009056:	d952      	bls.n	80090fe <__hexnan+0x10e>
 8009058:	2300      	movs	r3, #0
 800905a:	f1a4 0904 	sub.w	r9, r4, #4
 800905e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009062:	f8cd b008 	str.w	fp, [sp, #8]
 8009066:	464c      	mov	r4, r9
 8009068:	461d      	mov	r5, r3
 800906a:	9903      	ldr	r1, [sp, #12]
 800906c:	e7d7      	b.n	800901e <__hexnan+0x2e>
 800906e:	2a29      	cmp	r2, #41	@ 0x29
 8009070:	d157      	bne.n	8009122 <__hexnan+0x132>
 8009072:	3102      	adds	r1, #2
 8009074:	f8ca 1000 	str.w	r1, [sl]
 8009078:	f1bb 0f00 	cmp.w	fp, #0
 800907c:	d051      	beq.n	8009122 <__hexnan+0x132>
 800907e:	454c      	cmp	r4, r9
 8009080:	d206      	bcs.n	8009090 <__hexnan+0xa0>
 8009082:	2d07      	cmp	r5, #7
 8009084:	dc04      	bgt.n	8009090 <__hexnan+0xa0>
 8009086:	462a      	mov	r2, r5
 8009088:	4649      	mov	r1, r9
 800908a:	4620      	mov	r0, r4
 800908c:	f7ff ff8a 	bl	8008fa4 <L_shift>
 8009090:	4544      	cmp	r4, r8
 8009092:	d936      	bls.n	8009102 <__hexnan+0x112>
 8009094:	f1a8 0204 	sub.w	r2, r8, #4
 8009098:	4623      	mov	r3, r4
 800909a:	f853 1b04 	ldr.w	r1, [r3], #4
 800909e:	f842 1f04 	str.w	r1, [r2, #4]!
 80090a2:	429f      	cmp	r7, r3
 80090a4:	d2f9      	bcs.n	800909a <__hexnan+0xaa>
 80090a6:	1b3b      	subs	r3, r7, r4
 80090a8:	f023 0303 	bic.w	r3, r3, #3
 80090ac:	3304      	adds	r3, #4
 80090ae:	3401      	adds	r4, #1
 80090b0:	3e03      	subs	r6, #3
 80090b2:	42b4      	cmp	r4, r6
 80090b4:	bf88      	it	hi
 80090b6:	2304      	movhi	r3, #4
 80090b8:	4443      	add	r3, r8
 80090ba:	2200      	movs	r2, #0
 80090bc:	f843 2b04 	str.w	r2, [r3], #4
 80090c0:	429f      	cmp	r7, r3
 80090c2:	d2fb      	bcs.n	80090bc <__hexnan+0xcc>
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	b91b      	cbnz	r3, 80090d0 <__hexnan+0xe0>
 80090c8:	4547      	cmp	r7, r8
 80090ca:	d128      	bne.n	800911e <__hexnan+0x12e>
 80090cc:	2301      	movs	r3, #1
 80090ce:	603b      	str	r3, [r7, #0]
 80090d0:	2005      	movs	r0, #5
 80090d2:	b007      	add	sp, #28
 80090d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d8:	3501      	adds	r5, #1
 80090da:	2d08      	cmp	r5, #8
 80090dc:	f10b 0b01 	add.w	fp, fp, #1
 80090e0:	dd06      	ble.n	80090f0 <__hexnan+0x100>
 80090e2:	4544      	cmp	r4, r8
 80090e4:	d9c1      	bls.n	800906a <__hexnan+0x7a>
 80090e6:	2300      	movs	r3, #0
 80090e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80090ec:	2501      	movs	r5, #1
 80090ee:	3c04      	subs	r4, #4
 80090f0:	6822      	ldr	r2, [r4, #0]
 80090f2:	f000 000f 	and.w	r0, r0, #15
 80090f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80090fa:	6020      	str	r0, [r4, #0]
 80090fc:	e7b5      	b.n	800906a <__hexnan+0x7a>
 80090fe:	2508      	movs	r5, #8
 8009100:	e7b3      	b.n	800906a <__hexnan+0x7a>
 8009102:	9b01      	ldr	r3, [sp, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d0dd      	beq.n	80090c4 <__hexnan+0xd4>
 8009108:	f1c3 0320 	rsb	r3, r3, #32
 800910c:	f04f 32ff 	mov.w	r2, #4294967295
 8009110:	40da      	lsrs	r2, r3
 8009112:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009116:	4013      	ands	r3, r2
 8009118:	f846 3c04 	str.w	r3, [r6, #-4]
 800911c:	e7d2      	b.n	80090c4 <__hexnan+0xd4>
 800911e:	3f04      	subs	r7, #4
 8009120:	e7d0      	b.n	80090c4 <__hexnan+0xd4>
 8009122:	2004      	movs	r0, #4
 8009124:	e7d5      	b.n	80090d2 <__hexnan+0xe2>

08009126 <__ascii_mbtowc>:
 8009126:	b082      	sub	sp, #8
 8009128:	b901      	cbnz	r1, 800912c <__ascii_mbtowc+0x6>
 800912a:	a901      	add	r1, sp, #4
 800912c:	b142      	cbz	r2, 8009140 <__ascii_mbtowc+0x1a>
 800912e:	b14b      	cbz	r3, 8009144 <__ascii_mbtowc+0x1e>
 8009130:	7813      	ldrb	r3, [r2, #0]
 8009132:	600b      	str	r3, [r1, #0]
 8009134:	7812      	ldrb	r2, [r2, #0]
 8009136:	1e10      	subs	r0, r2, #0
 8009138:	bf18      	it	ne
 800913a:	2001      	movne	r0, #1
 800913c:	b002      	add	sp, #8
 800913e:	4770      	bx	lr
 8009140:	4610      	mov	r0, r2
 8009142:	e7fb      	b.n	800913c <__ascii_mbtowc+0x16>
 8009144:	f06f 0001 	mvn.w	r0, #1
 8009148:	e7f8      	b.n	800913c <__ascii_mbtowc+0x16>

0800914a <_realloc_r>:
 800914a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800914e:	4680      	mov	r8, r0
 8009150:	4615      	mov	r5, r2
 8009152:	460c      	mov	r4, r1
 8009154:	b921      	cbnz	r1, 8009160 <_realloc_r+0x16>
 8009156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800915a:	4611      	mov	r1, r2
 800915c:	f7fd be60 	b.w	8006e20 <_malloc_r>
 8009160:	b92a      	cbnz	r2, 800916e <_realloc_r+0x24>
 8009162:	f7fd fde9 	bl	8006d38 <_free_r>
 8009166:	2400      	movs	r4, #0
 8009168:	4620      	mov	r0, r4
 800916a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800916e:	f000 f840 	bl	80091f2 <_malloc_usable_size_r>
 8009172:	4285      	cmp	r5, r0
 8009174:	4606      	mov	r6, r0
 8009176:	d802      	bhi.n	800917e <_realloc_r+0x34>
 8009178:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800917c:	d8f4      	bhi.n	8009168 <_realloc_r+0x1e>
 800917e:	4629      	mov	r1, r5
 8009180:	4640      	mov	r0, r8
 8009182:	f7fd fe4d 	bl	8006e20 <_malloc_r>
 8009186:	4607      	mov	r7, r0
 8009188:	2800      	cmp	r0, #0
 800918a:	d0ec      	beq.n	8009166 <_realloc_r+0x1c>
 800918c:	42b5      	cmp	r5, r6
 800918e:	462a      	mov	r2, r5
 8009190:	4621      	mov	r1, r4
 8009192:	bf28      	it	cs
 8009194:	4632      	movcs	r2, r6
 8009196:	f7ff fc45 	bl	8008a24 <memcpy>
 800919a:	4621      	mov	r1, r4
 800919c:	4640      	mov	r0, r8
 800919e:	f7fd fdcb 	bl	8006d38 <_free_r>
 80091a2:	463c      	mov	r4, r7
 80091a4:	e7e0      	b.n	8009168 <_realloc_r+0x1e>

080091a6 <__ascii_wctomb>:
 80091a6:	4603      	mov	r3, r0
 80091a8:	4608      	mov	r0, r1
 80091aa:	b141      	cbz	r1, 80091be <__ascii_wctomb+0x18>
 80091ac:	2aff      	cmp	r2, #255	@ 0xff
 80091ae:	d904      	bls.n	80091ba <__ascii_wctomb+0x14>
 80091b0:	228a      	movs	r2, #138	@ 0x8a
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	f04f 30ff 	mov.w	r0, #4294967295
 80091b8:	4770      	bx	lr
 80091ba:	700a      	strb	r2, [r1, #0]
 80091bc:	2001      	movs	r0, #1
 80091be:	4770      	bx	lr

080091c0 <fiprintf>:
 80091c0:	b40e      	push	{r1, r2, r3}
 80091c2:	b503      	push	{r0, r1, lr}
 80091c4:	4601      	mov	r1, r0
 80091c6:	ab03      	add	r3, sp, #12
 80091c8:	4805      	ldr	r0, [pc, #20]	@ (80091e0 <fiprintf+0x20>)
 80091ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ce:	6800      	ldr	r0, [r0, #0]
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	f000 f83f 	bl	8009254 <_vfiprintf_r>
 80091d6:	b002      	add	sp, #8
 80091d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091dc:	b003      	add	sp, #12
 80091de:	4770      	bx	lr
 80091e0:	20000148 	.word	0x20000148

080091e4 <abort>:
 80091e4:	b508      	push	{r3, lr}
 80091e6:	2006      	movs	r0, #6
 80091e8:	f000 fa08 	bl	80095fc <raise>
 80091ec:	2001      	movs	r0, #1
 80091ee:	f7f8 fc51 	bl	8001a94 <_exit>

080091f2 <_malloc_usable_size_r>:
 80091f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091f6:	1f18      	subs	r0, r3, #4
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	bfbc      	itt	lt
 80091fc:	580b      	ldrlt	r3, [r1, r0]
 80091fe:	18c0      	addlt	r0, r0, r3
 8009200:	4770      	bx	lr

08009202 <__sfputc_r>:
 8009202:	6893      	ldr	r3, [r2, #8]
 8009204:	3b01      	subs	r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	b410      	push	{r4}
 800920a:	6093      	str	r3, [r2, #8]
 800920c:	da08      	bge.n	8009220 <__sfputc_r+0x1e>
 800920e:	6994      	ldr	r4, [r2, #24]
 8009210:	42a3      	cmp	r3, r4
 8009212:	db01      	blt.n	8009218 <__sfputc_r+0x16>
 8009214:	290a      	cmp	r1, #10
 8009216:	d103      	bne.n	8009220 <__sfputc_r+0x1e>
 8009218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800921c:	f000 b932 	b.w	8009484 <__swbuf_r>
 8009220:	6813      	ldr	r3, [r2, #0]
 8009222:	1c58      	adds	r0, r3, #1
 8009224:	6010      	str	r0, [r2, #0]
 8009226:	7019      	strb	r1, [r3, #0]
 8009228:	4608      	mov	r0, r1
 800922a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800922e:	4770      	bx	lr

08009230 <__sfputs_r>:
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	4606      	mov	r6, r0
 8009234:	460f      	mov	r7, r1
 8009236:	4614      	mov	r4, r2
 8009238:	18d5      	adds	r5, r2, r3
 800923a:	42ac      	cmp	r4, r5
 800923c:	d101      	bne.n	8009242 <__sfputs_r+0x12>
 800923e:	2000      	movs	r0, #0
 8009240:	e007      	b.n	8009252 <__sfputs_r+0x22>
 8009242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009246:	463a      	mov	r2, r7
 8009248:	4630      	mov	r0, r6
 800924a:	f7ff ffda 	bl	8009202 <__sfputc_r>
 800924e:	1c43      	adds	r3, r0, #1
 8009250:	d1f3      	bne.n	800923a <__sfputs_r+0xa>
 8009252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009254 <_vfiprintf_r>:
 8009254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009258:	460d      	mov	r5, r1
 800925a:	b09d      	sub	sp, #116	@ 0x74
 800925c:	4614      	mov	r4, r2
 800925e:	4698      	mov	r8, r3
 8009260:	4606      	mov	r6, r0
 8009262:	b118      	cbz	r0, 800926c <_vfiprintf_r+0x18>
 8009264:	6a03      	ldr	r3, [r0, #32]
 8009266:	b90b      	cbnz	r3, 800926c <_vfiprintf_r+0x18>
 8009268:	f7fc fdc6 	bl	8005df8 <__sinit>
 800926c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800926e:	07d9      	lsls	r1, r3, #31
 8009270:	d405      	bmi.n	800927e <_vfiprintf_r+0x2a>
 8009272:	89ab      	ldrh	r3, [r5, #12]
 8009274:	059a      	lsls	r2, r3, #22
 8009276:	d402      	bmi.n	800927e <_vfiprintf_r+0x2a>
 8009278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800927a:	f7fc ff08 	bl	800608e <__retarget_lock_acquire_recursive>
 800927e:	89ab      	ldrh	r3, [r5, #12]
 8009280:	071b      	lsls	r3, r3, #28
 8009282:	d501      	bpl.n	8009288 <_vfiprintf_r+0x34>
 8009284:	692b      	ldr	r3, [r5, #16]
 8009286:	b99b      	cbnz	r3, 80092b0 <_vfiprintf_r+0x5c>
 8009288:	4629      	mov	r1, r5
 800928a:	4630      	mov	r0, r6
 800928c:	f000 f938 	bl	8009500 <__swsetup_r>
 8009290:	b170      	cbz	r0, 80092b0 <_vfiprintf_r+0x5c>
 8009292:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009294:	07dc      	lsls	r4, r3, #31
 8009296:	d504      	bpl.n	80092a2 <_vfiprintf_r+0x4e>
 8009298:	f04f 30ff 	mov.w	r0, #4294967295
 800929c:	b01d      	add	sp, #116	@ 0x74
 800929e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a2:	89ab      	ldrh	r3, [r5, #12]
 80092a4:	0598      	lsls	r0, r3, #22
 80092a6:	d4f7      	bmi.n	8009298 <_vfiprintf_r+0x44>
 80092a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092aa:	f7fc fef1 	bl	8006090 <__retarget_lock_release_recursive>
 80092ae:	e7f3      	b.n	8009298 <_vfiprintf_r+0x44>
 80092b0:	2300      	movs	r3, #0
 80092b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80092b4:	2320      	movs	r3, #32
 80092b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80092be:	2330      	movs	r3, #48	@ 0x30
 80092c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009470 <_vfiprintf_r+0x21c>
 80092c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092c8:	f04f 0901 	mov.w	r9, #1
 80092cc:	4623      	mov	r3, r4
 80092ce:	469a      	mov	sl, r3
 80092d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092d4:	b10a      	cbz	r2, 80092da <_vfiprintf_r+0x86>
 80092d6:	2a25      	cmp	r2, #37	@ 0x25
 80092d8:	d1f9      	bne.n	80092ce <_vfiprintf_r+0x7a>
 80092da:	ebba 0b04 	subs.w	fp, sl, r4
 80092de:	d00b      	beq.n	80092f8 <_vfiprintf_r+0xa4>
 80092e0:	465b      	mov	r3, fp
 80092e2:	4622      	mov	r2, r4
 80092e4:	4629      	mov	r1, r5
 80092e6:	4630      	mov	r0, r6
 80092e8:	f7ff ffa2 	bl	8009230 <__sfputs_r>
 80092ec:	3001      	adds	r0, #1
 80092ee:	f000 80a7 	beq.w	8009440 <_vfiprintf_r+0x1ec>
 80092f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092f4:	445a      	add	r2, fp
 80092f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80092f8:	f89a 3000 	ldrb.w	r3, [sl]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 809f 	beq.w	8009440 <_vfiprintf_r+0x1ec>
 8009302:	2300      	movs	r3, #0
 8009304:	f04f 32ff 	mov.w	r2, #4294967295
 8009308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800930c:	f10a 0a01 	add.w	sl, sl, #1
 8009310:	9304      	str	r3, [sp, #16]
 8009312:	9307      	str	r3, [sp, #28]
 8009314:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009318:	931a      	str	r3, [sp, #104]	@ 0x68
 800931a:	4654      	mov	r4, sl
 800931c:	2205      	movs	r2, #5
 800931e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009322:	4853      	ldr	r0, [pc, #332]	@ (8009470 <_vfiprintf_r+0x21c>)
 8009324:	f7f6 ff54 	bl	80001d0 <memchr>
 8009328:	9a04      	ldr	r2, [sp, #16]
 800932a:	b9d8      	cbnz	r0, 8009364 <_vfiprintf_r+0x110>
 800932c:	06d1      	lsls	r1, r2, #27
 800932e:	bf44      	itt	mi
 8009330:	2320      	movmi	r3, #32
 8009332:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009336:	0713      	lsls	r3, r2, #28
 8009338:	bf44      	itt	mi
 800933a:	232b      	movmi	r3, #43	@ 0x2b
 800933c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009340:	f89a 3000 	ldrb.w	r3, [sl]
 8009344:	2b2a      	cmp	r3, #42	@ 0x2a
 8009346:	d015      	beq.n	8009374 <_vfiprintf_r+0x120>
 8009348:	9a07      	ldr	r2, [sp, #28]
 800934a:	4654      	mov	r4, sl
 800934c:	2000      	movs	r0, #0
 800934e:	f04f 0c0a 	mov.w	ip, #10
 8009352:	4621      	mov	r1, r4
 8009354:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009358:	3b30      	subs	r3, #48	@ 0x30
 800935a:	2b09      	cmp	r3, #9
 800935c:	d94b      	bls.n	80093f6 <_vfiprintf_r+0x1a2>
 800935e:	b1b0      	cbz	r0, 800938e <_vfiprintf_r+0x13a>
 8009360:	9207      	str	r2, [sp, #28]
 8009362:	e014      	b.n	800938e <_vfiprintf_r+0x13a>
 8009364:	eba0 0308 	sub.w	r3, r0, r8
 8009368:	fa09 f303 	lsl.w	r3, r9, r3
 800936c:	4313      	orrs	r3, r2
 800936e:	9304      	str	r3, [sp, #16]
 8009370:	46a2      	mov	sl, r4
 8009372:	e7d2      	b.n	800931a <_vfiprintf_r+0xc6>
 8009374:	9b03      	ldr	r3, [sp, #12]
 8009376:	1d19      	adds	r1, r3, #4
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	9103      	str	r1, [sp, #12]
 800937c:	2b00      	cmp	r3, #0
 800937e:	bfbb      	ittet	lt
 8009380:	425b      	neglt	r3, r3
 8009382:	f042 0202 	orrlt.w	r2, r2, #2
 8009386:	9307      	strge	r3, [sp, #28]
 8009388:	9307      	strlt	r3, [sp, #28]
 800938a:	bfb8      	it	lt
 800938c:	9204      	strlt	r2, [sp, #16]
 800938e:	7823      	ldrb	r3, [r4, #0]
 8009390:	2b2e      	cmp	r3, #46	@ 0x2e
 8009392:	d10a      	bne.n	80093aa <_vfiprintf_r+0x156>
 8009394:	7863      	ldrb	r3, [r4, #1]
 8009396:	2b2a      	cmp	r3, #42	@ 0x2a
 8009398:	d132      	bne.n	8009400 <_vfiprintf_r+0x1ac>
 800939a:	9b03      	ldr	r3, [sp, #12]
 800939c:	1d1a      	adds	r2, r3, #4
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	9203      	str	r2, [sp, #12]
 80093a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093a6:	3402      	adds	r4, #2
 80093a8:	9305      	str	r3, [sp, #20]
 80093aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009480 <_vfiprintf_r+0x22c>
 80093ae:	7821      	ldrb	r1, [r4, #0]
 80093b0:	2203      	movs	r2, #3
 80093b2:	4650      	mov	r0, sl
 80093b4:	f7f6 ff0c 	bl	80001d0 <memchr>
 80093b8:	b138      	cbz	r0, 80093ca <_vfiprintf_r+0x176>
 80093ba:	9b04      	ldr	r3, [sp, #16]
 80093bc:	eba0 000a 	sub.w	r0, r0, sl
 80093c0:	2240      	movs	r2, #64	@ 0x40
 80093c2:	4082      	lsls	r2, r0
 80093c4:	4313      	orrs	r3, r2
 80093c6:	3401      	adds	r4, #1
 80093c8:	9304      	str	r3, [sp, #16]
 80093ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ce:	4829      	ldr	r0, [pc, #164]	@ (8009474 <_vfiprintf_r+0x220>)
 80093d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093d4:	2206      	movs	r2, #6
 80093d6:	f7f6 fefb 	bl	80001d0 <memchr>
 80093da:	2800      	cmp	r0, #0
 80093dc:	d03f      	beq.n	800945e <_vfiprintf_r+0x20a>
 80093de:	4b26      	ldr	r3, [pc, #152]	@ (8009478 <_vfiprintf_r+0x224>)
 80093e0:	bb1b      	cbnz	r3, 800942a <_vfiprintf_r+0x1d6>
 80093e2:	9b03      	ldr	r3, [sp, #12]
 80093e4:	3307      	adds	r3, #7
 80093e6:	f023 0307 	bic.w	r3, r3, #7
 80093ea:	3308      	adds	r3, #8
 80093ec:	9303      	str	r3, [sp, #12]
 80093ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f0:	443b      	add	r3, r7
 80093f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093f4:	e76a      	b.n	80092cc <_vfiprintf_r+0x78>
 80093f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80093fa:	460c      	mov	r4, r1
 80093fc:	2001      	movs	r0, #1
 80093fe:	e7a8      	b.n	8009352 <_vfiprintf_r+0xfe>
 8009400:	2300      	movs	r3, #0
 8009402:	3401      	adds	r4, #1
 8009404:	9305      	str	r3, [sp, #20]
 8009406:	4619      	mov	r1, r3
 8009408:	f04f 0c0a 	mov.w	ip, #10
 800940c:	4620      	mov	r0, r4
 800940e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009412:	3a30      	subs	r2, #48	@ 0x30
 8009414:	2a09      	cmp	r2, #9
 8009416:	d903      	bls.n	8009420 <_vfiprintf_r+0x1cc>
 8009418:	2b00      	cmp	r3, #0
 800941a:	d0c6      	beq.n	80093aa <_vfiprintf_r+0x156>
 800941c:	9105      	str	r1, [sp, #20]
 800941e:	e7c4      	b.n	80093aa <_vfiprintf_r+0x156>
 8009420:	fb0c 2101 	mla	r1, ip, r1, r2
 8009424:	4604      	mov	r4, r0
 8009426:	2301      	movs	r3, #1
 8009428:	e7f0      	b.n	800940c <_vfiprintf_r+0x1b8>
 800942a:	ab03      	add	r3, sp, #12
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	462a      	mov	r2, r5
 8009430:	4b12      	ldr	r3, [pc, #72]	@ (800947c <_vfiprintf_r+0x228>)
 8009432:	a904      	add	r1, sp, #16
 8009434:	4630      	mov	r0, r6
 8009436:	f7fb fe87 	bl	8005148 <_printf_float>
 800943a:	4607      	mov	r7, r0
 800943c:	1c78      	adds	r0, r7, #1
 800943e:	d1d6      	bne.n	80093ee <_vfiprintf_r+0x19a>
 8009440:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009442:	07d9      	lsls	r1, r3, #31
 8009444:	d405      	bmi.n	8009452 <_vfiprintf_r+0x1fe>
 8009446:	89ab      	ldrh	r3, [r5, #12]
 8009448:	059a      	lsls	r2, r3, #22
 800944a:	d402      	bmi.n	8009452 <_vfiprintf_r+0x1fe>
 800944c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800944e:	f7fc fe1f 	bl	8006090 <__retarget_lock_release_recursive>
 8009452:	89ab      	ldrh	r3, [r5, #12]
 8009454:	065b      	lsls	r3, r3, #25
 8009456:	f53f af1f 	bmi.w	8009298 <_vfiprintf_r+0x44>
 800945a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800945c:	e71e      	b.n	800929c <_vfiprintf_r+0x48>
 800945e:	ab03      	add	r3, sp, #12
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	462a      	mov	r2, r5
 8009464:	4b05      	ldr	r3, [pc, #20]	@ (800947c <_vfiprintf_r+0x228>)
 8009466:	a904      	add	r1, sp, #16
 8009468:	4630      	mov	r0, r6
 800946a:	f7fc f905 	bl	8005678 <_printf_i>
 800946e:	e7e4      	b.n	800943a <_vfiprintf_r+0x1e6>
 8009470:	08009af1 	.word	0x08009af1
 8009474:	08009afb 	.word	0x08009afb
 8009478:	08005149 	.word	0x08005149
 800947c:	08009231 	.word	0x08009231
 8009480:	08009af7 	.word	0x08009af7

08009484 <__swbuf_r>:
 8009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009486:	460e      	mov	r6, r1
 8009488:	4614      	mov	r4, r2
 800948a:	4605      	mov	r5, r0
 800948c:	b118      	cbz	r0, 8009496 <__swbuf_r+0x12>
 800948e:	6a03      	ldr	r3, [r0, #32]
 8009490:	b90b      	cbnz	r3, 8009496 <__swbuf_r+0x12>
 8009492:	f7fc fcb1 	bl	8005df8 <__sinit>
 8009496:	69a3      	ldr	r3, [r4, #24]
 8009498:	60a3      	str	r3, [r4, #8]
 800949a:	89a3      	ldrh	r3, [r4, #12]
 800949c:	071a      	lsls	r2, r3, #28
 800949e:	d501      	bpl.n	80094a4 <__swbuf_r+0x20>
 80094a0:	6923      	ldr	r3, [r4, #16]
 80094a2:	b943      	cbnz	r3, 80094b6 <__swbuf_r+0x32>
 80094a4:	4621      	mov	r1, r4
 80094a6:	4628      	mov	r0, r5
 80094a8:	f000 f82a 	bl	8009500 <__swsetup_r>
 80094ac:	b118      	cbz	r0, 80094b6 <__swbuf_r+0x32>
 80094ae:	f04f 37ff 	mov.w	r7, #4294967295
 80094b2:	4638      	mov	r0, r7
 80094b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094b6:	6823      	ldr	r3, [r4, #0]
 80094b8:	6922      	ldr	r2, [r4, #16]
 80094ba:	1a98      	subs	r0, r3, r2
 80094bc:	6963      	ldr	r3, [r4, #20]
 80094be:	b2f6      	uxtb	r6, r6
 80094c0:	4283      	cmp	r3, r0
 80094c2:	4637      	mov	r7, r6
 80094c4:	dc05      	bgt.n	80094d2 <__swbuf_r+0x4e>
 80094c6:	4621      	mov	r1, r4
 80094c8:	4628      	mov	r0, r5
 80094ca:	f7ff fa47 	bl	800895c <_fflush_r>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d1ed      	bne.n	80094ae <__swbuf_r+0x2a>
 80094d2:	68a3      	ldr	r3, [r4, #8]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	60a3      	str	r3, [r4, #8]
 80094d8:	6823      	ldr	r3, [r4, #0]
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	6022      	str	r2, [r4, #0]
 80094de:	701e      	strb	r6, [r3, #0]
 80094e0:	6962      	ldr	r2, [r4, #20]
 80094e2:	1c43      	adds	r3, r0, #1
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d004      	beq.n	80094f2 <__swbuf_r+0x6e>
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	07db      	lsls	r3, r3, #31
 80094ec:	d5e1      	bpl.n	80094b2 <__swbuf_r+0x2e>
 80094ee:	2e0a      	cmp	r6, #10
 80094f0:	d1df      	bne.n	80094b2 <__swbuf_r+0x2e>
 80094f2:	4621      	mov	r1, r4
 80094f4:	4628      	mov	r0, r5
 80094f6:	f7ff fa31 	bl	800895c <_fflush_r>
 80094fa:	2800      	cmp	r0, #0
 80094fc:	d0d9      	beq.n	80094b2 <__swbuf_r+0x2e>
 80094fe:	e7d6      	b.n	80094ae <__swbuf_r+0x2a>

08009500 <__swsetup_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4b29      	ldr	r3, [pc, #164]	@ (80095a8 <__swsetup_r+0xa8>)
 8009504:	4605      	mov	r5, r0
 8009506:	6818      	ldr	r0, [r3, #0]
 8009508:	460c      	mov	r4, r1
 800950a:	b118      	cbz	r0, 8009514 <__swsetup_r+0x14>
 800950c:	6a03      	ldr	r3, [r0, #32]
 800950e:	b90b      	cbnz	r3, 8009514 <__swsetup_r+0x14>
 8009510:	f7fc fc72 	bl	8005df8 <__sinit>
 8009514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009518:	0719      	lsls	r1, r3, #28
 800951a:	d422      	bmi.n	8009562 <__swsetup_r+0x62>
 800951c:	06da      	lsls	r2, r3, #27
 800951e:	d407      	bmi.n	8009530 <__swsetup_r+0x30>
 8009520:	2209      	movs	r2, #9
 8009522:	602a      	str	r2, [r5, #0]
 8009524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009528:	81a3      	strh	r3, [r4, #12]
 800952a:	f04f 30ff 	mov.w	r0, #4294967295
 800952e:	e033      	b.n	8009598 <__swsetup_r+0x98>
 8009530:	0758      	lsls	r0, r3, #29
 8009532:	d512      	bpl.n	800955a <__swsetup_r+0x5a>
 8009534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009536:	b141      	cbz	r1, 800954a <__swsetup_r+0x4a>
 8009538:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800953c:	4299      	cmp	r1, r3
 800953e:	d002      	beq.n	8009546 <__swsetup_r+0x46>
 8009540:	4628      	mov	r0, r5
 8009542:	f7fd fbf9 	bl	8006d38 <_free_r>
 8009546:	2300      	movs	r3, #0
 8009548:	6363      	str	r3, [r4, #52]	@ 0x34
 800954a:	89a3      	ldrh	r3, [r4, #12]
 800954c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009550:	81a3      	strh	r3, [r4, #12]
 8009552:	2300      	movs	r3, #0
 8009554:	6063      	str	r3, [r4, #4]
 8009556:	6923      	ldr	r3, [r4, #16]
 8009558:	6023      	str	r3, [r4, #0]
 800955a:	89a3      	ldrh	r3, [r4, #12]
 800955c:	f043 0308 	orr.w	r3, r3, #8
 8009560:	81a3      	strh	r3, [r4, #12]
 8009562:	6923      	ldr	r3, [r4, #16]
 8009564:	b94b      	cbnz	r3, 800957a <__swsetup_r+0x7a>
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800956c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009570:	d003      	beq.n	800957a <__swsetup_r+0x7a>
 8009572:	4621      	mov	r1, r4
 8009574:	4628      	mov	r0, r5
 8009576:	f000 f883 	bl	8009680 <__smakebuf_r>
 800957a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800957e:	f013 0201 	ands.w	r2, r3, #1
 8009582:	d00a      	beq.n	800959a <__swsetup_r+0x9a>
 8009584:	2200      	movs	r2, #0
 8009586:	60a2      	str	r2, [r4, #8]
 8009588:	6962      	ldr	r2, [r4, #20]
 800958a:	4252      	negs	r2, r2
 800958c:	61a2      	str	r2, [r4, #24]
 800958e:	6922      	ldr	r2, [r4, #16]
 8009590:	b942      	cbnz	r2, 80095a4 <__swsetup_r+0xa4>
 8009592:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009596:	d1c5      	bne.n	8009524 <__swsetup_r+0x24>
 8009598:	bd38      	pop	{r3, r4, r5, pc}
 800959a:	0799      	lsls	r1, r3, #30
 800959c:	bf58      	it	pl
 800959e:	6962      	ldrpl	r2, [r4, #20]
 80095a0:	60a2      	str	r2, [r4, #8]
 80095a2:	e7f4      	b.n	800958e <__swsetup_r+0x8e>
 80095a4:	2000      	movs	r0, #0
 80095a6:	e7f7      	b.n	8009598 <__swsetup_r+0x98>
 80095a8:	20000148 	.word	0x20000148

080095ac <_raise_r>:
 80095ac:	291f      	cmp	r1, #31
 80095ae:	b538      	push	{r3, r4, r5, lr}
 80095b0:	4605      	mov	r5, r0
 80095b2:	460c      	mov	r4, r1
 80095b4:	d904      	bls.n	80095c0 <_raise_r+0x14>
 80095b6:	2316      	movs	r3, #22
 80095b8:	6003      	str	r3, [r0, #0]
 80095ba:	f04f 30ff 	mov.w	r0, #4294967295
 80095be:	bd38      	pop	{r3, r4, r5, pc}
 80095c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80095c2:	b112      	cbz	r2, 80095ca <_raise_r+0x1e>
 80095c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095c8:	b94b      	cbnz	r3, 80095de <_raise_r+0x32>
 80095ca:	4628      	mov	r0, r5
 80095cc:	f000 f830 	bl	8009630 <_getpid_r>
 80095d0:	4622      	mov	r2, r4
 80095d2:	4601      	mov	r1, r0
 80095d4:	4628      	mov	r0, r5
 80095d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095da:	f000 b817 	b.w	800960c <_kill_r>
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d00a      	beq.n	80095f8 <_raise_r+0x4c>
 80095e2:	1c59      	adds	r1, r3, #1
 80095e4:	d103      	bne.n	80095ee <_raise_r+0x42>
 80095e6:	2316      	movs	r3, #22
 80095e8:	6003      	str	r3, [r0, #0]
 80095ea:	2001      	movs	r0, #1
 80095ec:	e7e7      	b.n	80095be <_raise_r+0x12>
 80095ee:	2100      	movs	r1, #0
 80095f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095f4:	4620      	mov	r0, r4
 80095f6:	4798      	blx	r3
 80095f8:	2000      	movs	r0, #0
 80095fa:	e7e0      	b.n	80095be <_raise_r+0x12>

080095fc <raise>:
 80095fc:	4b02      	ldr	r3, [pc, #8]	@ (8009608 <raise+0xc>)
 80095fe:	4601      	mov	r1, r0
 8009600:	6818      	ldr	r0, [r3, #0]
 8009602:	f7ff bfd3 	b.w	80095ac <_raise_r>
 8009606:	bf00      	nop
 8009608:	20000148 	.word	0x20000148

0800960c <_kill_r>:
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	4d07      	ldr	r5, [pc, #28]	@ (800962c <_kill_r+0x20>)
 8009610:	2300      	movs	r3, #0
 8009612:	4604      	mov	r4, r0
 8009614:	4608      	mov	r0, r1
 8009616:	4611      	mov	r1, r2
 8009618:	602b      	str	r3, [r5, #0]
 800961a:	f7f8 fa2b 	bl	8001a74 <_kill>
 800961e:	1c43      	adds	r3, r0, #1
 8009620:	d102      	bne.n	8009628 <_kill_r+0x1c>
 8009622:	682b      	ldr	r3, [r5, #0]
 8009624:	b103      	cbz	r3, 8009628 <_kill_r+0x1c>
 8009626:	6023      	str	r3, [r4, #0]
 8009628:	bd38      	pop	{r3, r4, r5, pc}
 800962a:	bf00      	nop
 800962c:	200006e8 	.word	0x200006e8

08009630 <_getpid_r>:
 8009630:	f7f8 ba18 	b.w	8001a64 <_getpid>

08009634 <__swhatbuf_r>:
 8009634:	b570      	push	{r4, r5, r6, lr}
 8009636:	460c      	mov	r4, r1
 8009638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800963c:	2900      	cmp	r1, #0
 800963e:	b096      	sub	sp, #88	@ 0x58
 8009640:	4615      	mov	r5, r2
 8009642:	461e      	mov	r6, r3
 8009644:	da0d      	bge.n	8009662 <__swhatbuf_r+0x2e>
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800964c:	f04f 0100 	mov.w	r1, #0
 8009650:	bf14      	ite	ne
 8009652:	2340      	movne	r3, #64	@ 0x40
 8009654:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009658:	2000      	movs	r0, #0
 800965a:	6031      	str	r1, [r6, #0]
 800965c:	602b      	str	r3, [r5, #0]
 800965e:	b016      	add	sp, #88	@ 0x58
 8009660:	bd70      	pop	{r4, r5, r6, pc}
 8009662:	466a      	mov	r2, sp
 8009664:	f000 f848 	bl	80096f8 <_fstat_r>
 8009668:	2800      	cmp	r0, #0
 800966a:	dbec      	blt.n	8009646 <__swhatbuf_r+0x12>
 800966c:	9901      	ldr	r1, [sp, #4]
 800966e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009672:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009676:	4259      	negs	r1, r3
 8009678:	4159      	adcs	r1, r3
 800967a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800967e:	e7eb      	b.n	8009658 <__swhatbuf_r+0x24>

08009680 <__smakebuf_r>:
 8009680:	898b      	ldrh	r3, [r1, #12]
 8009682:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009684:	079d      	lsls	r5, r3, #30
 8009686:	4606      	mov	r6, r0
 8009688:	460c      	mov	r4, r1
 800968a:	d507      	bpl.n	800969c <__smakebuf_r+0x1c>
 800968c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	6123      	str	r3, [r4, #16]
 8009694:	2301      	movs	r3, #1
 8009696:	6163      	str	r3, [r4, #20]
 8009698:	b003      	add	sp, #12
 800969a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800969c:	ab01      	add	r3, sp, #4
 800969e:	466a      	mov	r2, sp
 80096a0:	f7ff ffc8 	bl	8009634 <__swhatbuf_r>
 80096a4:	9f00      	ldr	r7, [sp, #0]
 80096a6:	4605      	mov	r5, r0
 80096a8:	4639      	mov	r1, r7
 80096aa:	4630      	mov	r0, r6
 80096ac:	f7fd fbb8 	bl	8006e20 <_malloc_r>
 80096b0:	b948      	cbnz	r0, 80096c6 <__smakebuf_r+0x46>
 80096b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096b6:	059a      	lsls	r2, r3, #22
 80096b8:	d4ee      	bmi.n	8009698 <__smakebuf_r+0x18>
 80096ba:	f023 0303 	bic.w	r3, r3, #3
 80096be:	f043 0302 	orr.w	r3, r3, #2
 80096c2:	81a3      	strh	r3, [r4, #12]
 80096c4:	e7e2      	b.n	800968c <__smakebuf_r+0xc>
 80096c6:	89a3      	ldrh	r3, [r4, #12]
 80096c8:	6020      	str	r0, [r4, #0]
 80096ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096ce:	81a3      	strh	r3, [r4, #12]
 80096d0:	9b01      	ldr	r3, [sp, #4]
 80096d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096d6:	b15b      	cbz	r3, 80096f0 <__smakebuf_r+0x70>
 80096d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096dc:	4630      	mov	r0, r6
 80096de:	f000 f81d 	bl	800971c <_isatty_r>
 80096e2:	b128      	cbz	r0, 80096f0 <__smakebuf_r+0x70>
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	f023 0303 	bic.w	r3, r3, #3
 80096ea:	f043 0301 	orr.w	r3, r3, #1
 80096ee:	81a3      	strh	r3, [r4, #12]
 80096f0:	89a3      	ldrh	r3, [r4, #12]
 80096f2:	431d      	orrs	r5, r3
 80096f4:	81a5      	strh	r5, [r4, #12]
 80096f6:	e7cf      	b.n	8009698 <__smakebuf_r+0x18>

080096f8 <_fstat_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d07      	ldr	r5, [pc, #28]	@ (8009718 <_fstat_r+0x20>)
 80096fc:	2300      	movs	r3, #0
 80096fe:	4604      	mov	r4, r0
 8009700:	4608      	mov	r0, r1
 8009702:	4611      	mov	r1, r2
 8009704:	602b      	str	r3, [r5, #0]
 8009706:	f7f8 fa15 	bl	8001b34 <_fstat>
 800970a:	1c43      	adds	r3, r0, #1
 800970c:	d102      	bne.n	8009714 <_fstat_r+0x1c>
 800970e:	682b      	ldr	r3, [r5, #0]
 8009710:	b103      	cbz	r3, 8009714 <_fstat_r+0x1c>
 8009712:	6023      	str	r3, [r4, #0]
 8009714:	bd38      	pop	{r3, r4, r5, pc}
 8009716:	bf00      	nop
 8009718:	200006e8 	.word	0x200006e8

0800971c <_isatty_r>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	4d06      	ldr	r5, [pc, #24]	@ (8009738 <_isatty_r+0x1c>)
 8009720:	2300      	movs	r3, #0
 8009722:	4604      	mov	r4, r0
 8009724:	4608      	mov	r0, r1
 8009726:	602b      	str	r3, [r5, #0]
 8009728:	f7f8 fa14 	bl	8001b54 <_isatty>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	d102      	bne.n	8009736 <_isatty_r+0x1a>
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	b103      	cbz	r3, 8009736 <_isatty_r+0x1a>
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	bd38      	pop	{r3, r4, r5, pc}
 8009738:	200006e8 	.word	0x200006e8

0800973c <_init>:
 800973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973e:	bf00      	nop
 8009740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009742:	bc08      	pop	{r3}
 8009744:	469e      	mov	lr, r3
 8009746:	4770      	bx	lr

08009748 <_fini>:
 8009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974a:	bf00      	nop
 800974c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800974e:	bc08      	pop	{r3}
 8009750:	469e      	mov	lr, r3
 8009752:	4770      	bx	lr
