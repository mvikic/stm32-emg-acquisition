
EMG_STM32F407VGT6_DISC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009464  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  080095f8  080095f8  0000a5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b38  08009b38  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009b38  08009b38  0000ab38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b40  08009b40  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b40  08009b40  0000ab40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b44  08009b44  0000ab44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009b48  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d8  2**0
                  CONTENTS
 10 .bss          000003c4  200001d8  200001d8  0000b1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000059c  2000059c  0000b1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f415  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002363  00000000  00000000  0001a61d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  0001c980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b67  00000000  00000000  0001d818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022542  00000000  00000000  0001e37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001225b  00000000  00000000  000408c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9d22  00000000  00000000  00052b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c83e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005314  00000000  00000000  0012c884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00131b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095dc 	.word	0x080095dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080095dc 	.word	0x080095dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <UART_Transmit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART_Transmit(UART_HandleTypeDef *huart, char *data) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t*) data, strlen(data), HAL_MAX_DELAY);
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f7ff f93e 	bl	8000270 <strlen>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	6839      	ldr	r1, [r7, #0]
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f002 ff9e 	bl	8003f40 <HAL_UART_Transmit>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <IIR_Filter>:

// Example IIR filter (Single-pole low-pass filter)
float IIR_Filter(float input, float *prev_output, float alpha) {
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	ed87 0a03 	vstr	s0, [r7, #12]
 8001016:	60b8      	str	r0, [r7, #8]
 8001018:	edc7 0a01 	vstr	s1, [r7, #4]
    *prev_output = alpha * input + (1.0f - alpha) * (*prev_output);
 800101c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001020:	edd7 7a03 	vldr	s15, [r7, #12]
 8001024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001028:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800102c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001030:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	edd3 7a00 	vldr	s15, [r3]
 800103a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800103e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	edc3 7a00 	vstr	s15, [r3]
    return *prev_output;
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	ee07 3a90 	vmov	s15, r3
}
 8001050:	eeb0 0a67 	vmov.f32	s0, s15
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <CircularBuffer_Init>:
//    *prev_output = fixed_point_add(fixed_point_multiply(alpha, input),
//                                    fixed_point_multiply((FIXED_POINT_ONE - alpha), *prev_output));
//    return *prev_output;
//}

void CircularBuffer_Init(CircularBuffer* cb) {
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
    memset(cb->buffer, 0, sizeof(cb->buffer));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	22f4      	movs	r2, #244	@ 0xf4
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f004 fede 	bl	8005e2e <memset>
    cb->index = 0;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <FIR_Filter>:

float FIR_Filter(CircularBuffer* cb, float input) {
 8001084:	b480      	push	{r7}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	ed87 0a00 	vstr	s0, [r7]
    float sum = 0.0f;
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	617b      	str	r3, [r7, #20]

    // Update buffer with new input
    cb->buffer[cb->index] = input;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800109c:	edd7 7a00 	vldr	s15, [r7]
 80010a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a4:	ee17 1a90 	vmov	r1, s15
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    // cb->index = (cb->index + 1) % FILTER_ORDER;

    // Compute the FIR filter output
    int idx = cb->index;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010b4:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < FILTER_ORDER; i++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	e020      	b.n	80010fe <FIR_Filter+0x7a>
    	//  int idx = (cb->index + i) % FILTER_ORDER; // Circular indexing
        sum += cb->buffer[idx] * fir_coefficients[i];
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001144 <FIR_Filter+0xc0>)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80010e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e4:	edc7 7a05 	vstr	s15, [r7, #20]
        idx = (idx == 0) ? (FILTER_ORDER - 1) : (idx - 1);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <FIR_Filter+0x70>
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	e000      	b.n	80010f6 <FIR_Filter+0x72>
 80010f4:	233c      	movs	r3, #60	@ 0x3c
 80010f6:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < FILTER_ORDER; i++) {
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b3c      	cmp	r3, #60	@ 0x3c
 8001102:	dddb      	ble.n	80010bc <FIR_Filter+0x38>
    }

    cb->index = (cb->index + 1) % FILTER_ORDER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800110a:	1c59      	adds	r1, r3, #1
 800110c:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <FIR_Filter+0xc4>)
 800110e:	fb83 2301 	smull	r2, r3, r3, r1
 8001112:	111a      	asrs	r2, r3, #4
 8001114:	17cb      	asrs	r3, r1, #31
 8001116:	1ad2      	subs	r2, r2, r3
 8001118:	4613      	mov	r3, r2
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	1a9b      	subs	r3, r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	1aca      	subs	r2, r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

    // Scale the result to millivolts (mV) if needed
    return sum * EMG_SIGNAL_MAX_VOLTAGE;
 800112a:	edd7 7a05 	vldr	s15, [r7, #20]
 800112e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800114c <FIR_Filter+0xc8>
 8001132:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001136:	eeb0 0a67 	vmov.f32	s0, s15
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	08009600 	.word	0x08009600
 8001148:	4325c53f 	.word	0x4325c53f
 800114c:	3a03126f 	.word	0x3a03126f

08001150 <Update_LED_Indicator>:
//    return sum;
//}

/* Function to Update LED Indicator */
void Update_LED_Indicator(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LD4_Green_Pin|LD3_Orange_Pin|LD5_Red_Pin|LD6_Blue_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800115a:	4812      	ldr	r0, [pc, #72]	@ (80011a4 <Update_LED_Indicator+0x54>)
 800115c:	f001 fd3c 	bl	8002bd8 <HAL_GPIO_WritePin>

	// Set LED based on the active filter mode
	if (filter_mode == 0) {
 8001160:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <Update_LED_Indicator+0x58>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d106      	bne.n	8001176 <Update_LED_Indicator+0x26>
		HAL_GPIO_WritePin(GPIOD, LD6_Blue_Pin, GPIO_PIN_SET);   // Blue LED for RAW mode
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800116e:	480d      	ldr	r0, [pc, #52]	@ (80011a4 <Update_LED_Indicator+0x54>)
 8001170:	f001 fd32 	bl	8002bd8 <HAL_GPIO_WritePin>
	} else if (filter_mode == 1) {
		HAL_GPIO_WritePin(GPIOD, LD5_Red_Pin, GPIO_PIN_SET);  // Green LED for FIR mode
	} else if (filter_mode == 2) {
		HAL_GPIO_WritePin(GPIOD, LD3_Orange_Pin, GPIO_PIN_SET); // Orange LED for IIR mode
	}
}
 8001174:	e014      	b.n	80011a0 <Update_LED_Indicator+0x50>
	} else if (filter_mode == 1) {
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <Update_LED_Indicator+0x58>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d106      	bne.n	800118c <Update_LED_Indicator+0x3c>
		HAL_GPIO_WritePin(GPIOD, LD5_Red_Pin, GPIO_PIN_SET);  // Green LED for FIR mode
 800117e:	2201      	movs	r2, #1
 8001180:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001184:	4807      	ldr	r0, [pc, #28]	@ (80011a4 <Update_LED_Indicator+0x54>)
 8001186:	f001 fd27 	bl	8002bd8 <HAL_GPIO_WritePin>
}
 800118a:	e009      	b.n	80011a0 <Update_LED_Indicator+0x50>
	} else if (filter_mode == 2) {
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <Update_LED_Indicator+0x58>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d105      	bne.n	80011a0 <Update_LED_Indicator+0x50>
		HAL_GPIO_WritePin(GPIOD, LD3_Orange_Pin, GPIO_PIN_SET); // Orange LED for IIR mode
 8001194:	2201      	movs	r2, #1
 8001196:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800119a:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <Update_LED_Indicator+0x54>)
 800119c:	f001 fd1c 	bl	8002bd8 <HAL_GPIO_WritePin>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40020c00 	.word	0x40020c00
 80011a8:	20000000 	.word	0x20000000

080011ac <Poll_Button>:

void Poll_Button(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIO_BUTTON_GPIO_Port, GPIO_BUTTON_Pin) == GPIO_PIN_RESET) {
 80011b0:	2101      	movs	r1, #1
 80011b2:	4815      	ldr	r0, [pc, #84]	@ (8001208 <Poll_Button+0x5c>)
 80011b4:	f001 fcf8 	bl	8002ba8 <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d122      	bne.n	8001204 <Poll_Button+0x58>
		HAL_Delay(DEBOUNCE_DELAY); // Debounce delay
 80011be:	2032      	movs	r0, #50	@ 0x32
 80011c0:	f000 fd12 	bl	8001be8 <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIO_BUTTON_GPIO_Port, GPIO_BUTTON_Pin) == GPIO_PIN_RESET) {
 80011c4:	2101      	movs	r1, #1
 80011c6:	4810      	ldr	r0, [pc, #64]	@ (8001208 <Poll_Button+0x5c>)
 80011c8:	f001 fcee 	bl	8002ba8 <HAL_GPIO_ReadPin>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d118      	bne.n	8001204 <Poll_Button+0x58>
			filter_mode = (filter_mode + 1) % 3;  // Cycle through 0 (RAW), 1 (FIR), 2 (IIR)
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <Poll_Button+0x60>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001210 <Poll_Button+0x64>)
 80011da:	fb83 3102 	smull	r3, r1, r3, r2
 80011de:	17d3      	asrs	r3, r2, #31
 80011e0:	1ac9      	subs	r1, r1, r3
 80011e2:	460b      	mov	r3, r1
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	440b      	add	r3, r1
 80011e8:	1ad1      	subs	r1, r2, r3
 80011ea:	b2ca      	uxtb	r2, r1
 80011ec:	4b07      	ldr	r3, [pc, #28]	@ (800120c <Poll_Button+0x60>)
 80011ee:	701a      	strb	r2, [r3, #0]
			Update_LED_Indicator(); // Update LEDs based on the current mode
 80011f0:	f7ff ffae 	bl	8001150 <Update_LED_Indicator>
			while (HAL_GPIO_ReadPin(GPIO_BUTTON_GPIO_Port, GPIO_BUTTON_Pin) == GPIO_PIN_RESET); // Wait for button release
 80011f4:	bf00      	nop
 80011f6:	2101      	movs	r1, #1
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <Poll_Button+0x5c>)
 80011fa:	f001 fcd5 	bl	8002ba8 <HAL_GPIO_ReadPin>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f8      	beq.n	80011f6 <Poll_Button+0x4a>
		}
	}
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40020000 	.word	0x40020000
 800120c:	20000000 	.word	0x20000000
 8001210:	55555556 	.word	0x55555556

08001214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  CircularBuffer_Init(&cb);
 8001218:	4813      	ldr	r0, [pc, #76]	@ (8001268 <main+0x54>)
 800121a:	f7ff ff20 	bl	800105e <CircularBuffer_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121e:	f000 fc71 	bl	8001b04 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001222:	f000 f827 	bl	8001274 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001226:	f000 f961 	bl	80014ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800122a:	f000 f935 	bl	8001498 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800122e:	f000 f88b 	bl	8001348 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001232:	f000 f8db 	bl	80013ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 8001236:	2100      	movs	r1, #0
 8001238:	480c      	ldr	r0, [pc, #48]	@ (800126c <main+0x58>)
 800123a:	f002 f9a9 	bl	8003590 <HAL_TIM_PWM_Start>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <main+0x34>
	  Error_Handler();
 8001244:	f000 fa2e 	bl	80016a4 <Error_Handler>

  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8001248:	4809      	ldr	r0, [pc, #36]	@ (8001270 <main+0x5c>)
 800124a:	f000 fd35 	bl	8001cb8 <HAL_ADC_Start_IT>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <main+0x44>
  	  	  Error_Handler();
 8001254:	f000 fa26 	bl	80016a4 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Poll_Button(); // Poll button state and update filter flag
 8001258:	f7ff ffa8 	bl	80011ac <Poll_Button>

	  // Perform other periodic tasks here if needed
	  // Example: You might want to add some other functionalities or delays
	  HAL_Delay(10); // Small delay to avoid rapid polling
 800125c:	200a      	movs	r0, #10
 800125e:	f000 fcc3 	bl	8001be8 <HAL_Delay>
	  Poll_Button(); // Poll button state and update filter flag
 8001262:	bf00      	nop
 8001264:	e7f8      	b.n	8001258 <main+0x44>
 8001266:	bf00      	nop
 8001268:	200002cc 	.word	0x200002cc
 800126c:	2000023c 	.word	0x2000023c
 8001270:	200001f4 	.word	0x200001f4

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b094      	sub	sp, #80	@ 0x50
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	2230      	movs	r2, #48	@ 0x30
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f004 fdd3 	bl	8005e2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	4b28      	ldr	r3, [pc, #160]	@ (8001340 <SystemClock_Config+0xcc>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	4a27      	ldr	r2, [pc, #156]	@ (8001340 <SystemClock_Config+0xcc>)
 80012a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a8:	4b25      	ldr	r3, [pc, #148]	@ (8001340 <SystemClock_Config+0xcc>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <SystemClock_Config+0xd0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a21      	ldr	r2, [pc, #132]	@ (8001344 <SystemClock_Config+0xd0>)
 80012be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <SystemClock_Config+0xd0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d0:	2302      	movs	r3, #2
 80012d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d4:	2301      	movs	r3, #1
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d8:	2310      	movs	r3, #16
 80012da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012dc:	2302      	movs	r3, #2
 80012de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e0:	2300      	movs	r3, #0
 80012e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012e4:	2308      	movs	r3, #8
 80012e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80012e8:	2354      	movs	r3, #84	@ 0x54
 80012ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f0:	2304      	movs	r3, #4
 80012f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f4:	f107 0320 	add.w	r3, r7, #32
 80012f8:	4618      	mov	r0, r3
 80012fa:	f001 fca1 	bl	8002c40 <HAL_RCC_OscConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001304:	f000 f9ce 	bl	80016a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001308:	230f      	movs	r3, #15
 800130a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130c:	2302      	movs	r3, #2
 800130e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001318:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800131a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2102      	movs	r1, #2
 8001326:	4618      	mov	r0, r3
 8001328:	f001 ff02 	bl	8003130 <HAL_RCC_ClockConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001332:	f000 f9b7 	bl	80016a4 <Error_Handler>
  }
}
 8001336:	bf00      	nop
 8001338:	3750      	adds	r7, #80	@ 0x50
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40007000 	.word	0x40007000

08001348 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800134e:	463b      	mov	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800135a:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <MX_ADC1_Init+0x9c>)
 800135c:	4a22      	ldr	r2, [pc, #136]	@ (80013e8 <MX_ADC1_Init+0xa0>)
 800135e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001360:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <MX_ADC1_Init+0x9c>)
 8001362:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001366:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001368:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <MX_ADC1_Init+0x9c>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800136e:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <MX_ADC1_Init+0x9c>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <MX_ADC1_Init+0x9c>)
 8001376:	2200      	movs	r2, #0
 8001378:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800137a:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <MX_ADC1_Init+0x9c>)
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001382:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <MX_ADC1_Init+0x9c>)
 8001384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001388:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800138a:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <MX_ADC1_Init+0x9c>)
 800138c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001390:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <MX_ADC1_Init+0x9c>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <MX_ADC1_Init+0x9c>)
 800139a:	2201      	movs	r2, #1
 800139c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_ADC1_Init+0x9c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_ADC1_Init+0x9c>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013ac:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <MX_ADC1_Init+0x9c>)
 80013ae:	f000 fc3f 	bl	8001c30 <HAL_ADC_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80013b8:	f000 f974 	bl	80016a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013bc:	230b      	movs	r3, #11
 80013be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80013c4:	2301      	movs	r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_ADC1_Init+0x9c>)
 80013ce:	f000 fe83 	bl	80020d8 <HAL_ADC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80013d8:	f000 f964 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200001f4 	.word	0x200001f4
 80013e8:	40012000 	.word	0x40012000

080013ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]
 800140a:	615a      	str	r2, [r3, #20]
 800140c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800140e:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <MX_TIM2_Init+0xa8>)
 8001410:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001414:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001416:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <MX_TIM2_Init+0xa8>)
 8001418:	2200      	movs	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <MX_TIM2_Init+0xa8>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
//  htim2.Init.Period = 33600;
  htim2.Init.Period = 56000;
 8001422:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <MX_TIM2_Init+0xa8>)
 8001424:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8001428:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_TIM2_Init+0xa8>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001430:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <MX_TIM2_Init+0xa8>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001436:	4817      	ldr	r0, [pc, #92]	@ (8001494 <MX_TIM2_Init+0xa8>)
 8001438:	f002 f85a 	bl	80034f0 <HAL_TIM_PWM_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001442:	f000 f92f 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001446:	2320      	movs	r3, #32
 8001448:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	4619      	mov	r1, r3
 8001454:	480f      	ldr	r0, [pc, #60]	@ (8001494 <MX_TIM2_Init+0xa8>)
 8001456:	f002 fca7 	bl	8003da8 <HAL_TIMEx_MasterConfigSynchronization>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001460:	f000 f920 	bl	80016a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001464:	2360      	movs	r3, #96	@ 0x60
 8001466:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	4619      	mov	r1, r3
 800147a:	4806      	ldr	r0, [pc, #24]	@ (8001494 <MX_TIM2_Init+0xa8>)
 800147c:	f002 f950 	bl	8003720 <HAL_TIM_PWM_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001486:	f000 f90d 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	@ 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000023c 	.word	0x2000023c

08001498 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 800149e:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <MX_USART2_UART_Init+0x50>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 80014a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <MX_USART2_UART_Init+0x4c>)
 80014d0:	f002 fce6 	bl	8003ea0 <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014da:	f000 f8e3 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000284 	.word	0x20000284
 80014e8:	40004400 	.word	0x40004400

080014ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <MX_GPIO_Init+0xb4>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a25      	ldr	r2, [pc, #148]	@ (80015a0 <MX_GPIO_Init+0xb4>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b23      	ldr	r3, [pc, #140]	@ (80015a0 <MX_GPIO_Init+0xb4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <MX_GPIO_Init+0xb4>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a1e      	ldr	r2, [pc, #120]	@ (80015a0 <MX_GPIO_Init+0xb4>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <MX_GPIO_Init+0xb4>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <MX_GPIO_Init+0xb4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <MX_GPIO_Init+0xb4>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <MX_GPIO_Init+0xb4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Green_Pin|LD3_Orange_Pin|LD5_Red_Pin|LD6_Blue_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800155c:	4811      	ldr	r0, [pc, #68]	@ (80015a4 <MX_GPIO_Init+0xb8>)
 800155e:	f001 fb3b 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_BUTTON_Pin */
  GPIO_InitStruct.Pin = GPIO_BUTTON_Pin;
 8001562:	2301      	movs	r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	4619      	mov	r1, r3
 8001574:	480c      	ldr	r0, [pc, #48]	@ (80015a8 <MX_GPIO_Init+0xbc>)
 8001576:	f001 f97b 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Green_Pin LD3_Orange_Pin LD5_Red_Pin LD6_Blue_Pin */
  GPIO_InitStruct.Pin = LD4_Green_Pin|LD3_Orange_Pin|LD5_Red_Pin|LD6_Blue_Pin;
 800157a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800157e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	4619      	mov	r1, r3
 8001592:	4804      	ldr	r0, [pc, #16]	@ (80015a4 <MX_GPIO_Init+0xb8>)
 8001594:	f001 f96c 	bl	8002870 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001598:	bf00      	nop
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	40020000 	.word	0x40020000

080015ac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	6078      	str	r0, [r7, #4]
    // Get the ADC value
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 80015b4:	482f      	ldr	r0, [pc, #188]	@ (8001674 <HAL_ADC_ConvCpltCallback+0xc8>)
 80015b6:	f000 fd6d 	bl	8002094 <HAL_ADC_GetValue>
 80015ba:	4603      	mov	r3, r0
 80015bc:	81fb      	strh	r3, [r7, #14]
    float voltage = REF_VOLTAGE * adc_val / ADC_MAX_VAL - DC_BIAS;
 80015be:	89fb      	ldrh	r3, [r7, #14]
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80015cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015d0:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001678 <HAL_ADC_ConvCpltCallback+0xcc>
 80015d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d8:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800167c <HAL_ADC_ConvCpltCallback+0xd0>
 80015dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015e0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (filter_mode == 0) {
 80015e4:	4b26      	ldr	r3, [pc, #152]	@ (8001680 <HAL_ADC_ConvCpltCallback+0xd4>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d109      	bne.n	8001600 <HAL_ADC_ConvCpltCallback+0x54>
    	// RAW signal, no filtering just voltage scaling
    	emg_signal_value = voltage * EMG_SIGNAL_MAX_VOLTAGE;
 80015ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f0:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001684 <HAL_ADC_ConvCpltCallback+0xd8>
 80015f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f8:	4b23      	ldr	r3, [pc, #140]	@ (8001688 <HAL_ADC_ConvCpltCallback+0xdc>)
 80015fa:	edc3 7a00 	vstr	s15, [r3]
 80015fe:	e01e      	b.n	800163e <HAL_ADC_ConvCpltCallback+0x92>
    } else if (filter_mode == 1) {
 8001600:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d10a      	bne.n	800161e <HAL_ADC_ConvCpltCallback+0x72>
    	// FIR filtering
    	emg_signal_value = FIR_Filter(&cb, voltage);
 8001608:	ed97 0a02 	vldr	s0, [r7, #8]
 800160c:	481f      	ldr	r0, [pc, #124]	@ (800168c <HAL_ADC_ConvCpltCallback+0xe0>)
 800160e:	f7ff fd39 	bl	8001084 <FIR_Filter>
 8001612:	eef0 7a40 	vmov.f32	s15, s0
 8001616:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001618:	edc3 7a00 	vstr	s15, [r3]
 800161c:	e00f      	b.n	800163e <HAL_ADC_ConvCpltCallback+0x92>
    } else if (filter_mode == 2) {
 800161e:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d10b      	bne.n	800163e <HAL_ADC_ConvCpltCallback+0x92>
    	// IIR filtering
    	emg_signal_value = IIR_Filter(voltage, &emg_signal_value, ALPHA);
 8001626:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8001690 <HAL_ADC_ConvCpltCallback+0xe4>
 800162a:	4817      	ldr	r0, [pc, #92]	@ (8001688 <HAL_ADC_ConvCpltCallback+0xdc>)
 800162c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001630:	f7ff fcec 	bl	800100c <IIR_Filter>
 8001634:	eef0 7a40 	vmov.f32	s15, s0
 8001638:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <HAL_ADC_ConvCpltCallback+0xdc>)
 800163a:	edc3 7a00 	vstr	s15, [r3]
    }

    // Send the processed signal value over UART
   //  sprintf(buffer, "%.6f\r\n", emg_signal_value);
    snprintf(buffer, sizeof(buffer), "%.6f\r\n", emg_signal_value);
 800163e:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff80 	bl	8000548 <__aeabi_f2d>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	e9cd 2300 	strd	r2, r3, [sp]
 8001650:	4a10      	ldr	r2, [pc, #64]	@ (8001694 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001652:	2180      	movs	r1, #128	@ 0x80
 8001654:	4810      	ldr	r0, [pc, #64]	@ (8001698 <HAL_ADC_ConvCpltCallback+0xec>)
 8001656:	f004 fb53 	bl	8005d00 <sniprintf>
    UART_Transmit(&huart2, buffer);
 800165a:	490f      	ldr	r1, [pc, #60]	@ (8001698 <HAL_ADC_ConvCpltCallback+0xec>)
 800165c:	480f      	ldr	r0, [pc, #60]	@ (800169c <HAL_ADC_ConvCpltCallback+0xf0>)
 800165e:	f7ff fcc1 	bl	8000fe4 <UART_Transmit>

    // Toggle the Green LED to indicate ADC activity
    HAL_GPIO_TogglePin(GPIOD, LD4_Green_Pin);
 8001662:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001666:	480e      	ldr	r0, [pc, #56]	@ (80016a0 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001668:	f001 facf 	bl	8002c0a <HAL_GPIO_TogglePin>
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200001f4 	.word	0x200001f4
 8001678:	457ff000 	.word	0x457ff000
 800167c:	3fea3d71 	.word	0x3fea3d71
 8001680:	20000000 	.word	0x20000000
 8001684:	3a03126f 	.word	0x3a03126f
 8001688:	200003c4 	.word	0x200003c4
 800168c:	200002cc 	.word	0x200002cc
 8001690:	3dcccccd 	.word	0x3dcccccd
 8001694:	080095f8 	.word	0x080095f8
 8001698:	200003c8 	.word	0x200003c8
 800169c:	20000284 	.word	0x20000284
 80016a0:	40020c00 	.word	0x40020c00

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
}
 80016aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <Error_Handler+0x8>

080016b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <HAL_MspInit+0x4c>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	4a0f      	ldr	r2, [pc, #60]	@ (80016fc <HAL_MspInit+0x4c>)
 80016c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <HAL_MspInit+0x4c>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <HAL_MspInit+0x4c>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	4a08      	ldr	r2, [pc, #32]	@ (80016fc <HAL_MspInit+0x4c>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_MspInit+0x4c>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800

08001700 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	@ 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a1b      	ldr	r2, [pc, #108]	@ (800178c <HAL_ADC_MspInit+0x8c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d12f      	bne.n	8001782 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <HAL_ADC_MspInit+0x90>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172a:	4a19      	ldr	r2, [pc, #100]	@ (8001790 <HAL_ADC_MspInit+0x90>)
 800172c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001730:	6453      	str	r3, [r2, #68]	@ 0x44
 8001732:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <HAL_ADC_MspInit+0x90>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <HAL_ADC_MspInit+0x90>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	4a12      	ldr	r2, [pc, #72]	@ (8001790 <HAL_ADC_MspInit+0x90>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	6313      	str	r3, [r2, #48]	@ 0x30
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <HAL_ADC_MspInit+0x90>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800175a:	2302      	movs	r3, #2
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175e:	2303      	movs	r3, #3
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	4809      	ldr	r0, [pc, #36]	@ (8001794 <HAL_ADC_MspInit+0x94>)
 800176e:	f001 f87f 	bl	8002870 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	2012      	movs	r0, #18
 8001778:	f000 ffb1 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800177c:	2012      	movs	r0, #18
 800177e:	f000 ffca 	bl	8002716 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001782:	bf00      	nop
 8001784:	3728      	adds	r7, #40	@ 0x28
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40012000 	.word	0x40012000
 8001790:	40023800 	.word	0x40023800
 8001794:	40020800 	.word	0x40020800

08001798 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017a8:	d10d      	bne.n	80017c6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	4a08      	ldr	r2, [pc, #32]	@ (80017d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	@ 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1d      	ldr	r2, [pc, #116]	@ (800186c <HAL_UART_MspInit+0x94>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d133      	bne.n	8001862 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001870 <HAL_UART_MspInit+0x98>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	4a1b      	ldr	r2, [pc, #108]	@ (8001870 <HAL_UART_MspInit+0x98>)
 8001804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001808:	6413      	str	r3, [r2, #64]	@ 0x40
 800180a:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <HAL_UART_MspInit+0x98>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <HAL_UART_MspInit+0x98>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a14      	ldr	r2, [pc, #80]	@ (8001870 <HAL_UART_MspInit+0x98>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <HAL_UART_MspInit+0x98>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001832:	230c      	movs	r3, #12
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001842:	2307      	movs	r3, #7
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4809      	ldr	r0, [pc, #36]	@ (8001874 <HAL_UART_MspInit+0x9c>)
 800184e:	f001 f80f 	bl	8002870 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	2026      	movs	r0, #38	@ 0x26
 8001858:	f000 ff41 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800185c:	2026      	movs	r0, #38	@ 0x26
 800185e:	f000 ff5a 	bl	8002716 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001862:	bf00      	nop
 8001864:	3728      	adds	r7, #40	@ 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40004400 	.word	0x40004400
 8001870:	40023800 	.word	0x40023800
 8001874:	40020000 	.word	0x40020000

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <NMI_Handler+0x4>

08001880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <MemManage_Handler+0x4>

08001890 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <UsageFault_Handler+0x4>

080018a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ce:	f000 f96b 	bl	8001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <ADC_IRQHandler+0x10>)
 80018de:	f000 fac9 	bl	8001e74 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200001f4 	.word	0x200001f4

080018ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <USART2_IRQHandler+0x10>)
 80018f2:	f002 fbb1 	bl	8004058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000284 	.word	0x20000284

08001900 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return 1;
 8001904:	2301      	movs	r3, #1
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_kill>:

int _kill(int pid, int sig)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800191a:	f004 fadb 	bl	8005ed4 <__errno>
 800191e:	4603      	mov	r3, r0
 8001920:	2216      	movs	r2, #22
 8001922:	601a      	str	r2, [r3, #0]
  return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_exit>:

void _exit (int status)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ffe7 	bl	8001910 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001942:	bf00      	nop
 8001944:	e7fd      	b.n	8001942 <_exit+0x12>

08001946 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e00a      	b.n	800196e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001958:	f3af 8000 	nop.w
 800195c:	4601      	mov	r1, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	60ba      	str	r2, [r7, #8]
 8001964:	b2ca      	uxtb	r2, r1
 8001966:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3301      	adds	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	429a      	cmp	r2, r3
 8001974:	dbf0      	blt.n	8001958 <_read+0x12>
  }

  return len;
 8001976:	687b      	ldr	r3, [r7, #4]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e009      	b.n	80019a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	60ba      	str	r2, [r7, #8]
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dbf1      	blt.n	8001992 <_write+0x12>
  }
  return len;
 80019ae:	687b      	ldr	r3, [r7, #4]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_close>:

int _close(int file)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e0:	605a      	str	r2, [r3, #4]
  return 0;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_isatty>:

int _isatty(int file)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019f8:	2301      	movs	r3, #1
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a28:	4a14      	ldr	r2, [pc, #80]	@ (8001a7c <_sbrk+0x5c>)
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <_sbrk+0x60>)
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a34:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <_sbrk+0x64>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <_sbrk+0x68>)
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d207      	bcs.n	8001a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a50:	f004 fa40 	bl	8005ed4 <__errno>
 8001a54:	4603      	mov	r3, r0
 8001a56:	220c      	movs	r2, #12
 8001a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	e009      	b.n	8001a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a60:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a66:	4b07      	ldr	r3, [pc, #28]	@ (8001a84 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4a05      	ldr	r2, [pc, #20]	@ (8001a84 <_sbrk+0x64>)
 8001a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20020000 	.word	0x20020000
 8001a80:	00000400 	.word	0x00000400
 8001a84:	20000448 	.word	0x20000448
 8001a88:	200005a0 	.word	0x200005a0

08001a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <SystemInit+0x20>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a96:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <SystemInit+0x20>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ab0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ae8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ab4:	f7ff ffea 	bl	8001a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aba:	490d      	ldr	r1, [pc, #52]	@ (8001af0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8001afc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ade:	f004 f9ff 	bl	8005ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae2:	f7ff fb97 	bl	8001214 <main>
  bx  lr    
 8001ae6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ae8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001af4:	08009b48 	.word	0x08009b48
  ldr r2, =_sbss
 8001af8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001afc:	2000059c 	.word	0x2000059c

08001b00 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <CAN1_RX0_IRQHandler>
	...

08001b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b08:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b44 <HAL_Init+0x40>)
 8001b0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <HAL_Init+0x40>)
 8001b1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <HAL_Init+0x40>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <HAL_Init+0x40>)
 8001b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f000 fdcb 	bl	80026c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b32:	200f      	movs	r0, #15
 8001b34:	f000 f808 	bl	8001b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b38:	f7ff fdba 	bl	80016b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023c00 	.word	0x40023c00

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_InitTick+0x54>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <HAL_InitTick+0x58>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 fde3 	bl	8002732 <HAL_SYSTICK_Config>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00e      	b.n	8001b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	d80a      	bhi.n	8001b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f000 fdab 	bl	80026de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b88:	4a06      	ldr	r2, [pc, #24]	@ (8001ba4 <HAL_InitTick+0x5c>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000004 	.word	0x20000004
 8001ba0:	2000000c 	.word	0x2000000c
 8001ba4:	20000008 	.word	0x20000008

08001ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_IncTick+0x20>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_IncTick+0x24>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a04      	ldr	r2, [pc, #16]	@ (8001bcc <HAL_IncTick+0x24>)
 8001bba:	6013      	str	r3, [r2, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	2000000c 	.word	0x2000000c
 8001bcc:	2000044c 	.word	0x2000044c

08001bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	@ (8001be4 <HAL_GetTick+0x14>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	2000044c 	.word	0x2000044c

08001be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff ffee 	bl	8001bd0 <HAL_GetTick>
 8001bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c00:	d005      	beq.n	8001c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <HAL_Delay+0x44>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c0e:	bf00      	nop
 8001c10:	f7ff ffde 	bl	8001bd0 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d8f7      	bhi.n	8001c10 <HAL_Delay+0x28>
  {
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	2000000c 	.word	0x2000000c

08001c30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e033      	b.n	8001cae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fd56 	bl	8001700 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d118      	bne.n	8001ca0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c76:	f023 0302 	bic.w	r3, r3, #2
 8001c7a:	f043 0202 	orr.w	r2, r3, #2
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fb4a 	bl	800231c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	f023 0303 	bic.w	r3, r3, #3
 8001c96:	f043 0201 	orr.w	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c9e:	e001      	b.n	8001ca4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_Start_IT+0x1a>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e0bd      	b.n	8001e4e <HAL_ADC_Start_IT+0x196>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d018      	beq.n	8001d1a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cf8:	4b58      	ldr	r3, [pc, #352]	@ (8001e5c <HAL_ADC_Start_IT+0x1a4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a58      	ldr	r2, [pc, #352]	@ (8001e60 <HAL_ADC_Start_IT+0x1a8>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0c9a      	lsrs	r2, r3, #18
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d0c:	e002      	b.n	8001d14 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f9      	bne.n	8001d0e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	f040 8085 	bne.w	8001e34 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d007      	beq.n	8001d5c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d54:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d68:	d106      	bne.n	8001d78 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	f023 0206 	bic.w	r2, r3, #6
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d76:	e002      	b.n	8001d7e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d86:	4b37      	ldr	r3, [pc, #220]	@ (8001e64 <HAL_ADC_Start_IT+0x1ac>)
 8001d88:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d92:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001da2:	f043 0320 	orr.w	r3, r3, #32
 8001da6:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d12a      	bne.n	8001e0a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a2b      	ldr	r2, [pc, #172]	@ (8001e68 <HAL_ADC_Start_IT+0x1b0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d015      	beq.n	8001dea <HAL_ADC_Start_IT+0x132>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8001e6c <HAL_ADC_Start_IT+0x1b4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d105      	bne.n	8001dd4 <HAL_ADC_Start_IT+0x11c>
 8001dc8:	4b26      	ldr	r3, [pc, #152]	@ (8001e64 <HAL_ADC_Start_IT+0x1ac>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00a      	beq.n	8001dea <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a25      	ldr	r2, [pc, #148]	@ (8001e70 <HAL_ADC_Start_IT+0x1b8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d136      	bne.n	8001e4c <HAL_ADC_Start_IT+0x194>
 8001dde:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <HAL_ADC_Start_IT+0x1ac>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d130      	bne.n	8001e4c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d129      	bne.n	8001e4c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	e020      	b.n	8001e4c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a16      	ldr	r2, [pc, #88]	@ (8001e68 <HAL_ADC_Start_IT+0x1b0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d11b      	bne.n	8001e4c <HAL_ADC_Start_IT+0x194>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d114      	bne.n	8001e4c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	e00b      	b.n	8001e4c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	f043 0210 	orr.w	r2, r3, #16
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e44:	f043 0201 	orr.w	r2, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	431bde83 	.word	0x431bde83
 8001e64:	40012300 	.word	0x40012300
 8001e68:	40012000 	.word	0x40012000
 8001e6c:	40012100 	.word	0x40012100
 8001e70:	40012200 	.word	0x40012200

08001e74 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d049      	beq.n	8001f3e <HAL_ADC_IRQHandler+0xca>
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d046      	beq.n	8001f3e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d12b      	bne.n	8001f2e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d127      	bne.n	8001f2e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d006      	beq.n	8001efa <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d119      	bne.n	8001f2e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0220 	bic.w	r2, r2, #32
 8001f08:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d105      	bne.n	8001f2e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fb3c 	bl	80015ac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0212 	mvn.w	r2, #18
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d057      	beq.n	8002004 <HAL_ADC_IRQHandler+0x190>
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d054      	beq.n	8002004 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d105      	bne.n	8001f72 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d139      	bne.n	8001ff4 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f86:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d12b      	bne.n	8001ff4 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d124      	bne.n	8001ff4 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d11d      	bne.n	8001ff4 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d119      	bne.n	8001ff4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fce:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d105      	bne.n	8001ff4 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	f043 0201 	orr.w	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fa8d 	bl	8002514 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f06f 020c 	mvn.w	r2, #12
 8002002:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002012:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d017      	beq.n	800204a <HAL_ADC_IRQHandler+0x1d6>
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d014      	beq.n	800204a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d10d      	bne.n	800204a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f837 	bl	80020ae <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0201 	mvn.w	r2, #1
 8002048:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002058:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d015      	beq.n	800208c <HAL_ADC_IRQHandler+0x218>
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d012      	beq.n	800208c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	f043 0202 	orr.w	r2, r3, #2
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f06f 0220 	mvn.w	r2, #32
 800207a:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f820 	bl	80020c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f06f 0220 	mvn.w	r2, #32
 800208a:	601a      	str	r2, [r3, #0]
  }
}
 800208c:	bf00      	nop
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x1c>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e105      	b.n	8002300 <HAL_ADC_ConfigChannel+0x228>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b09      	cmp	r3, #9
 8002102:	d925      	bls.n	8002150 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68d9      	ldr	r1, [r3, #12]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	3b1e      	subs	r3, #30
 800211a:	2207      	movs	r2, #7
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43da      	mvns	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	400a      	ands	r2, r1
 8002128:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68d9      	ldr	r1, [r3, #12]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	4618      	mov	r0, r3
 800213c:	4603      	mov	r3, r0
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4403      	add	r3, r0
 8002142:	3b1e      	subs	r3, #30
 8002144:	409a      	lsls	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	e022      	b.n	8002196 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6919      	ldr	r1, [r3, #16]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	2207      	movs	r2, #7
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	400a      	ands	r2, r1
 8002172:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6919      	ldr	r1, [r3, #16]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	4618      	mov	r0, r3
 8002186:	4603      	mov	r3, r0
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4403      	add	r3, r0
 800218c:	409a      	lsls	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b06      	cmp	r3, #6
 800219c:	d824      	bhi.n	80021e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	3b05      	subs	r3, #5
 80021b0:	221f      	movs	r2, #31
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	400a      	ands	r2, r1
 80021be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	4618      	mov	r0, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	3b05      	subs	r3, #5
 80021da:	fa00 f203 	lsl.w	r2, r0, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80021e6:	e04c      	b.n	8002282 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b0c      	cmp	r3, #12
 80021ee:	d824      	bhi.n	800223a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	3b23      	subs	r3, #35	@ 0x23
 8002202:	221f      	movs	r2, #31
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43da      	mvns	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	400a      	ands	r2, r1
 8002210:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	b29b      	uxth	r3, r3
 800221e:	4618      	mov	r0, r3
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	3b23      	subs	r3, #35	@ 0x23
 800222c:	fa00 f203 	lsl.w	r2, r0, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
 8002238:	e023      	b.n	8002282 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	3b41      	subs	r3, #65	@ 0x41
 800224c:	221f      	movs	r2, #31
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43da      	mvns	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	400a      	ands	r2, r1
 800225a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	4618      	mov	r0, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	3b41      	subs	r3, #65	@ 0x41
 8002276:	fa00 f203 	lsl.w	r2, r0, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002282:	4b22      	ldr	r3, [pc, #136]	@ (800230c <HAL_ADC_ConfigChannel+0x234>)
 8002284:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a21      	ldr	r2, [pc, #132]	@ (8002310 <HAL_ADC_ConfigChannel+0x238>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d109      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1cc>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b12      	cmp	r3, #18
 8002296:	d105      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a19      	ldr	r2, [pc, #100]	@ (8002310 <HAL_ADC_ConfigChannel+0x238>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d123      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x21e>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b10      	cmp	r3, #16
 80022b4:	d003      	beq.n	80022be <HAL_ADC_ConfigChannel+0x1e6>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b11      	cmp	r3, #17
 80022bc:	d11b      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d111      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022d2:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <HAL_ADC_ConfigChannel+0x23c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a10      	ldr	r2, [pc, #64]	@ (8002318 <HAL_ADC_ConfigChannel+0x240>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	0c9a      	lsrs	r2, r3, #18
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022e8:	e002      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f9      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	40012300 	.word	0x40012300
 8002310:	40012000 	.word	0x40012000
 8002314:	20000004 	.word	0x20000004
 8002318:	431bde83 	.word	0x431bde83

0800231c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002324:	4b79      	ldr	r3, [pc, #484]	@ (800250c <ADC_Init+0x1f0>)
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	431a      	orrs	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002350:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	021a      	lsls	r2, r3, #8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002396:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6899      	ldr	r1, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ae:	4a58      	ldr	r2, [pc, #352]	@ (8002510 <ADC_Init+0x1f4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d022      	beq.n	80023fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6899      	ldr	r1, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	e00f      	b.n	800241a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002418:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0202 	bic.w	r2, r2, #2
 8002428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6899      	ldr	r1, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7e1b      	ldrb	r3, [r3, #24]
 8002434:	005a      	lsls	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d01b      	beq.n	8002480 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002456:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002466:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	3b01      	subs	r3, #1
 8002474:	035a      	lsls	r2, r3, #13
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	e007      	b.n	8002490 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800248e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800249e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	051a      	lsls	r2, r3, #20
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6899      	ldr	r1, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024d2:	025a      	lsls	r2, r3, #9
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6899      	ldr	r1, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	029a      	lsls	r2, r3, #10
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	609a      	str	r2, [r3, #8]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40012300 	.word	0x40012300
 8002510:	0f000001 	.word	0x0f000001

08002514 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255a:	4a04      	ldr	r2, [pc, #16]	@ (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60d3      	str	r3, [r2, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db0b      	blt.n	80025b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4907      	ldr	r1, [pc, #28]	@ (80025c4 <__NVIC_EnableIRQ+0x38>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2001      	movs	r0, #1
 80025ae:	fa00 f202 	lsl.w	r2, r0, r2
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	@ (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	@ (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	@ 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
         );
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002694:	d301      	bcc.n	800269a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002696:	2301      	movs	r3, #1
 8002698:	e00f      	b.n	80026ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269a:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <SysTick_Config+0x40>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a2:	210f      	movs	r1, #15
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	f7ff ff8e 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ac:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <SysTick_Config+0x40>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b2:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <SysTick_Config+0x40>)
 80026b4:	2207      	movs	r2, #7
 80026b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ff29 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f0:	f7ff ff3e 	bl	8002570 <__NVIC_GetPriorityGrouping>
 80026f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	f7ff ff8e 	bl	800261c <NVIC_EncodePriority>
 8002700:	4602      	mov	r2, r0
 8002702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff5d 	bl	80025c8 <__NVIC_SetPriority>
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff31 	bl	800258c <__NVIC_EnableIRQ>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ffa2 	bl	8002684 <SysTick_Config>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002756:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff fa3a 	bl	8001bd0 <HAL_GetTick>
 800275c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d008      	beq.n	800277c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2280      	movs	r2, #128	@ 0x80
 800276e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e052      	b.n	8002822 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0216 	bic.w	r2, r2, #22
 800278a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800279a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d103      	bne.n	80027ac <HAL_DMA_Abort+0x62>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0208 	bic.w	r2, r2, #8
 80027ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0201 	bic.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027cc:	e013      	b.n	80027f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ce:	f7ff f9ff 	bl	8001bd0 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b05      	cmp	r3, #5
 80027da:	d90c      	bls.n	80027f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2220      	movs	r2, #32
 80027e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2203      	movs	r2, #3
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e015      	b.n	8002822 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1e4      	bne.n	80027ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002808:	223f      	movs	r2, #63	@ 0x3f
 800280a:	409a      	lsls	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d004      	beq.n	8002848 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2280      	movs	r2, #128	@ 0x80
 8002842:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e00c      	b.n	8002862 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2205      	movs	r2, #5
 800284c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	@ 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	e16b      	b.n	8002b64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	f040 815a 	bne.w	8002b5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d005      	beq.n	80028c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d130      	bne.n	8002924 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2203      	movs	r2, #3
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f8:	2201      	movs	r2, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 0201 	and.w	r2, r3, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b03      	cmp	r3, #3
 800292e:	d017      	beq.n	8002960 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d123      	bne.n	80029b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	08da      	lsrs	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3208      	adds	r2, #8
 8002974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	220f      	movs	r2, #15
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	08da      	lsrs	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3208      	adds	r2, #8
 80029ae:	69b9      	ldr	r1, [r7, #24]
 80029b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	2203      	movs	r2, #3
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0203 	and.w	r2, r3, #3
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80b4 	beq.w	8002b5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	4b60      	ldr	r3, [pc, #384]	@ (8002b7c <HAL_GPIO_Init+0x30c>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fe:	4a5f      	ldr	r2, [pc, #380]	@ (8002b7c <HAL_GPIO_Init+0x30c>)
 8002a00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a06:	4b5d      	ldr	r3, [pc, #372]	@ (8002b7c <HAL_GPIO_Init+0x30c>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a12:	4a5b      	ldr	r2, [pc, #364]	@ (8002b80 <HAL_GPIO_Init+0x310>)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	3302      	adds	r3, #2
 8002a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	220f      	movs	r2, #15
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a52      	ldr	r2, [pc, #328]	@ (8002b84 <HAL_GPIO_Init+0x314>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d02b      	beq.n	8002a96 <HAL_GPIO_Init+0x226>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a51      	ldr	r2, [pc, #324]	@ (8002b88 <HAL_GPIO_Init+0x318>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d025      	beq.n	8002a92 <HAL_GPIO_Init+0x222>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a50      	ldr	r2, [pc, #320]	@ (8002b8c <HAL_GPIO_Init+0x31c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01f      	beq.n	8002a8e <HAL_GPIO_Init+0x21e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a4f      	ldr	r2, [pc, #316]	@ (8002b90 <HAL_GPIO_Init+0x320>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d019      	beq.n	8002a8a <HAL_GPIO_Init+0x21a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4e      	ldr	r2, [pc, #312]	@ (8002b94 <HAL_GPIO_Init+0x324>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <HAL_GPIO_Init+0x216>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4d      	ldr	r2, [pc, #308]	@ (8002b98 <HAL_GPIO_Init+0x328>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00d      	beq.n	8002a82 <HAL_GPIO_Init+0x212>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4c      	ldr	r2, [pc, #304]	@ (8002b9c <HAL_GPIO_Init+0x32c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <HAL_GPIO_Init+0x20e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4b      	ldr	r2, [pc, #300]	@ (8002ba0 <HAL_GPIO_Init+0x330>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d101      	bne.n	8002a7a <HAL_GPIO_Init+0x20a>
 8002a76:	2307      	movs	r3, #7
 8002a78:	e00e      	b.n	8002a98 <HAL_GPIO_Init+0x228>
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	e00c      	b.n	8002a98 <HAL_GPIO_Init+0x228>
 8002a7e:	2306      	movs	r3, #6
 8002a80:	e00a      	b.n	8002a98 <HAL_GPIO_Init+0x228>
 8002a82:	2305      	movs	r3, #5
 8002a84:	e008      	b.n	8002a98 <HAL_GPIO_Init+0x228>
 8002a86:	2304      	movs	r3, #4
 8002a88:	e006      	b.n	8002a98 <HAL_GPIO_Init+0x228>
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e004      	b.n	8002a98 <HAL_GPIO_Init+0x228>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e002      	b.n	8002a98 <HAL_GPIO_Init+0x228>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_GPIO_Init+0x228>
 8002a96:	2300      	movs	r3, #0
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	f002 0203 	and.w	r2, r2, #3
 8002a9e:	0092      	lsls	r2, r2, #2
 8002aa0:	4093      	lsls	r3, r2
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aa8:	4935      	ldr	r1, [pc, #212]	@ (8002b80 <HAL_GPIO_Init+0x310>)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	3302      	adds	r3, #2
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba4 <HAL_GPIO_Init+0x334>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ada:	4a32      	ldr	r2, [pc, #200]	@ (8002ba4 <HAL_GPIO_Init+0x334>)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae0:	4b30      	ldr	r3, [pc, #192]	@ (8002ba4 <HAL_GPIO_Init+0x334>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b04:	4a27      	ldr	r2, [pc, #156]	@ (8002ba4 <HAL_GPIO_Init+0x334>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b0a:	4b26      	ldr	r3, [pc, #152]	@ (8002ba4 <HAL_GPIO_Init+0x334>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4013      	ands	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba4 <HAL_GPIO_Init+0x334>)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba4 <HAL_GPIO_Init+0x334>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b58:	4a12      	ldr	r2, [pc, #72]	@ (8002ba4 <HAL_GPIO_Init+0x334>)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3301      	adds	r3, #1
 8002b62:	61fb      	str	r3, [r7, #28]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	2b0f      	cmp	r3, #15
 8002b68:	f67f ae90 	bls.w	800288c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	3724      	adds	r7, #36	@ 0x24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40013800 	.word	0x40013800
 8002b84:	40020000 	.word	0x40020000
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	40020800 	.word	0x40020800
 8002b90:	40020c00 	.word	0x40020c00
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40021400 	.word	0x40021400
 8002b9c:	40021800 	.word	0x40021800
 8002ba0:	40021c00 	.word	0x40021c00
 8002ba4:	40013c00 	.word	0x40013c00

08002ba8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	887b      	ldrh	r3, [r7, #2]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
 8002bc4:	e001      	b.n	8002bca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
 8002be4:	4613      	mov	r3, r2
 8002be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be8:	787b      	ldrb	r3, [r7, #1]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bf4:	e003      	b.n	8002bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bf6:	887b      	ldrh	r3, [r7, #2]
 8002bf8:	041a      	lsls	r2, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	619a      	str	r2, [r3, #24]
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b085      	sub	sp, #20
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	460b      	mov	r3, r1
 8002c14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c1c:	887a      	ldrh	r2, [r7, #2]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4013      	ands	r3, r2
 8002c22:	041a      	lsls	r2, r3, #16
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	43d9      	mvns	r1, r3
 8002c28:	887b      	ldrh	r3, [r7, #2]
 8002c2a:	400b      	ands	r3, r1
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	619a      	str	r2, [r3, #24]
}
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e267      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d075      	beq.n	8002d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c5e:	4b88      	ldr	r3, [pc, #544]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d00c      	beq.n	8002c84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c6a:	4b85      	ldr	r3, [pc, #532]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d112      	bne.n	8002c9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c76:	4b82      	ldr	r3, [pc, #520]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c82:	d10b      	bne.n	8002c9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c84:	4b7e      	ldr	r3, [pc, #504]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d05b      	beq.n	8002d48 <HAL_RCC_OscConfig+0x108>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d157      	bne.n	8002d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e242      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca4:	d106      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x74>
 8002ca6:	4b76      	ldr	r3, [pc, #472]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a75      	ldr	r2, [pc, #468]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e01d      	b.n	8002cf0 <HAL_RCC_OscConfig+0xb0>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x98>
 8002cbe:	4b70      	ldr	r3, [pc, #448]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a6f      	ldr	r2, [pc, #444]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b6d      	ldr	r3, [pc, #436]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a6c      	ldr	r2, [pc, #432]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCC_OscConfig+0xb0>
 8002cd8:	4b69      	ldr	r3, [pc, #420]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a68      	ldr	r2, [pc, #416]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b66      	ldr	r3, [pc, #408]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a65      	ldr	r2, [pc, #404]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe ff6a 	bl	8001bd0 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fe ff66 	bl	8001bd0 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	@ 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e207      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	4b5b      	ldr	r3, [pc, #364]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0xc0>
 8002d1e:	e014      	b.n	8002d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7fe ff56 	bl	8001bd0 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fe ff52 	bl	8001bd0 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	@ 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e1f3      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3a:	4b51      	ldr	r3, [pc, #324]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0xe8>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d063      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d56:	4b4a      	ldr	r3, [pc, #296]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00b      	beq.n	8002d7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d62:	4b47      	ldr	r3, [pc, #284]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d11c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d6e:	4b44      	ldr	r3, [pc, #272]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d116      	bne.n	8002da8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7a:	4b41      	ldr	r3, [pc, #260]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_RCC_OscConfig+0x152>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e1c7      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d92:	4b3b      	ldr	r3, [pc, #236]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4937      	ldr	r1, [pc, #220]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da6:	e03a      	b.n	8002e1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d020      	beq.n	8002df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db0:	4b34      	ldr	r3, [pc, #208]	@ (8002e84 <HAL_RCC_OscConfig+0x244>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fe ff0b 	bl	8001bd0 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dbe:	f7fe ff07 	bl	8001bd0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e1a8      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ddc:	4b28      	ldr	r3, [pc, #160]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4925      	ldr	r1, [pc, #148]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]
 8002df0:	e015      	b.n	8002e1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df2:	4b24      	ldr	r3, [pc, #144]	@ (8002e84 <HAL_RCC_OscConfig+0x244>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df8:	f7fe feea 	bl	8001bd0 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e00:	f7fe fee6 	bl	8001bd0 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e187      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e12:	4b1b      	ldr	r3, [pc, #108]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d036      	beq.n	8002e98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d016      	beq.n	8002e60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e32:	4b15      	ldr	r3, [pc, #84]	@ (8002e88 <HAL_RCC_OscConfig+0x248>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e38:	f7fe feca 	bl	8001bd0 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e40:	f7fe fec6 	bl	8001bd0 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e167      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e52:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x200>
 8002e5e:	e01b      	b.n	8002e98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e60:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <HAL_RCC_OscConfig+0x248>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e66:	f7fe feb3 	bl	8001bd0 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6c:	e00e      	b.n	8002e8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e6e:	f7fe feaf 	bl	8001bd0 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d907      	bls.n	8002e8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e150      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
 8002e80:	40023800 	.word	0x40023800
 8002e84:	42470000 	.word	0x42470000
 8002e88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e8c:	4b88      	ldr	r3, [pc, #544]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1ea      	bne.n	8002e6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 8097 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eaa:	4b81      	ldr	r3, [pc, #516]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10f      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	4b7d      	ldr	r3, [pc, #500]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	4a7c      	ldr	r2, [pc, #496]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ec6:	4b7a      	ldr	r3, [pc, #488]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed6:	4b77      	ldr	r3, [pc, #476]	@ (80030b4 <HAL_RCC_OscConfig+0x474>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d118      	bne.n	8002f14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee2:	4b74      	ldr	r3, [pc, #464]	@ (80030b4 <HAL_RCC_OscConfig+0x474>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a73      	ldr	r2, [pc, #460]	@ (80030b4 <HAL_RCC_OscConfig+0x474>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eee:	f7fe fe6f 	bl	8001bd0 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef6:	f7fe fe6b 	bl	8001bd0 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e10c      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f08:	4b6a      	ldr	r3, [pc, #424]	@ (80030b4 <HAL_RCC_OscConfig+0x474>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d106      	bne.n	8002f2a <HAL_RCC_OscConfig+0x2ea>
 8002f1c:	4b64      	ldr	r3, [pc, #400]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f20:	4a63      	ldr	r2, [pc, #396]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f28:	e01c      	b.n	8002f64 <HAL_RCC_OscConfig+0x324>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b05      	cmp	r3, #5
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x30c>
 8002f32:	4b5f      	ldr	r3, [pc, #380]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f36:	4a5e      	ldr	r2, [pc, #376]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f38:	f043 0304 	orr.w	r3, r3, #4
 8002f3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f3e:	4b5c      	ldr	r3, [pc, #368]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f42:	4a5b      	ldr	r2, [pc, #364]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCC_OscConfig+0x324>
 8002f4c:	4b58      	ldr	r3, [pc, #352]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f50:	4a57      	ldr	r2, [pc, #348]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f52:	f023 0301 	bic.w	r3, r3, #1
 8002f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f58:	4b55      	ldr	r3, [pc, #340]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5c:	4a54      	ldr	r2, [pc, #336]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	f023 0304 	bic.w	r3, r3, #4
 8002f62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d015      	beq.n	8002f98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6c:	f7fe fe30 	bl	8001bd0 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f74:	f7fe fe2c 	bl	8001bd0 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e0cb      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8a:	4b49      	ldr	r3, [pc, #292]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0ee      	beq.n	8002f74 <HAL_RCC_OscConfig+0x334>
 8002f96:	e014      	b.n	8002fc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f98:	f7fe fe1a 	bl	8001bd0 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa0:	f7fe fe16 	bl	8001bd0 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e0b5      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb6:	4b3e      	ldr	r3, [pc, #248]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1ee      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d105      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc8:	4b39      	ldr	r3, [pc, #228]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fcc:	4a38      	ldr	r2, [pc, #224]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002fce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80a1 	beq.w	8003120 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fde:	4b34      	ldr	r3, [pc, #208]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d05c      	beq.n	80030a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d141      	bne.n	8003076 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff2:	4b31      	ldr	r3, [pc, #196]	@ (80030b8 <HAL_RCC_OscConfig+0x478>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fdea 	bl	8001bd0 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003000:	f7fe fde6 	bl	8001bd0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e087      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003012:	4b27      	ldr	r3, [pc, #156]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69da      	ldr	r2, [r3, #28]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	019b      	lsls	r3, r3, #6
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003034:	085b      	lsrs	r3, r3, #1
 8003036:	3b01      	subs	r3, #1
 8003038:	041b      	lsls	r3, r3, #16
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	491b      	ldr	r1, [pc, #108]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003048:	4b1b      	ldr	r3, [pc, #108]	@ (80030b8 <HAL_RCC_OscConfig+0x478>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7fe fdbf 	bl	8001bd0 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003056:	f7fe fdbb 	bl	8001bd0 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e05c      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003068:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x416>
 8003074:	e054      	b.n	8003120 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003076:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <HAL_RCC_OscConfig+0x478>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fe fda8 	bl	8001bd0 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe fda4 	bl	8001bd0 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e045      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003096:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <HAL_RCC_OscConfig+0x470>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x444>
 80030a2:	e03d      	b.n	8003120 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e038      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40007000 	.word	0x40007000
 80030b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030bc:	4b1b      	ldr	r3, [pc, #108]	@ (800312c <HAL_RCC_OscConfig+0x4ec>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d028      	beq.n	800311c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d121      	bne.n	800311c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d11a      	bne.n	800311c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030ec:	4013      	ands	r3, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d111      	bne.n	800311c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003102:	085b      	lsrs	r3, r3, #1
 8003104:	3b01      	subs	r3, #1
 8003106:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d107      	bne.n	800311c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003116:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800

08003130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0cc      	b.n	80032de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003144:	4b68      	ldr	r3, [pc, #416]	@ (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d90c      	bls.n	800316c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b65      	ldr	r3, [pc, #404]	@ (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315a:	4b63      	ldr	r3, [pc, #396]	@ (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0b8      	b.n	80032de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003184:	4b59      	ldr	r3, [pc, #356]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4a58      	ldr	r2, [pc, #352]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800318e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800319c:	4b53      	ldr	r3, [pc, #332]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4a52      	ldr	r2, [pc, #328]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a8:	4b50      	ldr	r3, [pc, #320]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	494d      	ldr	r1, [pc, #308]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d044      	beq.n	8003250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d107      	bne.n	80031de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	4b47      	ldr	r3, [pc, #284]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d119      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e07f      	b.n	80032de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d003      	beq.n	80031ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ee:	4b3f      	ldr	r3, [pc, #252]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e06f      	b.n	80032de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fe:	4b3b      	ldr	r3, [pc, #236]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e067      	b.n	80032de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320e:	4b37      	ldr	r3, [pc, #220]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f023 0203 	bic.w	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4934      	ldr	r1, [pc, #208]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	4313      	orrs	r3, r2
 800321e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003220:	f7fe fcd6 	bl	8001bd0 <HAL_GetTick>
 8003224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	e00a      	b.n	800323e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003228:	f7fe fcd2 	bl	8001bd0 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e04f      	b.n	80032de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323e:	4b2b      	ldr	r3, [pc, #172]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 020c 	and.w	r2, r3, #12
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	429a      	cmp	r2, r3
 800324e:	d1eb      	bne.n	8003228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003250:	4b25      	ldr	r3, [pc, #148]	@ (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d20c      	bcs.n	8003278 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b22      	ldr	r3, [pc, #136]	@ (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003266:	4b20      	ldr	r3, [pc, #128]	@ (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e032      	b.n	80032de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003284:	4b19      	ldr	r3, [pc, #100]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4916      	ldr	r1, [pc, #88]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032a2:	4b12      	ldr	r3, [pc, #72]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	490e      	ldr	r1, [pc, #56]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032b6:	f000 f821 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 80032ba:	4602      	mov	r2, r0
 80032bc:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	490a      	ldr	r1, [pc, #40]	@ (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 80032c8:	5ccb      	ldrb	r3, [r1, r3]
 80032ca:	fa22 f303 	lsr.w	r3, r2, r3
 80032ce:	4a09      	ldr	r2, [pc, #36]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032d2:	4b09      	ldr	r3, [pc, #36]	@ (80032f8 <HAL_RCC_ClockConfig+0x1c8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe fc36 	bl	8001b48 <HAL_InitTick>

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023c00 	.word	0x40023c00
 80032ec:	40023800 	.word	0x40023800
 80032f0:	080096f4 	.word	0x080096f4
 80032f4:	20000004 	.word	0x20000004
 80032f8:	20000008 	.word	0x20000008

080032fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003300:	b090      	sub	sp, #64	@ 0x40
 8003302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	637b      	str	r3, [r7, #52]	@ 0x34
 8003308:	2300      	movs	r3, #0
 800330a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800330c:	2300      	movs	r3, #0
 800330e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003314:	4b59      	ldr	r3, [pc, #356]	@ (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 030c 	and.w	r3, r3, #12
 800331c:	2b08      	cmp	r3, #8
 800331e:	d00d      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x40>
 8003320:	2b08      	cmp	r3, #8
 8003322:	f200 80a1 	bhi.w	8003468 <HAL_RCC_GetSysClockFreq+0x16c>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x34>
 800332a:	2b04      	cmp	r3, #4
 800332c:	d003      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x3a>
 800332e:	e09b      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003330:	4b53      	ldr	r3, [pc, #332]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x184>)
 8003332:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003334:	e09b      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003336:	4b53      	ldr	r3, [pc, #332]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x188>)
 8003338:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800333a:	e098      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800333c:	4b4f      	ldr	r3, [pc, #316]	@ (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003344:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003346:	4b4d      	ldr	r3, [pc, #308]	@ (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d028      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003352:	4b4a      	ldr	r3, [pc, #296]	@ (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	2200      	movs	r2, #0
 800335a:	623b      	str	r3, [r7, #32]
 800335c:	627a      	str	r2, [r7, #36]	@ 0x24
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003364:	2100      	movs	r1, #0
 8003366:	4b47      	ldr	r3, [pc, #284]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x188>)
 8003368:	fb03 f201 	mul.w	r2, r3, r1
 800336c:	2300      	movs	r3, #0
 800336e:	fb00 f303 	mul.w	r3, r0, r3
 8003372:	4413      	add	r3, r2
 8003374:	4a43      	ldr	r2, [pc, #268]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x188>)
 8003376:	fba0 1202 	umull	r1, r2, r0, r2
 800337a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800337c:	460a      	mov	r2, r1
 800337e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003382:	4413      	add	r3, r2
 8003384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003388:	2200      	movs	r2, #0
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	61fa      	str	r2, [r7, #28]
 800338e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003392:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003396:	f7fd fc77 	bl	8000c88 <__aeabi_uldivmod>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4613      	mov	r3, r2
 80033a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033a2:	e053      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a4:	4b35      	ldr	r3, [pc, #212]	@ (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	099b      	lsrs	r3, r3, #6
 80033aa:	2200      	movs	r2, #0
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	617a      	str	r2, [r7, #20]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033b6:	f04f 0b00 	mov.w	fp, #0
 80033ba:	4652      	mov	r2, sl
 80033bc:	465b      	mov	r3, fp
 80033be:	f04f 0000 	mov.w	r0, #0
 80033c2:	f04f 0100 	mov.w	r1, #0
 80033c6:	0159      	lsls	r1, r3, #5
 80033c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033cc:	0150      	lsls	r0, r2, #5
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	ebb2 080a 	subs.w	r8, r2, sl
 80033d6:	eb63 090b 	sbc.w	r9, r3, fp
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033ee:	ebb2 0408 	subs.w	r4, r2, r8
 80033f2:	eb63 0509 	sbc.w	r5, r3, r9
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	00eb      	lsls	r3, r5, #3
 8003400:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003404:	00e2      	lsls	r2, r4, #3
 8003406:	4614      	mov	r4, r2
 8003408:	461d      	mov	r5, r3
 800340a:	eb14 030a 	adds.w	r3, r4, sl
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	eb45 030b 	adc.w	r3, r5, fp
 8003414:	607b      	str	r3, [r7, #4]
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003422:	4629      	mov	r1, r5
 8003424:	028b      	lsls	r3, r1, #10
 8003426:	4621      	mov	r1, r4
 8003428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800342c:	4621      	mov	r1, r4
 800342e:	028a      	lsls	r2, r1, #10
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003436:	2200      	movs	r2, #0
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	60fa      	str	r2, [r7, #12]
 800343c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003440:	f7fd fc22 	bl	8000c88 <__aeabi_uldivmod>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4613      	mov	r3, r2
 800344a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800344c:	4b0b      	ldr	r3, [pc, #44]	@ (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	3301      	adds	r3, #1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800345c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800345e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003466:	e002      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003468:	4b05      	ldr	r3, [pc, #20]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x184>)
 800346a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800346c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800346e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003470:	4618      	mov	r0, r3
 8003472:	3740      	adds	r7, #64	@ 0x40
 8003474:	46bd      	mov	sp, r7
 8003476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	00f42400 	.word	0x00f42400
 8003484:	017d7840 	.word	0x017d7840

08003488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800348c:	4b03      	ldr	r3, [pc, #12]	@ (800349c <HAL_RCC_GetHCLKFreq+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000004 	.word	0x20000004

080034a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034a4:	f7ff fff0 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	0a9b      	lsrs	r3, r3, #10
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4903      	ldr	r1, [pc, #12]	@ (80034c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034bc:	4618      	mov	r0, r3
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40023800 	.word	0x40023800
 80034c4:	08009704 	.word	0x08009704

080034c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034cc:	f7ff ffdc 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034d0:	4602      	mov	r2, r0
 80034d2:	4b05      	ldr	r3, [pc, #20]	@ (80034e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	0b5b      	lsrs	r3, r3, #13
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	4903      	ldr	r1, [pc, #12]	@ (80034ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80034de:	5ccb      	ldrb	r3, [r1, r3]
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40023800 	.word	0x40023800
 80034ec:	08009704 	.word	0x08009704

080034f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e041      	b.n	8003586 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fe f93e 	bl	8001798 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3304      	adds	r3, #4
 800352c:	4619      	mov	r1, r3
 800352e:	4610      	mov	r0, r2
 8003530:	f000 f9b8 	bl	80038a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_TIM_PWM_Start+0x24>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	e022      	b.n	80035fa <HAL_TIM_PWM_Start+0x6a>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d109      	bne.n	80035ce <HAL_TIM_PWM_Start+0x3e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	bf14      	ite	ne
 80035c6:	2301      	movne	r3, #1
 80035c8:	2300      	moveq	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	e015      	b.n	80035fa <HAL_TIM_PWM_Start+0x6a>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d109      	bne.n	80035e8 <HAL_TIM_PWM_Start+0x58>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e008      	b.n	80035fa <HAL_TIM_PWM_Start+0x6a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e07c      	b.n	80036fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d104      	bne.n	8003612 <HAL_TIM_PWM_Start+0x82>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003610:	e013      	b.n	800363a <HAL_TIM_PWM_Start+0xaa>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d104      	bne.n	8003622 <HAL_TIM_PWM_Start+0x92>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003620:	e00b      	b.n	800363a <HAL_TIM_PWM_Start+0xaa>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b08      	cmp	r3, #8
 8003626:	d104      	bne.n	8003632 <HAL_TIM_PWM_Start+0xa2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003630:	e003      	b.n	800363a <HAL_TIM_PWM_Start+0xaa>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2201      	movs	r2, #1
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fb8a 	bl	8003d5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2d      	ldr	r2, [pc, #180]	@ (8003704 <HAL_TIM_PWM_Start+0x174>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d004      	beq.n	800365c <HAL_TIM_PWM_Start+0xcc>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a2c      	ldr	r2, [pc, #176]	@ (8003708 <HAL_TIM_PWM_Start+0x178>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d101      	bne.n	8003660 <HAL_TIM_PWM_Start+0xd0>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <HAL_TIM_PWM_Start+0xd2>
 8003660:	2300      	movs	r3, #0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003674:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a22      	ldr	r2, [pc, #136]	@ (8003704 <HAL_TIM_PWM_Start+0x174>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d022      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x136>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003688:	d01d      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x136>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1f      	ldr	r2, [pc, #124]	@ (800370c <HAL_TIM_PWM_Start+0x17c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d018      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x136>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1d      	ldr	r2, [pc, #116]	@ (8003710 <HAL_TIM_PWM_Start+0x180>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x136>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003714 <HAL_TIM_PWM_Start+0x184>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00e      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x136>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a16      	ldr	r2, [pc, #88]	@ (8003708 <HAL_TIM_PWM_Start+0x178>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d009      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x136>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a18      	ldr	r2, [pc, #96]	@ (8003718 <HAL_TIM_PWM_Start+0x188>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x136>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a16      	ldr	r2, [pc, #88]	@ (800371c <HAL_TIM_PWM_Start+0x18c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d111      	bne.n	80036ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b06      	cmp	r3, #6
 80036d6:	d010      	beq.n	80036fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e8:	e007      	b.n	80036fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40010000 	.word	0x40010000
 8003708:	40010400 	.word	0x40010400
 800370c:	40000400 	.word	0x40000400
 8003710:	40000800 	.word	0x40000800
 8003714:	40000c00 	.word	0x40000c00
 8003718:	40014000 	.word	0x40014000
 800371c:	40001800 	.word	0x40001800

08003720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800373a:	2302      	movs	r3, #2
 800373c:	e0ae      	b.n	800389c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b0c      	cmp	r3, #12
 800374a:	f200 809f 	bhi.w	800388c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800374e:	a201      	add	r2, pc, #4	@ (adr r2, 8003754 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003754:	08003789 	.word	0x08003789
 8003758:	0800388d 	.word	0x0800388d
 800375c:	0800388d 	.word	0x0800388d
 8003760:	0800388d 	.word	0x0800388d
 8003764:	080037c9 	.word	0x080037c9
 8003768:	0800388d 	.word	0x0800388d
 800376c:	0800388d 	.word	0x0800388d
 8003770:	0800388d 	.word	0x0800388d
 8003774:	0800380b 	.word	0x0800380b
 8003778:	0800388d 	.word	0x0800388d
 800377c:	0800388d 	.word	0x0800388d
 8003780:	0800388d 	.word	0x0800388d
 8003784:	0800384b 	.word	0x0800384b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f934 	bl	80039fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0208 	orr.w	r2, r2, #8
 80037a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0204 	bic.w	r2, r2, #4
 80037b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6999      	ldr	r1, [r3, #24]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	619a      	str	r2, [r3, #24]
      break;
 80037c6:	e064      	b.n	8003892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 f984 	bl	8003adc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6999      	ldr	r1, [r3, #24]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	021a      	lsls	r2, r3, #8
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	619a      	str	r2, [r3, #24]
      break;
 8003808:	e043      	b.n	8003892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68b9      	ldr	r1, [r7, #8]
 8003810:	4618      	mov	r0, r3
 8003812:	f000 f9d9 	bl	8003bc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0208 	orr.w	r2, r2, #8
 8003824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69da      	ldr	r2, [r3, #28]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0204 	bic.w	r2, r2, #4
 8003834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69d9      	ldr	r1, [r3, #28]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	61da      	str	r2, [r3, #28]
      break;
 8003848:	e023      	b.n	8003892 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fa2d 	bl	8003cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69da      	ldr	r2, [r3, #28]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69d9      	ldr	r1, [r3, #28]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	021a      	lsls	r2, r3, #8
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	61da      	str	r2, [r3, #28]
      break;
 800388a:	e002      	b.n	8003892 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	75fb      	strb	r3, [r7, #23]
      break;
 8003890:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800389a:	7dfb      	ldrb	r3, [r7, #23]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a46      	ldr	r2, [pc, #280]	@ (80039d0 <TIM_Base_SetConfig+0x12c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d013      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c2:	d00f      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a43      	ldr	r2, [pc, #268]	@ (80039d4 <TIM_Base_SetConfig+0x130>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00b      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a42      	ldr	r2, [pc, #264]	@ (80039d8 <TIM_Base_SetConfig+0x134>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a41      	ldr	r2, [pc, #260]	@ (80039dc <TIM_Base_SetConfig+0x138>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a40      	ldr	r2, [pc, #256]	@ (80039e0 <TIM_Base_SetConfig+0x13c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d108      	bne.n	80038f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a35      	ldr	r2, [pc, #212]	@ (80039d0 <TIM_Base_SetConfig+0x12c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d02b      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003904:	d027      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a32      	ldr	r2, [pc, #200]	@ (80039d4 <TIM_Base_SetConfig+0x130>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d023      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a31      	ldr	r2, [pc, #196]	@ (80039d8 <TIM_Base_SetConfig+0x134>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01f      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a30      	ldr	r2, [pc, #192]	@ (80039dc <TIM_Base_SetConfig+0x138>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01b      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a2f      	ldr	r2, [pc, #188]	@ (80039e0 <TIM_Base_SetConfig+0x13c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d017      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a2e      	ldr	r2, [pc, #184]	@ (80039e4 <TIM_Base_SetConfig+0x140>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a2d      	ldr	r2, [pc, #180]	@ (80039e8 <TIM_Base_SetConfig+0x144>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00f      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a2c      	ldr	r2, [pc, #176]	@ (80039ec <TIM_Base_SetConfig+0x148>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00b      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a2b      	ldr	r2, [pc, #172]	@ (80039f0 <TIM_Base_SetConfig+0x14c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a2a      	ldr	r2, [pc, #168]	@ (80039f4 <TIM_Base_SetConfig+0x150>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d003      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a29      	ldr	r2, [pc, #164]	@ (80039f8 <TIM_Base_SetConfig+0x154>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d108      	bne.n	8003968 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800395c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a10      	ldr	r2, [pc, #64]	@ (80039d0 <TIM_Base_SetConfig+0x12c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d003      	beq.n	800399c <TIM_Base_SetConfig+0xf8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a12      	ldr	r2, [pc, #72]	@ (80039e0 <TIM_Base_SetConfig+0x13c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d103      	bne.n	80039a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d105      	bne.n	80039c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f023 0201 	bic.w	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	611a      	str	r2, [r3, #16]
  }
}
 80039c2:	bf00      	nop
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40010000 	.word	0x40010000
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40000800 	.word	0x40000800
 80039dc:	40000c00 	.word	0x40000c00
 80039e0:	40010400 	.word	0x40010400
 80039e4:	40014000 	.word	0x40014000
 80039e8:	40014400 	.word	0x40014400
 80039ec:	40014800 	.word	0x40014800
 80039f0:	40001800 	.word	0x40001800
 80039f4:	40001c00 	.word	0x40001c00
 80039f8:	40002000 	.word	0x40002000

080039fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f023 0201 	bic.w	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0303 	bic.w	r3, r3, #3
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f023 0302 	bic.w	r3, r3, #2
 8003a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a20      	ldr	r2, [pc, #128]	@ (8003ad4 <TIM_OC1_SetConfig+0xd8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_OC1_SetConfig+0x64>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ad8 <TIM_OC1_SetConfig+0xdc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d10c      	bne.n	8003a7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f023 0308 	bic.w	r3, r3, #8
 8003a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f023 0304 	bic.w	r3, r3, #4
 8003a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a15      	ldr	r2, [pc, #84]	@ (8003ad4 <TIM_OC1_SetConfig+0xd8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d003      	beq.n	8003a8a <TIM_OC1_SetConfig+0x8e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a14      	ldr	r2, [pc, #80]	@ (8003ad8 <TIM_OC1_SetConfig+0xdc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d111      	bne.n	8003aae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	621a      	str	r2, [r3, #32]
}
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	40010000 	.word	0x40010000
 8003ad8:	40010400 	.word	0x40010400

08003adc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f023 0210 	bic.w	r2, r3, #16
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0320 	bic.w	r3, r3, #32
 8003b26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a22      	ldr	r2, [pc, #136]	@ (8003bc0 <TIM_OC2_SetConfig+0xe4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <TIM_OC2_SetConfig+0x68>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a21      	ldr	r2, [pc, #132]	@ (8003bc4 <TIM_OC2_SetConfig+0xe8>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d10d      	bne.n	8003b60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a17      	ldr	r2, [pc, #92]	@ (8003bc0 <TIM_OC2_SetConfig+0xe4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d003      	beq.n	8003b70 <TIM_OC2_SetConfig+0x94>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a16      	ldr	r2, [pc, #88]	@ (8003bc4 <TIM_OC2_SetConfig+0xe8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d113      	bne.n	8003b98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40010000 	.word	0x40010000
 8003bc4:	40010400 	.word	0x40010400

08003bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0303 	bic.w	r3, r3, #3
 8003bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a21      	ldr	r2, [pc, #132]	@ (8003ca8 <TIM_OC3_SetConfig+0xe0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_OC3_SetConfig+0x66>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a20      	ldr	r2, [pc, #128]	@ (8003cac <TIM_OC3_SetConfig+0xe4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10d      	bne.n	8003c4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a16      	ldr	r2, [pc, #88]	@ (8003ca8 <TIM_OC3_SetConfig+0xe0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d003      	beq.n	8003c5a <TIM_OC3_SetConfig+0x92>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a15      	ldr	r2, [pc, #84]	@ (8003cac <TIM_OC3_SetConfig+0xe4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d113      	bne.n	8003c82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	621a      	str	r2, [r3, #32]
}
 8003c9c:	bf00      	nop
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	40010400 	.word	0x40010400

08003cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	021b      	lsls	r3, r3, #8
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	031b      	lsls	r3, r3, #12
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a12      	ldr	r2, [pc, #72]	@ (8003d54 <TIM_OC4_SetConfig+0xa4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_OC4_SetConfig+0x68>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a11      	ldr	r2, [pc, #68]	@ (8003d58 <TIM_OC4_SetConfig+0xa8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d109      	bne.n	8003d2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	019b      	lsls	r3, r3, #6
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40010000 	.word	0x40010000
 8003d58:	40010400 	.word	0x40010400

08003d5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f003 031f 	and.w	r3, r3, #31
 8003d6e:	2201      	movs	r2, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a1a      	ldr	r2, [r3, #32]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	401a      	ands	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a1a      	ldr	r2, [r3, #32]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	fa01 f303 	lsl.w	r3, r1, r3
 8003d94:	431a      	orrs	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e05a      	b.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a21      	ldr	r2, [pc, #132]	@ (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d022      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e0c:	d01d      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1d      	ldr	r2, [pc, #116]	@ (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d018      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1a      	ldr	r2, [pc, #104]	@ (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00e      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a18      	ldr	r2, [pc, #96]	@ (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d009      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a17      	ldr	r2, [pc, #92]	@ (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a15      	ldr	r2, [pc, #84]	@ (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d10c      	bne.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40000c00 	.word	0x40000c00
 8003e94:	40010400 	.word	0x40010400
 8003e98:	40014000 	.word	0x40014000
 8003e9c:	40001800 	.word	0x40001800

08003ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e042      	b.n	8003f38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fd fc86 	bl	80017d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2224      	movs	r2, #36	@ 0x24
 8003ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 fd69 	bl	80049bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695a      	ldr	r2, [r3, #20]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	@ 0x28
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d175      	bne.n	800404c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_UART_Transmit+0x2c>
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e06e      	b.n	800404e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2221      	movs	r2, #33	@ 0x21
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f7e:	f7fd fe27 	bl	8001bd0 <HAL_GetTick>
 8003f82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	88fa      	ldrh	r2, [r7, #6]
 8003f88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	88fa      	ldrh	r2, [r7, #6]
 8003f8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f98:	d108      	bne.n	8003fac <HAL_UART_Transmit+0x6c>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d104      	bne.n	8003fac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	e003      	b.n	8003fb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fb4:	e02e      	b.n	8004014 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2180      	movs	r1, #128	@ 0x80
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fb05 	bl	80045d0 <UART_WaitOnFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e03a      	b.n	800404e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10b      	bne.n	8003ff6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	3302      	adds	r3, #2
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	e007      	b.n	8004006 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	781a      	ldrb	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	3301      	adds	r3, #1
 8004004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1cb      	bne.n	8003fb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2200      	movs	r2, #0
 8004026:	2140      	movs	r1, #64	@ 0x40
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fad1 	bl	80045d0 <UART_WaitOnFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e006      	b.n	800404e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	e000      	b.n	800404e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
  }
}
 800404e:	4618      	mov	r0, r3
 8004050:	3720      	adds	r7, #32
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b0ba      	sub	sp, #232	@ 0xe8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800407e:	2300      	movs	r3, #0
 8004080:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004084:	2300      	movs	r3, #0
 8004086:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800408a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004096:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10f      	bne.n	80040be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800409e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <HAL_UART_IRQHandler+0x66>
 80040aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fbc2 	bl	8004840 <UART_Receive_IT>
      return;
 80040bc:	e25b      	b.n	8004576 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 80de 	beq.w	8004284 <HAL_UART_IRQHandler+0x22c>
 80040c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d106      	bne.n	80040e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80d1 	beq.w	8004284 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <HAL_UART_IRQHandler+0xae>
 80040ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	f043 0201 	orr.w	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00b      	beq.n	800412a <HAL_UART_IRQHandler+0xd2>
 8004112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004122:	f043 0202 	orr.w	r2, r3, #2
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800412a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <HAL_UART_IRQHandler+0xf6>
 8004136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004146:	f043 0204 	orr.w	r2, r3, #4
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800414e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d011      	beq.n	800417e <HAL_UART_IRQHandler+0x126>
 800415a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b00      	cmp	r3, #0
 8004164:	d105      	bne.n	8004172 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	f043 0208 	orr.w	r2, r3, #8
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 81f2 	beq.w	800456c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_UART_IRQHandler+0x14e>
 8004194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fb4d 	bl	8004840 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b0:	2b40      	cmp	r3, #64	@ 0x40
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d103      	bne.n	80041d2 <HAL_UART_IRQHandler+0x17a>
 80041ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d04f      	beq.n	8004272 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fa55 	bl	8004682 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e2:	2b40      	cmp	r3, #64	@ 0x40
 80041e4:	d141      	bne.n	800426a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3314      	adds	r3, #20
 80041ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041f4:	e853 3f00 	ldrex	r3, [r3]
 80041f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004200:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3314      	adds	r3, #20
 800420e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004212:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004216:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800421e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800422a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1d9      	bne.n	80041e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d013      	beq.n	8004262 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423e:	4a7e      	ldr	r2, [pc, #504]	@ (8004438 <HAL_UART_IRQHandler+0x3e0>)
 8004240:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe faef 	bl	800282a <HAL_DMA_Abort_IT>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800425c:	4610      	mov	r0, r2
 800425e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004260:	e00e      	b.n	8004280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f99e 	bl	80045a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004268:	e00a      	b.n	8004280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f99a 	bl	80045a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004270:	e006      	b.n	8004280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f996 	bl	80045a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800427e:	e175      	b.n	800456c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004280:	bf00      	nop
    return;
 8004282:	e173      	b.n	800456c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004288:	2b01      	cmp	r3, #1
 800428a:	f040 814f 	bne.w	800452c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800428e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8148 	beq.w	800452c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800429c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 8141 	beq.w	800452c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ca:	2b40      	cmp	r3, #64	@ 0x40
 80042cc:	f040 80b6 	bne.w	800443c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8145 	beq.w	8004570 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042ee:	429a      	cmp	r2, r3
 80042f0:	f080 813e 	bcs.w	8004570 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004306:	f000 8088 	beq.w	800441a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	330c      	adds	r3, #12
 8004310:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004320:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004328:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	330c      	adds	r3, #12
 8004332:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004336:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800433a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004342:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800434e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1d9      	bne.n	800430a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3314      	adds	r3, #20
 800435c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004366:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004368:	f023 0301 	bic.w	r3, r3, #1
 800436c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3314      	adds	r3, #20
 8004376:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800437a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800437e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004382:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800438c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e1      	bne.n	8004356 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3314      	adds	r3, #20
 8004398:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80043a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3314      	adds	r3, #20
 80043b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80043b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80043b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80043bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80043c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e3      	bne.n	8004392 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043ea:	f023 0310 	bic.w	r3, r3, #16
 80043ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	330c      	adds	r3, #12
 80043f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80043fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004402:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800440a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e3      	bne.n	80043d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004414:	4618      	mov	r0, r3
 8004416:	f7fe f998 	bl	800274a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2202      	movs	r2, #2
 800441e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004428:	b29b      	uxth	r3, r3
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	b29b      	uxth	r3, r3
 800442e:	4619      	mov	r1, r3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f8c1 	bl	80045b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004436:	e09b      	b.n	8004570 <HAL_UART_IRQHandler+0x518>
 8004438:	08004749 	.word	0x08004749
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004444:	b29b      	uxth	r3, r3
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 808e 	beq.w	8004574 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8089 	beq.w	8004574 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	330c      	adds	r3, #12
 8004468:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004474:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004478:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	330c      	adds	r3, #12
 8004482:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004486:	647a      	str	r2, [r7, #68]	@ 0x44
 8004488:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800448c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e3      	bne.n	8004462 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3314      	adds	r3, #20
 80044a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	623b      	str	r3, [r7, #32]
   return(result);
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3314      	adds	r3, #20
 80044ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044be:	633a      	str	r2, [r7, #48]	@ 0x30
 80044c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e3      	bne.n	800449a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	330c      	adds	r3, #12
 80044e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0310 	bic.w	r3, r3, #16
 80044f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004504:	61fa      	str	r2, [r7, #28]
 8004506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	69b9      	ldr	r1, [r7, #24]
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	e841 2300 	strex	r3, r2, [r1]
 8004510:	617b      	str	r3, [r7, #20]
   return(result);
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e3      	bne.n	80044e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800451e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004522:	4619      	mov	r1, r3
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f847 	bl	80045b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800452a:	e023      	b.n	8004574 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800452c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <HAL_UART_IRQHandler+0x4f4>
 8004538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800453c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f913 	bl	8004770 <UART_Transmit_IT>
    return;
 800454a:	e014      	b.n	8004576 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800454c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00e      	beq.n	8004576 <HAL_UART_IRQHandler+0x51e>
 8004558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800455c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f953 	bl	8004810 <UART_EndTransmit_IT>
    return;
 800456a:	e004      	b.n	8004576 <HAL_UART_IRQHandler+0x51e>
    return;
 800456c:	bf00      	nop
 800456e:	e002      	b.n	8004576 <HAL_UART_IRQHandler+0x51e>
      return;
 8004570:	bf00      	nop
 8004572:	e000      	b.n	8004576 <HAL_UART_IRQHandler+0x51e>
      return;
 8004574:	bf00      	nop
  }
}
 8004576:	37e8      	adds	r7, #232	@ 0xe8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e0:	e03b      	b.n	800465a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d037      	beq.n	800465a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ea:	f7fd faf1 	bl	8001bd0 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	6a3a      	ldr	r2, [r7, #32]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <UART_WaitOnFlagUntilTimeout+0x30>
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e03a      	b.n	800467a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b00      	cmp	r3, #0
 8004610:	d023      	beq.n	800465a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b80      	cmp	r3, #128	@ 0x80
 8004616:	d020      	beq.n	800465a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b40      	cmp	r3, #64	@ 0x40
 800461c:	d01d      	beq.n	800465a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b08      	cmp	r3, #8
 800462a:	d116      	bne.n	800465a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 f81d 	bl	8004682 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2208      	movs	r2, #8
 800464c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e00f      	b.n	800467a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4013      	ands	r3, r2
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	429a      	cmp	r2, r3
 8004668:	bf0c      	ite	eq
 800466a:	2301      	moveq	r3, #1
 800466c:	2300      	movne	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	429a      	cmp	r2, r3
 8004676:	d0b4      	beq.n	80045e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004682:	b480      	push	{r7}
 8004684:	b095      	sub	sp, #84	@ 0x54
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	330c      	adds	r3, #12
 8004690:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800469a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80046ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e5      	bne.n	800468a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3314      	adds	r3, #20
 80046c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3314      	adds	r3, #20
 80046dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e5      	bne.n	80046be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d119      	bne.n	800472e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	60bb      	str	r3, [r7, #8]
   return(result);
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f023 0310 	bic.w	r3, r3, #16
 8004710:	647b      	str	r3, [r7, #68]	@ 0x44
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800471a:	61ba      	str	r2, [r7, #24]
 800471c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	6979      	ldr	r1, [r7, #20]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	613b      	str	r3, [r7, #16]
   return(result);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e5      	bne.n	80046fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800473c:	bf00      	nop
 800473e:	3754      	adds	r7, #84	@ 0x54
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004754:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff ff1e 	bl	80045a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004768:	bf00      	nop
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b21      	cmp	r3, #33	@ 0x21
 8004782:	d13e      	bne.n	8004802 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800478c:	d114      	bne.n	80047b8 <UART_Transmit_IT+0x48>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d110      	bne.n	80047b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	1c9a      	adds	r2, r3, #2
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	621a      	str	r2, [r3, #32]
 80047b6:	e008      	b.n	80047ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	1c59      	adds	r1, r3, #1
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6211      	str	r1, [r2, #32]
 80047c2:	781a      	ldrb	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	4619      	mov	r1, r3
 80047d8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10f      	bne.n	80047fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	e000      	b.n	8004804 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004802:	2302      	movs	r3, #2
  }
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004826:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff fea3 	bl	800457c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08c      	sub	sp, #48	@ 0x30
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b22      	cmp	r3, #34	@ 0x22
 8004852:	f040 80ae 	bne.w	80049b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800485e:	d117      	bne.n	8004890 <UART_Receive_IT+0x50>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d113      	bne.n	8004890 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004868:	2300      	movs	r3, #0
 800486a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004870:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	b29b      	uxth	r3, r3
 800487a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487e:	b29a      	uxth	r2, r3
 8004880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004882:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004888:	1c9a      	adds	r2, r3, #2
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	629a      	str	r2, [r3, #40]	@ 0x28
 800488e:	e026      	b.n	80048de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004894:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004896:	2300      	movs	r3, #0
 8004898:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a2:	d007      	beq.n	80048b4 <UART_Receive_IT+0x74>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <UART_Receive_IT+0x82>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d106      	bne.n	80048c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048be:	701a      	strb	r2, [r3, #0]
 80048c0:	e008      	b.n	80048d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	4619      	mov	r1, r3
 80048ec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d15d      	bne.n	80049ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0220 	bic.w	r2, r2, #32
 8004900:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004910:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695a      	ldr	r2, [r3, #20]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0201 	bic.w	r2, r2, #1
 8004920:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004934:	2b01      	cmp	r3, #1
 8004936:	d135      	bne.n	80049a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	613b      	str	r3, [r7, #16]
   return(result);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f023 0310 	bic.w	r3, r3, #16
 8004954:	627b      	str	r3, [r7, #36]	@ 0x24
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	330c      	adds	r3, #12
 800495c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800495e:	623a      	str	r2, [r7, #32]
 8004960:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	69f9      	ldr	r1, [r7, #28]
 8004964:	6a3a      	ldr	r2, [r7, #32]
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	61bb      	str	r3, [r7, #24]
   return(result);
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e5      	bne.n	800493e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b10      	cmp	r3, #16
 800497e:	d10a      	bne.n	8004996 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800499a:	4619      	mov	r1, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff fe0b 	bl	80045b8 <HAL_UARTEx_RxEventCallback>
 80049a2:	e002      	b.n	80049aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff fdf3 	bl	8004590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	e002      	b.n	80049b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e000      	b.n	80049b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80049b2:	2302      	movs	r3, #2
  }
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3730      	adds	r7, #48	@ 0x30
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c0:	b0c0      	sub	sp, #256	@ 0x100
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d8:	68d9      	ldr	r1, [r3, #12]
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	ea40 0301 	orr.w	r3, r0, r1
 80049e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a14:	f021 010c 	bic.w	r1, r1, #12
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a22:	430b      	orrs	r3, r1
 8004a24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a36:	6999      	ldr	r1, [r3, #24]
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	ea40 0301 	orr.w	r3, r0, r1
 8004a42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b8f      	ldr	r3, [pc, #572]	@ (8004c88 <UART_SetConfig+0x2cc>)
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d005      	beq.n	8004a5c <UART_SetConfig+0xa0>
 8004a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4b8d      	ldr	r3, [pc, #564]	@ (8004c8c <UART_SetConfig+0x2d0>)
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d104      	bne.n	8004a66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a5c:	f7fe fd34 	bl	80034c8 <HAL_RCC_GetPCLK2Freq>
 8004a60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a64:	e003      	b.n	8004a6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a66:	f7fe fd1b 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8004a6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a78:	f040 810c 	bne.w	8004c94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a80:	2200      	movs	r2, #0
 8004a82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a8e:	4622      	mov	r2, r4
 8004a90:	462b      	mov	r3, r5
 8004a92:	1891      	adds	r1, r2, r2
 8004a94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a96:	415b      	adcs	r3, r3
 8004a98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	eb12 0801 	adds.w	r8, r2, r1
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	eb43 0901 	adc.w	r9, r3, r1
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ab6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004abe:	4690      	mov	r8, r2
 8004ac0:	4699      	mov	r9, r3
 8004ac2:	4623      	mov	r3, r4
 8004ac4:	eb18 0303 	adds.w	r3, r8, r3
 8004ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004acc:	462b      	mov	r3, r5
 8004ace:	eb49 0303 	adc.w	r3, r9, r3
 8004ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ae2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ae6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004aea:	460b      	mov	r3, r1
 8004aec:	18db      	adds	r3, r3, r3
 8004aee:	653b      	str	r3, [r7, #80]	@ 0x50
 8004af0:	4613      	mov	r3, r2
 8004af2:	eb42 0303 	adc.w	r3, r2, r3
 8004af6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004af8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004afc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b00:	f7fc f8c2 	bl	8000c88 <__aeabi_uldivmod>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4b61      	ldr	r3, [pc, #388]	@ (8004c90 <UART_SetConfig+0x2d4>)
 8004b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	011c      	lsls	r4, r3, #4
 8004b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b24:	4642      	mov	r2, r8
 8004b26:	464b      	mov	r3, r9
 8004b28:	1891      	adds	r1, r2, r2
 8004b2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b2c:	415b      	adcs	r3, r3
 8004b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b34:	4641      	mov	r1, r8
 8004b36:	eb12 0a01 	adds.w	sl, r2, r1
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	eb43 0b01 	adc.w	fp, r3, r1
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b54:	4692      	mov	sl, r2
 8004b56:	469b      	mov	fp, r3
 8004b58:	4643      	mov	r3, r8
 8004b5a:	eb1a 0303 	adds.w	r3, sl, r3
 8004b5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b62:	464b      	mov	r3, r9
 8004b64:	eb4b 0303 	adc.w	r3, fp, r3
 8004b68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b80:	460b      	mov	r3, r1
 8004b82:	18db      	adds	r3, r3, r3
 8004b84:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b86:	4613      	mov	r3, r2
 8004b88:	eb42 0303 	adc.w	r3, r2, r3
 8004b8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b96:	f7fc f877 	bl	8000c88 <__aeabi_uldivmod>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8004c90 <UART_SetConfig+0x2d4>)
 8004ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	2264      	movs	r2, #100	@ 0x64
 8004baa:	fb02 f303 	mul.w	r3, r2, r3
 8004bae:	1acb      	subs	r3, r1, r3
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004bb6:	4b36      	ldr	r3, [pc, #216]	@ (8004c90 <UART_SetConfig+0x2d4>)
 8004bb8:	fba3 2302 	umull	r2, r3, r3, r2
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004bc4:	441c      	add	r4, r3
 8004bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bd0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004bd8:	4642      	mov	r2, r8
 8004bda:	464b      	mov	r3, r9
 8004bdc:	1891      	adds	r1, r2, r2
 8004bde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004be0:	415b      	adcs	r3, r3
 8004be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004be4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004be8:	4641      	mov	r1, r8
 8004bea:	1851      	adds	r1, r2, r1
 8004bec:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bee:	4649      	mov	r1, r9
 8004bf0:	414b      	adcs	r3, r1
 8004bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c00:	4659      	mov	r1, fp
 8004c02:	00cb      	lsls	r3, r1, #3
 8004c04:	4651      	mov	r1, sl
 8004c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c0a:	4651      	mov	r1, sl
 8004c0c:	00ca      	lsls	r2, r1, #3
 8004c0e:	4610      	mov	r0, r2
 8004c10:	4619      	mov	r1, r3
 8004c12:	4603      	mov	r3, r0
 8004c14:	4642      	mov	r2, r8
 8004c16:	189b      	adds	r3, r3, r2
 8004c18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c1c:	464b      	mov	r3, r9
 8004c1e:	460a      	mov	r2, r1
 8004c20:	eb42 0303 	adc.w	r3, r2, r3
 8004c24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	18db      	adds	r3, r3, r3
 8004c40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c42:	4613      	mov	r3, r2
 8004c44:	eb42 0303 	adc.w	r3, r2, r3
 8004c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c52:	f7fc f819 	bl	8000c88 <__aeabi_uldivmod>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c90 <UART_SetConfig+0x2d4>)
 8004c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	2164      	movs	r1, #100	@ 0x64
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	3332      	adds	r3, #50	@ 0x32
 8004c6e:	4a08      	ldr	r2, [pc, #32]	@ (8004c90 <UART_SetConfig+0x2d4>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	f003 0207 	and.w	r2, r3, #7
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4422      	add	r2, r4
 8004c82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c84:	e106      	b.n	8004e94 <UART_SetConfig+0x4d8>
 8004c86:	bf00      	nop
 8004c88:	40011000 	.word	0x40011000
 8004c8c:	40011400 	.word	0x40011400
 8004c90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ca2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ca6:	4642      	mov	r2, r8
 8004ca8:	464b      	mov	r3, r9
 8004caa:	1891      	adds	r1, r2, r2
 8004cac:	6239      	str	r1, [r7, #32]
 8004cae:	415b      	adcs	r3, r3
 8004cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cb6:	4641      	mov	r1, r8
 8004cb8:	1854      	adds	r4, r2, r1
 8004cba:	4649      	mov	r1, r9
 8004cbc:	eb43 0501 	adc.w	r5, r3, r1
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	00eb      	lsls	r3, r5, #3
 8004cca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cce:	00e2      	lsls	r2, r4, #3
 8004cd0:	4614      	mov	r4, r2
 8004cd2:	461d      	mov	r5, r3
 8004cd4:	4643      	mov	r3, r8
 8004cd6:	18e3      	adds	r3, r4, r3
 8004cd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cdc:	464b      	mov	r3, r9
 8004cde:	eb45 0303 	adc.w	r3, r5, r3
 8004ce2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cf2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d02:	4629      	mov	r1, r5
 8004d04:	008b      	lsls	r3, r1, #2
 8004d06:	4621      	mov	r1, r4
 8004d08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	008a      	lsls	r2, r1, #2
 8004d10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d14:	f7fb ffb8 	bl	8000c88 <__aeabi_uldivmod>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4b60      	ldr	r3, [pc, #384]	@ (8004ea0 <UART_SetConfig+0x4e4>)
 8004d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	011c      	lsls	r4, r3, #4
 8004d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d38:	4642      	mov	r2, r8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	1891      	adds	r1, r2, r2
 8004d3e:	61b9      	str	r1, [r7, #24]
 8004d40:	415b      	adcs	r3, r3
 8004d42:	61fb      	str	r3, [r7, #28]
 8004d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d48:	4641      	mov	r1, r8
 8004d4a:	1851      	adds	r1, r2, r1
 8004d4c:	6139      	str	r1, [r7, #16]
 8004d4e:	4649      	mov	r1, r9
 8004d50:	414b      	adcs	r3, r1
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d60:	4659      	mov	r1, fp
 8004d62:	00cb      	lsls	r3, r1, #3
 8004d64:	4651      	mov	r1, sl
 8004d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d6a:	4651      	mov	r1, sl
 8004d6c:	00ca      	lsls	r2, r1, #3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	4619      	mov	r1, r3
 8004d72:	4603      	mov	r3, r0
 8004d74:	4642      	mov	r2, r8
 8004d76:	189b      	adds	r3, r3, r2
 8004d78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	460a      	mov	r2, r1
 8004d80:	eb42 0303 	adc.w	r3, r2, r3
 8004d84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004da0:	4649      	mov	r1, r9
 8004da2:	008b      	lsls	r3, r1, #2
 8004da4:	4641      	mov	r1, r8
 8004da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004daa:	4641      	mov	r1, r8
 8004dac:	008a      	lsls	r2, r1, #2
 8004dae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004db2:	f7fb ff69 	bl	8000c88 <__aeabi_uldivmod>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4611      	mov	r1, r2
 8004dbc:	4b38      	ldr	r3, [pc, #224]	@ (8004ea0 <UART_SetConfig+0x4e4>)
 8004dbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	2264      	movs	r2, #100	@ 0x64
 8004dc6:	fb02 f303 	mul.w	r3, r2, r3
 8004dca:	1acb      	subs	r3, r1, r3
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	3332      	adds	r3, #50	@ 0x32
 8004dd0:	4a33      	ldr	r2, [pc, #204]	@ (8004ea0 <UART_SetConfig+0x4e4>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ddc:	441c      	add	r4, r3
 8004dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004de2:	2200      	movs	r2, #0
 8004de4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004de6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004de8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004dec:	4642      	mov	r2, r8
 8004dee:	464b      	mov	r3, r9
 8004df0:	1891      	adds	r1, r2, r2
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	415b      	adcs	r3, r3
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dfc:	4641      	mov	r1, r8
 8004dfe:	1851      	adds	r1, r2, r1
 8004e00:	6039      	str	r1, [r7, #0]
 8004e02:	4649      	mov	r1, r9
 8004e04:	414b      	adcs	r3, r1
 8004e06:	607b      	str	r3, [r7, #4]
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e14:	4659      	mov	r1, fp
 8004e16:	00cb      	lsls	r3, r1, #3
 8004e18:	4651      	mov	r1, sl
 8004e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e1e:	4651      	mov	r1, sl
 8004e20:	00ca      	lsls	r2, r1, #3
 8004e22:	4610      	mov	r0, r2
 8004e24:	4619      	mov	r1, r3
 8004e26:	4603      	mov	r3, r0
 8004e28:	4642      	mov	r2, r8
 8004e2a:	189b      	adds	r3, r3, r2
 8004e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e2e:	464b      	mov	r3, r9
 8004e30:	460a      	mov	r2, r1
 8004e32:	eb42 0303 	adc.w	r3, r2, r3
 8004e36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e42:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e50:	4649      	mov	r1, r9
 8004e52:	008b      	lsls	r3, r1, #2
 8004e54:	4641      	mov	r1, r8
 8004e56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e5a:	4641      	mov	r1, r8
 8004e5c:	008a      	lsls	r2, r1, #2
 8004e5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e62:	f7fb ff11 	bl	8000c88 <__aeabi_uldivmod>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea0 <UART_SetConfig+0x4e4>)
 8004e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e70:	095b      	lsrs	r3, r3, #5
 8004e72:	2164      	movs	r1, #100	@ 0x64
 8004e74:	fb01 f303 	mul.w	r3, r1, r3
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	3332      	adds	r3, #50	@ 0x32
 8004e7e:	4a08      	ldr	r2, [pc, #32]	@ (8004ea0 <UART_SetConfig+0x4e4>)
 8004e80:	fba2 2303 	umull	r2, r3, r2, r3
 8004e84:	095b      	lsrs	r3, r3, #5
 8004e86:	f003 020f 	and.w	r2, r3, #15
 8004e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4422      	add	r2, r4
 8004e92:	609a      	str	r2, [r3, #8]
}
 8004e94:	bf00      	nop
 8004e96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea0:	51eb851f 	.word	0x51eb851f

08004ea4 <__cvt>:
 8004ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea8:	ec57 6b10 	vmov	r6, r7, d0
 8004eac:	2f00      	cmp	r7, #0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	463b      	mov	r3, r7
 8004eb4:	bfbb      	ittet	lt
 8004eb6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004eba:	461f      	movlt	r7, r3
 8004ebc:	2300      	movge	r3, #0
 8004ebe:	232d      	movlt	r3, #45	@ 0x2d
 8004ec0:	700b      	strb	r3, [r1, #0]
 8004ec2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ec4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004ec8:	4691      	mov	r9, r2
 8004eca:	f023 0820 	bic.w	r8, r3, #32
 8004ece:	bfbc      	itt	lt
 8004ed0:	4632      	movlt	r2, r6
 8004ed2:	4616      	movlt	r6, r2
 8004ed4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ed8:	d005      	beq.n	8004ee6 <__cvt+0x42>
 8004eda:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004ede:	d100      	bne.n	8004ee2 <__cvt+0x3e>
 8004ee0:	3401      	adds	r4, #1
 8004ee2:	2102      	movs	r1, #2
 8004ee4:	e000      	b.n	8004ee8 <__cvt+0x44>
 8004ee6:	2103      	movs	r1, #3
 8004ee8:	ab03      	add	r3, sp, #12
 8004eea:	9301      	str	r3, [sp, #4]
 8004eec:	ab02      	add	r3, sp, #8
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	ec47 6b10 	vmov	d0, r6, r7
 8004ef4:	4653      	mov	r3, sl
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	f001 f8aa 	bl	8006050 <_dtoa_r>
 8004efc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f00:	4605      	mov	r5, r0
 8004f02:	d119      	bne.n	8004f38 <__cvt+0x94>
 8004f04:	f019 0f01 	tst.w	r9, #1
 8004f08:	d00e      	beq.n	8004f28 <__cvt+0x84>
 8004f0a:	eb00 0904 	add.w	r9, r0, r4
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2300      	movs	r3, #0
 8004f12:	4630      	mov	r0, r6
 8004f14:	4639      	mov	r1, r7
 8004f16:	f7fb fdd7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f1a:	b108      	cbz	r0, 8004f20 <__cvt+0x7c>
 8004f1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f20:	2230      	movs	r2, #48	@ 0x30
 8004f22:	9b03      	ldr	r3, [sp, #12]
 8004f24:	454b      	cmp	r3, r9
 8004f26:	d31e      	bcc.n	8004f66 <__cvt+0xc2>
 8004f28:	9b03      	ldr	r3, [sp, #12]
 8004f2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f2c:	1b5b      	subs	r3, r3, r5
 8004f2e:	4628      	mov	r0, r5
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	b004      	add	sp, #16
 8004f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f3c:	eb00 0904 	add.w	r9, r0, r4
 8004f40:	d1e5      	bne.n	8004f0e <__cvt+0x6a>
 8004f42:	7803      	ldrb	r3, [r0, #0]
 8004f44:	2b30      	cmp	r3, #48	@ 0x30
 8004f46:	d10a      	bne.n	8004f5e <__cvt+0xba>
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	4639      	mov	r1, r7
 8004f50:	f7fb fdba 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f54:	b918      	cbnz	r0, 8004f5e <__cvt+0xba>
 8004f56:	f1c4 0401 	rsb	r4, r4, #1
 8004f5a:	f8ca 4000 	str.w	r4, [sl]
 8004f5e:	f8da 3000 	ldr.w	r3, [sl]
 8004f62:	4499      	add	r9, r3
 8004f64:	e7d3      	b.n	8004f0e <__cvt+0x6a>
 8004f66:	1c59      	adds	r1, r3, #1
 8004f68:	9103      	str	r1, [sp, #12]
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	e7d9      	b.n	8004f22 <__cvt+0x7e>

08004f6e <__exponent>:
 8004f6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f70:	2900      	cmp	r1, #0
 8004f72:	bfba      	itte	lt
 8004f74:	4249      	neglt	r1, r1
 8004f76:	232d      	movlt	r3, #45	@ 0x2d
 8004f78:	232b      	movge	r3, #43	@ 0x2b
 8004f7a:	2909      	cmp	r1, #9
 8004f7c:	7002      	strb	r2, [r0, #0]
 8004f7e:	7043      	strb	r3, [r0, #1]
 8004f80:	dd29      	ble.n	8004fd6 <__exponent+0x68>
 8004f82:	f10d 0307 	add.w	r3, sp, #7
 8004f86:	461d      	mov	r5, r3
 8004f88:	270a      	movs	r7, #10
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f90:	fb07 1416 	mls	r4, r7, r6, r1
 8004f94:	3430      	adds	r4, #48	@ 0x30
 8004f96:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	2c63      	cmp	r4, #99	@ 0x63
 8004f9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	dcf1      	bgt.n	8004f8a <__exponent+0x1c>
 8004fa6:	3130      	adds	r1, #48	@ 0x30
 8004fa8:	1e94      	subs	r4, r2, #2
 8004faa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004fae:	1c41      	adds	r1, r0, #1
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	42ab      	cmp	r3, r5
 8004fb4:	d30a      	bcc.n	8004fcc <__exponent+0x5e>
 8004fb6:	f10d 0309 	add.w	r3, sp, #9
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	42ac      	cmp	r4, r5
 8004fbe:	bf88      	it	hi
 8004fc0:	2300      	movhi	r3, #0
 8004fc2:	3302      	adds	r3, #2
 8004fc4:	4403      	add	r3, r0
 8004fc6:	1a18      	subs	r0, r3, r0
 8004fc8:	b003      	add	sp, #12
 8004fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fcc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004fd0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004fd4:	e7ed      	b.n	8004fb2 <__exponent+0x44>
 8004fd6:	2330      	movs	r3, #48	@ 0x30
 8004fd8:	3130      	adds	r1, #48	@ 0x30
 8004fda:	7083      	strb	r3, [r0, #2]
 8004fdc:	70c1      	strb	r1, [r0, #3]
 8004fde:	1d03      	adds	r3, r0, #4
 8004fe0:	e7f1      	b.n	8004fc6 <__exponent+0x58>
	...

08004fe4 <_printf_float>:
 8004fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe8:	b08d      	sub	sp, #52	@ 0x34
 8004fea:	460c      	mov	r4, r1
 8004fec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004ff0:	4616      	mov	r6, r2
 8004ff2:	461f      	mov	r7, r3
 8004ff4:	4605      	mov	r5, r0
 8004ff6:	f000 ff23 	bl	8005e40 <_localeconv_r>
 8004ffa:	6803      	ldr	r3, [r0, #0]
 8004ffc:	9304      	str	r3, [sp, #16]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fb f936 	bl	8000270 <strlen>
 8005004:	2300      	movs	r3, #0
 8005006:	930a      	str	r3, [sp, #40]	@ 0x28
 8005008:	f8d8 3000 	ldr.w	r3, [r8]
 800500c:	9005      	str	r0, [sp, #20]
 800500e:	3307      	adds	r3, #7
 8005010:	f023 0307 	bic.w	r3, r3, #7
 8005014:	f103 0208 	add.w	r2, r3, #8
 8005018:	f894 a018 	ldrb.w	sl, [r4, #24]
 800501c:	f8d4 b000 	ldr.w	fp, [r4]
 8005020:	f8c8 2000 	str.w	r2, [r8]
 8005024:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005028:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800502c:	9307      	str	r3, [sp, #28]
 800502e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005032:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800503a:	4b9c      	ldr	r3, [pc, #624]	@ (80052ac <_printf_float+0x2c8>)
 800503c:	f04f 32ff 	mov.w	r2, #4294967295
 8005040:	f7fb fd74 	bl	8000b2c <__aeabi_dcmpun>
 8005044:	bb70      	cbnz	r0, 80050a4 <_printf_float+0xc0>
 8005046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800504a:	4b98      	ldr	r3, [pc, #608]	@ (80052ac <_printf_float+0x2c8>)
 800504c:	f04f 32ff 	mov.w	r2, #4294967295
 8005050:	f7fb fd4e 	bl	8000af0 <__aeabi_dcmple>
 8005054:	bb30      	cbnz	r0, 80050a4 <_printf_float+0xc0>
 8005056:	2200      	movs	r2, #0
 8005058:	2300      	movs	r3, #0
 800505a:	4640      	mov	r0, r8
 800505c:	4649      	mov	r1, r9
 800505e:	f7fb fd3d 	bl	8000adc <__aeabi_dcmplt>
 8005062:	b110      	cbz	r0, 800506a <_printf_float+0x86>
 8005064:	232d      	movs	r3, #45	@ 0x2d
 8005066:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800506a:	4a91      	ldr	r2, [pc, #580]	@ (80052b0 <_printf_float+0x2cc>)
 800506c:	4b91      	ldr	r3, [pc, #580]	@ (80052b4 <_printf_float+0x2d0>)
 800506e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005072:	bf94      	ite	ls
 8005074:	4690      	movls	r8, r2
 8005076:	4698      	movhi	r8, r3
 8005078:	2303      	movs	r3, #3
 800507a:	6123      	str	r3, [r4, #16]
 800507c:	f02b 0304 	bic.w	r3, fp, #4
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	f04f 0900 	mov.w	r9, #0
 8005086:	9700      	str	r7, [sp, #0]
 8005088:	4633      	mov	r3, r6
 800508a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800508c:	4621      	mov	r1, r4
 800508e:	4628      	mov	r0, r5
 8005090:	f000 f9d2 	bl	8005438 <_printf_common>
 8005094:	3001      	adds	r0, #1
 8005096:	f040 808d 	bne.w	80051b4 <_printf_float+0x1d0>
 800509a:	f04f 30ff 	mov.w	r0, #4294967295
 800509e:	b00d      	add	sp, #52	@ 0x34
 80050a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	4640      	mov	r0, r8
 80050aa:	4649      	mov	r1, r9
 80050ac:	f7fb fd3e 	bl	8000b2c <__aeabi_dcmpun>
 80050b0:	b140      	cbz	r0, 80050c4 <_printf_float+0xe0>
 80050b2:	464b      	mov	r3, r9
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	bfbc      	itt	lt
 80050b8:	232d      	movlt	r3, #45	@ 0x2d
 80050ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80050be:	4a7e      	ldr	r2, [pc, #504]	@ (80052b8 <_printf_float+0x2d4>)
 80050c0:	4b7e      	ldr	r3, [pc, #504]	@ (80052bc <_printf_float+0x2d8>)
 80050c2:	e7d4      	b.n	800506e <_printf_float+0x8a>
 80050c4:	6863      	ldr	r3, [r4, #4]
 80050c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80050ca:	9206      	str	r2, [sp, #24]
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	d13b      	bne.n	8005148 <_printf_float+0x164>
 80050d0:	2306      	movs	r3, #6
 80050d2:	6063      	str	r3, [r4, #4]
 80050d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80050d8:	2300      	movs	r3, #0
 80050da:	6022      	str	r2, [r4, #0]
 80050dc:	9303      	str	r3, [sp, #12]
 80050de:	ab0a      	add	r3, sp, #40	@ 0x28
 80050e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80050e4:	ab09      	add	r3, sp, #36	@ 0x24
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	6861      	ldr	r1, [r4, #4]
 80050ea:	ec49 8b10 	vmov	d0, r8, r9
 80050ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80050f2:	4628      	mov	r0, r5
 80050f4:	f7ff fed6 	bl	8004ea4 <__cvt>
 80050f8:	9b06      	ldr	r3, [sp, #24]
 80050fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80050fc:	2b47      	cmp	r3, #71	@ 0x47
 80050fe:	4680      	mov	r8, r0
 8005100:	d129      	bne.n	8005156 <_printf_float+0x172>
 8005102:	1cc8      	adds	r0, r1, #3
 8005104:	db02      	blt.n	800510c <_printf_float+0x128>
 8005106:	6863      	ldr	r3, [r4, #4]
 8005108:	4299      	cmp	r1, r3
 800510a:	dd41      	ble.n	8005190 <_printf_float+0x1ac>
 800510c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005110:	fa5f fa8a 	uxtb.w	sl, sl
 8005114:	3901      	subs	r1, #1
 8005116:	4652      	mov	r2, sl
 8005118:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800511c:	9109      	str	r1, [sp, #36]	@ 0x24
 800511e:	f7ff ff26 	bl	8004f6e <__exponent>
 8005122:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005124:	1813      	adds	r3, r2, r0
 8005126:	2a01      	cmp	r2, #1
 8005128:	4681      	mov	r9, r0
 800512a:	6123      	str	r3, [r4, #16]
 800512c:	dc02      	bgt.n	8005134 <_printf_float+0x150>
 800512e:	6822      	ldr	r2, [r4, #0]
 8005130:	07d2      	lsls	r2, r2, #31
 8005132:	d501      	bpl.n	8005138 <_printf_float+0x154>
 8005134:	3301      	adds	r3, #1
 8005136:	6123      	str	r3, [r4, #16]
 8005138:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0a2      	beq.n	8005086 <_printf_float+0xa2>
 8005140:	232d      	movs	r3, #45	@ 0x2d
 8005142:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005146:	e79e      	b.n	8005086 <_printf_float+0xa2>
 8005148:	9a06      	ldr	r2, [sp, #24]
 800514a:	2a47      	cmp	r2, #71	@ 0x47
 800514c:	d1c2      	bne.n	80050d4 <_printf_float+0xf0>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1c0      	bne.n	80050d4 <_printf_float+0xf0>
 8005152:	2301      	movs	r3, #1
 8005154:	e7bd      	b.n	80050d2 <_printf_float+0xee>
 8005156:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800515a:	d9db      	bls.n	8005114 <_printf_float+0x130>
 800515c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005160:	d118      	bne.n	8005194 <_printf_float+0x1b0>
 8005162:	2900      	cmp	r1, #0
 8005164:	6863      	ldr	r3, [r4, #4]
 8005166:	dd0b      	ble.n	8005180 <_printf_float+0x19c>
 8005168:	6121      	str	r1, [r4, #16]
 800516a:	b913      	cbnz	r3, 8005172 <_printf_float+0x18e>
 800516c:	6822      	ldr	r2, [r4, #0]
 800516e:	07d0      	lsls	r0, r2, #31
 8005170:	d502      	bpl.n	8005178 <_printf_float+0x194>
 8005172:	3301      	adds	r3, #1
 8005174:	440b      	add	r3, r1
 8005176:	6123      	str	r3, [r4, #16]
 8005178:	65a1      	str	r1, [r4, #88]	@ 0x58
 800517a:	f04f 0900 	mov.w	r9, #0
 800517e:	e7db      	b.n	8005138 <_printf_float+0x154>
 8005180:	b913      	cbnz	r3, 8005188 <_printf_float+0x1a4>
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	07d2      	lsls	r2, r2, #31
 8005186:	d501      	bpl.n	800518c <_printf_float+0x1a8>
 8005188:	3302      	adds	r3, #2
 800518a:	e7f4      	b.n	8005176 <_printf_float+0x192>
 800518c:	2301      	movs	r3, #1
 800518e:	e7f2      	b.n	8005176 <_printf_float+0x192>
 8005190:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005196:	4299      	cmp	r1, r3
 8005198:	db05      	blt.n	80051a6 <_printf_float+0x1c2>
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	6121      	str	r1, [r4, #16]
 800519e:	07d8      	lsls	r0, r3, #31
 80051a0:	d5ea      	bpl.n	8005178 <_printf_float+0x194>
 80051a2:	1c4b      	adds	r3, r1, #1
 80051a4:	e7e7      	b.n	8005176 <_printf_float+0x192>
 80051a6:	2900      	cmp	r1, #0
 80051a8:	bfd4      	ite	le
 80051aa:	f1c1 0202 	rsble	r2, r1, #2
 80051ae:	2201      	movgt	r2, #1
 80051b0:	4413      	add	r3, r2
 80051b2:	e7e0      	b.n	8005176 <_printf_float+0x192>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	055a      	lsls	r2, r3, #21
 80051b8:	d407      	bmi.n	80051ca <_printf_float+0x1e6>
 80051ba:	6923      	ldr	r3, [r4, #16]
 80051bc:	4642      	mov	r2, r8
 80051be:	4631      	mov	r1, r6
 80051c0:	4628      	mov	r0, r5
 80051c2:	47b8      	blx	r7
 80051c4:	3001      	adds	r0, #1
 80051c6:	d12b      	bne.n	8005220 <_printf_float+0x23c>
 80051c8:	e767      	b.n	800509a <_printf_float+0xb6>
 80051ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051ce:	f240 80dd 	bls.w	800538c <_printf_float+0x3a8>
 80051d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80051d6:	2200      	movs	r2, #0
 80051d8:	2300      	movs	r3, #0
 80051da:	f7fb fc75 	bl	8000ac8 <__aeabi_dcmpeq>
 80051de:	2800      	cmp	r0, #0
 80051e0:	d033      	beq.n	800524a <_printf_float+0x266>
 80051e2:	4a37      	ldr	r2, [pc, #220]	@ (80052c0 <_printf_float+0x2dc>)
 80051e4:	2301      	movs	r3, #1
 80051e6:	4631      	mov	r1, r6
 80051e8:	4628      	mov	r0, r5
 80051ea:	47b8      	blx	r7
 80051ec:	3001      	adds	r0, #1
 80051ee:	f43f af54 	beq.w	800509a <_printf_float+0xb6>
 80051f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80051f6:	4543      	cmp	r3, r8
 80051f8:	db02      	blt.n	8005200 <_printf_float+0x21c>
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	07d8      	lsls	r0, r3, #31
 80051fe:	d50f      	bpl.n	8005220 <_printf_float+0x23c>
 8005200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005204:	4631      	mov	r1, r6
 8005206:	4628      	mov	r0, r5
 8005208:	47b8      	blx	r7
 800520a:	3001      	adds	r0, #1
 800520c:	f43f af45 	beq.w	800509a <_printf_float+0xb6>
 8005210:	f04f 0900 	mov.w	r9, #0
 8005214:	f108 38ff 	add.w	r8, r8, #4294967295
 8005218:	f104 0a1a 	add.w	sl, r4, #26
 800521c:	45c8      	cmp	r8, r9
 800521e:	dc09      	bgt.n	8005234 <_printf_float+0x250>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	079b      	lsls	r3, r3, #30
 8005224:	f100 8103 	bmi.w	800542e <_printf_float+0x44a>
 8005228:	68e0      	ldr	r0, [r4, #12]
 800522a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800522c:	4298      	cmp	r0, r3
 800522e:	bfb8      	it	lt
 8005230:	4618      	movlt	r0, r3
 8005232:	e734      	b.n	800509e <_printf_float+0xba>
 8005234:	2301      	movs	r3, #1
 8005236:	4652      	mov	r2, sl
 8005238:	4631      	mov	r1, r6
 800523a:	4628      	mov	r0, r5
 800523c:	47b8      	blx	r7
 800523e:	3001      	adds	r0, #1
 8005240:	f43f af2b 	beq.w	800509a <_printf_float+0xb6>
 8005244:	f109 0901 	add.w	r9, r9, #1
 8005248:	e7e8      	b.n	800521c <_printf_float+0x238>
 800524a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800524c:	2b00      	cmp	r3, #0
 800524e:	dc39      	bgt.n	80052c4 <_printf_float+0x2e0>
 8005250:	4a1b      	ldr	r2, [pc, #108]	@ (80052c0 <_printf_float+0x2dc>)
 8005252:	2301      	movs	r3, #1
 8005254:	4631      	mov	r1, r6
 8005256:	4628      	mov	r0, r5
 8005258:	47b8      	blx	r7
 800525a:	3001      	adds	r0, #1
 800525c:	f43f af1d 	beq.w	800509a <_printf_float+0xb6>
 8005260:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005264:	ea59 0303 	orrs.w	r3, r9, r3
 8005268:	d102      	bne.n	8005270 <_printf_float+0x28c>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	07d9      	lsls	r1, r3, #31
 800526e:	d5d7      	bpl.n	8005220 <_printf_float+0x23c>
 8005270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005274:	4631      	mov	r1, r6
 8005276:	4628      	mov	r0, r5
 8005278:	47b8      	blx	r7
 800527a:	3001      	adds	r0, #1
 800527c:	f43f af0d 	beq.w	800509a <_printf_float+0xb6>
 8005280:	f04f 0a00 	mov.w	sl, #0
 8005284:	f104 0b1a 	add.w	fp, r4, #26
 8005288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800528a:	425b      	negs	r3, r3
 800528c:	4553      	cmp	r3, sl
 800528e:	dc01      	bgt.n	8005294 <_printf_float+0x2b0>
 8005290:	464b      	mov	r3, r9
 8005292:	e793      	b.n	80051bc <_printf_float+0x1d8>
 8005294:	2301      	movs	r3, #1
 8005296:	465a      	mov	r2, fp
 8005298:	4631      	mov	r1, r6
 800529a:	4628      	mov	r0, r5
 800529c:	47b8      	blx	r7
 800529e:	3001      	adds	r0, #1
 80052a0:	f43f aefb 	beq.w	800509a <_printf_float+0xb6>
 80052a4:	f10a 0a01 	add.w	sl, sl, #1
 80052a8:	e7ee      	b.n	8005288 <_printf_float+0x2a4>
 80052aa:	bf00      	nop
 80052ac:	7fefffff 	.word	0x7fefffff
 80052b0:	0800970c 	.word	0x0800970c
 80052b4:	08009710 	.word	0x08009710
 80052b8:	08009714 	.word	0x08009714
 80052bc:	08009718 	.word	0x08009718
 80052c0:	0800971c 	.word	0x0800971c
 80052c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80052ca:	4553      	cmp	r3, sl
 80052cc:	bfa8      	it	ge
 80052ce:	4653      	movge	r3, sl
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	4699      	mov	r9, r3
 80052d4:	dc36      	bgt.n	8005344 <_printf_float+0x360>
 80052d6:	f04f 0b00 	mov.w	fp, #0
 80052da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052de:	f104 021a 	add.w	r2, r4, #26
 80052e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052e4:	9306      	str	r3, [sp, #24]
 80052e6:	eba3 0309 	sub.w	r3, r3, r9
 80052ea:	455b      	cmp	r3, fp
 80052ec:	dc31      	bgt.n	8005352 <_printf_float+0x36e>
 80052ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052f0:	459a      	cmp	sl, r3
 80052f2:	dc3a      	bgt.n	800536a <_printf_float+0x386>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	07da      	lsls	r2, r3, #31
 80052f8:	d437      	bmi.n	800536a <_printf_float+0x386>
 80052fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052fc:	ebaa 0903 	sub.w	r9, sl, r3
 8005300:	9b06      	ldr	r3, [sp, #24]
 8005302:	ebaa 0303 	sub.w	r3, sl, r3
 8005306:	4599      	cmp	r9, r3
 8005308:	bfa8      	it	ge
 800530a:	4699      	movge	r9, r3
 800530c:	f1b9 0f00 	cmp.w	r9, #0
 8005310:	dc33      	bgt.n	800537a <_printf_float+0x396>
 8005312:	f04f 0800 	mov.w	r8, #0
 8005316:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800531a:	f104 0b1a 	add.w	fp, r4, #26
 800531e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005320:	ebaa 0303 	sub.w	r3, sl, r3
 8005324:	eba3 0309 	sub.w	r3, r3, r9
 8005328:	4543      	cmp	r3, r8
 800532a:	f77f af79 	ble.w	8005220 <_printf_float+0x23c>
 800532e:	2301      	movs	r3, #1
 8005330:	465a      	mov	r2, fp
 8005332:	4631      	mov	r1, r6
 8005334:	4628      	mov	r0, r5
 8005336:	47b8      	blx	r7
 8005338:	3001      	adds	r0, #1
 800533a:	f43f aeae 	beq.w	800509a <_printf_float+0xb6>
 800533e:	f108 0801 	add.w	r8, r8, #1
 8005342:	e7ec      	b.n	800531e <_printf_float+0x33a>
 8005344:	4642      	mov	r2, r8
 8005346:	4631      	mov	r1, r6
 8005348:	4628      	mov	r0, r5
 800534a:	47b8      	blx	r7
 800534c:	3001      	adds	r0, #1
 800534e:	d1c2      	bne.n	80052d6 <_printf_float+0x2f2>
 8005350:	e6a3      	b.n	800509a <_printf_float+0xb6>
 8005352:	2301      	movs	r3, #1
 8005354:	4631      	mov	r1, r6
 8005356:	4628      	mov	r0, r5
 8005358:	9206      	str	r2, [sp, #24]
 800535a:	47b8      	blx	r7
 800535c:	3001      	adds	r0, #1
 800535e:	f43f ae9c 	beq.w	800509a <_printf_float+0xb6>
 8005362:	9a06      	ldr	r2, [sp, #24]
 8005364:	f10b 0b01 	add.w	fp, fp, #1
 8005368:	e7bb      	b.n	80052e2 <_printf_float+0x2fe>
 800536a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800536e:	4631      	mov	r1, r6
 8005370:	4628      	mov	r0, r5
 8005372:	47b8      	blx	r7
 8005374:	3001      	adds	r0, #1
 8005376:	d1c0      	bne.n	80052fa <_printf_float+0x316>
 8005378:	e68f      	b.n	800509a <_printf_float+0xb6>
 800537a:	9a06      	ldr	r2, [sp, #24]
 800537c:	464b      	mov	r3, r9
 800537e:	4442      	add	r2, r8
 8005380:	4631      	mov	r1, r6
 8005382:	4628      	mov	r0, r5
 8005384:	47b8      	blx	r7
 8005386:	3001      	adds	r0, #1
 8005388:	d1c3      	bne.n	8005312 <_printf_float+0x32e>
 800538a:	e686      	b.n	800509a <_printf_float+0xb6>
 800538c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005390:	f1ba 0f01 	cmp.w	sl, #1
 8005394:	dc01      	bgt.n	800539a <_printf_float+0x3b6>
 8005396:	07db      	lsls	r3, r3, #31
 8005398:	d536      	bpl.n	8005408 <_printf_float+0x424>
 800539a:	2301      	movs	r3, #1
 800539c:	4642      	mov	r2, r8
 800539e:	4631      	mov	r1, r6
 80053a0:	4628      	mov	r0, r5
 80053a2:	47b8      	blx	r7
 80053a4:	3001      	adds	r0, #1
 80053a6:	f43f ae78 	beq.w	800509a <_printf_float+0xb6>
 80053aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ae:	4631      	mov	r1, r6
 80053b0:	4628      	mov	r0, r5
 80053b2:	47b8      	blx	r7
 80053b4:	3001      	adds	r0, #1
 80053b6:	f43f ae70 	beq.w	800509a <_printf_float+0xb6>
 80053ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80053be:	2200      	movs	r2, #0
 80053c0:	2300      	movs	r3, #0
 80053c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053c6:	f7fb fb7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80053ca:	b9c0      	cbnz	r0, 80053fe <_printf_float+0x41a>
 80053cc:	4653      	mov	r3, sl
 80053ce:	f108 0201 	add.w	r2, r8, #1
 80053d2:	4631      	mov	r1, r6
 80053d4:	4628      	mov	r0, r5
 80053d6:	47b8      	blx	r7
 80053d8:	3001      	adds	r0, #1
 80053da:	d10c      	bne.n	80053f6 <_printf_float+0x412>
 80053dc:	e65d      	b.n	800509a <_printf_float+0xb6>
 80053de:	2301      	movs	r3, #1
 80053e0:	465a      	mov	r2, fp
 80053e2:	4631      	mov	r1, r6
 80053e4:	4628      	mov	r0, r5
 80053e6:	47b8      	blx	r7
 80053e8:	3001      	adds	r0, #1
 80053ea:	f43f ae56 	beq.w	800509a <_printf_float+0xb6>
 80053ee:	f108 0801 	add.w	r8, r8, #1
 80053f2:	45d0      	cmp	r8, sl
 80053f4:	dbf3      	blt.n	80053de <_printf_float+0x3fa>
 80053f6:	464b      	mov	r3, r9
 80053f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80053fc:	e6df      	b.n	80051be <_printf_float+0x1da>
 80053fe:	f04f 0800 	mov.w	r8, #0
 8005402:	f104 0b1a 	add.w	fp, r4, #26
 8005406:	e7f4      	b.n	80053f2 <_printf_float+0x40e>
 8005408:	2301      	movs	r3, #1
 800540a:	4642      	mov	r2, r8
 800540c:	e7e1      	b.n	80053d2 <_printf_float+0x3ee>
 800540e:	2301      	movs	r3, #1
 8005410:	464a      	mov	r2, r9
 8005412:	4631      	mov	r1, r6
 8005414:	4628      	mov	r0, r5
 8005416:	47b8      	blx	r7
 8005418:	3001      	adds	r0, #1
 800541a:	f43f ae3e 	beq.w	800509a <_printf_float+0xb6>
 800541e:	f108 0801 	add.w	r8, r8, #1
 8005422:	68e3      	ldr	r3, [r4, #12]
 8005424:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005426:	1a5b      	subs	r3, r3, r1
 8005428:	4543      	cmp	r3, r8
 800542a:	dcf0      	bgt.n	800540e <_printf_float+0x42a>
 800542c:	e6fc      	b.n	8005228 <_printf_float+0x244>
 800542e:	f04f 0800 	mov.w	r8, #0
 8005432:	f104 0919 	add.w	r9, r4, #25
 8005436:	e7f4      	b.n	8005422 <_printf_float+0x43e>

08005438 <_printf_common>:
 8005438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800543c:	4616      	mov	r6, r2
 800543e:	4698      	mov	r8, r3
 8005440:	688a      	ldr	r2, [r1, #8]
 8005442:	690b      	ldr	r3, [r1, #16]
 8005444:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005448:	4293      	cmp	r3, r2
 800544a:	bfb8      	it	lt
 800544c:	4613      	movlt	r3, r2
 800544e:	6033      	str	r3, [r6, #0]
 8005450:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005454:	4607      	mov	r7, r0
 8005456:	460c      	mov	r4, r1
 8005458:	b10a      	cbz	r2, 800545e <_printf_common+0x26>
 800545a:	3301      	adds	r3, #1
 800545c:	6033      	str	r3, [r6, #0]
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	0699      	lsls	r1, r3, #26
 8005462:	bf42      	ittt	mi
 8005464:	6833      	ldrmi	r3, [r6, #0]
 8005466:	3302      	addmi	r3, #2
 8005468:	6033      	strmi	r3, [r6, #0]
 800546a:	6825      	ldr	r5, [r4, #0]
 800546c:	f015 0506 	ands.w	r5, r5, #6
 8005470:	d106      	bne.n	8005480 <_printf_common+0x48>
 8005472:	f104 0a19 	add.w	sl, r4, #25
 8005476:	68e3      	ldr	r3, [r4, #12]
 8005478:	6832      	ldr	r2, [r6, #0]
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	42ab      	cmp	r3, r5
 800547e:	dc26      	bgt.n	80054ce <_printf_common+0x96>
 8005480:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005484:	6822      	ldr	r2, [r4, #0]
 8005486:	3b00      	subs	r3, #0
 8005488:	bf18      	it	ne
 800548a:	2301      	movne	r3, #1
 800548c:	0692      	lsls	r2, r2, #26
 800548e:	d42b      	bmi.n	80054e8 <_printf_common+0xb0>
 8005490:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005494:	4641      	mov	r1, r8
 8005496:	4638      	mov	r0, r7
 8005498:	47c8      	blx	r9
 800549a:	3001      	adds	r0, #1
 800549c:	d01e      	beq.n	80054dc <_printf_common+0xa4>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	6922      	ldr	r2, [r4, #16]
 80054a2:	f003 0306 	and.w	r3, r3, #6
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	bf02      	ittt	eq
 80054aa:	68e5      	ldreq	r5, [r4, #12]
 80054ac:	6833      	ldreq	r3, [r6, #0]
 80054ae:	1aed      	subeq	r5, r5, r3
 80054b0:	68a3      	ldr	r3, [r4, #8]
 80054b2:	bf0c      	ite	eq
 80054b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054b8:	2500      	movne	r5, #0
 80054ba:	4293      	cmp	r3, r2
 80054bc:	bfc4      	itt	gt
 80054be:	1a9b      	subgt	r3, r3, r2
 80054c0:	18ed      	addgt	r5, r5, r3
 80054c2:	2600      	movs	r6, #0
 80054c4:	341a      	adds	r4, #26
 80054c6:	42b5      	cmp	r5, r6
 80054c8:	d11a      	bne.n	8005500 <_printf_common+0xc8>
 80054ca:	2000      	movs	r0, #0
 80054cc:	e008      	b.n	80054e0 <_printf_common+0xa8>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4652      	mov	r2, sl
 80054d2:	4641      	mov	r1, r8
 80054d4:	4638      	mov	r0, r7
 80054d6:	47c8      	blx	r9
 80054d8:	3001      	adds	r0, #1
 80054da:	d103      	bne.n	80054e4 <_printf_common+0xac>
 80054dc:	f04f 30ff 	mov.w	r0, #4294967295
 80054e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e4:	3501      	adds	r5, #1
 80054e6:	e7c6      	b.n	8005476 <_printf_common+0x3e>
 80054e8:	18e1      	adds	r1, r4, r3
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	2030      	movs	r0, #48	@ 0x30
 80054ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054f2:	4422      	add	r2, r4
 80054f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054fc:	3302      	adds	r3, #2
 80054fe:	e7c7      	b.n	8005490 <_printf_common+0x58>
 8005500:	2301      	movs	r3, #1
 8005502:	4622      	mov	r2, r4
 8005504:	4641      	mov	r1, r8
 8005506:	4638      	mov	r0, r7
 8005508:	47c8      	blx	r9
 800550a:	3001      	adds	r0, #1
 800550c:	d0e6      	beq.n	80054dc <_printf_common+0xa4>
 800550e:	3601      	adds	r6, #1
 8005510:	e7d9      	b.n	80054c6 <_printf_common+0x8e>
	...

08005514 <_printf_i>:
 8005514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005518:	7e0f      	ldrb	r7, [r1, #24]
 800551a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800551c:	2f78      	cmp	r7, #120	@ 0x78
 800551e:	4691      	mov	r9, r2
 8005520:	4680      	mov	r8, r0
 8005522:	460c      	mov	r4, r1
 8005524:	469a      	mov	sl, r3
 8005526:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800552a:	d807      	bhi.n	800553c <_printf_i+0x28>
 800552c:	2f62      	cmp	r7, #98	@ 0x62
 800552e:	d80a      	bhi.n	8005546 <_printf_i+0x32>
 8005530:	2f00      	cmp	r7, #0
 8005532:	f000 80d2 	beq.w	80056da <_printf_i+0x1c6>
 8005536:	2f58      	cmp	r7, #88	@ 0x58
 8005538:	f000 80b9 	beq.w	80056ae <_printf_i+0x19a>
 800553c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005540:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005544:	e03a      	b.n	80055bc <_printf_i+0xa8>
 8005546:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800554a:	2b15      	cmp	r3, #21
 800554c:	d8f6      	bhi.n	800553c <_printf_i+0x28>
 800554e:	a101      	add	r1, pc, #4	@ (adr r1, 8005554 <_printf_i+0x40>)
 8005550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005554:	080055ad 	.word	0x080055ad
 8005558:	080055c1 	.word	0x080055c1
 800555c:	0800553d 	.word	0x0800553d
 8005560:	0800553d 	.word	0x0800553d
 8005564:	0800553d 	.word	0x0800553d
 8005568:	0800553d 	.word	0x0800553d
 800556c:	080055c1 	.word	0x080055c1
 8005570:	0800553d 	.word	0x0800553d
 8005574:	0800553d 	.word	0x0800553d
 8005578:	0800553d 	.word	0x0800553d
 800557c:	0800553d 	.word	0x0800553d
 8005580:	080056c1 	.word	0x080056c1
 8005584:	080055eb 	.word	0x080055eb
 8005588:	0800567b 	.word	0x0800567b
 800558c:	0800553d 	.word	0x0800553d
 8005590:	0800553d 	.word	0x0800553d
 8005594:	080056e3 	.word	0x080056e3
 8005598:	0800553d 	.word	0x0800553d
 800559c:	080055eb 	.word	0x080055eb
 80055a0:	0800553d 	.word	0x0800553d
 80055a4:	0800553d 	.word	0x0800553d
 80055a8:	08005683 	.word	0x08005683
 80055ac:	6833      	ldr	r3, [r6, #0]
 80055ae:	1d1a      	adds	r2, r3, #4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6032      	str	r2, [r6, #0]
 80055b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055bc:	2301      	movs	r3, #1
 80055be:	e09d      	b.n	80056fc <_printf_i+0x1e8>
 80055c0:	6833      	ldr	r3, [r6, #0]
 80055c2:	6820      	ldr	r0, [r4, #0]
 80055c4:	1d19      	adds	r1, r3, #4
 80055c6:	6031      	str	r1, [r6, #0]
 80055c8:	0606      	lsls	r6, r0, #24
 80055ca:	d501      	bpl.n	80055d0 <_printf_i+0xbc>
 80055cc:	681d      	ldr	r5, [r3, #0]
 80055ce:	e003      	b.n	80055d8 <_printf_i+0xc4>
 80055d0:	0645      	lsls	r5, r0, #25
 80055d2:	d5fb      	bpl.n	80055cc <_printf_i+0xb8>
 80055d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055d8:	2d00      	cmp	r5, #0
 80055da:	da03      	bge.n	80055e4 <_printf_i+0xd0>
 80055dc:	232d      	movs	r3, #45	@ 0x2d
 80055de:	426d      	negs	r5, r5
 80055e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055e4:	4859      	ldr	r0, [pc, #356]	@ (800574c <_printf_i+0x238>)
 80055e6:	230a      	movs	r3, #10
 80055e8:	e011      	b.n	800560e <_printf_i+0xfa>
 80055ea:	6821      	ldr	r1, [r4, #0]
 80055ec:	6833      	ldr	r3, [r6, #0]
 80055ee:	0608      	lsls	r0, r1, #24
 80055f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80055f4:	d402      	bmi.n	80055fc <_printf_i+0xe8>
 80055f6:	0649      	lsls	r1, r1, #25
 80055f8:	bf48      	it	mi
 80055fa:	b2ad      	uxthmi	r5, r5
 80055fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80055fe:	4853      	ldr	r0, [pc, #332]	@ (800574c <_printf_i+0x238>)
 8005600:	6033      	str	r3, [r6, #0]
 8005602:	bf14      	ite	ne
 8005604:	230a      	movne	r3, #10
 8005606:	2308      	moveq	r3, #8
 8005608:	2100      	movs	r1, #0
 800560a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800560e:	6866      	ldr	r6, [r4, #4]
 8005610:	60a6      	str	r6, [r4, #8]
 8005612:	2e00      	cmp	r6, #0
 8005614:	bfa2      	ittt	ge
 8005616:	6821      	ldrge	r1, [r4, #0]
 8005618:	f021 0104 	bicge.w	r1, r1, #4
 800561c:	6021      	strge	r1, [r4, #0]
 800561e:	b90d      	cbnz	r5, 8005624 <_printf_i+0x110>
 8005620:	2e00      	cmp	r6, #0
 8005622:	d04b      	beq.n	80056bc <_printf_i+0x1a8>
 8005624:	4616      	mov	r6, r2
 8005626:	fbb5 f1f3 	udiv	r1, r5, r3
 800562a:	fb03 5711 	mls	r7, r3, r1, r5
 800562e:	5dc7      	ldrb	r7, [r0, r7]
 8005630:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005634:	462f      	mov	r7, r5
 8005636:	42bb      	cmp	r3, r7
 8005638:	460d      	mov	r5, r1
 800563a:	d9f4      	bls.n	8005626 <_printf_i+0x112>
 800563c:	2b08      	cmp	r3, #8
 800563e:	d10b      	bne.n	8005658 <_printf_i+0x144>
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	07df      	lsls	r7, r3, #31
 8005644:	d508      	bpl.n	8005658 <_printf_i+0x144>
 8005646:	6923      	ldr	r3, [r4, #16]
 8005648:	6861      	ldr	r1, [r4, #4]
 800564a:	4299      	cmp	r1, r3
 800564c:	bfde      	ittt	le
 800564e:	2330      	movle	r3, #48	@ 0x30
 8005650:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005654:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005658:	1b92      	subs	r2, r2, r6
 800565a:	6122      	str	r2, [r4, #16]
 800565c:	f8cd a000 	str.w	sl, [sp]
 8005660:	464b      	mov	r3, r9
 8005662:	aa03      	add	r2, sp, #12
 8005664:	4621      	mov	r1, r4
 8005666:	4640      	mov	r0, r8
 8005668:	f7ff fee6 	bl	8005438 <_printf_common>
 800566c:	3001      	adds	r0, #1
 800566e:	d14a      	bne.n	8005706 <_printf_i+0x1f2>
 8005670:	f04f 30ff 	mov.w	r0, #4294967295
 8005674:	b004      	add	sp, #16
 8005676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	f043 0320 	orr.w	r3, r3, #32
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	4833      	ldr	r0, [pc, #204]	@ (8005750 <_printf_i+0x23c>)
 8005684:	2778      	movs	r7, #120	@ 0x78
 8005686:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	6831      	ldr	r1, [r6, #0]
 800568e:	061f      	lsls	r7, r3, #24
 8005690:	f851 5b04 	ldr.w	r5, [r1], #4
 8005694:	d402      	bmi.n	800569c <_printf_i+0x188>
 8005696:	065f      	lsls	r7, r3, #25
 8005698:	bf48      	it	mi
 800569a:	b2ad      	uxthmi	r5, r5
 800569c:	6031      	str	r1, [r6, #0]
 800569e:	07d9      	lsls	r1, r3, #31
 80056a0:	bf44      	itt	mi
 80056a2:	f043 0320 	orrmi.w	r3, r3, #32
 80056a6:	6023      	strmi	r3, [r4, #0]
 80056a8:	b11d      	cbz	r5, 80056b2 <_printf_i+0x19e>
 80056aa:	2310      	movs	r3, #16
 80056ac:	e7ac      	b.n	8005608 <_printf_i+0xf4>
 80056ae:	4827      	ldr	r0, [pc, #156]	@ (800574c <_printf_i+0x238>)
 80056b0:	e7e9      	b.n	8005686 <_printf_i+0x172>
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	f023 0320 	bic.w	r3, r3, #32
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	e7f6      	b.n	80056aa <_printf_i+0x196>
 80056bc:	4616      	mov	r6, r2
 80056be:	e7bd      	b.n	800563c <_printf_i+0x128>
 80056c0:	6833      	ldr	r3, [r6, #0]
 80056c2:	6825      	ldr	r5, [r4, #0]
 80056c4:	6961      	ldr	r1, [r4, #20]
 80056c6:	1d18      	adds	r0, r3, #4
 80056c8:	6030      	str	r0, [r6, #0]
 80056ca:	062e      	lsls	r6, r5, #24
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	d501      	bpl.n	80056d4 <_printf_i+0x1c0>
 80056d0:	6019      	str	r1, [r3, #0]
 80056d2:	e002      	b.n	80056da <_printf_i+0x1c6>
 80056d4:	0668      	lsls	r0, r5, #25
 80056d6:	d5fb      	bpl.n	80056d0 <_printf_i+0x1bc>
 80056d8:	8019      	strh	r1, [r3, #0]
 80056da:	2300      	movs	r3, #0
 80056dc:	6123      	str	r3, [r4, #16]
 80056de:	4616      	mov	r6, r2
 80056e0:	e7bc      	b.n	800565c <_printf_i+0x148>
 80056e2:	6833      	ldr	r3, [r6, #0]
 80056e4:	1d1a      	adds	r2, r3, #4
 80056e6:	6032      	str	r2, [r6, #0]
 80056e8:	681e      	ldr	r6, [r3, #0]
 80056ea:	6862      	ldr	r2, [r4, #4]
 80056ec:	2100      	movs	r1, #0
 80056ee:	4630      	mov	r0, r6
 80056f0:	f7fa fd6e 	bl	80001d0 <memchr>
 80056f4:	b108      	cbz	r0, 80056fa <_printf_i+0x1e6>
 80056f6:	1b80      	subs	r0, r0, r6
 80056f8:	6060      	str	r0, [r4, #4]
 80056fa:	6863      	ldr	r3, [r4, #4]
 80056fc:	6123      	str	r3, [r4, #16]
 80056fe:	2300      	movs	r3, #0
 8005700:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005704:	e7aa      	b.n	800565c <_printf_i+0x148>
 8005706:	6923      	ldr	r3, [r4, #16]
 8005708:	4632      	mov	r2, r6
 800570a:	4649      	mov	r1, r9
 800570c:	4640      	mov	r0, r8
 800570e:	47d0      	blx	sl
 8005710:	3001      	adds	r0, #1
 8005712:	d0ad      	beq.n	8005670 <_printf_i+0x15c>
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	079b      	lsls	r3, r3, #30
 8005718:	d413      	bmi.n	8005742 <_printf_i+0x22e>
 800571a:	68e0      	ldr	r0, [r4, #12]
 800571c:	9b03      	ldr	r3, [sp, #12]
 800571e:	4298      	cmp	r0, r3
 8005720:	bfb8      	it	lt
 8005722:	4618      	movlt	r0, r3
 8005724:	e7a6      	b.n	8005674 <_printf_i+0x160>
 8005726:	2301      	movs	r3, #1
 8005728:	4632      	mov	r2, r6
 800572a:	4649      	mov	r1, r9
 800572c:	4640      	mov	r0, r8
 800572e:	47d0      	blx	sl
 8005730:	3001      	adds	r0, #1
 8005732:	d09d      	beq.n	8005670 <_printf_i+0x15c>
 8005734:	3501      	adds	r5, #1
 8005736:	68e3      	ldr	r3, [r4, #12]
 8005738:	9903      	ldr	r1, [sp, #12]
 800573a:	1a5b      	subs	r3, r3, r1
 800573c:	42ab      	cmp	r3, r5
 800573e:	dcf2      	bgt.n	8005726 <_printf_i+0x212>
 8005740:	e7eb      	b.n	800571a <_printf_i+0x206>
 8005742:	2500      	movs	r5, #0
 8005744:	f104 0619 	add.w	r6, r4, #25
 8005748:	e7f5      	b.n	8005736 <_printf_i+0x222>
 800574a:	bf00      	nop
 800574c:	0800971e 	.word	0x0800971e
 8005750:	0800972f 	.word	0x0800972f

08005754 <_scanf_float>:
 8005754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005758:	b087      	sub	sp, #28
 800575a:	4617      	mov	r7, r2
 800575c:	9303      	str	r3, [sp, #12]
 800575e:	688b      	ldr	r3, [r1, #8]
 8005760:	1e5a      	subs	r2, r3, #1
 8005762:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005766:	bf81      	itttt	hi
 8005768:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800576c:	eb03 0b05 	addhi.w	fp, r3, r5
 8005770:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005774:	608b      	strhi	r3, [r1, #8]
 8005776:	680b      	ldr	r3, [r1, #0]
 8005778:	460a      	mov	r2, r1
 800577a:	f04f 0500 	mov.w	r5, #0
 800577e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005782:	f842 3b1c 	str.w	r3, [r2], #28
 8005786:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800578a:	4680      	mov	r8, r0
 800578c:	460c      	mov	r4, r1
 800578e:	bf98      	it	ls
 8005790:	f04f 0b00 	movls.w	fp, #0
 8005794:	9201      	str	r2, [sp, #4]
 8005796:	4616      	mov	r6, r2
 8005798:	46aa      	mov	sl, r5
 800579a:	46a9      	mov	r9, r5
 800579c:	9502      	str	r5, [sp, #8]
 800579e:	68a2      	ldr	r2, [r4, #8]
 80057a0:	b152      	cbz	r2, 80057b8 <_scanf_float+0x64>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b4e      	cmp	r3, #78	@ 0x4e
 80057a8:	d864      	bhi.n	8005874 <_scanf_float+0x120>
 80057aa:	2b40      	cmp	r3, #64	@ 0x40
 80057ac:	d83c      	bhi.n	8005828 <_scanf_float+0xd4>
 80057ae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80057b2:	b2c8      	uxtb	r0, r1
 80057b4:	280e      	cmp	r0, #14
 80057b6:	d93a      	bls.n	800582e <_scanf_float+0xda>
 80057b8:	f1b9 0f00 	cmp.w	r9, #0
 80057bc:	d003      	beq.n	80057c6 <_scanf_float+0x72>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057ca:	f1ba 0f01 	cmp.w	sl, #1
 80057ce:	f200 8117 	bhi.w	8005a00 <_scanf_float+0x2ac>
 80057d2:	9b01      	ldr	r3, [sp, #4]
 80057d4:	429e      	cmp	r6, r3
 80057d6:	f200 8108 	bhi.w	80059ea <_scanf_float+0x296>
 80057da:	2001      	movs	r0, #1
 80057dc:	b007      	add	sp, #28
 80057de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80057e6:	2a0d      	cmp	r2, #13
 80057e8:	d8e6      	bhi.n	80057b8 <_scanf_float+0x64>
 80057ea:	a101      	add	r1, pc, #4	@ (adr r1, 80057f0 <_scanf_float+0x9c>)
 80057ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80057f0:	08005937 	.word	0x08005937
 80057f4:	080057b9 	.word	0x080057b9
 80057f8:	080057b9 	.word	0x080057b9
 80057fc:	080057b9 	.word	0x080057b9
 8005800:	08005997 	.word	0x08005997
 8005804:	0800596f 	.word	0x0800596f
 8005808:	080057b9 	.word	0x080057b9
 800580c:	080057b9 	.word	0x080057b9
 8005810:	08005945 	.word	0x08005945
 8005814:	080057b9 	.word	0x080057b9
 8005818:	080057b9 	.word	0x080057b9
 800581c:	080057b9 	.word	0x080057b9
 8005820:	080057b9 	.word	0x080057b9
 8005824:	080058fd 	.word	0x080058fd
 8005828:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800582c:	e7db      	b.n	80057e6 <_scanf_float+0x92>
 800582e:	290e      	cmp	r1, #14
 8005830:	d8c2      	bhi.n	80057b8 <_scanf_float+0x64>
 8005832:	a001      	add	r0, pc, #4	@ (adr r0, 8005838 <_scanf_float+0xe4>)
 8005834:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005838:	080058ed 	.word	0x080058ed
 800583c:	080057b9 	.word	0x080057b9
 8005840:	080058ed 	.word	0x080058ed
 8005844:	08005983 	.word	0x08005983
 8005848:	080057b9 	.word	0x080057b9
 800584c:	08005895 	.word	0x08005895
 8005850:	080058d3 	.word	0x080058d3
 8005854:	080058d3 	.word	0x080058d3
 8005858:	080058d3 	.word	0x080058d3
 800585c:	080058d3 	.word	0x080058d3
 8005860:	080058d3 	.word	0x080058d3
 8005864:	080058d3 	.word	0x080058d3
 8005868:	080058d3 	.word	0x080058d3
 800586c:	080058d3 	.word	0x080058d3
 8005870:	080058d3 	.word	0x080058d3
 8005874:	2b6e      	cmp	r3, #110	@ 0x6e
 8005876:	d809      	bhi.n	800588c <_scanf_float+0x138>
 8005878:	2b60      	cmp	r3, #96	@ 0x60
 800587a:	d8b2      	bhi.n	80057e2 <_scanf_float+0x8e>
 800587c:	2b54      	cmp	r3, #84	@ 0x54
 800587e:	d07b      	beq.n	8005978 <_scanf_float+0x224>
 8005880:	2b59      	cmp	r3, #89	@ 0x59
 8005882:	d199      	bne.n	80057b8 <_scanf_float+0x64>
 8005884:	2d07      	cmp	r5, #7
 8005886:	d197      	bne.n	80057b8 <_scanf_float+0x64>
 8005888:	2508      	movs	r5, #8
 800588a:	e02c      	b.n	80058e6 <_scanf_float+0x192>
 800588c:	2b74      	cmp	r3, #116	@ 0x74
 800588e:	d073      	beq.n	8005978 <_scanf_float+0x224>
 8005890:	2b79      	cmp	r3, #121	@ 0x79
 8005892:	e7f6      	b.n	8005882 <_scanf_float+0x12e>
 8005894:	6821      	ldr	r1, [r4, #0]
 8005896:	05c8      	lsls	r0, r1, #23
 8005898:	d51b      	bpl.n	80058d2 <_scanf_float+0x17e>
 800589a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800589e:	6021      	str	r1, [r4, #0]
 80058a0:	f109 0901 	add.w	r9, r9, #1
 80058a4:	f1bb 0f00 	cmp.w	fp, #0
 80058a8:	d003      	beq.n	80058b2 <_scanf_float+0x15e>
 80058aa:	3201      	adds	r2, #1
 80058ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80058b0:	60a2      	str	r2, [r4, #8]
 80058b2:	68a3      	ldr	r3, [r4, #8]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	60a3      	str	r3, [r4, #8]
 80058b8:	6923      	ldr	r3, [r4, #16]
 80058ba:	3301      	adds	r3, #1
 80058bc:	6123      	str	r3, [r4, #16]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	607b      	str	r3, [r7, #4]
 80058c6:	f340 8087 	ble.w	80059d8 <_scanf_float+0x284>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	3301      	adds	r3, #1
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	e765      	b.n	800579e <_scanf_float+0x4a>
 80058d2:	eb1a 0105 	adds.w	r1, sl, r5
 80058d6:	f47f af6f 	bne.w	80057b8 <_scanf_float+0x64>
 80058da:	6822      	ldr	r2, [r4, #0]
 80058dc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80058e0:	6022      	str	r2, [r4, #0]
 80058e2:	460d      	mov	r5, r1
 80058e4:	468a      	mov	sl, r1
 80058e6:	f806 3b01 	strb.w	r3, [r6], #1
 80058ea:	e7e2      	b.n	80058b2 <_scanf_float+0x15e>
 80058ec:	6822      	ldr	r2, [r4, #0]
 80058ee:	0610      	lsls	r0, r2, #24
 80058f0:	f57f af62 	bpl.w	80057b8 <_scanf_float+0x64>
 80058f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058f8:	6022      	str	r2, [r4, #0]
 80058fa:	e7f4      	b.n	80058e6 <_scanf_float+0x192>
 80058fc:	f1ba 0f00 	cmp.w	sl, #0
 8005900:	d10e      	bne.n	8005920 <_scanf_float+0x1cc>
 8005902:	f1b9 0f00 	cmp.w	r9, #0
 8005906:	d10e      	bne.n	8005926 <_scanf_float+0x1d2>
 8005908:	6822      	ldr	r2, [r4, #0]
 800590a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800590e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005912:	d108      	bne.n	8005926 <_scanf_float+0x1d2>
 8005914:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005918:	6022      	str	r2, [r4, #0]
 800591a:	f04f 0a01 	mov.w	sl, #1
 800591e:	e7e2      	b.n	80058e6 <_scanf_float+0x192>
 8005920:	f1ba 0f02 	cmp.w	sl, #2
 8005924:	d055      	beq.n	80059d2 <_scanf_float+0x27e>
 8005926:	2d01      	cmp	r5, #1
 8005928:	d002      	beq.n	8005930 <_scanf_float+0x1dc>
 800592a:	2d04      	cmp	r5, #4
 800592c:	f47f af44 	bne.w	80057b8 <_scanf_float+0x64>
 8005930:	3501      	adds	r5, #1
 8005932:	b2ed      	uxtb	r5, r5
 8005934:	e7d7      	b.n	80058e6 <_scanf_float+0x192>
 8005936:	f1ba 0f01 	cmp.w	sl, #1
 800593a:	f47f af3d 	bne.w	80057b8 <_scanf_float+0x64>
 800593e:	f04f 0a02 	mov.w	sl, #2
 8005942:	e7d0      	b.n	80058e6 <_scanf_float+0x192>
 8005944:	b97d      	cbnz	r5, 8005966 <_scanf_float+0x212>
 8005946:	f1b9 0f00 	cmp.w	r9, #0
 800594a:	f47f af38 	bne.w	80057be <_scanf_float+0x6a>
 800594e:	6822      	ldr	r2, [r4, #0]
 8005950:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005954:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005958:	f040 8108 	bne.w	8005b6c <_scanf_float+0x418>
 800595c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005960:	6022      	str	r2, [r4, #0]
 8005962:	2501      	movs	r5, #1
 8005964:	e7bf      	b.n	80058e6 <_scanf_float+0x192>
 8005966:	2d03      	cmp	r5, #3
 8005968:	d0e2      	beq.n	8005930 <_scanf_float+0x1dc>
 800596a:	2d05      	cmp	r5, #5
 800596c:	e7de      	b.n	800592c <_scanf_float+0x1d8>
 800596e:	2d02      	cmp	r5, #2
 8005970:	f47f af22 	bne.w	80057b8 <_scanf_float+0x64>
 8005974:	2503      	movs	r5, #3
 8005976:	e7b6      	b.n	80058e6 <_scanf_float+0x192>
 8005978:	2d06      	cmp	r5, #6
 800597a:	f47f af1d 	bne.w	80057b8 <_scanf_float+0x64>
 800597e:	2507      	movs	r5, #7
 8005980:	e7b1      	b.n	80058e6 <_scanf_float+0x192>
 8005982:	6822      	ldr	r2, [r4, #0]
 8005984:	0591      	lsls	r1, r2, #22
 8005986:	f57f af17 	bpl.w	80057b8 <_scanf_float+0x64>
 800598a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800598e:	6022      	str	r2, [r4, #0]
 8005990:	f8cd 9008 	str.w	r9, [sp, #8]
 8005994:	e7a7      	b.n	80058e6 <_scanf_float+0x192>
 8005996:	6822      	ldr	r2, [r4, #0]
 8005998:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800599c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80059a0:	d006      	beq.n	80059b0 <_scanf_float+0x25c>
 80059a2:	0550      	lsls	r0, r2, #21
 80059a4:	f57f af08 	bpl.w	80057b8 <_scanf_float+0x64>
 80059a8:	f1b9 0f00 	cmp.w	r9, #0
 80059ac:	f000 80de 	beq.w	8005b6c <_scanf_float+0x418>
 80059b0:	0591      	lsls	r1, r2, #22
 80059b2:	bf58      	it	pl
 80059b4:	9902      	ldrpl	r1, [sp, #8]
 80059b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80059ba:	bf58      	it	pl
 80059bc:	eba9 0101 	subpl.w	r1, r9, r1
 80059c0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80059c4:	bf58      	it	pl
 80059c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80059ca:	6022      	str	r2, [r4, #0]
 80059cc:	f04f 0900 	mov.w	r9, #0
 80059d0:	e789      	b.n	80058e6 <_scanf_float+0x192>
 80059d2:	f04f 0a03 	mov.w	sl, #3
 80059d6:	e786      	b.n	80058e6 <_scanf_float+0x192>
 80059d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80059dc:	4639      	mov	r1, r7
 80059de:	4640      	mov	r0, r8
 80059e0:	4798      	blx	r3
 80059e2:	2800      	cmp	r0, #0
 80059e4:	f43f aedb 	beq.w	800579e <_scanf_float+0x4a>
 80059e8:	e6e6      	b.n	80057b8 <_scanf_float+0x64>
 80059ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059f2:	463a      	mov	r2, r7
 80059f4:	4640      	mov	r0, r8
 80059f6:	4798      	blx	r3
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	6123      	str	r3, [r4, #16]
 80059fe:	e6e8      	b.n	80057d2 <_scanf_float+0x7e>
 8005a00:	1e6b      	subs	r3, r5, #1
 8005a02:	2b06      	cmp	r3, #6
 8005a04:	d824      	bhi.n	8005a50 <_scanf_float+0x2fc>
 8005a06:	2d02      	cmp	r5, #2
 8005a08:	d836      	bhi.n	8005a78 <_scanf_float+0x324>
 8005a0a:	9b01      	ldr	r3, [sp, #4]
 8005a0c:	429e      	cmp	r6, r3
 8005a0e:	f67f aee4 	bls.w	80057da <_scanf_float+0x86>
 8005a12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a1a:	463a      	mov	r2, r7
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	4798      	blx	r3
 8005a20:	6923      	ldr	r3, [r4, #16]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	6123      	str	r3, [r4, #16]
 8005a26:	e7f0      	b.n	8005a0a <_scanf_float+0x2b6>
 8005a28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a2c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005a30:	463a      	mov	r2, r7
 8005a32:	4640      	mov	r0, r8
 8005a34:	4798      	blx	r3
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	6123      	str	r3, [r4, #16]
 8005a3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a40:	fa5f fa8a 	uxtb.w	sl, sl
 8005a44:	f1ba 0f02 	cmp.w	sl, #2
 8005a48:	d1ee      	bne.n	8005a28 <_scanf_float+0x2d4>
 8005a4a:	3d03      	subs	r5, #3
 8005a4c:	b2ed      	uxtb	r5, r5
 8005a4e:	1b76      	subs	r6, r6, r5
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	05da      	lsls	r2, r3, #23
 8005a54:	d530      	bpl.n	8005ab8 <_scanf_float+0x364>
 8005a56:	055b      	lsls	r3, r3, #21
 8005a58:	d511      	bpl.n	8005a7e <_scanf_float+0x32a>
 8005a5a:	9b01      	ldr	r3, [sp, #4]
 8005a5c:	429e      	cmp	r6, r3
 8005a5e:	f67f aebc 	bls.w	80057da <_scanf_float+0x86>
 8005a62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a6a:	463a      	mov	r2, r7
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	4798      	blx	r3
 8005a70:	6923      	ldr	r3, [r4, #16]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	6123      	str	r3, [r4, #16]
 8005a76:	e7f0      	b.n	8005a5a <_scanf_float+0x306>
 8005a78:	46aa      	mov	sl, r5
 8005a7a:	46b3      	mov	fp, r6
 8005a7c:	e7de      	b.n	8005a3c <_scanf_float+0x2e8>
 8005a7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	2965      	cmp	r1, #101	@ 0x65
 8005a86:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a8a:	f106 35ff 	add.w	r5, r6, #4294967295
 8005a8e:	6123      	str	r3, [r4, #16]
 8005a90:	d00c      	beq.n	8005aac <_scanf_float+0x358>
 8005a92:	2945      	cmp	r1, #69	@ 0x45
 8005a94:	d00a      	beq.n	8005aac <_scanf_float+0x358>
 8005a96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a9a:	463a      	mov	r2, r7
 8005a9c:	4640      	mov	r0, r8
 8005a9e:	4798      	blx	r3
 8005aa0:	6923      	ldr	r3, [r4, #16]
 8005aa2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	1eb5      	subs	r5, r6, #2
 8005aaa:	6123      	str	r3, [r4, #16]
 8005aac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ab0:	463a      	mov	r2, r7
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	4798      	blx	r3
 8005ab6:	462e      	mov	r6, r5
 8005ab8:	6822      	ldr	r2, [r4, #0]
 8005aba:	f012 0210 	ands.w	r2, r2, #16
 8005abe:	d001      	beq.n	8005ac4 <_scanf_float+0x370>
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	e68b      	b.n	80057dc <_scanf_float+0x88>
 8005ac4:	7032      	strb	r2, [r6, #0]
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005acc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ad0:	d11c      	bne.n	8005b0c <_scanf_float+0x3b8>
 8005ad2:	9b02      	ldr	r3, [sp, #8]
 8005ad4:	454b      	cmp	r3, r9
 8005ad6:	eba3 0209 	sub.w	r2, r3, r9
 8005ada:	d123      	bne.n	8005b24 <_scanf_float+0x3d0>
 8005adc:	9901      	ldr	r1, [sp, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	f002 fc2d 	bl	8008340 <_strtod_r>
 8005ae6:	9b03      	ldr	r3, [sp, #12]
 8005ae8:	6821      	ldr	r1, [r4, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f011 0f02 	tst.w	r1, #2
 8005af0:	ec57 6b10 	vmov	r6, r7, d0
 8005af4:	f103 0204 	add.w	r2, r3, #4
 8005af8:	d01f      	beq.n	8005b3a <_scanf_float+0x3e6>
 8005afa:	9903      	ldr	r1, [sp, #12]
 8005afc:	600a      	str	r2, [r1, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	e9c3 6700 	strd	r6, r7, [r3]
 8005b04:	68e3      	ldr	r3, [r4, #12]
 8005b06:	3301      	adds	r3, #1
 8005b08:	60e3      	str	r3, [r4, #12]
 8005b0a:	e7d9      	b.n	8005ac0 <_scanf_float+0x36c>
 8005b0c:	9b04      	ldr	r3, [sp, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0e4      	beq.n	8005adc <_scanf_float+0x388>
 8005b12:	9905      	ldr	r1, [sp, #20]
 8005b14:	230a      	movs	r3, #10
 8005b16:	3101      	adds	r1, #1
 8005b18:	4640      	mov	r0, r8
 8005b1a:	f002 fc91 	bl	8008440 <_strtol_r>
 8005b1e:	9b04      	ldr	r3, [sp, #16]
 8005b20:	9e05      	ldr	r6, [sp, #20]
 8005b22:	1ac2      	subs	r2, r0, r3
 8005b24:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005b28:	429e      	cmp	r6, r3
 8005b2a:	bf28      	it	cs
 8005b2c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005b30:	4910      	ldr	r1, [pc, #64]	@ (8005b74 <_scanf_float+0x420>)
 8005b32:	4630      	mov	r0, r6
 8005b34:	f000 f918 	bl	8005d68 <siprintf>
 8005b38:	e7d0      	b.n	8005adc <_scanf_float+0x388>
 8005b3a:	f011 0f04 	tst.w	r1, #4
 8005b3e:	9903      	ldr	r1, [sp, #12]
 8005b40:	600a      	str	r2, [r1, #0]
 8005b42:	d1dc      	bne.n	8005afe <_scanf_float+0x3aa>
 8005b44:	681d      	ldr	r5, [r3, #0]
 8005b46:	4632      	mov	r2, r6
 8005b48:	463b      	mov	r3, r7
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	f7fa ffed 	bl	8000b2c <__aeabi_dcmpun>
 8005b52:	b128      	cbz	r0, 8005b60 <_scanf_float+0x40c>
 8005b54:	4808      	ldr	r0, [pc, #32]	@ (8005b78 <_scanf_float+0x424>)
 8005b56:	f000 f9eb 	bl	8005f30 <nanf>
 8005b5a:	ed85 0a00 	vstr	s0, [r5]
 8005b5e:	e7d1      	b.n	8005b04 <_scanf_float+0x3b0>
 8005b60:	4630      	mov	r0, r6
 8005b62:	4639      	mov	r1, r7
 8005b64:	f7fb f840 	bl	8000be8 <__aeabi_d2f>
 8005b68:	6028      	str	r0, [r5, #0]
 8005b6a:	e7cb      	b.n	8005b04 <_scanf_float+0x3b0>
 8005b6c:	f04f 0900 	mov.w	r9, #0
 8005b70:	e629      	b.n	80057c6 <_scanf_float+0x72>
 8005b72:	bf00      	nop
 8005b74:	08009740 	.word	0x08009740
 8005b78:	08009ad5 	.word	0x08009ad5

08005b7c <std>:
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	b510      	push	{r4, lr}
 8005b80:	4604      	mov	r4, r0
 8005b82:	e9c0 3300 	strd	r3, r3, [r0]
 8005b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b8a:	6083      	str	r3, [r0, #8]
 8005b8c:	8181      	strh	r1, [r0, #12]
 8005b8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b90:	81c2      	strh	r2, [r0, #14]
 8005b92:	6183      	str	r3, [r0, #24]
 8005b94:	4619      	mov	r1, r3
 8005b96:	2208      	movs	r2, #8
 8005b98:	305c      	adds	r0, #92	@ 0x5c
 8005b9a:	f000 f948 	bl	8005e2e <memset>
 8005b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <std+0x58>)
 8005ba0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd8 <std+0x5c>)
 8005ba4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bdc <std+0x60>)
 8005ba8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005baa:	4b0d      	ldr	r3, [pc, #52]	@ (8005be0 <std+0x64>)
 8005bac:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bae:	4b0d      	ldr	r3, [pc, #52]	@ (8005be4 <std+0x68>)
 8005bb0:	6224      	str	r4, [r4, #32]
 8005bb2:	429c      	cmp	r4, r3
 8005bb4:	d006      	beq.n	8005bc4 <std+0x48>
 8005bb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005bba:	4294      	cmp	r4, r2
 8005bbc:	d002      	beq.n	8005bc4 <std+0x48>
 8005bbe:	33d0      	adds	r3, #208	@ 0xd0
 8005bc0:	429c      	cmp	r4, r3
 8005bc2:	d105      	bne.n	8005bd0 <std+0x54>
 8005bc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bcc:	f000 b9ac 	b.w	8005f28 <__retarget_lock_init_recursive>
 8005bd0:	bd10      	pop	{r4, pc}
 8005bd2:	bf00      	nop
 8005bd4:	08005da9 	.word	0x08005da9
 8005bd8:	08005dcb 	.word	0x08005dcb
 8005bdc:	08005e03 	.word	0x08005e03
 8005be0:	08005e27 	.word	0x08005e27
 8005be4:	20000450 	.word	0x20000450

08005be8 <stdio_exit_handler>:
 8005be8:	4a02      	ldr	r2, [pc, #8]	@ (8005bf4 <stdio_exit_handler+0xc>)
 8005bea:	4903      	ldr	r1, [pc, #12]	@ (8005bf8 <stdio_exit_handler+0x10>)
 8005bec:	4803      	ldr	r0, [pc, #12]	@ (8005bfc <stdio_exit_handler+0x14>)
 8005bee:	f000 b869 	b.w	8005cc4 <_fwalk_sglue>
 8005bf2:	bf00      	nop
 8005bf4:	20000010 	.word	0x20000010
 8005bf8:	080087fd 	.word	0x080087fd
 8005bfc:	20000020 	.word	0x20000020

08005c00 <cleanup_stdio>:
 8005c00:	6841      	ldr	r1, [r0, #4]
 8005c02:	4b0c      	ldr	r3, [pc, #48]	@ (8005c34 <cleanup_stdio+0x34>)
 8005c04:	4299      	cmp	r1, r3
 8005c06:	b510      	push	{r4, lr}
 8005c08:	4604      	mov	r4, r0
 8005c0a:	d001      	beq.n	8005c10 <cleanup_stdio+0x10>
 8005c0c:	f002 fdf6 	bl	80087fc <_fflush_r>
 8005c10:	68a1      	ldr	r1, [r4, #8]
 8005c12:	4b09      	ldr	r3, [pc, #36]	@ (8005c38 <cleanup_stdio+0x38>)
 8005c14:	4299      	cmp	r1, r3
 8005c16:	d002      	beq.n	8005c1e <cleanup_stdio+0x1e>
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f002 fdef 	bl	80087fc <_fflush_r>
 8005c1e:	68e1      	ldr	r1, [r4, #12]
 8005c20:	4b06      	ldr	r3, [pc, #24]	@ (8005c3c <cleanup_stdio+0x3c>)
 8005c22:	4299      	cmp	r1, r3
 8005c24:	d004      	beq.n	8005c30 <cleanup_stdio+0x30>
 8005c26:	4620      	mov	r0, r4
 8005c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c2c:	f002 bde6 	b.w	80087fc <_fflush_r>
 8005c30:	bd10      	pop	{r4, pc}
 8005c32:	bf00      	nop
 8005c34:	20000450 	.word	0x20000450
 8005c38:	200004b8 	.word	0x200004b8
 8005c3c:	20000520 	.word	0x20000520

08005c40 <global_stdio_init.part.0>:
 8005c40:	b510      	push	{r4, lr}
 8005c42:	4b0b      	ldr	r3, [pc, #44]	@ (8005c70 <global_stdio_init.part.0+0x30>)
 8005c44:	4c0b      	ldr	r4, [pc, #44]	@ (8005c74 <global_stdio_init.part.0+0x34>)
 8005c46:	4a0c      	ldr	r2, [pc, #48]	@ (8005c78 <global_stdio_init.part.0+0x38>)
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2104      	movs	r1, #4
 8005c50:	f7ff ff94 	bl	8005b7c <std>
 8005c54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c58:	2201      	movs	r2, #1
 8005c5a:	2109      	movs	r1, #9
 8005c5c:	f7ff ff8e 	bl	8005b7c <std>
 8005c60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c64:	2202      	movs	r2, #2
 8005c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c6a:	2112      	movs	r1, #18
 8005c6c:	f7ff bf86 	b.w	8005b7c <std>
 8005c70:	20000588 	.word	0x20000588
 8005c74:	20000450 	.word	0x20000450
 8005c78:	08005be9 	.word	0x08005be9

08005c7c <__sfp_lock_acquire>:
 8005c7c:	4801      	ldr	r0, [pc, #4]	@ (8005c84 <__sfp_lock_acquire+0x8>)
 8005c7e:	f000 b954 	b.w	8005f2a <__retarget_lock_acquire_recursive>
 8005c82:	bf00      	nop
 8005c84:	20000591 	.word	0x20000591

08005c88 <__sfp_lock_release>:
 8005c88:	4801      	ldr	r0, [pc, #4]	@ (8005c90 <__sfp_lock_release+0x8>)
 8005c8a:	f000 b94f 	b.w	8005f2c <__retarget_lock_release_recursive>
 8005c8e:	bf00      	nop
 8005c90:	20000591 	.word	0x20000591

08005c94 <__sinit>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	4604      	mov	r4, r0
 8005c98:	f7ff fff0 	bl	8005c7c <__sfp_lock_acquire>
 8005c9c:	6a23      	ldr	r3, [r4, #32]
 8005c9e:	b11b      	cbz	r3, 8005ca8 <__sinit+0x14>
 8005ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ca4:	f7ff bff0 	b.w	8005c88 <__sfp_lock_release>
 8005ca8:	4b04      	ldr	r3, [pc, #16]	@ (8005cbc <__sinit+0x28>)
 8005caa:	6223      	str	r3, [r4, #32]
 8005cac:	4b04      	ldr	r3, [pc, #16]	@ (8005cc0 <__sinit+0x2c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1f5      	bne.n	8005ca0 <__sinit+0xc>
 8005cb4:	f7ff ffc4 	bl	8005c40 <global_stdio_init.part.0>
 8005cb8:	e7f2      	b.n	8005ca0 <__sinit+0xc>
 8005cba:	bf00      	nop
 8005cbc:	08005c01 	.word	0x08005c01
 8005cc0:	20000588 	.word	0x20000588

08005cc4 <_fwalk_sglue>:
 8005cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cc8:	4607      	mov	r7, r0
 8005cca:	4688      	mov	r8, r1
 8005ccc:	4614      	mov	r4, r2
 8005cce:	2600      	movs	r6, #0
 8005cd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cd4:	f1b9 0901 	subs.w	r9, r9, #1
 8005cd8:	d505      	bpl.n	8005ce6 <_fwalk_sglue+0x22>
 8005cda:	6824      	ldr	r4, [r4, #0]
 8005cdc:	2c00      	cmp	r4, #0
 8005cde:	d1f7      	bne.n	8005cd0 <_fwalk_sglue+0xc>
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ce6:	89ab      	ldrh	r3, [r5, #12]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d907      	bls.n	8005cfc <_fwalk_sglue+0x38>
 8005cec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	d003      	beq.n	8005cfc <_fwalk_sglue+0x38>
 8005cf4:	4629      	mov	r1, r5
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	47c0      	blx	r8
 8005cfa:	4306      	orrs	r6, r0
 8005cfc:	3568      	adds	r5, #104	@ 0x68
 8005cfe:	e7e9      	b.n	8005cd4 <_fwalk_sglue+0x10>

08005d00 <sniprintf>:
 8005d00:	b40c      	push	{r2, r3}
 8005d02:	b530      	push	{r4, r5, lr}
 8005d04:	4b17      	ldr	r3, [pc, #92]	@ (8005d64 <sniprintf+0x64>)
 8005d06:	1e0c      	subs	r4, r1, #0
 8005d08:	681d      	ldr	r5, [r3, #0]
 8005d0a:	b09d      	sub	sp, #116	@ 0x74
 8005d0c:	da08      	bge.n	8005d20 <sniprintf+0x20>
 8005d0e:	238b      	movs	r3, #139	@ 0x8b
 8005d10:	602b      	str	r3, [r5, #0]
 8005d12:	f04f 30ff 	mov.w	r0, #4294967295
 8005d16:	b01d      	add	sp, #116	@ 0x74
 8005d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d1c:	b002      	add	sp, #8
 8005d1e:	4770      	bx	lr
 8005d20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005d24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005d28:	bf14      	ite	ne
 8005d2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005d2e:	4623      	moveq	r3, r4
 8005d30:	9304      	str	r3, [sp, #16]
 8005d32:	9307      	str	r3, [sp, #28]
 8005d34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005d38:	9002      	str	r0, [sp, #8]
 8005d3a:	9006      	str	r0, [sp, #24]
 8005d3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005d40:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d42:	ab21      	add	r3, sp, #132	@ 0x84
 8005d44:	a902      	add	r1, sp, #8
 8005d46:	4628      	mov	r0, r5
 8005d48:	9301      	str	r3, [sp, #4]
 8005d4a:	f002 fbd7 	bl	80084fc <_svfiprintf_r>
 8005d4e:	1c43      	adds	r3, r0, #1
 8005d50:	bfbc      	itt	lt
 8005d52:	238b      	movlt	r3, #139	@ 0x8b
 8005d54:	602b      	strlt	r3, [r5, #0]
 8005d56:	2c00      	cmp	r4, #0
 8005d58:	d0dd      	beq.n	8005d16 <sniprintf+0x16>
 8005d5a:	9b02      	ldr	r3, [sp, #8]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	e7d9      	b.n	8005d16 <sniprintf+0x16>
 8005d62:	bf00      	nop
 8005d64:	2000001c 	.word	0x2000001c

08005d68 <siprintf>:
 8005d68:	b40e      	push	{r1, r2, r3}
 8005d6a:	b500      	push	{lr}
 8005d6c:	b09c      	sub	sp, #112	@ 0x70
 8005d6e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d70:	9002      	str	r0, [sp, #8]
 8005d72:	9006      	str	r0, [sp, #24]
 8005d74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d78:	4809      	ldr	r0, [pc, #36]	@ (8005da0 <siprintf+0x38>)
 8005d7a:	9107      	str	r1, [sp, #28]
 8005d7c:	9104      	str	r1, [sp, #16]
 8005d7e:	4909      	ldr	r1, [pc, #36]	@ (8005da4 <siprintf+0x3c>)
 8005d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d84:	9105      	str	r1, [sp, #20]
 8005d86:	6800      	ldr	r0, [r0, #0]
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	a902      	add	r1, sp, #8
 8005d8c:	f002 fbb6 	bl	80084fc <_svfiprintf_r>
 8005d90:	9b02      	ldr	r3, [sp, #8]
 8005d92:	2200      	movs	r2, #0
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	b01c      	add	sp, #112	@ 0x70
 8005d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d9c:	b003      	add	sp, #12
 8005d9e:	4770      	bx	lr
 8005da0:	2000001c 	.word	0x2000001c
 8005da4:	ffff0208 	.word	0xffff0208

08005da8 <__sread>:
 8005da8:	b510      	push	{r4, lr}
 8005daa:	460c      	mov	r4, r1
 8005dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db0:	f000 f86c 	bl	8005e8c <_read_r>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	bfab      	itete	ge
 8005db8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005dba:	89a3      	ldrhlt	r3, [r4, #12]
 8005dbc:	181b      	addge	r3, r3, r0
 8005dbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005dc2:	bfac      	ite	ge
 8005dc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005dc6:	81a3      	strhlt	r3, [r4, #12]
 8005dc8:	bd10      	pop	{r4, pc}

08005dca <__swrite>:
 8005dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dce:	461f      	mov	r7, r3
 8005dd0:	898b      	ldrh	r3, [r1, #12]
 8005dd2:	05db      	lsls	r3, r3, #23
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	4616      	mov	r6, r2
 8005dda:	d505      	bpl.n	8005de8 <__swrite+0x1e>
 8005ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de0:	2302      	movs	r3, #2
 8005de2:	2200      	movs	r2, #0
 8005de4:	f000 f840 	bl	8005e68 <_lseek_r>
 8005de8:	89a3      	ldrh	r3, [r4, #12]
 8005dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005df2:	81a3      	strh	r3, [r4, #12]
 8005df4:	4632      	mov	r2, r6
 8005df6:	463b      	mov	r3, r7
 8005df8:	4628      	mov	r0, r5
 8005dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfe:	f000 b857 	b.w	8005eb0 <_write_r>

08005e02 <__sseek>:
 8005e02:	b510      	push	{r4, lr}
 8005e04:	460c      	mov	r4, r1
 8005e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e0a:	f000 f82d 	bl	8005e68 <_lseek_r>
 8005e0e:	1c43      	adds	r3, r0, #1
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	bf15      	itete	ne
 8005e14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e1e:	81a3      	strheq	r3, [r4, #12]
 8005e20:	bf18      	it	ne
 8005e22:	81a3      	strhne	r3, [r4, #12]
 8005e24:	bd10      	pop	{r4, pc}

08005e26 <__sclose>:
 8005e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e2a:	f000 b80d 	b.w	8005e48 <_close_r>

08005e2e <memset>:
 8005e2e:	4402      	add	r2, r0
 8005e30:	4603      	mov	r3, r0
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d100      	bne.n	8005e38 <memset+0xa>
 8005e36:	4770      	bx	lr
 8005e38:	f803 1b01 	strb.w	r1, [r3], #1
 8005e3c:	e7f9      	b.n	8005e32 <memset+0x4>
	...

08005e40 <_localeconv_r>:
 8005e40:	4800      	ldr	r0, [pc, #0]	@ (8005e44 <_localeconv_r+0x4>)
 8005e42:	4770      	bx	lr
 8005e44:	2000015c 	.word	0x2000015c

08005e48 <_close_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	4d06      	ldr	r5, [pc, #24]	@ (8005e64 <_close_r+0x1c>)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	4604      	mov	r4, r0
 8005e50:	4608      	mov	r0, r1
 8005e52:	602b      	str	r3, [r5, #0]
 8005e54:	f7fb fdb0 	bl	80019b8 <_close>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d102      	bne.n	8005e62 <_close_r+0x1a>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	b103      	cbz	r3, 8005e62 <_close_r+0x1a>
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	bd38      	pop	{r3, r4, r5, pc}
 8005e64:	2000058c 	.word	0x2000058c

08005e68 <_lseek_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4d07      	ldr	r5, [pc, #28]	@ (8005e88 <_lseek_r+0x20>)
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	4608      	mov	r0, r1
 8005e70:	4611      	mov	r1, r2
 8005e72:	2200      	movs	r2, #0
 8005e74:	602a      	str	r2, [r5, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	f7fb fdc5 	bl	8001a06 <_lseek>
 8005e7c:	1c43      	adds	r3, r0, #1
 8005e7e:	d102      	bne.n	8005e86 <_lseek_r+0x1e>
 8005e80:	682b      	ldr	r3, [r5, #0]
 8005e82:	b103      	cbz	r3, 8005e86 <_lseek_r+0x1e>
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	bd38      	pop	{r3, r4, r5, pc}
 8005e88:	2000058c 	.word	0x2000058c

08005e8c <_read_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	4d07      	ldr	r5, [pc, #28]	@ (8005eac <_read_r+0x20>)
 8005e90:	4604      	mov	r4, r0
 8005e92:	4608      	mov	r0, r1
 8005e94:	4611      	mov	r1, r2
 8005e96:	2200      	movs	r2, #0
 8005e98:	602a      	str	r2, [r5, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f7fb fd53 	bl	8001946 <_read>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d102      	bne.n	8005eaa <_read_r+0x1e>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	b103      	cbz	r3, 8005eaa <_read_r+0x1e>
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	2000058c 	.word	0x2000058c

08005eb0 <_write_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4d07      	ldr	r5, [pc, #28]	@ (8005ed0 <_write_r+0x20>)
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	4608      	mov	r0, r1
 8005eb8:	4611      	mov	r1, r2
 8005eba:	2200      	movs	r2, #0
 8005ebc:	602a      	str	r2, [r5, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f7fb fd5e 	bl	8001980 <_write>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	d102      	bne.n	8005ece <_write_r+0x1e>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	b103      	cbz	r3, 8005ece <_write_r+0x1e>
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
 8005ed0:	2000058c 	.word	0x2000058c

08005ed4 <__errno>:
 8005ed4:	4b01      	ldr	r3, [pc, #4]	@ (8005edc <__errno+0x8>)
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	2000001c 	.word	0x2000001c

08005ee0 <__libc_init_array>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	4d0d      	ldr	r5, [pc, #52]	@ (8005f18 <__libc_init_array+0x38>)
 8005ee4:	4c0d      	ldr	r4, [pc, #52]	@ (8005f1c <__libc_init_array+0x3c>)
 8005ee6:	1b64      	subs	r4, r4, r5
 8005ee8:	10a4      	asrs	r4, r4, #2
 8005eea:	2600      	movs	r6, #0
 8005eec:	42a6      	cmp	r6, r4
 8005eee:	d109      	bne.n	8005f04 <__libc_init_array+0x24>
 8005ef0:	4d0b      	ldr	r5, [pc, #44]	@ (8005f20 <__libc_init_array+0x40>)
 8005ef2:	4c0c      	ldr	r4, [pc, #48]	@ (8005f24 <__libc_init_array+0x44>)
 8005ef4:	f003 fb72 	bl	80095dc <_init>
 8005ef8:	1b64      	subs	r4, r4, r5
 8005efa:	10a4      	asrs	r4, r4, #2
 8005efc:	2600      	movs	r6, #0
 8005efe:	42a6      	cmp	r6, r4
 8005f00:	d105      	bne.n	8005f0e <__libc_init_array+0x2e>
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
 8005f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f08:	4798      	blx	r3
 8005f0a:	3601      	adds	r6, #1
 8005f0c:	e7ee      	b.n	8005eec <__libc_init_array+0xc>
 8005f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f12:	4798      	blx	r3
 8005f14:	3601      	adds	r6, #1
 8005f16:	e7f2      	b.n	8005efe <__libc_init_array+0x1e>
 8005f18:	08009b40 	.word	0x08009b40
 8005f1c:	08009b40 	.word	0x08009b40
 8005f20:	08009b40 	.word	0x08009b40
 8005f24:	08009b44 	.word	0x08009b44

08005f28 <__retarget_lock_init_recursive>:
 8005f28:	4770      	bx	lr

08005f2a <__retarget_lock_acquire_recursive>:
 8005f2a:	4770      	bx	lr

08005f2c <__retarget_lock_release_recursive>:
 8005f2c:	4770      	bx	lr
	...

08005f30 <nanf>:
 8005f30:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005f38 <nanf+0x8>
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	7fc00000 	.word	0x7fc00000

08005f3c <quorem>:
 8005f3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f40:	6903      	ldr	r3, [r0, #16]
 8005f42:	690c      	ldr	r4, [r1, #16]
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	4607      	mov	r7, r0
 8005f48:	db7e      	blt.n	8006048 <quorem+0x10c>
 8005f4a:	3c01      	subs	r4, #1
 8005f4c:	f101 0814 	add.w	r8, r1, #20
 8005f50:	00a3      	lsls	r3, r4, #2
 8005f52:	f100 0514 	add.w	r5, r0, #20
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f5c:	9301      	str	r3, [sp, #4]
 8005f5e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f66:	3301      	adds	r3, #1
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f72:	d32e      	bcc.n	8005fd2 <quorem+0x96>
 8005f74:	f04f 0a00 	mov.w	sl, #0
 8005f78:	46c4      	mov	ip, r8
 8005f7a:	46ae      	mov	lr, r5
 8005f7c:	46d3      	mov	fp, sl
 8005f7e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005f82:	b298      	uxth	r0, r3
 8005f84:	fb06 a000 	mla	r0, r6, r0, sl
 8005f88:	0c02      	lsrs	r2, r0, #16
 8005f8a:	0c1b      	lsrs	r3, r3, #16
 8005f8c:	fb06 2303 	mla	r3, r6, r3, r2
 8005f90:	f8de 2000 	ldr.w	r2, [lr]
 8005f94:	b280      	uxth	r0, r0
 8005f96:	b292      	uxth	r2, r2
 8005f98:	1a12      	subs	r2, r2, r0
 8005f9a:	445a      	add	r2, fp
 8005f9c:	f8de 0000 	ldr.w	r0, [lr]
 8005fa0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005faa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005fae:	b292      	uxth	r2, r2
 8005fb0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005fb4:	45e1      	cmp	r9, ip
 8005fb6:	f84e 2b04 	str.w	r2, [lr], #4
 8005fba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005fbe:	d2de      	bcs.n	8005f7e <quorem+0x42>
 8005fc0:	9b00      	ldr	r3, [sp, #0]
 8005fc2:	58eb      	ldr	r3, [r5, r3]
 8005fc4:	b92b      	cbnz	r3, 8005fd2 <quorem+0x96>
 8005fc6:	9b01      	ldr	r3, [sp, #4]
 8005fc8:	3b04      	subs	r3, #4
 8005fca:	429d      	cmp	r5, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	d32f      	bcc.n	8006030 <quorem+0xf4>
 8005fd0:	613c      	str	r4, [r7, #16]
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	f001 f9c4 	bl	8007360 <__mcmp>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	db25      	blt.n	8006028 <quorem+0xec>
 8005fdc:	4629      	mov	r1, r5
 8005fde:	2000      	movs	r0, #0
 8005fe0:	f858 2b04 	ldr.w	r2, [r8], #4
 8005fe4:	f8d1 c000 	ldr.w	ip, [r1]
 8005fe8:	fa1f fe82 	uxth.w	lr, r2
 8005fec:	fa1f f38c 	uxth.w	r3, ip
 8005ff0:	eba3 030e 	sub.w	r3, r3, lr
 8005ff4:	4403      	add	r3, r0
 8005ff6:	0c12      	lsrs	r2, r2, #16
 8005ff8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005ffc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006000:	b29b      	uxth	r3, r3
 8006002:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006006:	45c1      	cmp	r9, r8
 8006008:	f841 3b04 	str.w	r3, [r1], #4
 800600c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006010:	d2e6      	bcs.n	8005fe0 <quorem+0xa4>
 8006012:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800601a:	b922      	cbnz	r2, 8006026 <quorem+0xea>
 800601c:	3b04      	subs	r3, #4
 800601e:	429d      	cmp	r5, r3
 8006020:	461a      	mov	r2, r3
 8006022:	d30b      	bcc.n	800603c <quorem+0x100>
 8006024:	613c      	str	r4, [r7, #16]
 8006026:	3601      	adds	r6, #1
 8006028:	4630      	mov	r0, r6
 800602a:	b003      	add	sp, #12
 800602c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006030:	6812      	ldr	r2, [r2, #0]
 8006032:	3b04      	subs	r3, #4
 8006034:	2a00      	cmp	r2, #0
 8006036:	d1cb      	bne.n	8005fd0 <quorem+0x94>
 8006038:	3c01      	subs	r4, #1
 800603a:	e7c6      	b.n	8005fca <quorem+0x8e>
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	3b04      	subs	r3, #4
 8006040:	2a00      	cmp	r2, #0
 8006042:	d1ef      	bne.n	8006024 <quorem+0xe8>
 8006044:	3c01      	subs	r4, #1
 8006046:	e7ea      	b.n	800601e <quorem+0xe2>
 8006048:	2000      	movs	r0, #0
 800604a:	e7ee      	b.n	800602a <quorem+0xee>
 800604c:	0000      	movs	r0, r0
	...

08006050 <_dtoa_r>:
 8006050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006054:	69c7      	ldr	r7, [r0, #28]
 8006056:	b099      	sub	sp, #100	@ 0x64
 8006058:	ed8d 0b02 	vstr	d0, [sp, #8]
 800605c:	ec55 4b10 	vmov	r4, r5, d0
 8006060:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006062:	9109      	str	r1, [sp, #36]	@ 0x24
 8006064:	4683      	mov	fp, r0
 8006066:	920e      	str	r2, [sp, #56]	@ 0x38
 8006068:	9313      	str	r3, [sp, #76]	@ 0x4c
 800606a:	b97f      	cbnz	r7, 800608c <_dtoa_r+0x3c>
 800606c:	2010      	movs	r0, #16
 800606e:	f000 fdfd 	bl	8006c6c <malloc>
 8006072:	4602      	mov	r2, r0
 8006074:	f8cb 001c 	str.w	r0, [fp, #28]
 8006078:	b920      	cbnz	r0, 8006084 <_dtoa_r+0x34>
 800607a:	4ba7      	ldr	r3, [pc, #668]	@ (8006318 <_dtoa_r+0x2c8>)
 800607c:	21ef      	movs	r1, #239	@ 0xef
 800607e:	48a7      	ldr	r0, [pc, #668]	@ (800631c <_dtoa_r+0x2cc>)
 8006080:	f002 fc36 	bl	80088f0 <__assert_func>
 8006084:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006088:	6007      	str	r7, [r0, #0]
 800608a:	60c7      	str	r7, [r0, #12]
 800608c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006090:	6819      	ldr	r1, [r3, #0]
 8006092:	b159      	cbz	r1, 80060ac <_dtoa_r+0x5c>
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	604a      	str	r2, [r1, #4]
 8006098:	2301      	movs	r3, #1
 800609a:	4093      	lsls	r3, r2
 800609c:	608b      	str	r3, [r1, #8]
 800609e:	4658      	mov	r0, fp
 80060a0:	f000 feda 	bl	8006e58 <_Bfree>
 80060a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	1e2b      	subs	r3, r5, #0
 80060ae:	bfb9      	ittee	lt
 80060b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80060b4:	9303      	strlt	r3, [sp, #12]
 80060b6:	2300      	movge	r3, #0
 80060b8:	6033      	strge	r3, [r6, #0]
 80060ba:	9f03      	ldr	r7, [sp, #12]
 80060bc:	4b98      	ldr	r3, [pc, #608]	@ (8006320 <_dtoa_r+0x2d0>)
 80060be:	bfbc      	itt	lt
 80060c0:	2201      	movlt	r2, #1
 80060c2:	6032      	strlt	r2, [r6, #0]
 80060c4:	43bb      	bics	r3, r7
 80060c6:	d112      	bne.n	80060ee <_dtoa_r+0x9e>
 80060c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80060ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80060ce:	6013      	str	r3, [r2, #0]
 80060d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80060d4:	4323      	orrs	r3, r4
 80060d6:	f000 854d 	beq.w	8006b74 <_dtoa_r+0xb24>
 80060da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80060dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006334 <_dtoa_r+0x2e4>
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 854f 	beq.w	8006b84 <_dtoa_r+0xb34>
 80060e6:	f10a 0303 	add.w	r3, sl, #3
 80060ea:	f000 bd49 	b.w	8006b80 <_dtoa_r+0xb30>
 80060ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060f2:	2200      	movs	r2, #0
 80060f4:	ec51 0b17 	vmov	r0, r1, d7
 80060f8:	2300      	movs	r3, #0
 80060fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80060fe:	f7fa fce3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006102:	4680      	mov	r8, r0
 8006104:	b158      	cbz	r0, 800611e <_dtoa_r+0xce>
 8006106:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006108:	2301      	movs	r3, #1
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800610e:	b113      	cbz	r3, 8006116 <_dtoa_r+0xc6>
 8006110:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006112:	4b84      	ldr	r3, [pc, #528]	@ (8006324 <_dtoa_r+0x2d4>)
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006338 <_dtoa_r+0x2e8>
 800611a:	f000 bd33 	b.w	8006b84 <_dtoa_r+0xb34>
 800611e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006122:	aa16      	add	r2, sp, #88	@ 0x58
 8006124:	a917      	add	r1, sp, #92	@ 0x5c
 8006126:	4658      	mov	r0, fp
 8006128:	f001 fa3a 	bl	80075a0 <__d2b>
 800612c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006130:	4681      	mov	r9, r0
 8006132:	2e00      	cmp	r6, #0
 8006134:	d077      	beq.n	8006226 <_dtoa_r+0x1d6>
 8006136:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006138:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800613c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006144:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006148:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800614c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006150:	4619      	mov	r1, r3
 8006152:	2200      	movs	r2, #0
 8006154:	4b74      	ldr	r3, [pc, #464]	@ (8006328 <_dtoa_r+0x2d8>)
 8006156:	f7fa f897 	bl	8000288 <__aeabi_dsub>
 800615a:	a369      	add	r3, pc, #420	@ (adr r3, 8006300 <_dtoa_r+0x2b0>)
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	f7fa fa4a 	bl	80005f8 <__aeabi_dmul>
 8006164:	a368      	add	r3, pc, #416	@ (adr r3, 8006308 <_dtoa_r+0x2b8>)
 8006166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616a:	f7fa f88f 	bl	800028c <__adddf3>
 800616e:	4604      	mov	r4, r0
 8006170:	4630      	mov	r0, r6
 8006172:	460d      	mov	r5, r1
 8006174:	f7fa f9d6 	bl	8000524 <__aeabi_i2d>
 8006178:	a365      	add	r3, pc, #404	@ (adr r3, 8006310 <_dtoa_r+0x2c0>)
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	f7fa fa3b 	bl	80005f8 <__aeabi_dmul>
 8006182:	4602      	mov	r2, r0
 8006184:	460b      	mov	r3, r1
 8006186:	4620      	mov	r0, r4
 8006188:	4629      	mov	r1, r5
 800618a:	f7fa f87f 	bl	800028c <__adddf3>
 800618e:	4604      	mov	r4, r0
 8006190:	460d      	mov	r5, r1
 8006192:	f7fa fce1 	bl	8000b58 <__aeabi_d2iz>
 8006196:	2200      	movs	r2, #0
 8006198:	4607      	mov	r7, r0
 800619a:	2300      	movs	r3, #0
 800619c:	4620      	mov	r0, r4
 800619e:	4629      	mov	r1, r5
 80061a0:	f7fa fc9c 	bl	8000adc <__aeabi_dcmplt>
 80061a4:	b140      	cbz	r0, 80061b8 <_dtoa_r+0x168>
 80061a6:	4638      	mov	r0, r7
 80061a8:	f7fa f9bc 	bl	8000524 <__aeabi_i2d>
 80061ac:	4622      	mov	r2, r4
 80061ae:	462b      	mov	r3, r5
 80061b0:	f7fa fc8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80061b4:	b900      	cbnz	r0, 80061b8 <_dtoa_r+0x168>
 80061b6:	3f01      	subs	r7, #1
 80061b8:	2f16      	cmp	r7, #22
 80061ba:	d851      	bhi.n	8006260 <_dtoa_r+0x210>
 80061bc:	4b5b      	ldr	r3, [pc, #364]	@ (800632c <_dtoa_r+0x2dc>)
 80061be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061ca:	f7fa fc87 	bl	8000adc <__aeabi_dcmplt>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d048      	beq.n	8006264 <_dtoa_r+0x214>
 80061d2:	3f01      	subs	r7, #1
 80061d4:	2300      	movs	r3, #0
 80061d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80061d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80061da:	1b9b      	subs	r3, r3, r6
 80061dc:	1e5a      	subs	r2, r3, #1
 80061de:	bf44      	itt	mi
 80061e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80061e4:	2300      	movmi	r3, #0
 80061e6:	9208      	str	r2, [sp, #32]
 80061e8:	bf54      	ite	pl
 80061ea:	f04f 0800 	movpl.w	r8, #0
 80061ee:	9308      	strmi	r3, [sp, #32]
 80061f0:	2f00      	cmp	r7, #0
 80061f2:	db39      	blt.n	8006268 <_dtoa_r+0x218>
 80061f4:	9b08      	ldr	r3, [sp, #32]
 80061f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80061f8:	443b      	add	r3, r7
 80061fa:	9308      	str	r3, [sp, #32]
 80061fc:	2300      	movs	r3, #0
 80061fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006202:	2b09      	cmp	r3, #9
 8006204:	d864      	bhi.n	80062d0 <_dtoa_r+0x280>
 8006206:	2b05      	cmp	r3, #5
 8006208:	bfc4      	itt	gt
 800620a:	3b04      	subgt	r3, #4
 800620c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800620e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006210:	f1a3 0302 	sub.w	r3, r3, #2
 8006214:	bfcc      	ite	gt
 8006216:	2400      	movgt	r4, #0
 8006218:	2401      	movle	r4, #1
 800621a:	2b03      	cmp	r3, #3
 800621c:	d863      	bhi.n	80062e6 <_dtoa_r+0x296>
 800621e:	e8df f003 	tbb	[pc, r3]
 8006222:	372a      	.short	0x372a
 8006224:	5535      	.short	0x5535
 8006226:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800622a:	441e      	add	r6, r3
 800622c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006230:	2b20      	cmp	r3, #32
 8006232:	bfc1      	itttt	gt
 8006234:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006238:	409f      	lslgt	r7, r3
 800623a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800623e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006242:	bfd6      	itet	le
 8006244:	f1c3 0320 	rsble	r3, r3, #32
 8006248:	ea47 0003 	orrgt.w	r0, r7, r3
 800624c:	fa04 f003 	lslle.w	r0, r4, r3
 8006250:	f7fa f958 	bl	8000504 <__aeabi_ui2d>
 8006254:	2201      	movs	r2, #1
 8006256:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800625a:	3e01      	subs	r6, #1
 800625c:	9214      	str	r2, [sp, #80]	@ 0x50
 800625e:	e777      	b.n	8006150 <_dtoa_r+0x100>
 8006260:	2301      	movs	r3, #1
 8006262:	e7b8      	b.n	80061d6 <_dtoa_r+0x186>
 8006264:	9012      	str	r0, [sp, #72]	@ 0x48
 8006266:	e7b7      	b.n	80061d8 <_dtoa_r+0x188>
 8006268:	427b      	negs	r3, r7
 800626a:	930a      	str	r3, [sp, #40]	@ 0x28
 800626c:	2300      	movs	r3, #0
 800626e:	eba8 0807 	sub.w	r8, r8, r7
 8006272:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006274:	e7c4      	b.n	8006200 <_dtoa_r+0x1b0>
 8006276:	2300      	movs	r3, #0
 8006278:	930b      	str	r3, [sp, #44]	@ 0x2c
 800627a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800627c:	2b00      	cmp	r3, #0
 800627e:	dc35      	bgt.n	80062ec <_dtoa_r+0x29c>
 8006280:	2301      	movs	r3, #1
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	9307      	str	r3, [sp, #28]
 8006286:	461a      	mov	r2, r3
 8006288:	920e      	str	r2, [sp, #56]	@ 0x38
 800628a:	e00b      	b.n	80062a4 <_dtoa_r+0x254>
 800628c:	2301      	movs	r3, #1
 800628e:	e7f3      	b.n	8006278 <_dtoa_r+0x228>
 8006290:	2300      	movs	r3, #0
 8006292:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006294:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006296:	18fb      	adds	r3, r7, r3
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	3301      	adds	r3, #1
 800629c:	2b01      	cmp	r3, #1
 800629e:	9307      	str	r3, [sp, #28]
 80062a0:	bfb8      	it	lt
 80062a2:	2301      	movlt	r3, #1
 80062a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80062a8:	2100      	movs	r1, #0
 80062aa:	2204      	movs	r2, #4
 80062ac:	f102 0514 	add.w	r5, r2, #20
 80062b0:	429d      	cmp	r5, r3
 80062b2:	d91f      	bls.n	80062f4 <_dtoa_r+0x2a4>
 80062b4:	6041      	str	r1, [r0, #4]
 80062b6:	4658      	mov	r0, fp
 80062b8:	f000 fd8e 	bl	8006dd8 <_Balloc>
 80062bc:	4682      	mov	sl, r0
 80062be:	2800      	cmp	r0, #0
 80062c0:	d13c      	bne.n	800633c <_dtoa_r+0x2ec>
 80062c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006330 <_dtoa_r+0x2e0>)
 80062c4:	4602      	mov	r2, r0
 80062c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80062ca:	e6d8      	b.n	800607e <_dtoa_r+0x2e>
 80062cc:	2301      	movs	r3, #1
 80062ce:	e7e0      	b.n	8006292 <_dtoa_r+0x242>
 80062d0:	2401      	movs	r4, #1
 80062d2:	2300      	movs	r3, #0
 80062d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80062d8:	f04f 33ff 	mov.w	r3, #4294967295
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	9307      	str	r3, [sp, #28]
 80062e0:	2200      	movs	r2, #0
 80062e2:	2312      	movs	r3, #18
 80062e4:	e7d0      	b.n	8006288 <_dtoa_r+0x238>
 80062e6:	2301      	movs	r3, #1
 80062e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062ea:	e7f5      	b.n	80062d8 <_dtoa_r+0x288>
 80062ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	9307      	str	r3, [sp, #28]
 80062f2:	e7d7      	b.n	80062a4 <_dtoa_r+0x254>
 80062f4:	3101      	adds	r1, #1
 80062f6:	0052      	lsls	r2, r2, #1
 80062f8:	e7d8      	b.n	80062ac <_dtoa_r+0x25c>
 80062fa:	bf00      	nop
 80062fc:	f3af 8000 	nop.w
 8006300:	636f4361 	.word	0x636f4361
 8006304:	3fd287a7 	.word	0x3fd287a7
 8006308:	8b60c8b3 	.word	0x8b60c8b3
 800630c:	3fc68a28 	.word	0x3fc68a28
 8006310:	509f79fb 	.word	0x509f79fb
 8006314:	3fd34413 	.word	0x3fd34413
 8006318:	08009752 	.word	0x08009752
 800631c:	08009769 	.word	0x08009769
 8006320:	7ff00000 	.word	0x7ff00000
 8006324:	0800971d 	.word	0x0800971d
 8006328:	3ff80000 	.word	0x3ff80000
 800632c:	08009860 	.word	0x08009860
 8006330:	080097c1 	.word	0x080097c1
 8006334:	0800974e 	.word	0x0800974e
 8006338:	0800971c 	.word	0x0800971c
 800633c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006340:	6018      	str	r0, [r3, #0]
 8006342:	9b07      	ldr	r3, [sp, #28]
 8006344:	2b0e      	cmp	r3, #14
 8006346:	f200 80a4 	bhi.w	8006492 <_dtoa_r+0x442>
 800634a:	2c00      	cmp	r4, #0
 800634c:	f000 80a1 	beq.w	8006492 <_dtoa_r+0x442>
 8006350:	2f00      	cmp	r7, #0
 8006352:	dd33      	ble.n	80063bc <_dtoa_r+0x36c>
 8006354:	4bad      	ldr	r3, [pc, #692]	@ (800660c <_dtoa_r+0x5bc>)
 8006356:	f007 020f 	and.w	r2, r7, #15
 800635a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800635e:	ed93 7b00 	vldr	d7, [r3]
 8006362:	05f8      	lsls	r0, r7, #23
 8006364:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006368:	ea4f 1427 	mov.w	r4, r7, asr #4
 800636c:	d516      	bpl.n	800639c <_dtoa_r+0x34c>
 800636e:	4ba8      	ldr	r3, [pc, #672]	@ (8006610 <_dtoa_r+0x5c0>)
 8006370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006374:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006378:	f7fa fa68 	bl	800084c <__aeabi_ddiv>
 800637c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006380:	f004 040f 	and.w	r4, r4, #15
 8006384:	2603      	movs	r6, #3
 8006386:	4da2      	ldr	r5, [pc, #648]	@ (8006610 <_dtoa_r+0x5c0>)
 8006388:	b954      	cbnz	r4, 80063a0 <_dtoa_r+0x350>
 800638a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800638e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006392:	f7fa fa5b 	bl	800084c <__aeabi_ddiv>
 8006396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800639a:	e028      	b.n	80063ee <_dtoa_r+0x39e>
 800639c:	2602      	movs	r6, #2
 800639e:	e7f2      	b.n	8006386 <_dtoa_r+0x336>
 80063a0:	07e1      	lsls	r1, r4, #31
 80063a2:	d508      	bpl.n	80063b6 <_dtoa_r+0x366>
 80063a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80063ac:	f7fa f924 	bl	80005f8 <__aeabi_dmul>
 80063b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063b4:	3601      	adds	r6, #1
 80063b6:	1064      	asrs	r4, r4, #1
 80063b8:	3508      	adds	r5, #8
 80063ba:	e7e5      	b.n	8006388 <_dtoa_r+0x338>
 80063bc:	f000 80d2 	beq.w	8006564 <_dtoa_r+0x514>
 80063c0:	427c      	negs	r4, r7
 80063c2:	4b92      	ldr	r3, [pc, #584]	@ (800660c <_dtoa_r+0x5bc>)
 80063c4:	4d92      	ldr	r5, [pc, #584]	@ (8006610 <_dtoa_r+0x5c0>)
 80063c6:	f004 020f 	and.w	r2, r4, #15
 80063ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063d6:	f7fa f90f 	bl	80005f8 <__aeabi_dmul>
 80063da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063de:	1124      	asrs	r4, r4, #4
 80063e0:	2300      	movs	r3, #0
 80063e2:	2602      	movs	r6, #2
 80063e4:	2c00      	cmp	r4, #0
 80063e6:	f040 80b2 	bne.w	800654e <_dtoa_r+0x4fe>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1d3      	bne.n	8006396 <_dtoa_r+0x346>
 80063ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80063f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 80b7 	beq.w	8006568 <_dtoa_r+0x518>
 80063fa:	4b86      	ldr	r3, [pc, #536]	@ (8006614 <_dtoa_r+0x5c4>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	4620      	mov	r0, r4
 8006400:	4629      	mov	r1, r5
 8006402:	f7fa fb6b 	bl	8000adc <__aeabi_dcmplt>
 8006406:	2800      	cmp	r0, #0
 8006408:	f000 80ae 	beq.w	8006568 <_dtoa_r+0x518>
 800640c:	9b07      	ldr	r3, [sp, #28]
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 80aa 	beq.w	8006568 <_dtoa_r+0x518>
 8006414:	9b00      	ldr	r3, [sp, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	dd37      	ble.n	800648a <_dtoa_r+0x43a>
 800641a:	1e7b      	subs	r3, r7, #1
 800641c:	9304      	str	r3, [sp, #16]
 800641e:	4620      	mov	r0, r4
 8006420:	4b7d      	ldr	r3, [pc, #500]	@ (8006618 <_dtoa_r+0x5c8>)
 8006422:	2200      	movs	r2, #0
 8006424:	4629      	mov	r1, r5
 8006426:	f7fa f8e7 	bl	80005f8 <__aeabi_dmul>
 800642a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800642e:	9c00      	ldr	r4, [sp, #0]
 8006430:	3601      	adds	r6, #1
 8006432:	4630      	mov	r0, r6
 8006434:	f7fa f876 	bl	8000524 <__aeabi_i2d>
 8006438:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800643c:	f7fa f8dc 	bl	80005f8 <__aeabi_dmul>
 8006440:	4b76      	ldr	r3, [pc, #472]	@ (800661c <_dtoa_r+0x5cc>)
 8006442:	2200      	movs	r2, #0
 8006444:	f7f9 ff22 	bl	800028c <__adddf3>
 8006448:	4605      	mov	r5, r0
 800644a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800644e:	2c00      	cmp	r4, #0
 8006450:	f040 808d 	bne.w	800656e <_dtoa_r+0x51e>
 8006454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006458:	4b71      	ldr	r3, [pc, #452]	@ (8006620 <_dtoa_r+0x5d0>)
 800645a:	2200      	movs	r2, #0
 800645c:	f7f9 ff14 	bl	8000288 <__aeabi_dsub>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006468:	462a      	mov	r2, r5
 800646a:	4633      	mov	r3, r6
 800646c:	f7fa fb54 	bl	8000b18 <__aeabi_dcmpgt>
 8006470:	2800      	cmp	r0, #0
 8006472:	f040 828b 	bne.w	800698c <_dtoa_r+0x93c>
 8006476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800647a:	462a      	mov	r2, r5
 800647c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006480:	f7fa fb2c 	bl	8000adc <__aeabi_dcmplt>
 8006484:	2800      	cmp	r0, #0
 8006486:	f040 8128 	bne.w	80066da <_dtoa_r+0x68a>
 800648a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800648e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006492:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006494:	2b00      	cmp	r3, #0
 8006496:	f2c0 815a 	blt.w	800674e <_dtoa_r+0x6fe>
 800649a:	2f0e      	cmp	r7, #14
 800649c:	f300 8157 	bgt.w	800674e <_dtoa_r+0x6fe>
 80064a0:	4b5a      	ldr	r3, [pc, #360]	@ (800660c <_dtoa_r+0x5bc>)
 80064a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80064a6:	ed93 7b00 	vldr	d7, [r3]
 80064aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	ed8d 7b00 	vstr	d7, [sp]
 80064b2:	da03      	bge.n	80064bc <_dtoa_r+0x46c>
 80064b4:	9b07      	ldr	r3, [sp, #28]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f340 8101 	ble.w	80066be <_dtoa_r+0x66e>
 80064bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80064c0:	4656      	mov	r6, sl
 80064c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064c6:	4620      	mov	r0, r4
 80064c8:	4629      	mov	r1, r5
 80064ca:	f7fa f9bf 	bl	800084c <__aeabi_ddiv>
 80064ce:	f7fa fb43 	bl	8000b58 <__aeabi_d2iz>
 80064d2:	4680      	mov	r8, r0
 80064d4:	f7fa f826 	bl	8000524 <__aeabi_i2d>
 80064d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064dc:	f7fa f88c 	bl	80005f8 <__aeabi_dmul>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4620      	mov	r0, r4
 80064e6:	4629      	mov	r1, r5
 80064e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80064ec:	f7f9 fecc 	bl	8000288 <__aeabi_dsub>
 80064f0:	f806 4b01 	strb.w	r4, [r6], #1
 80064f4:	9d07      	ldr	r5, [sp, #28]
 80064f6:	eba6 040a 	sub.w	r4, r6, sl
 80064fa:	42a5      	cmp	r5, r4
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	f040 8117 	bne.w	8006732 <_dtoa_r+0x6e2>
 8006504:	f7f9 fec2 	bl	800028c <__adddf3>
 8006508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800650c:	4604      	mov	r4, r0
 800650e:	460d      	mov	r5, r1
 8006510:	f7fa fb02 	bl	8000b18 <__aeabi_dcmpgt>
 8006514:	2800      	cmp	r0, #0
 8006516:	f040 80f9 	bne.w	800670c <_dtoa_r+0x6bc>
 800651a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800651e:	4620      	mov	r0, r4
 8006520:	4629      	mov	r1, r5
 8006522:	f7fa fad1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006526:	b118      	cbz	r0, 8006530 <_dtoa_r+0x4e0>
 8006528:	f018 0f01 	tst.w	r8, #1
 800652c:	f040 80ee 	bne.w	800670c <_dtoa_r+0x6bc>
 8006530:	4649      	mov	r1, r9
 8006532:	4658      	mov	r0, fp
 8006534:	f000 fc90 	bl	8006e58 <_Bfree>
 8006538:	2300      	movs	r3, #0
 800653a:	7033      	strb	r3, [r6, #0]
 800653c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800653e:	3701      	adds	r7, #1
 8006540:	601f      	str	r7, [r3, #0]
 8006542:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 831d 	beq.w	8006b84 <_dtoa_r+0xb34>
 800654a:	601e      	str	r6, [r3, #0]
 800654c:	e31a      	b.n	8006b84 <_dtoa_r+0xb34>
 800654e:	07e2      	lsls	r2, r4, #31
 8006550:	d505      	bpl.n	800655e <_dtoa_r+0x50e>
 8006552:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006556:	f7fa f84f 	bl	80005f8 <__aeabi_dmul>
 800655a:	3601      	adds	r6, #1
 800655c:	2301      	movs	r3, #1
 800655e:	1064      	asrs	r4, r4, #1
 8006560:	3508      	adds	r5, #8
 8006562:	e73f      	b.n	80063e4 <_dtoa_r+0x394>
 8006564:	2602      	movs	r6, #2
 8006566:	e742      	b.n	80063ee <_dtoa_r+0x39e>
 8006568:	9c07      	ldr	r4, [sp, #28]
 800656a:	9704      	str	r7, [sp, #16]
 800656c:	e761      	b.n	8006432 <_dtoa_r+0x3e2>
 800656e:	4b27      	ldr	r3, [pc, #156]	@ (800660c <_dtoa_r+0x5bc>)
 8006570:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006572:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006576:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800657a:	4454      	add	r4, sl
 800657c:	2900      	cmp	r1, #0
 800657e:	d053      	beq.n	8006628 <_dtoa_r+0x5d8>
 8006580:	4928      	ldr	r1, [pc, #160]	@ (8006624 <_dtoa_r+0x5d4>)
 8006582:	2000      	movs	r0, #0
 8006584:	f7fa f962 	bl	800084c <__aeabi_ddiv>
 8006588:	4633      	mov	r3, r6
 800658a:	462a      	mov	r2, r5
 800658c:	f7f9 fe7c 	bl	8000288 <__aeabi_dsub>
 8006590:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006594:	4656      	mov	r6, sl
 8006596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800659a:	f7fa fadd 	bl	8000b58 <__aeabi_d2iz>
 800659e:	4605      	mov	r5, r0
 80065a0:	f7f9 ffc0 	bl	8000524 <__aeabi_i2d>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ac:	f7f9 fe6c 	bl	8000288 <__aeabi_dsub>
 80065b0:	3530      	adds	r5, #48	@ 0x30
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065ba:	f806 5b01 	strb.w	r5, [r6], #1
 80065be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80065c2:	f7fa fa8b 	bl	8000adc <__aeabi_dcmplt>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d171      	bne.n	80066ae <_dtoa_r+0x65e>
 80065ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065ce:	4911      	ldr	r1, [pc, #68]	@ (8006614 <_dtoa_r+0x5c4>)
 80065d0:	2000      	movs	r0, #0
 80065d2:	f7f9 fe59 	bl	8000288 <__aeabi_dsub>
 80065d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80065da:	f7fa fa7f 	bl	8000adc <__aeabi_dcmplt>
 80065de:	2800      	cmp	r0, #0
 80065e0:	f040 8095 	bne.w	800670e <_dtoa_r+0x6be>
 80065e4:	42a6      	cmp	r6, r4
 80065e6:	f43f af50 	beq.w	800648a <_dtoa_r+0x43a>
 80065ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80065ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006618 <_dtoa_r+0x5c8>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	f7fa f801 	bl	80005f8 <__aeabi_dmul>
 80065f6:	4b08      	ldr	r3, [pc, #32]	@ (8006618 <_dtoa_r+0x5c8>)
 80065f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80065fc:	2200      	movs	r2, #0
 80065fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006602:	f7f9 fff9 	bl	80005f8 <__aeabi_dmul>
 8006606:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800660a:	e7c4      	b.n	8006596 <_dtoa_r+0x546>
 800660c:	08009860 	.word	0x08009860
 8006610:	08009838 	.word	0x08009838
 8006614:	3ff00000 	.word	0x3ff00000
 8006618:	40240000 	.word	0x40240000
 800661c:	401c0000 	.word	0x401c0000
 8006620:	40140000 	.word	0x40140000
 8006624:	3fe00000 	.word	0x3fe00000
 8006628:	4631      	mov	r1, r6
 800662a:	4628      	mov	r0, r5
 800662c:	f7f9 ffe4 	bl	80005f8 <__aeabi_dmul>
 8006630:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006634:	9415      	str	r4, [sp, #84]	@ 0x54
 8006636:	4656      	mov	r6, sl
 8006638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800663c:	f7fa fa8c 	bl	8000b58 <__aeabi_d2iz>
 8006640:	4605      	mov	r5, r0
 8006642:	f7f9 ff6f 	bl	8000524 <__aeabi_i2d>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800664e:	f7f9 fe1b 	bl	8000288 <__aeabi_dsub>
 8006652:	3530      	adds	r5, #48	@ 0x30
 8006654:	f806 5b01 	strb.w	r5, [r6], #1
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	42a6      	cmp	r6, r4
 800665e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	d124      	bne.n	80066b2 <_dtoa_r+0x662>
 8006668:	4bac      	ldr	r3, [pc, #688]	@ (800691c <_dtoa_r+0x8cc>)
 800666a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800666e:	f7f9 fe0d 	bl	800028c <__adddf3>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800667a:	f7fa fa4d 	bl	8000b18 <__aeabi_dcmpgt>
 800667e:	2800      	cmp	r0, #0
 8006680:	d145      	bne.n	800670e <_dtoa_r+0x6be>
 8006682:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006686:	49a5      	ldr	r1, [pc, #660]	@ (800691c <_dtoa_r+0x8cc>)
 8006688:	2000      	movs	r0, #0
 800668a:	f7f9 fdfd 	bl	8000288 <__aeabi_dsub>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006696:	f7fa fa21 	bl	8000adc <__aeabi_dcmplt>
 800669a:	2800      	cmp	r0, #0
 800669c:	f43f aef5 	beq.w	800648a <_dtoa_r+0x43a>
 80066a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80066a2:	1e73      	subs	r3, r6, #1
 80066a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80066a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80066aa:	2b30      	cmp	r3, #48	@ 0x30
 80066ac:	d0f8      	beq.n	80066a0 <_dtoa_r+0x650>
 80066ae:	9f04      	ldr	r7, [sp, #16]
 80066b0:	e73e      	b.n	8006530 <_dtoa_r+0x4e0>
 80066b2:	4b9b      	ldr	r3, [pc, #620]	@ (8006920 <_dtoa_r+0x8d0>)
 80066b4:	f7f9 ffa0 	bl	80005f8 <__aeabi_dmul>
 80066b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066bc:	e7bc      	b.n	8006638 <_dtoa_r+0x5e8>
 80066be:	d10c      	bne.n	80066da <_dtoa_r+0x68a>
 80066c0:	4b98      	ldr	r3, [pc, #608]	@ (8006924 <_dtoa_r+0x8d4>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066c8:	f7f9 ff96 	bl	80005f8 <__aeabi_dmul>
 80066cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066d0:	f7fa fa18 	bl	8000b04 <__aeabi_dcmpge>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	f000 8157 	beq.w	8006988 <_dtoa_r+0x938>
 80066da:	2400      	movs	r4, #0
 80066dc:	4625      	mov	r5, r4
 80066de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066e0:	43db      	mvns	r3, r3
 80066e2:	9304      	str	r3, [sp, #16]
 80066e4:	4656      	mov	r6, sl
 80066e6:	2700      	movs	r7, #0
 80066e8:	4621      	mov	r1, r4
 80066ea:	4658      	mov	r0, fp
 80066ec:	f000 fbb4 	bl	8006e58 <_Bfree>
 80066f0:	2d00      	cmp	r5, #0
 80066f2:	d0dc      	beq.n	80066ae <_dtoa_r+0x65e>
 80066f4:	b12f      	cbz	r7, 8006702 <_dtoa_r+0x6b2>
 80066f6:	42af      	cmp	r7, r5
 80066f8:	d003      	beq.n	8006702 <_dtoa_r+0x6b2>
 80066fa:	4639      	mov	r1, r7
 80066fc:	4658      	mov	r0, fp
 80066fe:	f000 fbab 	bl	8006e58 <_Bfree>
 8006702:	4629      	mov	r1, r5
 8006704:	4658      	mov	r0, fp
 8006706:	f000 fba7 	bl	8006e58 <_Bfree>
 800670a:	e7d0      	b.n	80066ae <_dtoa_r+0x65e>
 800670c:	9704      	str	r7, [sp, #16]
 800670e:	4633      	mov	r3, r6
 8006710:	461e      	mov	r6, r3
 8006712:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006716:	2a39      	cmp	r2, #57	@ 0x39
 8006718:	d107      	bne.n	800672a <_dtoa_r+0x6da>
 800671a:	459a      	cmp	sl, r3
 800671c:	d1f8      	bne.n	8006710 <_dtoa_r+0x6c0>
 800671e:	9a04      	ldr	r2, [sp, #16]
 8006720:	3201      	adds	r2, #1
 8006722:	9204      	str	r2, [sp, #16]
 8006724:	2230      	movs	r2, #48	@ 0x30
 8006726:	f88a 2000 	strb.w	r2, [sl]
 800672a:	781a      	ldrb	r2, [r3, #0]
 800672c:	3201      	adds	r2, #1
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	e7bd      	b.n	80066ae <_dtoa_r+0x65e>
 8006732:	4b7b      	ldr	r3, [pc, #492]	@ (8006920 <_dtoa_r+0x8d0>)
 8006734:	2200      	movs	r2, #0
 8006736:	f7f9 ff5f 	bl	80005f8 <__aeabi_dmul>
 800673a:	2200      	movs	r2, #0
 800673c:	2300      	movs	r3, #0
 800673e:	4604      	mov	r4, r0
 8006740:	460d      	mov	r5, r1
 8006742:	f7fa f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006746:	2800      	cmp	r0, #0
 8006748:	f43f aebb 	beq.w	80064c2 <_dtoa_r+0x472>
 800674c:	e6f0      	b.n	8006530 <_dtoa_r+0x4e0>
 800674e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006750:	2a00      	cmp	r2, #0
 8006752:	f000 80db 	beq.w	800690c <_dtoa_r+0x8bc>
 8006756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006758:	2a01      	cmp	r2, #1
 800675a:	f300 80bf 	bgt.w	80068dc <_dtoa_r+0x88c>
 800675e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006760:	2a00      	cmp	r2, #0
 8006762:	f000 80b7 	beq.w	80068d4 <_dtoa_r+0x884>
 8006766:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800676a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800676c:	4646      	mov	r6, r8
 800676e:	9a08      	ldr	r2, [sp, #32]
 8006770:	2101      	movs	r1, #1
 8006772:	441a      	add	r2, r3
 8006774:	4658      	mov	r0, fp
 8006776:	4498      	add	r8, r3
 8006778:	9208      	str	r2, [sp, #32]
 800677a:	f000 fc6b 	bl	8007054 <__i2b>
 800677e:	4605      	mov	r5, r0
 8006780:	b15e      	cbz	r6, 800679a <_dtoa_r+0x74a>
 8006782:	9b08      	ldr	r3, [sp, #32]
 8006784:	2b00      	cmp	r3, #0
 8006786:	dd08      	ble.n	800679a <_dtoa_r+0x74a>
 8006788:	42b3      	cmp	r3, r6
 800678a:	9a08      	ldr	r2, [sp, #32]
 800678c:	bfa8      	it	ge
 800678e:	4633      	movge	r3, r6
 8006790:	eba8 0803 	sub.w	r8, r8, r3
 8006794:	1af6      	subs	r6, r6, r3
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	9308      	str	r3, [sp, #32]
 800679a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800679c:	b1f3      	cbz	r3, 80067dc <_dtoa_r+0x78c>
 800679e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 80b7 	beq.w	8006914 <_dtoa_r+0x8c4>
 80067a6:	b18c      	cbz	r4, 80067cc <_dtoa_r+0x77c>
 80067a8:	4629      	mov	r1, r5
 80067aa:	4622      	mov	r2, r4
 80067ac:	4658      	mov	r0, fp
 80067ae:	f000 fd11 	bl	80071d4 <__pow5mult>
 80067b2:	464a      	mov	r2, r9
 80067b4:	4601      	mov	r1, r0
 80067b6:	4605      	mov	r5, r0
 80067b8:	4658      	mov	r0, fp
 80067ba:	f000 fc61 	bl	8007080 <__multiply>
 80067be:	4649      	mov	r1, r9
 80067c0:	9004      	str	r0, [sp, #16]
 80067c2:	4658      	mov	r0, fp
 80067c4:	f000 fb48 	bl	8006e58 <_Bfree>
 80067c8:	9b04      	ldr	r3, [sp, #16]
 80067ca:	4699      	mov	r9, r3
 80067cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067ce:	1b1a      	subs	r2, r3, r4
 80067d0:	d004      	beq.n	80067dc <_dtoa_r+0x78c>
 80067d2:	4649      	mov	r1, r9
 80067d4:	4658      	mov	r0, fp
 80067d6:	f000 fcfd 	bl	80071d4 <__pow5mult>
 80067da:	4681      	mov	r9, r0
 80067dc:	2101      	movs	r1, #1
 80067de:	4658      	mov	r0, fp
 80067e0:	f000 fc38 	bl	8007054 <__i2b>
 80067e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067e6:	4604      	mov	r4, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 81cf 	beq.w	8006b8c <_dtoa_r+0xb3c>
 80067ee:	461a      	mov	r2, r3
 80067f0:	4601      	mov	r1, r0
 80067f2:	4658      	mov	r0, fp
 80067f4:	f000 fcee 	bl	80071d4 <__pow5mult>
 80067f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	4604      	mov	r4, r0
 80067fe:	f300 8095 	bgt.w	800692c <_dtoa_r+0x8dc>
 8006802:	9b02      	ldr	r3, [sp, #8]
 8006804:	2b00      	cmp	r3, #0
 8006806:	f040 8087 	bne.w	8006918 <_dtoa_r+0x8c8>
 800680a:	9b03      	ldr	r3, [sp, #12]
 800680c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006810:	2b00      	cmp	r3, #0
 8006812:	f040 8089 	bne.w	8006928 <_dtoa_r+0x8d8>
 8006816:	9b03      	ldr	r3, [sp, #12]
 8006818:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800681c:	0d1b      	lsrs	r3, r3, #20
 800681e:	051b      	lsls	r3, r3, #20
 8006820:	b12b      	cbz	r3, 800682e <_dtoa_r+0x7de>
 8006822:	9b08      	ldr	r3, [sp, #32]
 8006824:	3301      	adds	r3, #1
 8006826:	9308      	str	r3, [sp, #32]
 8006828:	f108 0801 	add.w	r8, r8, #1
 800682c:	2301      	movs	r3, #1
 800682e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006830:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 81b0 	beq.w	8006b98 <_dtoa_r+0xb48>
 8006838:	6923      	ldr	r3, [r4, #16]
 800683a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800683e:	6918      	ldr	r0, [r3, #16]
 8006840:	f000 fbbc 	bl	8006fbc <__hi0bits>
 8006844:	f1c0 0020 	rsb	r0, r0, #32
 8006848:	9b08      	ldr	r3, [sp, #32]
 800684a:	4418      	add	r0, r3
 800684c:	f010 001f 	ands.w	r0, r0, #31
 8006850:	d077      	beq.n	8006942 <_dtoa_r+0x8f2>
 8006852:	f1c0 0320 	rsb	r3, r0, #32
 8006856:	2b04      	cmp	r3, #4
 8006858:	dd6b      	ble.n	8006932 <_dtoa_r+0x8e2>
 800685a:	9b08      	ldr	r3, [sp, #32]
 800685c:	f1c0 001c 	rsb	r0, r0, #28
 8006860:	4403      	add	r3, r0
 8006862:	4480      	add	r8, r0
 8006864:	4406      	add	r6, r0
 8006866:	9308      	str	r3, [sp, #32]
 8006868:	f1b8 0f00 	cmp.w	r8, #0
 800686c:	dd05      	ble.n	800687a <_dtoa_r+0x82a>
 800686e:	4649      	mov	r1, r9
 8006870:	4642      	mov	r2, r8
 8006872:	4658      	mov	r0, fp
 8006874:	f000 fd08 	bl	8007288 <__lshift>
 8006878:	4681      	mov	r9, r0
 800687a:	9b08      	ldr	r3, [sp, #32]
 800687c:	2b00      	cmp	r3, #0
 800687e:	dd05      	ble.n	800688c <_dtoa_r+0x83c>
 8006880:	4621      	mov	r1, r4
 8006882:	461a      	mov	r2, r3
 8006884:	4658      	mov	r0, fp
 8006886:	f000 fcff 	bl	8007288 <__lshift>
 800688a:	4604      	mov	r4, r0
 800688c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800688e:	2b00      	cmp	r3, #0
 8006890:	d059      	beq.n	8006946 <_dtoa_r+0x8f6>
 8006892:	4621      	mov	r1, r4
 8006894:	4648      	mov	r0, r9
 8006896:	f000 fd63 	bl	8007360 <__mcmp>
 800689a:	2800      	cmp	r0, #0
 800689c:	da53      	bge.n	8006946 <_dtoa_r+0x8f6>
 800689e:	1e7b      	subs	r3, r7, #1
 80068a0:	9304      	str	r3, [sp, #16]
 80068a2:	4649      	mov	r1, r9
 80068a4:	2300      	movs	r3, #0
 80068a6:	220a      	movs	r2, #10
 80068a8:	4658      	mov	r0, fp
 80068aa:	f000 faf7 	bl	8006e9c <__multadd>
 80068ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068b0:	4681      	mov	r9, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8172 	beq.w	8006b9c <_dtoa_r+0xb4c>
 80068b8:	2300      	movs	r3, #0
 80068ba:	4629      	mov	r1, r5
 80068bc:	220a      	movs	r2, #10
 80068be:	4658      	mov	r0, fp
 80068c0:	f000 faec 	bl	8006e9c <__multadd>
 80068c4:	9b00      	ldr	r3, [sp, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	4605      	mov	r5, r0
 80068ca:	dc67      	bgt.n	800699c <_dtoa_r+0x94c>
 80068cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	dc41      	bgt.n	8006956 <_dtoa_r+0x906>
 80068d2:	e063      	b.n	800699c <_dtoa_r+0x94c>
 80068d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80068d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80068da:	e746      	b.n	800676a <_dtoa_r+0x71a>
 80068dc:	9b07      	ldr	r3, [sp, #28]
 80068de:	1e5c      	subs	r4, r3, #1
 80068e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068e2:	42a3      	cmp	r3, r4
 80068e4:	bfbf      	itttt	lt
 80068e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80068e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80068ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80068ec:	1ae3      	sublt	r3, r4, r3
 80068ee:	bfb4      	ite	lt
 80068f0:	18d2      	addlt	r2, r2, r3
 80068f2:	1b1c      	subge	r4, r3, r4
 80068f4:	9b07      	ldr	r3, [sp, #28]
 80068f6:	bfbc      	itt	lt
 80068f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80068fa:	2400      	movlt	r4, #0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	bfb5      	itete	lt
 8006900:	eba8 0603 	sublt.w	r6, r8, r3
 8006904:	9b07      	ldrge	r3, [sp, #28]
 8006906:	2300      	movlt	r3, #0
 8006908:	4646      	movge	r6, r8
 800690a:	e730      	b.n	800676e <_dtoa_r+0x71e>
 800690c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800690e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006910:	4646      	mov	r6, r8
 8006912:	e735      	b.n	8006780 <_dtoa_r+0x730>
 8006914:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006916:	e75c      	b.n	80067d2 <_dtoa_r+0x782>
 8006918:	2300      	movs	r3, #0
 800691a:	e788      	b.n	800682e <_dtoa_r+0x7de>
 800691c:	3fe00000 	.word	0x3fe00000
 8006920:	40240000 	.word	0x40240000
 8006924:	40140000 	.word	0x40140000
 8006928:	9b02      	ldr	r3, [sp, #8]
 800692a:	e780      	b.n	800682e <_dtoa_r+0x7de>
 800692c:	2300      	movs	r3, #0
 800692e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006930:	e782      	b.n	8006838 <_dtoa_r+0x7e8>
 8006932:	d099      	beq.n	8006868 <_dtoa_r+0x818>
 8006934:	9a08      	ldr	r2, [sp, #32]
 8006936:	331c      	adds	r3, #28
 8006938:	441a      	add	r2, r3
 800693a:	4498      	add	r8, r3
 800693c:	441e      	add	r6, r3
 800693e:	9208      	str	r2, [sp, #32]
 8006940:	e792      	b.n	8006868 <_dtoa_r+0x818>
 8006942:	4603      	mov	r3, r0
 8006944:	e7f6      	b.n	8006934 <_dtoa_r+0x8e4>
 8006946:	9b07      	ldr	r3, [sp, #28]
 8006948:	9704      	str	r7, [sp, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	dc20      	bgt.n	8006990 <_dtoa_r+0x940>
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006952:	2b02      	cmp	r3, #2
 8006954:	dd1e      	ble.n	8006994 <_dtoa_r+0x944>
 8006956:	9b00      	ldr	r3, [sp, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f47f aec0 	bne.w	80066de <_dtoa_r+0x68e>
 800695e:	4621      	mov	r1, r4
 8006960:	2205      	movs	r2, #5
 8006962:	4658      	mov	r0, fp
 8006964:	f000 fa9a 	bl	8006e9c <__multadd>
 8006968:	4601      	mov	r1, r0
 800696a:	4604      	mov	r4, r0
 800696c:	4648      	mov	r0, r9
 800696e:	f000 fcf7 	bl	8007360 <__mcmp>
 8006972:	2800      	cmp	r0, #0
 8006974:	f77f aeb3 	ble.w	80066de <_dtoa_r+0x68e>
 8006978:	4656      	mov	r6, sl
 800697a:	2331      	movs	r3, #49	@ 0x31
 800697c:	f806 3b01 	strb.w	r3, [r6], #1
 8006980:	9b04      	ldr	r3, [sp, #16]
 8006982:	3301      	adds	r3, #1
 8006984:	9304      	str	r3, [sp, #16]
 8006986:	e6ae      	b.n	80066e6 <_dtoa_r+0x696>
 8006988:	9c07      	ldr	r4, [sp, #28]
 800698a:	9704      	str	r7, [sp, #16]
 800698c:	4625      	mov	r5, r4
 800698e:	e7f3      	b.n	8006978 <_dtoa_r+0x928>
 8006990:	9b07      	ldr	r3, [sp, #28]
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 8104 	beq.w	8006ba4 <_dtoa_r+0xb54>
 800699c:	2e00      	cmp	r6, #0
 800699e:	dd05      	ble.n	80069ac <_dtoa_r+0x95c>
 80069a0:	4629      	mov	r1, r5
 80069a2:	4632      	mov	r2, r6
 80069a4:	4658      	mov	r0, fp
 80069a6:	f000 fc6f 	bl	8007288 <__lshift>
 80069aa:	4605      	mov	r5, r0
 80069ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d05a      	beq.n	8006a68 <_dtoa_r+0xa18>
 80069b2:	6869      	ldr	r1, [r5, #4]
 80069b4:	4658      	mov	r0, fp
 80069b6:	f000 fa0f 	bl	8006dd8 <_Balloc>
 80069ba:	4606      	mov	r6, r0
 80069bc:	b928      	cbnz	r0, 80069ca <_dtoa_r+0x97a>
 80069be:	4b84      	ldr	r3, [pc, #528]	@ (8006bd0 <_dtoa_r+0xb80>)
 80069c0:	4602      	mov	r2, r0
 80069c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80069c6:	f7ff bb5a 	b.w	800607e <_dtoa_r+0x2e>
 80069ca:	692a      	ldr	r2, [r5, #16]
 80069cc:	3202      	adds	r2, #2
 80069ce:	0092      	lsls	r2, r2, #2
 80069d0:	f105 010c 	add.w	r1, r5, #12
 80069d4:	300c      	adds	r0, #12
 80069d6:	f001 ff75 	bl	80088c4 <memcpy>
 80069da:	2201      	movs	r2, #1
 80069dc:	4631      	mov	r1, r6
 80069de:	4658      	mov	r0, fp
 80069e0:	f000 fc52 	bl	8007288 <__lshift>
 80069e4:	f10a 0301 	add.w	r3, sl, #1
 80069e8:	9307      	str	r3, [sp, #28]
 80069ea:	9b00      	ldr	r3, [sp, #0]
 80069ec:	4453      	add	r3, sl
 80069ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069f0:	9b02      	ldr	r3, [sp, #8]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	462f      	mov	r7, r5
 80069f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80069fa:	4605      	mov	r5, r0
 80069fc:	9b07      	ldr	r3, [sp, #28]
 80069fe:	4621      	mov	r1, r4
 8006a00:	3b01      	subs	r3, #1
 8006a02:	4648      	mov	r0, r9
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	f7ff fa99 	bl	8005f3c <quorem>
 8006a0a:	4639      	mov	r1, r7
 8006a0c:	9002      	str	r0, [sp, #8]
 8006a0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006a12:	4648      	mov	r0, r9
 8006a14:	f000 fca4 	bl	8007360 <__mcmp>
 8006a18:	462a      	mov	r2, r5
 8006a1a:	9008      	str	r0, [sp, #32]
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	4658      	mov	r0, fp
 8006a20:	f000 fcba 	bl	8007398 <__mdiff>
 8006a24:	68c2      	ldr	r2, [r0, #12]
 8006a26:	4606      	mov	r6, r0
 8006a28:	bb02      	cbnz	r2, 8006a6c <_dtoa_r+0xa1c>
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	4648      	mov	r0, r9
 8006a2e:	f000 fc97 	bl	8007360 <__mcmp>
 8006a32:	4602      	mov	r2, r0
 8006a34:	4631      	mov	r1, r6
 8006a36:	4658      	mov	r0, fp
 8006a38:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a3a:	f000 fa0d 	bl	8006e58 <_Bfree>
 8006a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a42:	9e07      	ldr	r6, [sp, #28]
 8006a44:	ea43 0102 	orr.w	r1, r3, r2
 8006a48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a4a:	4319      	orrs	r1, r3
 8006a4c:	d110      	bne.n	8006a70 <_dtoa_r+0xa20>
 8006a4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a52:	d029      	beq.n	8006aa8 <_dtoa_r+0xa58>
 8006a54:	9b08      	ldr	r3, [sp, #32]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	dd02      	ble.n	8006a60 <_dtoa_r+0xa10>
 8006a5a:	9b02      	ldr	r3, [sp, #8]
 8006a5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006a60:	9b00      	ldr	r3, [sp, #0]
 8006a62:	f883 8000 	strb.w	r8, [r3]
 8006a66:	e63f      	b.n	80066e8 <_dtoa_r+0x698>
 8006a68:	4628      	mov	r0, r5
 8006a6a:	e7bb      	b.n	80069e4 <_dtoa_r+0x994>
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	e7e1      	b.n	8006a34 <_dtoa_r+0x9e4>
 8006a70:	9b08      	ldr	r3, [sp, #32]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	db04      	blt.n	8006a80 <_dtoa_r+0xa30>
 8006a76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a7c:	430b      	orrs	r3, r1
 8006a7e:	d120      	bne.n	8006ac2 <_dtoa_r+0xa72>
 8006a80:	2a00      	cmp	r2, #0
 8006a82:	dded      	ble.n	8006a60 <_dtoa_r+0xa10>
 8006a84:	4649      	mov	r1, r9
 8006a86:	2201      	movs	r2, #1
 8006a88:	4658      	mov	r0, fp
 8006a8a:	f000 fbfd 	bl	8007288 <__lshift>
 8006a8e:	4621      	mov	r1, r4
 8006a90:	4681      	mov	r9, r0
 8006a92:	f000 fc65 	bl	8007360 <__mcmp>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	dc03      	bgt.n	8006aa2 <_dtoa_r+0xa52>
 8006a9a:	d1e1      	bne.n	8006a60 <_dtoa_r+0xa10>
 8006a9c:	f018 0f01 	tst.w	r8, #1
 8006aa0:	d0de      	beq.n	8006a60 <_dtoa_r+0xa10>
 8006aa2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006aa6:	d1d8      	bne.n	8006a5a <_dtoa_r+0xa0a>
 8006aa8:	9a00      	ldr	r2, [sp, #0]
 8006aaa:	2339      	movs	r3, #57	@ 0x39
 8006aac:	7013      	strb	r3, [r2, #0]
 8006aae:	4633      	mov	r3, r6
 8006ab0:	461e      	mov	r6, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006ab8:	2a39      	cmp	r2, #57	@ 0x39
 8006aba:	d052      	beq.n	8006b62 <_dtoa_r+0xb12>
 8006abc:	3201      	adds	r2, #1
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	e612      	b.n	80066e8 <_dtoa_r+0x698>
 8006ac2:	2a00      	cmp	r2, #0
 8006ac4:	dd07      	ble.n	8006ad6 <_dtoa_r+0xa86>
 8006ac6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006aca:	d0ed      	beq.n	8006aa8 <_dtoa_r+0xa58>
 8006acc:	9a00      	ldr	r2, [sp, #0]
 8006ace:	f108 0301 	add.w	r3, r8, #1
 8006ad2:	7013      	strb	r3, [r2, #0]
 8006ad4:	e608      	b.n	80066e8 <_dtoa_r+0x698>
 8006ad6:	9b07      	ldr	r3, [sp, #28]
 8006ad8:	9a07      	ldr	r2, [sp, #28]
 8006ada:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006ade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d028      	beq.n	8006b36 <_dtoa_r+0xae6>
 8006ae4:	4649      	mov	r1, r9
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	220a      	movs	r2, #10
 8006aea:	4658      	mov	r0, fp
 8006aec:	f000 f9d6 	bl	8006e9c <__multadd>
 8006af0:	42af      	cmp	r7, r5
 8006af2:	4681      	mov	r9, r0
 8006af4:	f04f 0300 	mov.w	r3, #0
 8006af8:	f04f 020a 	mov.w	r2, #10
 8006afc:	4639      	mov	r1, r7
 8006afe:	4658      	mov	r0, fp
 8006b00:	d107      	bne.n	8006b12 <_dtoa_r+0xac2>
 8006b02:	f000 f9cb 	bl	8006e9c <__multadd>
 8006b06:	4607      	mov	r7, r0
 8006b08:	4605      	mov	r5, r0
 8006b0a:	9b07      	ldr	r3, [sp, #28]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	9307      	str	r3, [sp, #28]
 8006b10:	e774      	b.n	80069fc <_dtoa_r+0x9ac>
 8006b12:	f000 f9c3 	bl	8006e9c <__multadd>
 8006b16:	4629      	mov	r1, r5
 8006b18:	4607      	mov	r7, r0
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	220a      	movs	r2, #10
 8006b1e:	4658      	mov	r0, fp
 8006b20:	f000 f9bc 	bl	8006e9c <__multadd>
 8006b24:	4605      	mov	r5, r0
 8006b26:	e7f0      	b.n	8006b0a <_dtoa_r+0xaba>
 8006b28:	9b00      	ldr	r3, [sp, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bfcc      	ite	gt
 8006b2e:	461e      	movgt	r6, r3
 8006b30:	2601      	movle	r6, #1
 8006b32:	4456      	add	r6, sl
 8006b34:	2700      	movs	r7, #0
 8006b36:	4649      	mov	r1, r9
 8006b38:	2201      	movs	r2, #1
 8006b3a:	4658      	mov	r0, fp
 8006b3c:	f000 fba4 	bl	8007288 <__lshift>
 8006b40:	4621      	mov	r1, r4
 8006b42:	4681      	mov	r9, r0
 8006b44:	f000 fc0c 	bl	8007360 <__mcmp>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	dcb0      	bgt.n	8006aae <_dtoa_r+0xa5e>
 8006b4c:	d102      	bne.n	8006b54 <_dtoa_r+0xb04>
 8006b4e:	f018 0f01 	tst.w	r8, #1
 8006b52:	d1ac      	bne.n	8006aae <_dtoa_r+0xa5e>
 8006b54:	4633      	mov	r3, r6
 8006b56:	461e      	mov	r6, r3
 8006b58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b5c:	2a30      	cmp	r2, #48	@ 0x30
 8006b5e:	d0fa      	beq.n	8006b56 <_dtoa_r+0xb06>
 8006b60:	e5c2      	b.n	80066e8 <_dtoa_r+0x698>
 8006b62:	459a      	cmp	sl, r3
 8006b64:	d1a4      	bne.n	8006ab0 <_dtoa_r+0xa60>
 8006b66:	9b04      	ldr	r3, [sp, #16]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	9304      	str	r3, [sp, #16]
 8006b6c:	2331      	movs	r3, #49	@ 0x31
 8006b6e:	f88a 3000 	strb.w	r3, [sl]
 8006b72:	e5b9      	b.n	80066e8 <_dtoa_r+0x698>
 8006b74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006bd4 <_dtoa_r+0xb84>
 8006b7a:	b11b      	cbz	r3, 8006b84 <_dtoa_r+0xb34>
 8006b7c:	f10a 0308 	add.w	r3, sl, #8
 8006b80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b82:	6013      	str	r3, [r2, #0]
 8006b84:	4650      	mov	r0, sl
 8006b86:	b019      	add	sp, #100	@ 0x64
 8006b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	f77f ae37 	ble.w	8006802 <_dtoa_r+0x7b2>
 8006b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b96:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b98:	2001      	movs	r0, #1
 8006b9a:	e655      	b.n	8006848 <_dtoa_r+0x7f8>
 8006b9c:	9b00      	ldr	r3, [sp, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f77f aed6 	ble.w	8006950 <_dtoa_r+0x900>
 8006ba4:	4656      	mov	r6, sl
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	4648      	mov	r0, r9
 8006baa:	f7ff f9c7 	bl	8005f3c <quorem>
 8006bae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006bb2:	f806 8b01 	strb.w	r8, [r6], #1
 8006bb6:	9b00      	ldr	r3, [sp, #0]
 8006bb8:	eba6 020a 	sub.w	r2, r6, sl
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	ddb3      	ble.n	8006b28 <_dtoa_r+0xad8>
 8006bc0:	4649      	mov	r1, r9
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	220a      	movs	r2, #10
 8006bc6:	4658      	mov	r0, fp
 8006bc8:	f000 f968 	bl	8006e9c <__multadd>
 8006bcc:	4681      	mov	r9, r0
 8006bce:	e7ea      	b.n	8006ba6 <_dtoa_r+0xb56>
 8006bd0:	080097c1 	.word	0x080097c1
 8006bd4:	08009745 	.word	0x08009745

08006bd8 <_free_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4605      	mov	r5, r0
 8006bdc:	2900      	cmp	r1, #0
 8006bde:	d041      	beq.n	8006c64 <_free_r+0x8c>
 8006be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be4:	1f0c      	subs	r4, r1, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bfb8      	it	lt
 8006bea:	18e4      	addlt	r4, r4, r3
 8006bec:	f000 f8e8 	bl	8006dc0 <__malloc_lock>
 8006bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8006c68 <_free_r+0x90>)
 8006bf2:	6813      	ldr	r3, [r2, #0]
 8006bf4:	b933      	cbnz	r3, 8006c04 <_free_r+0x2c>
 8006bf6:	6063      	str	r3, [r4, #4]
 8006bf8:	6014      	str	r4, [r2, #0]
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c00:	f000 b8e4 	b.w	8006dcc <__malloc_unlock>
 8006c04:	42a3      	cmp	r3, r4
 8006c06:	d908      	bls.n	8006c1a <_free_r+0x42>
 8006c08:	6820      	ldr	r0, [r4, #0]
 8006c0a:	1821      	adds	r1, r4, r0
 8006c0c:	428b      	cmp	r3, r1
 8006c0e:	bf01      	itttt	eq
 8006c10:	6819      	ldreq	r1, [r3, #0]
 8006c12:	685b      	ldreq	r3, [r3, #4]
 8006c14:	1809      	addeq	r1, r1, r0
 8006c16:	6021      	streq	r1, [r4, #0]
 8006c18:	e7ed      	b.n	8006bf6 <_free_r+0x1e>
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	b10b      	cbz	r3, 8006c24 <_free_r+0x4c>
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	d9fa      	bls.n	8006c1a <_free_r+0x42>
 8006c24:	6811      	ldr	r1, [r2, #0]
 8006c26:	1850      	adds	r0, r2, r1
 8006c28:	42a0      	cmp	r0, r4
 8006c2a:	d10b      	bne.n	8006c44 <_free_r+0x6c>
 8006c2c:	6820      	ldr	r0, [r4, #0]
 8006c2e:	4401      	add	r1, r0
 8006c30:	1850      	adds	r0, r2, r1
 8006c32:	4283      	cmp	r3, r0
 8006c34:	6011      	str	r1, [r2, #0]
 8006c36:	d1e0      	bne.n	8006bfa <_free_r+0x22>
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	6053      	str	r3, [r2, #4]
 8006c3e:	4408      	add	r0, r1
 8006c40:	6010      	str	r0, [r2, #0]
 8006c42:	e7da      	b.n	8006bfa <_free_r+0x22>
 8006c44:	d902      	bls.n	8006c4c <_free_r+0x74>
 8006c46:	230c      	movs	r3, #12
 8006c48:	602b      	str	r3, [r5, #0]
 8006c4a:	e7d6      	b.n	8006bfa <_free_r+0x22>
 8006c4c:	6820      	ldr	r0, [r4, #0]
 8006c4e:	1821      	adds	r1, r4, r0
 8006c50:	428b      	cmp	r3, r1
 8006c52:	bf04      	itt	eq
 8006c54:	6819      	ldreq	r1, [r3, #0]
 8006c56:	685b      	ldreq	r3, [r3, #4]
 8006c58:	6063      	str	r3, [r4, #4]
 8006c5a:	bf04      	itt	eq
 8006c5c:	1809      	addeq	r1, r1, r0
 8006c5e:	6021      	streq	r1, [r4, #0]
 8006c60:	6054      	str	r4, [r2, #4]
 8006c62:	e7ca      	b.n	8006bfa <_free_r+0x22>
 8006c64:	bd38      	pop	{r3, r4, r5, pc}
 8006c66:	bf00      	nop
 8006c68:	20000598 	.word	0x20000598

08006c6c <malloc>:
 8006c6c:	4b02      	ldr	r3, [pc, #8]	@ (8006c78 <malloc+0xc>)
 8006c6e:	4601      	mov	r1, r0
 8006c70:	6818      	ldr	r0, [r3, #0]
 8006c72:	f000 b825 	b.w	8006cc0 <_malloc_r>
 8006c76:	bf00      	nop
 8006c78:	2000001c 	.word	0x2000001c

08006c7c <sbrk_aligned>:
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	4e0f      	ldr	r6, [pc, #60]	@ (8006cbc <sbrk_aligned+0x40>)
 8006c80:	460c      	mov	r4, r1
 8006c82:	6831      	ldr	r1, [r6, #0]
 8006c84:	4605      	mov	r5, r0
 8006c86:	b911      	cbnz	r1, 8006c8e <sbrk_aligned+0x12>
 8006c88:	f001 fe0c 	bl	80088a4 <_sbrk_r>
 8006c8c:	6030      	str	r0, [r6, #0]
 8006c8e:	4621      	mov	r1, r4
 8006c90:	4628      	mov	r0, r5
 8006c92:	f001 fe07 	bl	80088a4 <_sbrk_r>
 8006c96:	1c43      	adds	r3, r0, #1
 8006c98:	d103      	bne.n	8006ca2 <sbrk_aligned+0x26>
 8006c9a:	f04f 34ff 	mov.w	r4, #4294967295
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	bd70      	pop	{r4, r5, r6, pc}
 8006ca2:	1cc4      	adds	r4, r0, #3
 8006ca4:	f024 0403 	bic.w	r4, r4, #3
 8006ca8:	42a0      	cmp	r0, r4
 8006caa:	d0f8      	beq.n	8006c9e <sbrk_aligned+0x22>
 8006cac:	1a21      	subs	r1, r4, r0
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f001 fdf8 	bl	80088a4 <_sbrk_r>
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d1f2      	bne.n	8006c9e <sbrk_aligned+0x22>
 8006cb8:	e7ef      	b.n	8006c9a <sbrk_aligned+0x1e>
 8006cba:	bf00      	nop
 8006cbc:	20000594 	.word	0x20000594

08006cc0 <_malloc_r>:
 8006cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cc4:	1ccd      	adds	r5, r1, #3
 8006cc6:	f025 0503 	bic.w	r5, r5, #3
 8006cca:	3508      	adds	r5, #8
 8006ccc:	2d0c      	cmp	r5, #12
 8006cce:	bf38      	it	cc
 8006cd0:	250c      	movcc	r5, #12
 8006cd2:	2d00      	cmp	r5, #0
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	db01      	blt.n	8006cdc <_malloc_r+0x1c>
 8006cd8:	42a9      	cmp	r1, r5
 8006cda:	d904      	bls.n	8006ce6 <_malloc_r+0x26>
 8006cdc:	230c      	movs	r3, #12
 8006cde:	6033      	str	r3, [r6, #0]
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ce6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006dbc <_malloc_r+0xfc>
 8006cea:	f000 f869 	bl	8006dc0 <__malloc_lock>
 8006cee:	f8d8 3000 	ldr.w	r3, [r8]
 8006cf2:	461c      	mov	r4, r3
 8006cf4:	bb44      	cbnz	r4, 8006d48 <_malloc_r+0x88>
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f7ff ffbf 	bl	8006c7c <sbrk_aligned>
 8006cfe:	1c43      	adds	r3, r0, #1
 8006d00:	4604      	mov	r4, r0
 8006d02:	d158      	bne.n	8006db6 <_malloc_r+0xf6>
 8006d04:	f8d8 4000 	ldr.w	r4, [r8]
 8006d08:	4627      	mov	r7, r4
 8006d0a:	2f00      	cmp	r7, #0
 8006d0c:	d143      	bne.n	8006d96 <_malloc_r+0xd6>
 8006d0e:	2c00      	cmp	r4, #0
 8006d10:	d04b      	beq.n	8006daa <_malloc_r+0xea>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	4639      	mov	r1, r7
 8006d16:	4630      	mov	r0, r6
 8006d18:	eb04 0903 	add.w	r9, r4, r3
 8006d1c:	f001 fdc2 	bl	80088a4 <_sbrk_r>
 8006d20:	4581      	cmp	r9, r0
 8006d22:	d142      	bne.n	8006daa <_malloc_r+0xea>
 8006d24:	6821      	ldr	r1, [r4, #0]
 8006d26:	1a6d      	subs	r5, r5, r1
 8006d28:	4629      	mov	r1, r5
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f7ff ffa6 	bl	8006c7c <sbrk_aligned>
 8006d30:	3001      	adds	r0, #1
 8006d32:	d03a      	beq.n	8006daa <_malloc_r+0xea>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	442b      	add	r3, r5
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	bb62      	cbnz	r2, 8006d9c <_malloc_r+0xdc>
 8006d42:	f8c8 7000 	str.w	r7, [r8]
 8006d46:	e00f      	b.n	8006d68 <_malloc_r+0xa8>
 8006d48:	6822      	ldr	r2, [r4, #0]
 8006d4a:	1b52      	subs	r2, r2, r5
 8006d4c:	d420      	bmi.n	8006d90 <_malloc_r+0xd0>
 8006d4e:	2a0b      	cmp	r2, #11
 8006d50:	d917      	bls.n	8006d82 <_malloc_r+0xc2>
 8006d52:	1961      	adds	r1, r4, r5
 8006d54:	42a3      	cmp	r3, r4
 8006d56:	6025      	str	r5, [r4, #0]
 8006d58:	bf18      	it	ne
 8006d5a:	6059      	strne	r1, [r3, #4]
 8006d5c:	6863      	ldr	r3, [r4, #4]
 8006d5e:	bf08      	it	eq
 8006d60:	f8c8 1000 	streq.w	r1, [r8]
 8006d64:	5162      	str	r2, [r4, r5]
 8006d66:	604b      	str	r3, [r1, #4]
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f000 f82f 	bl	8006dcc <__malloc_unlock>
 8006d6e:	f104 000b 	add.w	r0, r4, #11
 8006d72:	1d23      	adds	r3, r4, #4
 8006d74:	f020 0007 	bic.w	r0, r0, #7
 8006d78:	1ac2      	subs	r2, r0, r3
 8006d7a:	bf1c      	itt	ne
 8006d7c:	1a1b      	subne	r3, r3, r0
 8006d7e:	50a3      	strne	r3, [r4, r2]
 8006d80:	e7af      	b.n	8006ce2 <_malloc_r+0x22>
 8006d82:	6862      	ldr	r2, [r4, #4]
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	bf0c      	ite	eq
 8006d88:	f8c8 2000 	streq.w	r2, [r8]
 8006d8c:	605a      	strne	r2, [r3, #4]
 8006d8e:	e7eb      	b.n	8006d68 <_malloc_r+0xa8>
 8006d90:	4623      	mov	r3, r4
 8006d92:	6864      	ldr	r4, [r4, #4]
 8006d94:	e7ae      	b.n	8006cf4 <_malloc_r+0x34>
 8006d96:	463c      	mov	r4, r7
 8006d98:	687f      	ldr	r7, [r7, #4]
 8006d9a:	e7b6      	b.n	8006d0a <_malloc_r+0x4a>
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	d1fb      	bne.n	8006d9c <_malloc_r+0xdc>
 8006da4:	2300      	movs	r3, #0
 8006da6:	6053      	str	r3, [r2, #4]
 8006da8:	e7de      	b.n	8006d68 <_malloc_r+0xa8>
 8006daa:	230c      	movs	r3, #12
 8006dac:	6033      	str	r3, [r6, #0]
 8006dae:	4630      	mov	r0, r6
 8006db0:	f000 f80c 	bl	8006dcc <__malloc_unlock>
 8006db4:	e794      	b.n	8006ce0 <_malloc_r+0x20>
 8006db6:	6005      	str	r5, [r0, #0]
 8006db8:	e7d6      	b.n	8006d68 <_malloc_r+0xa8>
 8006dba:	bf00      	nop
 8006dbc:	20000598 	.word	0x20000598

08006dc0 <__malloc_lock>:
 8006dc0:	4801      	ldr	r0, [pc, #4]	@ (8006dc8 <__malloc_lock+0x8>)
 8006dc2:	f7ff b8b2 	b.w	8005f2a <__retarget_lock_acquire_recursive>
 8006dc6:	bf00      	nop
 8006dc8:	20000590 	.word	0x20000590

08006dcc <__malloc_unlock>:
 8006dcc:	4801      	ldr	r0, [pc, #4]	@ (8006dd4 <__malloc_unlock+0x8>)
 8006dce:	f7ff b8ad 	b.w	8005f2c <__retarget_lock_release_recursive>
 8006dd2:	bf00      	nop
 8006dd4:	20000590 	.word	0x20000590

08006dd8 <_Balloc>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	69c6      	ldr	r6, [r0, #28]
 8006ddc:	4604      	mov	r4, r0
 8006dde:	460d      	mov	r5, r1
 8006de0:	b976      	cbnz	r6, 8006e00 <_Balloc+0x28>
 8006de2:	2010      	movs	r0, #16
 8006de4:	f7ff ff42 	bl	8006c6c <malloc>
 8006de8:	4602      	mov	r2, r0
 8006dea:	61e0      	str	r0, [r4, #28]
 8006dec:	b920      	cbnz	r0, 8006df8 <_Balloc+0x20>
 8006dee:	4b18      	ldr	r3, [pc, #96]	@ (8006e50 <_Balloc+0x78>)
 8006df0:	4818      	ldr	r0, [pc, #96]	@ (8006e54 <_Balloc+0x7c>)
 8006df2:	216b      	movs	r1, #107	@ 0x6b
 8006df4:	f001 fd7c 	bl	80088f0 <__assert_func>
 8006df8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dfc:	6006      	str	r6, [r0, #0]
 8006dfe:	60c6      	str	r6, [r0, #12]
 8006e00:	69e6      	ldr	r6, [r4, #28]
 8006e02:	68f3      	ldr	r3, [r6, #12]
 8006e04:	b183      	cbz	r3, 8006e28 <_Balloc+0x50>
 8006e06:	69e3      	ldr	r3, [r4, #28]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e0e:	b9b8      	cbnz	r0, 8006e40 <_Balloc+0x68>
 8006e10:	2101      	movs	r1, #1
 8006e12:	fa01 f605 	lsl.w	r6, r1, r5
 8006e16:	1d72      	adds	r2, r6, #5
 8006e18:	0092      	lsls	r2, r2, #2
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f001 fd86 	bl	800892c <_calloc_r>
 8006e20:	b160      	cbz	r0, 8006e3c <_Balloc+0x64>
 8006e22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e26:	e00e      	b.n	8006e46 <_Balloc+0x6e>
 8006e28:	2221      	movs	r2, #33	@ 0x21
 8006e2a:	2104      	movs	r1, #4
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f001 fd7d 	bl	800892c <_calloc_r>
 8006e32:	69e3      	ldr	r3, [r4, #28]
 8006e34:	60f0      	str	r0, [r6, #12]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e4      	bne.n	8006e06 <_Balloc+0x2e>
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	6802      	ldr	r2, [r0, #0]
 8006e42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e46:	2300      	movs	r3, #0
 8006e48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e4c:	e7f7      	b.n	8006e3e <_Balloc+0x66>
 8006e4e:	bf00      	nop
 8006e50:	08009752 	.word	0x08009752
 8006e54:	080097d2 	.word	0x080097d2

08006e58 <_Bfree>:
 8006e58:	b570      	push	{r4, r5, r6, lr}
 8006e5a:	69c6      	ldr	r6, [r0, #28]
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	460c      	mov	r4, r1
 8006e60:	b976      	cbnz	r6, 8006e80 <_Bfree+0x28>
 8006e62:	2010      	movs	r0, #16
 8006e64:	f7ff ff02 	bl	8006c6c <malloc>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	61e8      	str	r0, [r5, #28]
 8006e6c:	b920      	cbnz	r0, 8006e78 <_Bfree+0x20>
 8006e6e:	4b09      	ldr	r3, [pc, #36]	@ (8006e94 <_Bfree+0x3c>)
 8006e70:	4809      	ldr	r0, [pc, #36]	@ (8006e98 <_Bfree+0x40>)
 8006e72:	218f      	movs	r1, #143	@ 0x8f
 8006e74:	f001 fd3c 	bl	80088f0 <__assert_func>
 8006e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e7c:	6006      	str	r6, [r0, #0]
 8006e7e:	60c6      	str	r6, [r0, #12]
 8006e80:	b13c      	cbz	r4, 8006e92 <_Bfree+0x3a>
 8006e82:	69eb      	ldr	r3, [r5, #28]
 8006e84:	6862      	ldr	r2, [r4, #4]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e8c:	6021      	str	r1, [r4, #0]
 8006e8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e92:	bd70      	pop	{r4, r5, r6, pc}
 8006e94:	08009752 	.word	0x08009752
 8006e98:	080097d2 	.word	0x080097d2

08006e9c <__multadd>:
 8006e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea0:	690d      	ldr	r5, [r1, #16]
 8006ea2:	4607      	mov	r7, r0
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	461e      	mov	r6, r3
 8006ea8:	f101 0c14 	add.w	ip, r1, #20
 8006eac:	2000      	movs	r0, #0
 8006eae:	f8dc 3000 	ldr.w	r3, [ip]
 8006eb2:	b299      	uxth	r1, r3
 8006eb4:	fb02 6101 	mla	r1, r2, r1, r6
 8006eb8:	0c1e      	lsrs	r6, r3, #16
 8006eba:	0c0b      	lsrs	r3, r1, #16
 8006ebc:	fb02 3306 	mla	r3, r2, r6, r3
 8006ec0:	b289      	uxth	r1, r1
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ec8:	4285      	cmp	r5, r0
 8006eca:	f84c 1b04 	str.w	r1, [ip], #4
 8006ece:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ed2:	dcec      	bgt.n	8006eae <__multadd+0x12>
 8006ed4:	b30e      	cbz	r6, 8006f1a <__multadd+0x7e>
 8006ed6:	68a3      	ldr	r3, [r4, #8]
 8006ed8:	42ab      	cmp	r3, r5
 8006eda:	dc19      	bgt.n	8006f10 <__multadd+0x74>
 8006edc:	6861      	ldr	r1, [r4, #4]
 8006ede:	4638      	mov	r0, r7
 8006ee0:	3101      	adds	r1, #1
 8006ee2:	f7ff ff79 	bl	8006dd8 <_Balloc>
 8006ee6:	4680      	mov	r8, r0
 8006ee8:	b928      	cbnz	r0, 8006ef6 <__multadd+0x5a>
 8006eea:	4602      	mov	r2, r0
 8006eec:	4b0c      	ldr	r3, [pc, #48]	@ (8006f20 <__multadd+0x84>)
 8006eee:	480d      	ldr	r0, [pc, #52]	@ (8006f24 <__multadd+0x88>)
 8006ef0:	21ba      	movs	r1, #186	@ 0xba
 8006ef2:	f001 fcfd 	bl	80088f0 <__assert_func>
 8006ef6:	6922      	ldr	r2, [r4, #16]
 8006ef8:	3202      	adds	r2, #2
 8006efa:	f104 010c 	add.w	r1, r4, #12
 8006efe:	0092      	lsls	r2, r2, #2
 8006f00:	300c      	adds	r0, #12
 8006f02:	f001 fcdf 	bl	80088c4 <memcpy>
 8006f06:	4621      	mov	r1, r4
 8006f08:	4638      	mov	r0, r7
 8006f0a:	f7ff ffa5 	bl	8006e58 <_Bfree>
 8006f0e:	4644      	mov	r4, r8
 8006f10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f14:	3501      	adds	r5, #1
 8006f16:	615e      	str	r6, [r3, #20]
 8006f18:	6125      	str	r5, [r4, #16]
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f20:	080097c1 	.word	0x080097c1
 8006f24:	080097d2 	.word	0x080097d2

08006f28 <__s2b>:
 8006f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f2c:	460c      	mov	r4, r1
 8006f2e:	4615      	mov	r5, r2
 8006f30:	461f      	mov	r7, r3
 8006f32:	2209      	movs	r2, #9
 8006f34:	3308      	adds	r3, #8
 8006f36:	4606      	mov	r6, r0
 8006f38:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	2201      	movs	r2, #1
 8006f40:	429a      	cmp	r2, r3
 8006f42:	db09      	blt.n	8006f58 <__s2b+0x30>
 8006f44:	4630      	mov	r0, r6
 8006f46:	f7ff ff47 	bl	8006dd8 <_Balloc>
 8006f4a:	b940      	cbnz	r0, 8006f5e <__s2b+0x36>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	4b19      	ldr	r3, [pc, #100]	@ (8006fb4 <__s2b+0x8c>)
 8006f50:	4819      	ldr	r0, [pc, #100]	@ (8006fb8 <__s2b+0x90>)
 8006f52:	21d3      	movs	r1, #211	@ 0xd3
 8006f54:	f001 fccc 	bl	80088f0 <__assert_func>
 8006f58:	0052      	lsls	r2, r2, #1
 8006f5a:	3101      	adds	r1, #1
 8006f5c:	e7f0      	b.n	8006f40 <__s2b+0x18>
 8006f5e:	9b08      	ldr	r3, [sp, #32]
 8006f60:	6143      	str	r3, [r0, #20]
 8006f62:	2d09      	cmp	r5, #9
 8006f64:	f04f 0301 	mov.w	r3, #1
 8006f68:	6103      	str	r3, [r0, #16]
 8006f6a:	dd16      	ble.n	8006f9a <__s2b+0x72>
 8006f6c:	f104 0909 	add.w	r9, r4, #9
 8006f70:	46c8      	mov	r8, r9
 8006f72:	442c      	add	r4, r5
 8006f74:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006f78:	4601      	mov	r1, r0
 8006f7a:	3b30      	subs	r3, #48	@ 0x30
 8006f7c:	220a      	movs	r2, #10
 8006f7e:	4630      	mov	r0, r6
 8006f80:	f7ff ff8c 	bl	8006e9c <__multadd>
 8006f84:	45a0      	cmp	r8, r4
 8006f86:	d1f5      	bne.n	8006f74 <__s2b+0x4c>
 8006f88:	f1a5 0408 	sub.w	r4, r5, #8
 8006f8c:	444c      	add	r4, r9
 8006f8e:	1b2d      	subs	r5, r5, r4
 8006f90:	1963      	adds	r3, r4, r5
 8006f92:	42bb      	cmp	r3, r7
 8006f94:	db04      	blt.n	8006fa0 <__s2b+0x78>
 8006f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f9a:	340a      	adds	r4, #10
 8006f9c:	2509      	movs	r5, #9
 8006f9e:	e7f6      	b.n	8006f8e <__s2b+0x66>
 8006fa0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006fa4:	4601      	mov	r1, r0
 8006fa6:	3b30      	subs	r3, #48	@ 0x30
 8006fa8:	220a      	movs	r2, #10
 8006faa:	4630      	mov	r0, r6
 8006fac:	f7ff ff76 	bl	8006e9c <__multadd>
 8006fb0:	e7ee      	b.n	8006f90 <__s2b+0x68>
 8006fb2:	bf00      	nop
 8006fb4:	080097c1 	.word	0x080097c1
 8006fb8:	080097d2 	.word	0x080097d2

08006fbc <__hi0bits>:
 8006fbc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	bf36      	itet	cc
 8006fc4:	0403      	lslcc	r3, r0, #16
 8006fc6:	2000      	movcs	r0, #0
 8006fc8:	2010      	movcc	r0, #16
 8006fca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fce:	bf3c      	itt	cc
 8006fd0:	021b      	lslcc	r3, r3, #8
 8006fd2:	3008      	addcc	r0, #8
 8006fd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fd8:	bf3c      	itt	cc
 8006fda:	011b      	lslcc	r3, r3, #4
 8006fdc:	3004      	addcc	r0, #4
 8006fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe2:	bf3c      	itt	cc
 8006fe4:	009b      	lslcc	r3, r3, #2
 8006fe6:	3002      	addcc	r0, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	db05      	blt.n	8006ff8 <__hi0bits+0x3c>
 8006fec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ff0:	f100 0001 	add.w	r0, r0, #1
 8006ff4:	bf08      	it	eq
 8006ff6:	2020      	moveq	r0, #32
 8006ff8:	4770      	bx	lr

08006ffa <__lo0bits>:
 8006ffa:	6803      	ldr	r3, [r0, #0]
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	f013 0007 	ands.w	r0, r3, #7
 8007002:	d00b      	beq.n	800701c <__lo0bits+0x22>
 8007004:	07d9      	lsls	r1, r3, #31
 8007006:	d421      	bmi.n	800704c <__lo0bits+0x52>
 8007008:	0798      	lsls	r0, r3, #30
 800700a:	bf49      	itett	mi
 800700c:	085b      	lsrmi	r3, r3, #1
 800700e:	089b      	lsrpl	r3, r3, #2
 8007010:	2001      	movmi	r0, #1
 8007012:	6013      	strmi	r3, [r2, #0]
 8007014:	bf5c      	itt	pl
 8007016:	6013      	strpl	r3, [r2, #0]
 8007018:	2002      	movpl	r0, #2
 800701a:	4770      	bx	lr
 800701c:	b299      	uxth	r1, r3
 800701e:	b909      	cbnz	r1, 8007024 <__lo0bits+0x2a>
 8007020:	0c1b      	lsrs	r3, r3, #16
 8007022:	2010      	movs	r0, #16
 8007024:	b2d9      	uxtb	r1, r3
 8007026:	b909      	cbnz	r1, 800702c <__lo0bits+0x32>
 8007028:	3008      	adds	r0, #8
 800702a:	0a1b      	lsrs	r3, r3, #8
 800702c:	0719      	lsls	r1, r3, #28
 800702e:	bf04      	itt	eq
 8007030:	091b      	lsreq	r3, r3, #4
 8007032:	3004      	addeq	r0, #4
 8007034:	0799      	lsls	r1, r3, #30
 8007036:	bf04      	itt	eq
 8007038:	089b      	lsreq	r3, r3, #2
 800703a:	3002      	addeq	r0, #2
 800703c:	07d9      	lsls	r1, r3, #31
 800703e:	d403      	bmi.n	8007048 <__lo0bits+0x4e>
 8007040:	085b      	lsrs	r3, r3, #1
 8007042:	f100 0001 	add.w	r0, r0, #1
 8007046:	d003      	beq.n	8007050 <__lo0bits+0x56>
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	4770      	bx	lr
 800704c:	2000      	movs	r0, #0
 800704e:	4770      	bx	lr
 8007050:	2020      	movs	r0, #32
 8007052:	4770      	bx	lr

08007054 <__i2b>:
 8007054:	b510      	push	{r4, lr}
 8007056:	460c      	mov	r4, r1
 8007058:	2101      	movs	r1, #1
 800705a:	f7ff febd 	bl	8006dd8 <_Balloc>
 800705e:	4602      	mov	r2, r0
 8007060:	b928      	cbnz	r0, 800706e <__i2b+0x1a>
 8007062:	4b05      	ldr	r3, [pc, #20]	@ (8007078 <__i2b+0x24>)
 8007064:	4805      	ldr	r0, [pc, #20]	@ (800707c <__i2b+0x28>)
 8007066:	f240 1145 	movw	r1, #325	@ 0x145
 800706a:	f001 fc41 	bl	80088f0 <__assert_func>
 800706e:	2301      	movs	r3, #1
 8007070:	6144      	str	r4, [r0, #20]
 8007072:	6103      	str	r3, [r0, #16]
 8007074:	bd10      	pop	{r4, pc}
 8007076:	bf00      	nop
 8007078:	080097c1 	.word	0x080097c1
 800707c:	080097d2 	.word	0x080097d2

08007080 <__multiply>:
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	4614      	mov	r4, r2
 8007086:	690a      	ldr	r2, [r1, #16]
 8007088:	6923      	ldr	r3, [r4, #16]
 800708a:	429a      	cmp	r2, r3
 800708c:	bfa8      	it	ge
 800708e:	4623      	movge	r3, r4
 8007090:	460f      	mov	r7, r1
 8007092:	bfa4      	itt	ge
 8007094:	460c      	movge	r4, r1
 8007096:	461f      	movge	r7, r3
 8007098:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800709c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80070a0:	68a3      	ldr	r3, [r4, #8]
 80070a2:	6861      	ldr	r1, [r4, #4]
 80070a4:	eb0a 0609 	add.w	r6, sl, r9
 80070a8:	42b3      	cmp	r3, r6
 80070aa:	b085      	sub	sp, #20
 80070ac:	bfb8      	it	lt
 80070ae:	3101      	addlt	r1, #1
 80070b0:	f7ff fe92 	bl	8006dd8 <_Balloc>
 80070b4:	b930      	cbnz	r0, 80070c4 <__multiply+0x44>
 80070b6:	4602      	mov	r2, r0
 80070b8:	4b44      	ldr	r3, [pc, #272]	@ (80071cc <__multiply+0x14c>)
 80070ba:	4845      	ldr	r0, [pc, #276]	@ (80071d0 <__multiply+0x150>)
 80070bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80070c0:	f001 fc16 	bl	80088f0 <__assert_func>
 80070c4:	f100 0514 	add.w	r5, r0, #20
 80070c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80070cc:	462b      	mov	r3, r5
 80070ce:	2200      	movs	r2, #0
 80070d0:	4543      	cmp	r3, r8
 80070d2:	d321      	bcc.n	8007118 <__multiply+0x98>
 80070d4:	f107 0114 	add.w	r1, r7, #20
 80070d8:	f104 0214 	add.w	r2, r4, #20
 80070dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80070e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80070e4:	9302      	str	r3, [sp, #8]
 80070e6:	1b13      	subs	r3, r2, r4
 80070e8:	3b15      	subs	r3, #21
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	3304      	adds	r3, #4
 80070f0:	f104 0715 	add.w	r7, r4, #21
 80070f4:	42ba      	cmp	r2, r7
 80070f6:	bf38      	it	cc
 80070f8:	2304      	movcc	r3, #4
 80070fa:	9301      	str	r3, [sp, #4]
 80070fc:	9b02      	ldr	r3, [sp, #8]
 80070fe:	9103      	str	r1, [sp, #12]
 8007100:	428b      	cmp	r3, r1
 8007102:	d80c      	bhi.n	800711e <__multiply+0x9e>
 8007104:	2e00      	cmp	r6, #0
 8007106:	dd03      	ble.n	8007110 <__multiply+0x90>
 8007108:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800710c:	2b00      	cmp	r3, #0
 800710e:	d05b      	beq.n	80071c8 <__multiply+0x148>
 8007110:	6106      	str	r6, [r0, #16]
 8007112:	b005      	add	sp, #20
 8007114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007118:	f843 2b04 	str.w	r2, [r3], #4
 800711c:	e7d8      	b.n	80070d0 <__multiply+0x50>
 800711e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007122:	f1ba 0f00 	cmp.w	sl, #0
 8007126:	d024      	beq.n	8007172 <__multiply+0xf2>
 8007128:	f104 0e14 	add.w	lr, r4, #20
 800712c:	46a9      	mov	r9, r5
 800712e:	f04f 0c00 	mov.w	ip, #0
 8007132:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007136:	f8d9 3000 	ldr.w	r3, [r9]
 800713a:	fa1f fb87 	uxth.w	fp, r7
 800713e:	b29b      	uxth	r3, r3
 8007140:	fb0a 330b 	mla	r3, sl, fp, r3
 8007144:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007148:	f8d9 7000 	ldr.w	r7, [r9]
 800714c:	4463      	add	r3, ip
 800714e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007152:	fb0a c70b 	mla	r7, sl, fp, ip
 8007156:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800715a:	b29b      	uxth	r3, r3
 800715c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007160:	4572      	cmp	r2, lr
 8007162:	f849 3b04 	str.w	r3, [r9], #4
 8007166:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800716a:	d8e2      	bhi.n	8007132 <__multiply+0xb2>
 800716c:	9b01      	ldr	r3, [sp, #4]
 800716e:	f845 c003 	str.w	ip, [r5, r3]
 8007172:	9b03      	ldr	r3, [sp, #12]
 8007174:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007178:	3104      	adds	r1, #4
 800717a:	f1b9 0f00 	cmp.w	r9, #0
 800717e:	d021      	beq.n	80071c4 <__multiply+0x144>
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	f104 0c14 	add.w	ip, r4, #20
 8007186:	46ae      	mov	lr, r5
 8007188:	f04f 0a00 	mov.w	sl, #0
 800718c:	f8bc b000 	ldrh.w	fp, [ip]
 8007190:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007194:	fb09 770b 	mla	r7, r9, fp, r7
 8007198:	4457      	add	r7, sl
 800719a:	b29b      	uxth	r3, r3
 800719c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80071a0:	f84e 3b04 	str.w	r3, [lr], #4
 80071a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071ac:	f8be 3000 	ldrh.w	r3, [lr]
 80071b0:	fb09 330a 	mla	r3, r9, sl, r3
 80071b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80071b8:	4562      	cmp	r2, ip
 80071ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071be:	d8e5      	bhi.n	800718c <__multiply+0x10c>
 80071c0:	9f01      	ldr	r7, [sp, #4]
 80071c2:	51eb      	str	r3, [r5, r7]
 80071c4:	3504      	adds	r5, #4
 80071c6:	e799      	b.n	80070fc <__multiply+0x7c>
 80071c8:	3e01      	subs	r6, #1
 80071ca:	e79b      	b.n	8007104 <__multiply+0x84>
 80071cc:	080097c1 	.word	0x080097c1
 80071d0:	080097d2 	.word	0x080097d2

080071d4 <__pow5mult>:
 80071d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d8:	4615      	mov	r5, r2
 80071da:	f012 0203 	ands.w	r2, r2, #3
 80071de:	4607      	mov	r7, r0
 80071e0:	460e      	mov	r6, r1
 80071e2:	d007      	beq.n	80071f4 <__pow5mult+0x20>
 80071e4:	4c25      	ldr	r4, [pc, #148]	@ (800727c <__pow5mult+0xa8>)
 80071e6:	3a01      	subs	r2, #1
 80071e8:	2300      	movs	r3, #0
 80071ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071ee:	f7ff fe55 	bl	8006e9c <__multadd>
 80071f2:	4606      	mov	r6, r0
 80071f4:	10ad      	asrs	r5, r5, #2
 80071f6:	d03d      	beq.n	8007274 <__pow5mult+0xa0>
 80071f8:	69fc      	ldr	r4, [r7, #28]
 80071fa:	b97c      	cbnz	r4, 800721c <__pow5mult+0x48>
 80071fc:	2010      	movs	r0, #16
 80071fe:	f7ff fd35 	bl	8006c6c <malloc>
 8007202:	4602      	mov	r2, r0
 8007204:	61f8      	str	r0, [r7, #28]
 8007206:	b928      	cbnz	r0, 8007214 <__pow5mult+0x40>
 8007208:	4b1d      	ldr	r3, [pc, #116]	@ (8007280 <__pow5mult+0xac>)
 800720a:	481e      	ldr	r0, [pc, #120]	@ (8007284 <__pow5mult+0xb0>)
 800720c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007210:	f001 fb6e 	bl	80088f0 <__assert_func>
 8007214:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007218:	6004      	str	r4, [r0, #0]
 800721a:	60c4      	str	r4, [r0, #12]
 800721c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007220:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007224:	b94c      	cbnz	r4, 800723a <__pow5mult+0x66>
 8007226:	f240 2171 	movw	r1, #625	@ 0x271
 800722a:	4638      	mov	r0, r7
 800722c:	f7ff ff12 	bl	8007054 <__i2b>
 8007230:	2300      	movs	r3, #0
 8007232:	f8c8 0008 	str.w	r0, [r8, #8]
 8007236:	4604      	mov	r4, r0
 8007238:	6003      	str	r3, [r0, #0]
 800723a:	f04f 0900 	mov.w	r9, #0
 800723e:	07eb      	lsls	r3, r5, #31
 8007240:	d50a      	bpl.n	8007258 <__pow5mult+0x84>
 8007242:	4631      	mov	r1, r6
 8007244:	4622      	mov	r2, r4
 8007246:	4638      	mov	r0, r7
 8007248:	f7ff ff1a 	bl	8007080 <__multiply>
 800724c:	4631      	mov	r1, r6
 800724e:	4680      	mov	r8, r0
 8007250:	4638      	mov	r0, r7
 8007252:	f7ff fe01 	bl	8006e58 <_Bfree>
 8007256:	4646      	mov	r6, r8
 8007258:	106d      	asrs	r5, r5, #1
 800725a:	d00b      	beq.n	8007274 <__pow5mult+0xa0>
 800725c:	6820      	ldr	r0, [r4, #0]
 800725e:	b938      	cbnz	r0, 8007270 <__pow5mult+0x9c>
 8007260:	4622      	mov	r2, r4
 8007262:	4621      	mov	r1, r4
 8007264:	4638      	mov	r0, r7
 8007266:	f7ff ff0b 	bl	8007080 <__multiply>
 800726a:	6020      	str	r0, [r4, #0]
 800726c:	f8c0 9000 	str.w	r9, [r0]
 8007270:	4604      	mov	r4, r0
 8007272:	e7e4      	b.n	800723e <__pow5mult+0x6a>
 8007274:	4630      	mov	r0, r6
 8007276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800727a:	bf00      	nop
 800727c:	0800982c 	.word	0x0800982c
 8007280:	08009752 	.word	0x08009752
 8007284:	080097d2 	.word	0x080097d2

08007288 <__lshift>:
 8007288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800728c:	460c      	mov	r4, r1
 800728e:	6849      	ldr	r1, [r1, #4]
 8007290:	6923      	ldr	r3, [r4, #16]
 8007292:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007296:	68a3      	ldr	r3, [r4, #8]
 8007298:	4607      	mov	r7, r0
 800729a:	4691      	mov	r9, r2
 800729c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072a0:	f108 0601 	add.w	r6, r8, #1
 80072a4:	42b3      	cmp	r3, r6
 80072a6:	db0b      	blt.n	80072c0 <__lshift+0x38>
 80072a8:	4638      	mov	r0, r7
 80072aa:	f7ff fd95 	bl	8006dd8 <_Balloc>
 80072ae:	4605      	mov	r5, r0
 80072b0:	b948      	cbnz	r0, 80072c6 <__lshift+0x3e>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4b28      	ldr	r3, [pc, #160]	@ (8007358 <__lshift+0xd0>)
 80072b6:	4829      	ldr	r0, [pc, #164]	@ (800735c <__lshift+0xd4>)
 80072b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80072bc:	f001 fb18 	bl	80088f0 <__assert_func>
 80072c0:	3101      	adds	r1, #1
 80072c2:	005b      	lsls	r3, r3, #1
 80072c4:	e7ee      	b.n	80072a4 <__lshift+0x1c>
 80072c6:	2300      	movs	r3, #0
 80072c8:	f100 0114 	add.w	r1, r0, #20
 80072cc:	f100 0210 	add.w	r2, r0, #16
 80072d0:	4618      	mov	r0, r3
 80072d2:	4553      	cmp	r3, sl
 80072d4:	db33      	blt.n	800733e <__lshift+0xb6>
 80072d6:	6920      	ldr	r0, [r4, #16]
 80072d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072dc:	f104 0314 	add.w	r3, r4, #20
 80072e0:	f019 091f 	ands.w	r9, r9, #31
 80072e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80072ec:	d02b      	beq.n	8007346 <__lshift+0xbe>
 80072ee:	f1c9 0e20 	rsb	lr, r9, #32
 80072f2:	468a      	mov	sl, r1
 80072f4:	2200      	movs	r2, #0
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	fa00 f009 	lsl.w	r0, r0, r9
 80072fc:	4310      	orrs	r0, r2
 80072fe:	f84a 0b04 	str.w	r0, [sl], #4
 8007302:	f853 2b04 	ldr.w	r2, [r3], #4
 8007306:	459c      	cmp	ip, r3
 8007308:	fa22 f20e 	lsr.w	r2, r2, lr
 800730c:	d8f3      	bhi.n	80072f6 <__lshift+0x6e>
 800730e:	ebac 0304 	sub.w	r3, ip, r4
 8007312:	3b15      	subs	r3, #21
 8007314:	f023 0303 	bic.w	r3, r3, #3
 8007318:	3304      	adds	r3, #4
 800731a:	f104 0015 	add.w	r0, r4, #21
 800731e:	4584      	cmp	ip, r0
 8007320:	bf38      	it	cc
 8007322:	2304      	movcc	r3, #4
 8007324:	50ca      	str	r2, [r1, r3]
 8007326:	b10a      	cbz	r2, 800732c <__lshift+0xa4>
 8007328:	f108 0602 	add.w	r6, r8, #2
 800732c:	3e01      	subs	r6, #1
 800732e:	4638      	mov	r0, r7
 8007330:	612e      	str	r6, [r5, #16]
 8007332:	4621      	mov	r1, r4
 8007334:	f7ff fd90 	bl	8006e58 <_Bfree>
 8007338:	4628      	mov	r0, r5
 800733a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800733e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007342:	3301      	adds	r3, #1
 8007344:	e7c5      	b.n	80072d2 <__lshift+0x4a>
 8007346:	3904      	subs	r1, #4
 8007348:	f853 2b04 	ldr.w	r2, [r3], #4
 800734c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007350:	459c      	cmp	ip, r3
 8007352:	d8f9      	bhi.n	8007348 <__lshift+0xc0>
 8007354:	e7ea      	b.n	800732c <__lshift+0xa4>
 8007356:	bf00      	nop
 8007358:	080097c1 	.word	0x080097c1
 800735c:	080097d2 	.word	0x080097d2

08007360 <__mcmp>:
 8007360:	690a      	ldr	r2, [r1, #16]
 8007362:	4603      	mov	r3, r0
 8007364:	6900      	ldr	r0, [r0, #16]
 8007366:	1a80      	subs	r0, r0, r2
 8007368:	b530      	push	{r4, r5, lr}
 800736a:	d10e      	bne.n	800738a <__mcmp+0x2a>
 800736c:	3314      	adds	r3, #20
 800736e:	3114      	adds	r1, #20
 8007370:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007374:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007378:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800737c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007380:	4295      	cmp	r5, r2
 8007382:	d003      	beq.n	800738c <__mcmp+0x2c>
 8007384:	d205      	bcs.n	8007392 <__mcmp+0x32>
 8007386:	f04f 30ff 	mov.w	r0, #4294967295
 800738a:	bd30      	pop	{r4, r5, pc}
 800738c:	42a3      	cmp	r3, r4
 800738e:	d3f3      	bcc.n	8007378 <__mcmp+0x18>
 8007390:	e7fb      	b.n	800738a <__mcmp+0x2a>
 8007392:	2001      	movs	r0, #1
 8007394:	e7f9      	b.n	800738a <__mcmp+0x2a>
	...

08007398 <__mdiff>:
 8007398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739c:	4689      	mov	r9, r1
 800739e:	4606      	mov	r6, r0
 80073a0:	4611      	mov	r1, r2
 80073a2:	4648      	mov	r0, r9
 80073a4:	4614      	mov	r4, r2
 80073a6:	f7ff ffdb 	bl	8007360 <__mcmp>
 80073aa:	1e05      	subs	r5, r0, #0
 80073ac:	d112      	bne.n	80073d4 <__mdiff+0x3c>
 80073ae:	4629      	mov	r1, r5
 80073b0:	4630      	mov	r0, r6
 80073b2:	f7ff fd11 	bl	8006dd8 <_Balloc>
 80073b6:	4602      	mov	r2, r0
 80073b8:	b928      	cbnz	r0, 80073c6 <__mdiff+0x2e>
 80073ba:	4b3f      	ldr	r3, [pc, #252]	@ (80074b8 <__mdiff+0x120>)
 80073bc:	f240 2137 	movw	r1, #567	@ 0x237
 80073c0:	483e      	ldr	r0, [pc, #248]	@ (80074bc <__mdiff+0x124>)
 80073c2:	f001 fa95 	bl	80088f0 <__assert_func>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073cc:	4610      	mov	r0, r2
 80073ce:	b003      	add	sp, #12
 80073d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d4:	bfbc      	itt	lt
 80073d6:	464b      	movlt	r3, r9
 80073d8:	46a1      	movlt	r9, r4
 80073da:	4630      	mov	r0, r6
 80073dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80073e0:	bfba      	itte	lt
 80073e2:	461c      	movlt	r4, r3
 80073e4:	2501      	movlt	r5, #1
 80073e6:	2500      	movge	r5, #0
 80073e8:	f7ff fcf6 	bl	8006dd8 <_Balloc>
 80073ec:	4602      	mov	r2, r0
 80073ee:	b918      	cbnz	r0, 80073f8 <__mdiff+0x60>
 80073f0:	4b31      	ldr	r3, [pc, #196]	@ (80074b8 <__mdiff+0x120>)
 80073f2:	f240 2145 	movw	r1, #581	@ 0x245
 80073f6:	e7e3      	b.n	80073c0 <__mdiff+0x28>
 80073f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80073fc:	6926      	ldr	r6, [r4, #16]
 80073fe:	60c5      	str	r5, [r0, #12]
 8007400:	f109 0310 	add.w	r3, r9, #16
 8007404:	f109 0514 	add.w	r5, r9, #20
 8007408:	f104 0e14 	add.w	lr, r4, #20
 800740c:	f100 0b14 	add.w	fp, r0, #20
 8007410:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007414:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	46d9      	mov	r9, fp
 800741c:	f04f 0c00 	mov.w	ip, #0
 8007420:	9b01      	ldr	r3, [sp, #4]
 8007422:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007426:	f853 af04 	ldr.w	sl, [r3, #4]!
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	fa1f f38a 	uxth.w	r3, sl
 8007430:	4619      	mov	r1, r3
 8007432:	b283      	uxth	r3, r0
 8007434:	1acb      	subs	r3, r1, r3
 8007436:	0c00      	lsrs	r0, r0, #16
 8007438:	4463      	add	r3, ip
 800743a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800743e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007442:	b29b      	uxth	r3, r3
 8007444:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007448:	4576      	cmp	r6, lr
 800744a:	f849 3b04 	str.w	r3, [r9], #4
 800744e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007452:	d8e5      	bhi.n	8007420 <__mdiff+0x88>
 8007454:	1b33      	subs	r3, r6, r4
 8007456:	3b15      	subs	r3, #21
 8007458:	f023 0303 	bic.w	r3, r3, #3
 800745c:	3415      	adds	r4, #21
 800745e:	3304      	adds	r3, #4
 8007460:	42a6      	cmp	r6, r4
 8007462:	bf38      	it	cc
 8007464:	2304      	movcc	r3, #4
 8007466:	441d      	add	r5, r3
 8007468:	445b      	add	r3, fp
 800746a:	461e      	mov	r6, r3
 800746c:	462c      	mov	r4, r5
 800746e:	4544      	cmp	r4, r8
 8007470:	d30e      	bcc.n	8007490 <__mdiff+0xf8>
 8007472:	f108 0103 	add.w	r1, r8, #3
 8007476:	1b49      	subs	r1, r1, r5
 8007478:	f021 0103 	bic.w	r1, r1, #3
 800747c:	3d03      	subs	r5, #3
 800747e:	45a8      	cmp	r8, r5
 8007480:	bf38      	it	cc
 8007482:	2100      	movcc	r1, #0
 8007484:	440b      	add	r3, r1
 8007486:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800748a:	b191      	cbz	r1, 80074b2 <__mdiff+0x11a>
 800748c:	6117      	str	r7, [r2, #16]
 800748e:	e79d      	b.n	80073cc <__mdiff+0x34>
 8007490:	f854 1b04 	ldr.w	r1, [r4], #4
 8007494:	46e6      	mov	lr, ip
 8007496:	0c08      	lsrs	r0, r1, #16
 8007498:	fa1c fc81 	uxtah	ip, ip, r1
 800749c:	4471      	add	r1, lr
 800749e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80074a2:	b289      	uxth	r1, r1
 80074a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80074a8:	f846 1b04 	str.w	r1, [r6], #4
 80074ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074b0:	e7dd      	b.n	800746e <__mdiff+0xd6>
 80074b2:	3f01      	subs	r7, #1
 80074b4:	e7e7      	b.n	8007486 <__mdiff+0xee>
 80074b6:	bf00      	nop
 80074b8:	080097c1 	.word	0x080097c1
 80074bc:	080097d2 	.word	0x080097d2

080074c0 <__ulp>:
 80074c0:	b082      	sub	sp, #8
 80074c2:	ed8d 0b00 	vstr	d0, [sp]
 80074c6:	9a01      	ldr	r2, [sp, #4]
 80074c8:	4b0f      	ldr	r3, [pc, #60]	@ (8007508 <__ulp+0x48>)
 80074ca:	4013      	ands	r3, r2
 80074cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	dc08      	bgt.n	80074e6 <__ulp+0x26>
 80074d4:	425b      	negs	r3, r3
 80074d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80074da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80074de:	da04      	bge.n	80074ea <__ulp+0x2a>
 80074e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80074e4:	4113      	asrs	r3, r2
 80074e6:	2200      	movs	r2, #0
 80074e8:	e008      	b.n	80074fc <__ulp+0x3c>
 80074ea:	f1a2 0314 	sub.w	r3, r2, #20
 80074ee:	2b1e      	cmp	r3, #30
 80074f0:	bfda      	itte	le
 80074f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80074f6:	40da      	lsrle	r2, r3
 80074f8:	2201      	movgt	r2, #1
 80074fa:	2300      	movs	r3, #0
 80074fc:	4619      	mov	r1, r3
 80074fe:	4610      	mov	r0, r2
 8007500:	ec41 0b10 	vmov	d0, r0, r1
 8007504:	b002      	add	sp, #8
 8007506:	4770      	bx	lr
 8007508:	7ff00000 	.word	0x7ff00000

0800750c <__b2d>:
 800750c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007510:	6906      	ldr	r6, [r0, #16]
 8007512:	f100 0814 	add.w	r8, r0, #20
 8007516:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800751a:	1f37      	subs	r7, r6, #4
 800751c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007520:	4610      	mov	r0, r2
 8007522:	f7ff fd4b 	bl	8006fbc <__hi0bits>
 8007526:	f1c0 0320 	rsb	r3, r0, #32
 800752a:	280a      	cmp	r0, #10
 800752c:	600b      	str	r3, [r1, #0]
 800752e:	491b      	ldr	r1, [pc, #108]	@ (800759c <__b2d+0x90>)
 8007530:	dc15      	bgt.n	800755e <__b2d+0x52>
 8007532:	f1c0 0c0b 	rsb	ip, r0, #11
 8007536:	fa22 f30c 	lsr.w	r3, r2, ip
 800753a:	45b8      	cmp	r8, r7
 800753c:	ea43 0501 	orr.w	r5, r3, r1
 8007540:	bf34      	ite	cc
 8007542:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007546:	2300      	movcs	r3, #0
 8007548:	3015      	adds	r0, #21
 800754a:	fa02 f000 	lsl.w	r0, r2, r0
 800754e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007552:	4303      	orrs	r3, r0
 8007554:	461c      	mov	r4, r3
 8007556:	ec45 4b10 	vmov	d0, r4, r5
 800755a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800755e:	45b8      	cmp	r8, r7
 8007560:	bf3a      	itte	cc
 8007562:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007566:	f1a6 0708 	subcc.w	r7, r6, #8
 800756a:	2300      	movcs	r3, #0
 800756c:	380b      	subs	r0, #11
 800756e:	d012      	beq.n	8007596 <__b2d+0x8a>
 8007570:	f1c0 0120 	rsb	r1, r0, #32
 8007574:	fa23 f401 	lsr.w	r4, r3, r1
 8007578:	4082      	lsls	r2, r0
 800757a:	4322      	orrs	r2, r4
 800757c:	4547      	cmp	r7, r8
 800757e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007582:	bf8c      	ite	hi
 8007584:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007588:	2200      	movls	r2, #0
 800758a:	4083      	lsls	r3, r0
 800758c:	40ca      	lsrs	r2, r1
 800758e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007592:	4313      	orrs	r3, r2
 8007594:	e7de      	b.n	8007554 <__b2d+0x48>
 8007596:	ea42 0501 	orr.w	r5, r2, r1
 800759a:	e7db      	b.n	8007554 <__b2d+0x48>
 800759c:	3ff00000 	.word	0x3ff00000

080075a0 <__d2b>:
 80075a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075a4:	460f      	mov	r7, r1
 80075a6:	2101      	movs	r1, #1
 80075a8:	ec59 8b10 	vmov	r8, r9, d0
 80075ac:	4616      	mov	r6, r2
 80075ae:	f7ff fc13 	bl	8006dd8 <_Balloc>
 80075b2:	4604      	mov	r4, r0
 80075b4:	b930      	cbnz	r0, 80075c4 <__d2b+0x24>
 80075b6:	4602      	mov	r2, r0
 80075b8:	4b23      	ldr	r3, [pc, #140]	@ (8007648 <__d2b+0xa8>)
 80075ba:	4824      	ldr	r0, [pc, #144]	@ (800764c <__d2b+0xac>)
 80075bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80075c0:	f001 f996 	bl	80088f0 <__assert_func>
 80075c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075cc:	b10d      	cbz	r5, 80075d2 <__d2b+0x32>
 80075ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	f1b8 0300 	subs.w	r3, r8, #0
 80075d8:	d023      	beq.n	8007622 <__d2b+0x82>
 80075da:	4668      	mov	r0, sp
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	f7ff fd0c 	bl	8006ffa <__lo0bits>
 80075e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075e6:	b1d0      	cbz	r0, 800761e <__d2b+0x7e>
 80075e8:	f1c0 0320 	rsb	r3, r0, #32
 80075ec:	fa02 f303 	lsl.w	r3, r2, r3
 80075f0:	430b      	orrs	r3, r1
 80075f2:	40c2      	lsrs	r2, r0
 80075f4:	6163      	str	r3, [r4, #20]
 80075f6:	9201      	str	r2, [sp, #4]
 80075f8:	9b01      	ldr	r3, [sp, #4]
 80075fa:	61a3      	str	r3, [r4, #24]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	bf0c      	ite	eq
 8007600:	2201      	moveq	r2, #1
 8007602:	2202      	movne	r2, #2
 8007604:	6122      	str	r2, [r4, #16]
 8007606:	b1a5      	cbz	r5, 8007632 <__d2b+0x92>
 8007608:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800760c:	4405      	add	r5, r0
 800760e:	603d      	str	r5, [r7, #0]
 8007610:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007614:	6030      	str	r0, [r6, #0]
 8007616:	4620      	mov	r0, r4
 8007618:	b003      	add	sp, #12
 800761a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800761e:	6161      	str	r1, [r4, #20]
 8007620:	e7ea      	b.n	80075f8 <__d2b+0x58>
 8007622:	a801      	add	r0, sp, #4
 8007624:	f7ff fce9 	bl	8006ffa <__lo0bits>
 8007628:	9b01      	ldr	r3, [sp, #4]
 800762a:	6163      	str	r3, [r4, #20]
 800762c:	3020      	adds	r0, #32
 800762e:	2201      	movs	r2, #1
 8007630:	e7e8      	b.n	8007604 <__d2b+0x64>
 8007632:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007636:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800763a:	6038      	str	r0, [r7, #0]
 800763c:	6918      	ldr	r0, [r3, #16]
 800763e:	f7ff fcbd 	bl	8006fbc <__hi0bits>
 8007642:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007646:	e7e5      	b.n	8007614 <__d2b+0x74>
 8007648:	080097c1 	.word	0x080097c1
 800764c:	080097d2 	.word	0x080097d2

08007650 <__ratio>:
 8007650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	b085      	sub	sp, #20
 8007656:	e9cd 1000 	strd	r1, r0, [sp]
 800765a:	a902      	add	r1, sp, #8
 800765c:	f7ff ff56 	bl	800750c <__b2d>
 8007660:	9800      	ldr	r0, [sp, #0]
 8007662:	a903      	add	r1, sp, #12
 8007664:	ec55 4b10 	vmov	r4, r5, d0
 8007668:	f7ff ff50 	bl	800750c <__b2d>
 800766c:	9b01      	ldr	r3, [sp, #4]
 800766e:	6919      	ldr	r1, [r3, #16]
 8007670:	9b00      	ldr	r3, [sp, #0]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	1ac9      	subs	r1, r1, r3
 8007676:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800767a:	1a9b      	subs	r3, r3, r2
 800767c:	ec5b ab10 	vmov	sl, fp, d0
 8007680:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007684:	2b00      	cmp	r3, #0
 8007686:	bfce      	itee	gt
 8007688:	462a      	movgt	r2, r5
 800768a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800768e:	465a      	movle	r2, fp
 8007690:	462f      	mov	r7, r5
 8007692:	46d9      	mov	r9, fp
 8007694:	bfcc      	ite	gt
 8007696:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800769a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800769e:	464b      	mov	r3, r9
 80076a0:	4652      	mov	r2, sl
 80076a2:	4620      	mov	r0, r4
 80076a4:	4639      	mov	r1, r7
 80076a6:	f7f9 f8d1 	bl	800084c <__aeabi_ddiv>
 80076aa:	ec41 0b10 	vmov	d0, r0, r1
 80076ae:	b005      	add	sp, #20
 80076b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076b4 <__copybits>:
 80076b4:	3901      	subs	r1, #1
 80076b6:	b570      	push	{r4, r5, r6, lr}
 80076b8:	1149      	asrs	r1, r1, #5
 80076ba:	6914      	ldr	r4, [r2, #16]
 80076bc:	3101      	adds	r1, #1
 80076be:	f102 0314 	add.w	r3, r2, #20
 80076c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80076c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80076ca:	1f05      	subs	r5, r0, #4
 80076cc:	42a3      	cmp	r3, r4
 80076ce:	d30c      	bcc.n	80076ea <__copybits+0x36>
 80076d0:	1aa3      	subs	r3, r4, r2
 80076d2:	3b11      	subs	r3, #17
 80076d4:	f023 0303 	bic.w	r3, r3, #3
 80076d8:	3211      	adds	r2, #17
 80076da:	42a2      	cmp	r2, r4
 80076dc:	bf88      	it	hi
 80076de:	2300      	movhi	r3, #0
 80076e0:	4418      	add	r0, r3
 80076e2:	2300      	movs	r3, #0
 80076e4:	4288      	cmp	r0, r1
 80076e6:	d305      	bcc.n	80076f4 <__copybits+0x40>
 80076e8:	bd70      	pop	{r4, r5, r6, pc}
 80076ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80076ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80076f2:	e7eb      	b.n	80076cc <__copybits+0x18>
 80076f4:	f840 3b04 	str.w	r3, [r0], #4
 80076f8:	e7f4      	b.n	80076e4 <__copybits+0x30>

080076fa <__any_on>:
 80076fa:	f100 0214 	add.w	r2, r0, #20
 80076fe:	6900      	ldr	r0, [r0, #16]
 8007700:	114b      	asrs	r3, r1, #5
 8007702:	4298      	cmp	r0, r3
 8007704:	b510      	push	{r4, lr}
 8007706:	db11      	blt.n	800772c <__any_on+0x32>
 8007708:	dd0a      	ble.n	8007720 <__any_on+0x26>
 800770a:	f011 011f 	ands.w	r1, r1, #31
 800770e:	d007      	beq.n	8007720 <__any_on+0x26>
 8007710:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007714:	fa24 f001 	lsr.w	r0, r4, r1
 8007718:	fa00 f101 	lsl.w	r1, r0, r1
 800771c:	428c      	cmp	r4, r1
 800771e:	d10b      	bne.n	8007738 <__any_on+0x3e>
 8007720:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007724:	4293      	cmp	r3, r2
 8007726:	d803      	bhi.n	8007730 <__any_on+0x36>
 8007728:	2000      	movs	r0, #0
 800772a:	bd10      	pop	{r4, pc}
 800772c:	4603      	mov	r3, r0
 800772e:	e7f7      	b.n	8007720 <__any_on+0x26>
 8007730:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007734:	2900      	cmp	r1, #0
 8007736:	d0f5      	beq.n	8007724 <__any_on+0x2a>
 8007738:	2001      	movs	r0, #1
 800773a:	e7f6      	b.n	800772a <__any_on+0x30>

0800773c <sulp>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	4604      	mov	r4, r0
 8007740:	460d      	mov	r5, r1
 8007742:	ec45 4b10 	vmov	d0, r4, r5
 8007746:	4616      	mov	r6, r2
 8007748:	f7ff feba 	bl	80074c0 <__ulp>
 800774c:	ec51 0b10 	vmov	r0, r1, d0
 8007750:	b17e      	cbz	r6, 8007772 <sulp+0x36>
 8007752:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007756:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800775a:	2b00      	cmp	r3, #0
 800775c:	dd09      	ble.n	8007772 <sulp+0x36>
 800775e:	051b      	lsls	r3, r3, #20
 8007760:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007764:	2400      	movs	r4, #0
 8007766:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800776a:	4622      	mov	r2, r4
 800776c:	462b      	mov	r3, r5
 800776e:	f7f8 ff43 	bl	80005f8 <__aeabi_dmul>
 8007772:	ec41 0b10 	vmov	d0, r0, r1
 8007776:	bd70      	pop	{r4, r5, r6, pc}

08007778 <_strtod_l>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	b09f      	sub	sp, #124	@ 0x7c
 800777e:	460c      	mov	r4, r1
 8007780:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007782:	2200      	movs	r2, #0
 8007784:	921a      	str	r2, [sp, #104]	@ 0x68
 8007786:	9005      	str	r0, [sp, #20]
 8007788:	f04f 0a00 	mov.w	sl, #0
 800778c:	f04f 0b00 	mov.w	fp, #0
 8007790:	460a      	mov	r2, r1
 8007792:	9219      	str	r2, [sp, #100]	@ 0x64
 8007794:	7811      	ldrb	r1, [r2, #0]
 8007796:	292b      	cmp	r1, #43	@ 0x2b
 8007798:	d04a      	beq.n	8007830 <_strtod_l+0xb8>
 800779a:	d838      	bhi.n	800780e <_strtod_l+0x96>
 800779c:	290d      	cmp	r1, #13
 800779e:	d832      	bhi.n	8007806 <_strtod_l+0x8e>
 80077a0:	2908      	cmp	r1, #8
 80077a2:	d832      	bhi.n	800780a <_strtod_l+0x92>
 80077a4:	2900      	cmp	r1, #0
 80077a6:	d03b      	beq.n	8007820 <_strtod_l+0xa8>
 80077a8:	2200      	movs	r2, #0
 80077aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80077ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80077ae:	782a      	ldrb	r2, [r5, #0]
 80077b0:	2a30      	cmp	r2, #48	@ 0x30
 80077b2:	f040 80b3 	bne.w	800791c <_strtod_l+0x1a4>
 80077b6:	786a      	ldrb	r2, [r5, #1]
 80077b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80077bc:	2a58      	cmp	r2, #88	@ 0x58
 80077be:	d16e      	bne.n	800789e <_strtod_l+0x126>
 80077c0:	9302      	str	r3, [sp, #8]
 80077c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077c4:	9301      	str	r3, [sp, #4]
 80077c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	4a8e      	ldr	r2, [pc, #568]	@ (8007a04 <_strtod_l+0x28c>)
 80077cc:	9805      	ldr	r0, [sp, #20]
 80077ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80077d0:	a919      	add	r1, sp, #100	@ 0x64
 80077d2:	f001 f927 	bl	8008a24 <__gethex>
 80077d6:	f010 060f 	ands.w	r6, r0, #15
 80077da:	4604      	mov	r4, r0
 80077dc:	d005      	beq.n	80077ea <_strtod_l+0x72>
 80077de:	2e06      	cmp	r6, #6
 80077e0:	d128      	bne.n	8007834 <_strtod_l+0xbc>
 80077e2:	3501      	adds	r5, #1
 80077e4:	2300      	movs	r3, #0
 80077e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80077e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f040 858e 	bne.w	800830e <_strtod_l+0xb96>
 80077f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077f4:	b1cb      	cbz	r3, 800782a <_strtod_l+0xb2>
 80077f6:	4652      	mov	r2, sl
 80077f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80077fc:	ec43 2b10 	vmov	d0, r2, r3
 8007800:	b01f      	add	sp, #124	@ 0x7c
 8007802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007806:	2920      	cmp	r1, #32
 8007808:	d1ce      	bne.n	80077a8 <_strtod_l+0x30>
 800780a:	3201      	adds	r2, #1
 800780c:	e7c1      	b.n	8007792 <_strtod_l+0x1a>
 800780e:	292d      	cmp	r1, #45	@ 0x2d
 8007810:	d1ca      	bne.n	80077a8 <_strtod_l+0x30>
 8007812:	2101      	movs	r1, #1
 8007814:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007816:	1c51      	adds	r1, r2, #1
 8007818:	9119      	str	r1, [sp, #100]	@ 0x64
 800781a:	7852      	ldrb	r2, [r2, #1]
 800781c:	2a00      	cmp	r2, #0
 800781e:	d1c5      	bne.n	80077ac <_strtod_l+0x34>
 8007820:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007822:	9419      	str	r4, [sp, #100]	@ 0x64
 8007824:	2b00      	cmp	r3, #0
 8007826:	f040 8570 	bne.w	800830a <_strtod_l+0xb92>
 800782a:	4652      	mov	r2, sl
 800782c:	465b      	mov	r3, fp
 800782e:	e7e5      	b.n	80077fc <_strtod_l+0x84>
 8007830:	2100      	movs	r1, #0
 8007832:	e7ef      	b.n	8007814 <_strtod_l+0x9c>
 8007834:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007836:	b13a      	cbz	r2, 8007848 <_strtod_l+0xd0>
 8007838:	2135      	movs	r1, #53	@ 0x35
 800783a:	a81c      	add	r0, sp, #112	@ 0x70
 800783c:	f7ff ff3a 	bl	80076b4 <__copybits>
 8007840:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007842:	9805      	ldr	r0, [sp, #20]
 8007844:	f7ff fb08 	bl	8006e58 <_Bfree>
 8007848:	3e01      	subs	r6, #1
 800784a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800784c:	2e04      	cmp	r6, #4
 800784e:	d806      	bhi.n	800785e <_strtod_l+0xe6>
 8007850:	e8df f006 	tbb	[pc, r6]
 8007854:	201d0314 	.word	0x201d0314
 8007858:	14          	.byte	0x14
 8007859:	00          	.byte	0x00
 800785a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800785e:	05e1      	lsls	r1, r4, #23
 8007860:	bf48      	it	mi
 8007862:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007866:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800786a:	0d1b      	lsrs	r3, r3, #20
 800786c:	051b      	lsls	r3, r3, #20
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1bb      	bne.n	80077ea <_strtod_l+0x72>
 8007872:	f7fe fb2f 	bl	8005ed4 <__errno>
 8007876:	2322      	movs	r3, #34	@ 0x22
 8007878:	6003      	str	r3, [r0, #0]
 800787a:	e7b6      	b.n	80077ea <_strtod_l+0x72>
 800787c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007880:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007884:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007888:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800788c:	e7e7      	b.n	800785e <_strtod_l+0xe6>
 800788e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007a0c <_strtod_l+0x294>
 8007892:	e7e4      	b.n	800785e <_strtod_l+0xe6>
 8007894:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007898:	f04f 3aff 	mov.w	sl, #4294967295
 800789c:	e7df      	b.n	800785e <_strtod_l+0xe6>
 800789e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80078a4:	785b      	ldrb	r3, [r3, #1]
 80078a6:	2b30      	cmp	r3, #48	@ 0x30
 80078a8:	d0f9      	beq.n	800789e <_strtod_l+0x126>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d09d      	beq.n	80077ea <_strtod_l+0x72>
 80078ae:	2301      	movs	r3, #1
 80078b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80078b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80078b6:	2300      	movs	r3, #0
 80078b8:	9308      	str	r3, [sp, #32]
 80078ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80078bc:	461f      	mov	r7, r3
 80078be:	220a      	movs	r2, #10
 80078c0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80078c2:	7805      	ldrb	r5, [r0, #0]
 80078c4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80078c8:	b2d9      	uxtb	r1, r3
 80078ca:	2909      	cmp	r1, #9
 80078cc:	d928      	bls.n	8007920 <_strtod_l+0x1a8>
 80078ce:	494e      	ldr	r1, [pc, #312]	@ (8007a08 <_strtod_l+0x290>)
 80078d0:	2201      	movs	r2, #1
 80078d2:	f000 ffd5 	bl	8008880 <strncmp>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d032      	beq.n	8007940 <_strtod_l+0x1c8>
 80078da:	2000      	movs	r0, #0
 80078dc:	462a      	mov	r2, r5
 80078de:	4681      	mov	r9, r0
 80078e0:	463d      	mov	r5, r7
 80078e2:	4603      	mov	r3, r0
 80078e4:	2a65      	cmp	r2, #101	@ 0x65
 80078e6:	d001      	beq.n	80078ec <_strtod_l+0x174>
 80078e8:	2a45      	cmp	r2, #69	@ 0x45
 80078ea:	d114      	bne.n	8007916 <_strtod_l+0x19e>
 80078ec:	b91d      	cbnz	r5, 80078f6 <_strtod_l+0x17e>
 80078ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078f0:	4302      	orrs	r2, r0
 80078f2:	d095      	beq.n	8007820 <_strtod_l+0xa8>
 80078f4:	2500      	movs	r5, #0
 80078f6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80078f8:	1c62      	adds	r2, r4, #1
 80078fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80078fc:	7862      	ldrb	r2, [r4, #1]
 80078fe:	2a2b      	cmp	r2, #43	@ 0x2b
 8007900:	d077      	beq.n	80079f2 <_strtod_l+0x27a>
 8007902:	2a2d      	cmp	r2, #45	@ 0x2d
 8007904:	d07b      	beq.n	80079fe <_strtod_l+0x286>
 8007906:	f04f 0c00 	mov.w	ip, #0
 800790a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800790e:	2909      	cmp	r1, #9
 8007910:	f240 8082 	bls.w	8007a18 <_strtod_l+0x2a0>
 8007914:	9419      	str	r4, [sp, #100]	@ 0x64
 8007916:	f04f 0800 	mov.w	r8, #0
 800791a:	e0a2      	b.n	8007a62 <_strtod_l+0x2ea>
 800791c:	2300      	movs	r3, #0
 800791e:	e7c7      	b.n	80078b0 <_strtod_l+0x138>
 8007920:	2f08      	cmp	r7, #8
 8007922:	bfd5      	itete	le
 8007924:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007926:	9908      	ldrgt	r1, [sp, #32]
 8007928:	fb02 3301 	mlale	r3, r2, r1, r3
 800792c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007930:	f100 0001 	add.w	r0, r0, #1
 8007934:	bfd4      	ite	le
 8007936:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007938:	9308      	strgt	r3, [sp, #32]
 800793a:	3701      	adds	r7, #1
 800793c:	9019      	str	r0, [sp, #100]	@ 0x64
 800793e:	e7bf      	b.n	80078c0 <_strtod_l+0x148>
 8007940:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	9219      	str	r2, [sp, #100]	@ 0x64
 8007946:	785a      	ldrb	r2, [r3, #1]
 8007948:	b37f      	cbz	r7, 80079aa <_strtod_l+0x232>
 800794a:	4681      	mov	r9, r0
 800794c:	463d      	mov	r5, r7
 800794e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007952:	2b09      	cmp	r3, #9
 8007954:	d912      	bls.n	800797c <_strtod_l+0x204>
 8007956:	2301      	movs	r3, #1
 8007958:	e7c4      	b.n	80078e4 <_strtod_l+0x16c>
 800795a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007960:	785a      	ldrb	r2, [r3, #1]
 8007962:	3001      	adds	r0, #1
 8007964:	2a30      	cmp	r2, #48	@ 0x30
 8007966:	d0f8      	beq.n	800795a <_strtod_l+0x1e2>
 8007968:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800796c:	2b08      	cmp	r3, #8
 800796e:	f200 84d3 	bhi.w	8008318 <_strtod_l+0xba0>
 8007972:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007974:	930c      	str	r3, [sp, #48]	@ 0x30
 8007976:	4681      	mov	r9, r0
 8007978:	2000      	movs	r0, #0
 800797a:	4605      	mov	r5, r0
 800797c:	3a30      	subs	r2, #48	@ 0x30
 800797e:	f100 0301 	add.w	r3, r0, #1
 8007982:	d02a      	beq.n	80079da <_strtod_l+0x262>
 8007984:	4499      	add	r9, r3
 8007986:	eb00 0c05 	add.w	ip, r0, r5
 800798a:	462b      	mov	r3, r5
 800798c:	210a      	movs	r1, #10
 800798e:	4563      	cmp	r3, ip
 8007990:	d10d      	bne.n	80079ae <_strtod_l+0x236>
 8007992:	1c69      	adds	r1, r5, #1
 8007994:	4401      	add	r1, r0
 8007996:	4428      	add	r0, r5
 8007998:	2808      	cmp	r0, #8
 800799a:	dc16      	bgt.n	80079ca <_strtod_l+0x252>
 800799c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800799e:	230a      	movs	r3, #10
 80079a0:	fb03 2300 	mla	r3, r3, r0, r2
 80079a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80079a6:	2300      	movs	r3, #0
 80079a8:	e018      	b.n	80079dc <_strtod_l+0x264>
 80079aa:	4638      	mov	r0, r7
 80079ac:	e7da      	b.n	8007964 <_strtod_l+0x1ec>
 80079ae:	2b08      	cmp	r3, #8
 80079b0:	f103 0301 	add.w	r3, r3, #1
 80079b4:	dc03      	bgt.n	80079be <_strtod_l+0x246>
 80079b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80079b8:	434e      	muls	r6, r1
 80079ba:	960a      	str	r6, [sp, #40]	@ 0x28
 80079bc:	e7e7      	b.n	800798e <_strtod_l+0x216>
 80079be:	2b10      	cmp	r3, #16
 80079c0:	bfde      	ittt	le
 80079c2:	9e08      	ldrle	r6, [sp, #32]
 80079c4:	434e      	mulle	r6, r1
 80079c6:	9608      	strle	r6, [sp, #32]
 80079c8:	e7e1      	b.n	800798e <_strtod_l+0x216>
 80079ca:	280f      	cmp	r0, #15
 80079cc:	dceb      	bgt.n	80079a6 <_strtod_l+0x22e>
 80079ce:	9808      	ldr	r0, [sp, #32]
 80079d0:	230a      	movs	r3, #10
 80079d2:	fb03 2300 	mla	r3, r3, r0, r2
 80079d6:	9308      	str	r3, [sp, #32]
 80079d8:	e7e5      	b.n	80079a6 <_strtod_l+0x22e>
 80079da:	4629      	mov	r1, r5
 80079dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80079de:	1c50      	adds	r0, r2, #1
 80079e0:	9019      	str	r0, [sp, #100]	@ 0x64
 80079e2:	7852      	ldrb	r2, [r2, #1]
 80079e4:	4618      	mov	r0, r3
 80079e6:	460d      	mov	r5, r1
 80079e8:	e7b1      	b.n	800794e <_strtod_l+0x1d6>
 80079ea:	f04f 0900 	mov.w	r9, #0
 80079ee:	2301      	movs	r3, #1
 80079f0:	e77d      	b.n	80078ee <_strtod_l+0x176>
 80079f2:	f04f 0c00 	mov.w	ip, #0
 80079f6:	1ca2      	adds	r2, r4, #2
 80079f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80079fa:	78a2      	ldrb	r2, [r4, #2]
 80079fc:	e785      	b.n	800790a <_strtod_l+0x192>
 80079fe:	f04f 0c01 	mov.w	ip, #1
 8007a02:	e7f8      	b.n	80079f6 <_strtod_l+0x27e>
 8007a04:	08009940 	.word	0x08009940
 8007a08:	08009928 	.word	0x08009928
 8007a0c:	7ff00000 	.word	0x7ff00000
 8007a10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a12:	1c51      	adds	r1, r2, #1
 8007a14:	9119      	str	r1, [sp, #100]	@ 0x64
 8007a16:	7852      	ldrb	r2, [r2, #1]
 8007a18:	2a30      	cmp	r2, #48	@ 0x30
 8007a1a:	d0f9      	beq.n	8007a10 <_strtod_l+0x298>
 8007a1c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007a20:	2908      	cmp	r1, #8
 8007a22:	f63f af78 	bhi.w	8007916 <_strtod_l+0x19e>
 8007a26:	3a30      	subs	r2, #48	@ 0x30
 8007a28:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007a2e:	f04f 080a 	mov.w	r8, #10
 8007a32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a34:	1c56      	adds	r6, r2, #1
 8007a36:	9619      	str	r6, [sp, #100]	@ 0x64
 8007a38:	7852      	ldrb	r2, [r2, #1]
 8007a3a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007a3e:	f1be 0f09 	cmp.w	lr, #9
 8007a42:	d939      	bls.n	8007ab8 <_strtod_l+0x340>
 8007a44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007a46:	1a76      	subs	r6, r6, r1
 8007a48:	2e08      	cmp	r6, #8
 8007a4a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007a4e:	dc03      	bgt.n	8007a58 <_strtod_l+0x2e0>
 8007a50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007a52:	4588      	cmp	r8, r1
 8007a54:	bfa8      	it	ge
 8007a56:	4688      	movge	r8, r1
 8007a58:	f1bc 0f00 	cmp.w	ip, #0
 8007a5c:	d001      	beq.n	8007a62 <_strtod_l+0x2ea>
 8007a5e:	f1c8 0800 	rsb	r8, r8, #0
 8007a62:	2d00      	cmp	r5, #0
 8007a64:	d14e      	bne.n	8007b04 <_strtod_l+0x38c>
 8007a66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a68:	4308      	orrs	r0, r1
 8007a6a:	f47f aebe 	bne.w	80077ea <_strtod_l+0x72>
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f47f aed6 	bne.w	8007820 <_strtod_l+0xa8>
 8007a74:	2a69      	cmp	r2, #105	@ 0x69
 8007a76:	d028      	beq.n	8007aca <_strtod_l+0x352>
 8007a78:	dc25      	bgt.n	8007ac6 <_strtod_l+0x34e>
 8007a7a:	2a49      	cmp	r2, #73	@ 0x49
 8007a7c:	d025      	beq.n	8007aca <_strtod_l+0x352>
 8007a7e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007a80:	f47f aece 	bne.w	8007820 <_strtod_l+0xa8>
 8007a84:	499b      	ldr	r1, [pc, #620]	@ (8007cf4 <_strtod_l+0x57c>)
 8007a86:	a819      	add	r0, sp, #100	@ 0x64
 8007a88:	f001 f9ee 	bl	8008e68 <__match>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	f43f aec7 	beq.w	8007820 <_strtod_l+0xa8>
 8007a92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	2b28      	cmp	r3, #40	@ 0x28
 8007a98:	d12e      	bne.n	8007af8 <_strtod_l+0x380>
 8007a9a:	4997      	ldr	r1, [pc, #604]	@ (8007cf8 <_strtod_l+0x580>)
 8007a9c:	aa1c      	add	r2, sp, #112	@ 0x70
 8007a9e:	a819      	add	r0, sp, #100	@ 0x64
 8007aa0:	f001 f9f6 	bl	8008e90 <__hexnan>
 8007aa4:	2805      	cmp	r0, #5
 8007aa6:	d127      	bne.n	8007af8 <_strtod_l+0x380>
 8007aa8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007aaa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007aae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007ab2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007ab6:	e698      	b.n	80077ea <_strtod_l+0x72>
 8007ab8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007aba:	fb08 2101 	mla	r1, r8, r1, r2
 8007abe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007ac2:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ac4:	e7b5      	b.n	8007a32 <_strtod_l+0x2ba>
 8007ac6:	2a6e      	cmp	r2, #110	@ 0x6e
 8007ac8:	e7da      	b.n	8007a80 <_strtod_l+0x308>
 8007aca:	498c      	ldr	r1, [pc, #560]	@ (8007cfc <_strtod_l+0x584>)
 8007acc:	a819      	add	r0, sp, #100	@ 0x64
 8007ace:	f001 f9cb 	bl	8008e68 <__match>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	f43f aea4 	beq.w	8007820 <_strtod_l+0xa8>
 8007ad8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ada:	4989      	ldr	r1, [pc, #548]	@ (8007d00 <_strtod_l+0x588>)
 8007adc:	3b01      	subs	r3, #1
 8007ade:	a819      	add	r0, sp, #100	@ 0x64
 8007ae0:	9319      	str	r3, [sp, #100]	@ 0x64
 8007ae2:	f001 f9c1 	bl	8008e68 <__match>
 8007ae6:	b910      	cbnz	r0, 8007aee <_strtod_l+0x376>
 8007ae8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007aea:	3301      	adds	r3, #1
 8007aec:	9319      	str	r3, [sp, #100]	@ 0x64
 8007aee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007d10 <_strtod_l+0x598>
 8007af2:	f04f 0a00 	mov.w	sl, #0
 8007af6:	e678      	b.n	80077ea <_strtod_l+0x72>
 8007af8:	4882      	ldr	r0, [pc, #520]	@ (8007d04 <_strtod_l+0x58c>)
 8007afa:	f000 fef1 	bl	80088e0 <nan>
 8007afe:	ec5b ab10 	vmov	sl, fp, d0
 8007b02:	e672      	b.n	80077ea <_strtod_l+0x72>
 8007b04:	eba8 0309 	sub.w	r3, r8, r9
 8007b08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b0c:	2f00      	cmp	r7, #0
 8007b0e:	bf08      	it	eq
 8007b10:	462f      	moveq	r7, r5
 8007b12:	2d10      	cmp	r5, #16
 8007b14:	462c      	mov	r4, r5
 8007b16:	bfa8      	it	ge
 8007b18:	2410      	movge	r4, #16
 8007b1a:	f7f8 fcf3 	bl	8000504 <__aeabi_ui2d>
 8007b1e:	2d09      	cmp	r5, #9
 8007b20:	4682      	mov	sl, r0
 8007b22:	468b      	mov	fp, r1
 8007b24:	dc13      	bgt.n	8007b4e <_strtod_l+0x3d6>
 8007b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f43f ae5e 	beq.w	80077ea <_strtod_l+0x72>
 8007b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b30:	dd78      	ble.n	8007c24 <_strtod_l+0x4ac>
 8007b32:	2b16      	cmp	r3, #22
 8007b34:	dc5f      	bgt.n	8007bf6 <_strtod_l+0x47e>
 8007b36:	4974      	ldr	r1, [pc, #464]	@ (8007d08 <_strtod_l+0x590>)
 8007b38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b40:	4652      	mov	r2, sl
 8007b42:	465b      	mov	r3, fp
 8007b44:	f7f8 fd58 	bl	80005f8 <__aeabi_dmul>
 8007b48:	4682      	mov	sl, r0
 8007b4a:	468b      	mov	fp, r1
 8007b4c:	e64d      	b.n	80077ea <_strtod_l+0x72>
 8007b4e:	4b6e      	ldr	r3, [pc, #440]	@ (8007d08 <_strtod_l+0x590>)
 8007b50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007b58:	f7f8 fd4e 	bl	80005f8 <__aeabi_dmul>
 8007b5c:	4682      	mov	sl, r0
 8007b5e:	9808      	ldr	r0, [sp, #32]
 8007b60:	468b      	mov	fp, r1
 8007b62:	f7f8 fccf 	bl	8000504 <__aeabi_ui2d>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4650      	mov	r0, sl
 8007b6c:	4659      	mov	r1, fp
 8007b6e:	f7f8 fb8d 	bl	800028c <__adddf3>
 8007b72:	2d0f      	cmp	r5, #15
 8007b74:	4682      	mov	sl, r0
 8007b76:	468b      	mov	fp, r1
 8007b78:	ddd5      	ble.n	8007b26 <_strtod_l+0x3ae>
 8007b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b7c:	1b2c      	subs	r4, r5, r4
 8007b7e:	441c      	add	r4, r3
 8007b80:	2c00      	cmp	r4, #0
 8007b82:	f340 8096 	ble.w	8007cb2 <_strtod_l+0x53a>
 8007b86:	f014 030f 	ands.w	r3, r4, #15
 8007b8a:	d00a      	beq.n	8007ba2 <_strtod_l+0x42a>
 8007b8c:	495e      	ldr	r1, [pc, #376]	@ (8007d08 <_strtod_l+0x590>)
 8007b8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b92:	4652      	mov	r2, sl
 8007b94:	465b      	mov	r3, fp
 8007b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b9a:	f7f8 fd2d 	bl	80005f8 <__aeabi_dmul>
 8007b9e:	4682      	mov	sl, r0
 8007ba0:	468b      	mov	fp, r1
 8007ba2:	f034 040f 	bics.w	r4, r4, #15
 8007ba6:	d073      	beq.n	8007c90 <_strtod_l+0x518>
 8007ba8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007bac:	dd48      	ble.n	8007c40 <_strtod_l+0x4c8>
 8007bae:	2400      	movs	r4, #0
 8007bb0:	46a0      	mov	r8, r4
 8007bb2:	940a      	str	r4, [sp, #40]	@ 0x28
 8007bb4:	46a1      	mov	r9, r4
 8007bb6:	9a05      	ldr	r2, [sp, #20]
 8007bb8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007d10 <_strtod_l+0x598>
 8007bbc:	2322      	movs	r3, #34	@ 0x22
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	f04f 0a00 	mov.w	sl, #0
 8007bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f43f ae0f 	beq.w	80077ea <_strtod_l+0x72>
 8007bcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bce:	9805      	ldr	r0, [sp, #20]
 8007bd0:	f7ff f942 	bl	8006e58 <_Bfree>
 8007bd4:	9805      	ldr	r0, [sp, #20]
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	f7ff f93e 	bl	8006e58 <_Bfree>
 8007bdc:	9805      	ldr	r0, [sp, #20]
 8007bde:	4641      	mov	r1, r8
 8007be0:	f7ff f93a 	bl	8006e58 <_Bfree>
 8007be4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007be6:	9805      	ldr	r0, [sp, #20]
 8007be8:	f7ff f936 	bl	8006e58 <_Bfree>
 8007bec:	9805      	ldr	r0, [sp, #20]
 8007bee:	4621      	mov	r1, r4
 8007bf0:	f7ff f932 	bl	8006e58 <_Bfree>
 8007bf4:	e5f9      	b.n	80077ea <_strtod_l+0x72>
 8007bf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bf8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	dbbc      	blt.n	8007b7a <_strtod_l+0x402>
 8007c00:	4c41      	ldr	r4, [pc, #260]	@ (8007d08 <_strtod_l+0x590>)
 8007c02:	f1c5 050f 	rsb	r5, r5, #15
 8007c06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007c0a:	4652      	mov	r2, sl
 8007c0c:	465b      	mov	r3, fp
 8007c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c12:	f7f8 fcf1 	bl	80005f8 <__aeabi_dmul>
 8007c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c18:	1b5d      	subs	r5, r3, r5
 8007c1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007c1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c22:	e78f      	b.n	8007b44 <_strtod_l+0x3cc>
 8007c24:	3316      	adds	r3, #22
 8007c26:	dba8      	blt.n	8007b7a <_strtod_l+0x402>
 8007c28:	4b37      	ldr	r3, [pc, #220]	@ (8007d08 <_strtod_l+0x590>)
 8007c2a:	eba9 0808 	sub.w	r8, r9, r8
 8007c2e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007c32:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007c36:	4650      	mov	r0, sl
 8007c38:	4659      	mov	r1, fp
 8007c3a:	f7f8 fe07 	bl	800084c <__aeabi_ddiv>
 8007c3e:	e783      	b.n	8007b48 <_strtod_l+0x3d0>
 8007c40:	4b32      	ldr	r3, [pc, #200]	@ (8007d0c <_strtod_l+0x594>)
 8007c42:	9308      	str	r3, [sp, #32]
 8007c44:	2300      	movs	r3, #0
 8007c46:	1124      	asrs	r4, r4, #4
 8007c48:	4650      	mov	r0, sl
 8007c4a:	4659      	mov	r1, fp
 8007c4c:	461e      	mov	r6, r3
 8007c4e:	2c01      	cmp	r4, #1
 8007c50:	dc21      	bgt.n	8007c96 <_strtod_l+0x51e>
 8007c52:	b10b      	cbz	r3, 8007c58 <_strtod_l+0x4e0>
 8007c54:	4682      	mov	sl, r0
 8007c56:	468b      	mov	fp, r1
 8007c58:	492c      	ldr	r1, [pc, #176]	@ (8007d0c <_strtod_l+0x594>)
 8007c5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007c5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007c62:	4652      	mov	r2, sl
 8007c64:	465b      	mov	r3, fp
 8007c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c6a:	f7f8 fcc5 	bl	80005f8 <__aeabi_dmul>
 8007c6e:	4b28      	ldr	r3, [pc, #160]	@ (8007d10 <_strtod_l+0x598>)
 8007c70:	460a      	mov	r2, r1
 8007c72:	400b      	ands	r3, r1
 8007c74:	4927      	ldr	r1, [pc, #156]	@ (8007d14 <_strtod_l+0x59c>)
 8007c76:	428b      	cmp	r3, r1
 8007c78:	4682      	mov	sl, r0
 8007c7a:	d898      	bhi.n	8007bae <_strtod_l+0x436>
 8007c7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007c80:	428b      	cmp	r3, r1
 8007c82:	bf86      	itte	hi
 8007c84:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007d18 <_strtod_l+0x5a0>
 8007c88:	f04f 3aff 	movhi.w	sl, #4294967295
 8007c8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007c90:	2300      	movs	r3, #0
 8007c92:	9308      	str	r3, [sp, #32]
 8007c94:	e07a      	b.n	8007d8c <_strtod_l+0x614>
 8007c96:	07e2      	lsls	r2, r4, #31
 8007c98:	d505      	bpl.n	8007ca6 <_strtod_l+0x52e>
 8007c9a:	9b08      	ldr	r3, [sp, #32]
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	f7f8 fcaa 	bl	80005f8 <__aeabi_dmul>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	9a08      	ldr	r2, [sp, #32]
 8007ca8:	3208      	adds	r2, #8
 8007caa:	3601      	adds	r6, #1
 8007cac:	1064      	asrs	r4, r4, #1
 8007cae:	9208      	str	r2, [sp, #32]
 8007cb0:	e7cd      	b.n	8007c4e <_strtod_l+0x4d6>
 8007cb2:	d0ed      	beq.n	8007c90 <_strtod_l+0x518>
 8007cb4:	4264      	negs	r4, r4
 8007cb6:	f014 020f 	ands.w	r2, r4, #15
 8007cba:	d00a      	beq.n	8007cd2 <_strtod_l+0x55a>
 8007cbc:	4b12      	ldr	r3, [pc, #72]	@ (8007d08 <_strtod_l+0x590>)
 8007cbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cc2:	4650      	mov	r0, sl
 8007cc4:	4659      	mov	r1, fp
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	f7f8 fdbf 	bl	800084c <__aeabi_ddiv>
 8007cce:	4682      	mov	sl, r0
 8007cd0:	468b      	mov	fp, r1
 8007cd2:	1124      	asrs	r4, r4, #4
 8007cd4:	d0dc      	beq.n	8007c90 <_strtod_l+0x518>
 8007cd6:	2c1f      	cmp	r4, #31
 8007cd8:	dd20      	ble.n	8007d1c <_strtod_l+0x5a4>
 8007cda:	2400      	movs	r4, #0
 8007cdc:	46a0      	mov	r8, r4
 8007cde:	940a      	str	r4, [sp, #40]	@ 0x28
 8007ce0:	46a1      	mov	r9, r4
 8007ce2:	9a05      	ldr	r2, [sp, #20]
 8007ce4:	2322      	movs	r3, #34	@ 0x22
 8007ce6:	f04f 0a00 	mov.w	sl, #0
 8007cea:	f04f 0b00 	mov.w	fp, #0
 8007cee:	6013      	str	r3, [r2, #0]
 8007cf0:	e768      	b.n	8007bc4 <_strtod_l+0x44c>
 8007cf2:	bf00      	nop
 8007cf4:	08009719 	.word	0x08009719
 8007cf8:	0800992c 	.word	0x0800992c
 8007cfc:	08009711 	.word	0x08009711
 8007d00:	08009748 	.word	0x08009748
 8007d04:	08009ad5 	.word	0x08009ad5
 8007d08:	08009860 	.word	0x08009860
 8007d0c:	08009838 	.word	0x08009838
 8007d10:	7ff00000 	.word	0x7ff00000
 8007d14:	7ca00000 	.word	0x7ca00000
 8007d18:	7fefffff 	.word	0x7fefffff
 8007d1c:	f014 0310 	ands.w	r3, r4, #16
 8007d20:	bf18      	it	ne
 8007d22:	236a      	movne	r3, #106	@ 0x6a
 8007d24:	4ea9      	ldr	r6, [pc, #676]	@ (8007fcc <_strtod_l+0x854>)
 8007d26:	9308      	str	r3, [sp, #32]
 8007d28:	4650      	mov	r0, sl
 8007d2a:	4659      	mov	r1, fp
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	07e2      	lsls	r2, r4, #31
 8007d30:	d504      	bpl.n	8007d3c <_strtod_l+0x5c4>
 8007d32:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d36:	f7f8 fc5f 	bl	80005f8 <__aeabi_dmul>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	1064      	asrs	r4, r4, #1
 8007d3e:	f106 0608 	add.w	r6, r6, #8
 8007d42:	d1f4      	bne.n	8007d2e <_strtod_l+0x5b6>
 8007d44:	b10b      	cbz	r3, 8007d4a <_strtod_l+0x5d2>
 8007d46:	4682      	mov	sl, r0
 8007d48:	468b      	mov	fp, r1
 8007d4a:	9b08      	ldr	r3, [sp, #32]
 8007d4c:	b1b3      	cbz	r3, 8007d7c <_strtod_l+0x604>
 8007d4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007d52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	4659      	mov	r1, fp
 8007d5a:	dd0f      	ble.n	8007d7c <_strtod_l+0x604>
 8007d5c:	2b1f      	cmp	r3, #31
 8007d5e:	dd55      	ble.n	8007e0c <_strtod_l+0x694>
 8007d60:	2b34      	cmp	r3, #52	@ 0x34
 8007d62:	bfde      	ittt	le
 8007d64:	f04f 33ff 	movle.w	r3, #4294967295
 8007d68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007d6c:	4093      	lslle	r3, r2
 8007d6e:	f04f 0a00 	mov.w	sl, #0
 8007d72:	bfcc      	ite	gt
 8007d74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007d78:	ea03 0b01 	andle.w	fp, r3, r1
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2300      	movs	r3, #0
 8007d80:	4650      	mov	r0, sl
 8007d82:	4659      	mov	r1, fp
 8007d84:	f7f8 fea0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d1a6      	bne.n	8007cda <_strtod_l+0x562>
 8007d8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007d92:	9805      	ldr	r0, [sp, #20]
 8007d94:	462b      	mov	r3, r5
 8007d96:	463a      	mov	r2, r7
 8007d98:	f7ff f8c6 	bl	8006f28 <__s2b>
 8007d9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	f43f af05 	beq.w	8007bae <_strtod_l+0x436>
 8007da4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007da6:	2a00      	cmp	r2, #0
 8007da8:	eba9 0308 	sub.w	r3, r9, r8
 8007dac:	bfa8      	it	ge
 8007dae:	2300      	movge	r3, #0
 8007db0:	9312      	str	r3, [sp, #72]	@ 0x48
 8007db2:	2400      	movs	r4, #0
 8007db4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007db8:	9316      	str	r3, [sp, #88]	@ 0x58
 8007dba:	46a0      	mov	r8, r4
 8007dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dbe:	9805      	ldr	r0, [sp, #20]
 8007dc0:	6859      	ldr	r1, [r3, #4]
 8007dc2:	f7ff f809 	bl	8006dd8 <_Balloc>
 8007dc6:	4681      	mov	r9, r0
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	f43f aef4 	beq.w	8007bb6 <_strtod_l+0x43e>
 8007dce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dd0:	691a      	ldr	r2, [r3, #16]
 8007dd2:	3202      	adds	r2, #2
 8007dd4:	f103 010c 	add.w	r1, r3, #12
 8007dd8:	0092      	lsls	r2, r2, #2
 8007dda:	300c      	adds	r0, #12
 8007ddc:	f000 fd72 	bl	80088c4 <memcpy>
 8007de0:	ec4b ab10 	vmov	d0, sl, fp
 8007de4:	9805      	ldr	r0, [sp, #20]
 8007de6:	aa1c      	add	r2, sp, #112	@ 0x70
 8007de8:	a91b      	add	r1, sp, #108	@ 0x6c
 8007dea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007dee:	f7ff fbd7 	bl	80075a0 <__d2b>
 8007df2:	901a      	str	r0, [sp, #104]	@ 0x68
 8007df4:	2800      	cmp	r0, #0
 8007df6:	f43f aede 	beq.w	8007bb6 <_strtod_l+0x43e>
 8007dfa:	9805      	ldr	r0, [sp, #20]
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	f7ff f929 	bl	8007054 <__i2b>
 8007e02:	4680      	mov	r8, r0
 8007e04:	b948      	cbnz	r0, 8007e1a <_strtod_l+0x6a2>
 8007e06:	f04f 0800 	mov.w	r8, #0
 8007e0a:	e6d4      	b.n	8007bb6 <_strtod_l+0x43e>
 8007e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e10:	fa02 f303 	lsl.w	r3, r2, r3
 8007e14:	ea03 0a0a 	and.w	sl, r3, sl
 8007e18:	e7b0      	b.n	8007d7c <_strtod_l+0x604>
 8007e1a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007e1c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007e1e:	2d00      	cmp	r5, #0
 8007e20:	bfab      	itete	ge
 8007e22:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007e24:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007e26:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007e28:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007e2a:	bfac      	ite	ge
 8007e2c:	18ef      	addge	r7, r5, r3
 8007e2e:	1b5e      	sublt	r6, r3, r5
 8007e30:	9b08      	ldr	r3, [sp, #32]
 8007e32:	1aed      	subs	r5, r5, r3
 8007e34:	4415      	add	r5, r2
 8007e36:	4b66      	ldr	r3, [pc, #408]	@ (8007fd0 <_strtod_l+0x858>)
 8007e38:	3d01      	subs	r5, #1
 8007e3a:	429d      	cmp	r5, r3
 8007e3c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007e40:	da50      	bge.n	8007ee4 <_strtod_l+0x76c>
 8007e42:	1b5b      	subs	r3, r3, r5
 8007e44:	2b1f      	cmp	r3, #31
 8007e46:	eba2 0203 	sub.w	r2, r2, r3
 8007e4a:	f04f 0101 	mov.w	r1, #1
 8007e4e:	dc3d      	bgt.n	8007ecc <_strtod_l+0x754>
 8007e50:	fa01 f303 	lsl.w	r3, r1, r3
 8007e54:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e56:	2300      	movs	r3, #0
 8007e58:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e5a:	18bd      	adds	r5, r7, r2
 8007e5c:	9b08      	ldr	r3, [sp, #32]
 8007e5e:	42af      	cmp	r7, r5
 8007e60:	4416      	add	r6, r2
 8007e62:	441e      	add	r6, r3
 8007e64:	463b      	mov	r3, r7
 8007e66:	bfa8      	it	ge
 8007e68:	462b      	movge	r3, r5
 8007e6a:	42b3      	cmp	r3, r6
 8007e6c:	bfa8      	it	ge
 8007e6e:	4633      	movge	r3, r6
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bfc2      	ittt	gt
 8007e74:	1aed      	subgt	r5, r5, r3
 8007e76:	1af6      	subgt	r6, r6, r3
 8007e78:	1aff      	subgt	r7, r7, r3
 8007e7a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dd16      	ble.n	8007eae <_strtod_l+0x736>
 8007e80:	4641      	mov	r1, r8
 8007e82:	9805      	ldr	r0, [sp, #20]
 8007e84:	461a      	mov	r2, r3
 8007e86:	f7ff f9a5 	bl	80071d4 <__pow5mult>
 8007e8a:	4680      	mov	r8, r0
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d0ba      	beq.n	8007e06 <_strtod_l+0x68e>
 8007e90:	4601      	mov	r1, r0
 8007e92:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007e94:	9805      	ldr	r0, [sp, #20]
 8007e96:	f7ff f8f3 	bl	8007080 <__multiply>
 8007e9a:	900e      	str	r0, [sp, #56]	@ 0x38
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	f43f ae8a 	beq.w	8007bb6 <_strtod_l+0x43e>
 8007ea2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ea4:	9805      	ldr	r0, [sp, #20]
 8007ea6:	f7fe ffd7 	bl	8006e58 <_Bfree>
 8007eaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007eac:	931a      	str	r3, [sp, #104]	@ 0x68
 8007eae:	2d00      	cmp	r5, #0
 8007eb0:	dc1d      	bgt.n	8007eee <_strtod_l+0x776>
 8007eb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	dd23      	ble.n	8007f00 <_strtod_l+0x788>
 8007eb8:	4649      	mov	r1, r9
 8007eba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007ebc:	9805      	ldr	r0, [sp, #20]
 8007ebe:	f7ff f989 	bl	80071d4 <__pow5mult>
 8007ec2:	4681      	mov	r9, r0
 8007ec4:	b9e0      	cbnz	r0, 8007f00 <_strtod_l+0x788>
 8007ec6:	f04f 0900 	mov.w	r9, #0
 8007eca:	e674      	b.n	8007bb6 <_strtod_l+0x43e>
 8007ecc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007ed0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007ed4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007ed8:	35e2      	adds	r5, #226	@ 0xe2
 8007eda:	fa01 f305 	lsl.w	r3, r1, r5
 8007ede:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ee0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007ee2:	e7ba      	b.n	8007e5a <_strtod_l+0x6e2>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ee8:	2301      	movs	r3, #1
 8007eea:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007eec:	e7b5      	b.n	8007e5a <_strtod_l+0x6e2>
 8007eee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ef0:	9805      	ldr	r0, [sp, #20]
 8007ef2:	462a      	mov	r2, r5
 8007ef4:	f7ff f9c8 	bl	8007288 <__lshift>
 8007ef8:	901a      	str	r0, [sp, #104]	@ 0x68
 8007efa:	2800      	cmp	r0, #0
 8007efc:	d1d9      	bne.n	8007eb2 <_strtod_l+0x73a>
 8007efe:	e65a      	b.n	8007bb6 <_strtod_l+0x43e>
 8007f00:	2e00      	cmp	r6, #0
 8007f02:	dd07      	ble.n	8007f14 <_strtod_l+0x79c>
 8007f04:	4649      	mov	r1, r9
 8007f06:	9805      	ldr	r0, [sp, #20]
 8007f08:	4632      	mov	r2, r6
 8007f0a:	f7ff f9bd 	bl	8007288 <__lshift>
 8007f0e:	4681      	mov	r9, r0
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d0d8      	beq.n	8007ec6 <_strtod_l+0x74e>
 8007f14:	2f00      	cmp	r7, #0
 8007f16:	dd08      	ble.n	8007f2a <_strtod_l+0x7b2>
 8007f18:	4641      	mov	r1, r8
 8007f1a:	9805      	ldr	r0, [sp, #20]
 8007f1c:	463a      	mov	r2, r7
 8007f1e:	f7ff f9b3 	bl	8007288 <__lshift>
 8007f22:	4680      	mov	r8, r0
 8007f24:	2800      	cmp	r0, #0
 8007f26:	f43f ae46 	beq.w	8007bb6 <_strtod_l+0x43e>
 8007f2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f2c:	9805      	ldr	r0, [sp, #20]
 8007f2e:	464a      	mov	r2, r9
 8007f30:	f7ff fa32 	bl	8007398 <__mdiff>
 8007f34:	4604      	mov	r4, r0
 8007f36:	2800      	cmp	r0, #0
 8007f38:	f43f ae3d 	beq.w	8007bb6 <_strtod_l+0x43e>
 8007f3c:	68c3      	ldr	r3, [r0, #12]
 8007f3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f40:	2300      	movs	r3, #0
 8007f42:	60c3      	str	r3, [r0, #12]
 8007f44:	4641      	mov	r1, r8
 8007f46:	f7ff fa0b 	bl	8007360 <__mcmp>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	da46      	bge.n	8007fdc <_strtod_l+0x864>
 8007f4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f50:	ea53 030a 	orrs.w	r3, r3, sl
 8007f54:	d16c      	bne.n	8008030 <_strtod_l+0x8b8>
 8007f56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d168      	bne.n	8008030 <_strtod_l+0x8b8>
 8007f5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f62:	0d1b      	lsrs	r3, r3, #20
 8007f64:	051b      	lsls	r3, r3, #20
 8007f66:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007f6a:	d961      	bls.n	8008030 <_strtod_l+0x8b8>
 8007f6c:	6963      	ldr	r3, [r4, #20]
 8007f6e:	b913      	cbnz	r3, 8007f76 <_strtod_l+0x7fe>
 8007f70:	6923      	ldr	r3, [r4, #16]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	dd5c      	ble.n	8008030 <_strtod_l+0x8b8>
 8007f76:	4621      	mov	r1, r4
 8007f78:	2201      	movs	r2, #1
 8007f7a:	9805      	ldr	r0, [sp, #20]
 8007f7c:	f7ff f984 	bl	8007288 <__lshift>
 8007f80:	4641      	mov	r1, r8
 8007f82:	4604      	mov	r4, r0
 8007f84:	f7ff f9ec 	bl	8007360 <__mcmp>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	dd51      	ble.n	8008030 <_strtod_l+0x8b8>
 8007f8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f90:	9a08      	ldr	r2, [sp, #32]
 8007f92:	0d1b      	lsrs	r3, r3, #20
 8007f94:	051b      	lsls	r3, r3, #20
 8007f96:	2a00      	cmp	r2, #0
 8007f98:	d06b      	beq.n	8008072 <_strtod_l+0x8fa>
 8007f9a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007f9e:	d868      	bhi.n	8008072 <_strtod_l+0x8fa>
 8007fa0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007fa4:	f67f ae9d 	bls.w	8007ce2 <_strtod_l+0x56a>
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd4 <_strtod_l+0x85c>)
 8007faa:	4650      	mov	r0, sl
 8007fac:	4659      	mov	r1, fp
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f7f8 fb22 	bl	80005f8 <__aeabi_dmul>
 8007fb4:	4b08      	ldr	r3, [pc, #32]	@ (8007fd8 <_strtod_l+0x860>)
 8007fb6:	400b      	ands	r3, r1
 8007fb8:	4682      	mov	sl, r0
 8007fba:	468b      	mov	fp, r1
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f47f ae05 	bne.w	8007bcc <_strtod_l+0x454>
 8007fc2:	9a05      	ldr	r2, [sp, #20]
 8007fc4:	2322      	movs	r3, #34	@ 0x22
 8007fc6:	6013      	str	r3, [r2, #0]
 8007fc8:	e600      	b.n	8007bcc <_strtod_l+0x454>
 8007fca:	bf00      	nop
 8007fcc:	08009958 	.word	0x08009958
 8007fd0:	fffffc02 	.word	0xfffffc02
 8007fd4:	39500000 	.word	0x39500000
 8007fd8:	7ff00000 	.word	0x7ff00000
 8007fdc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007fe0:	d165      	bne.n	80080ae <_strtod_l+0x936>
 8007fe2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007fe4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fe8:	b35a      	cbz	r2, 8008042 <_strtod_l+0x8ca>
 8007fea:	4a9f      	ldr	r2, [pc, #636]	@ (8008268 <_strtod_l+0xaf0>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d12b      	bne.n	8008048 <_strtod_l+0x8d0>
 8007ff0:	9b08      	ldr	r3, [sp, #32]
 8007ff2:	4651      	mov	r1, sl
 8007ff4:	b303      	cbz	r3, 8008038 <_strtod_l+0x8c0>
 8007ff6:	4b9d      	ldr	r3, [pc, #628]	@ (800826c <_strtod_l+0xaf4>)
 8007ff8:	465a      	mov	r2, fp
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008000:	f04f 32ff 	mov.w	r2, #4294967295
 8008004:	d81b      	bhi.n	800803e <_strtod_l+0x8c6>
 8008006:	0d1b      	lsrs	r3, r3, #20
 8008008:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800800c:	fa02 f303 	lsl.w	r3, r2, r3
 8008010:	4299      	cmp	r1, r3
 8008012:	d119      	bne.n	8008048 <_strtod_l+0x8d0>
 8008014:	4b96      	ldr	r3, [pc, #600]	@ (8008270 <_strtod_l+0xaf8>)
 8008016:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008018:	429a      	cmp	r2, r3
 800801a:	d102      	bne.n	8008022 <_strtod_l+0x8aa>
 800801c:	3101      	adds	r1, #1
 800801e:	f43f adca 	beq.w	8007bb6 <_strtod_l+0x43e>
 8008022:	4b92      	ldr	r3, [pc, #584]	@ (800826c <_strtod_l+0xaf4>)
 8008024:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008026:	401a      	ands	r2, r3
 8008028:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800802c:	f04f 0a00 	mov.w	sl, #0
 8008030:	9b08      	ldr	r3, [sp, #32]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1b8      	bne.n	8007fa8 <_strtod_l+0x830>
 8008036:	e5c9      	b.n	8007bcc <_strtod_l+0x454>
 8008038:	f04f 33ff 	mov.w	r3, #4294967295
 800803c:	e7e8      	b.n	8008010 <_strtod_l+0x898>
 800803e:	4613      	mov	r3, r2
 8008040:	e7e6      	b.n	8008010 <_strtod_l+0x898>
 8008042:	ea53 030a 	orrs.w	r3, r3, sl
 8008046:	d0a1      	beq.n	8007f8c <_strtod_l+0x814>
 8008048:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800804a:	b1db      	cbz	r3, 8008084 <_strtod_l+0x90c>
 800804c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800804e:	4213      	tst	r3, r2
 8008050:	d0ee      	beq.n	8008030 <_strtod_l+0x8b8>
 8008052:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008054:	9a08      	ldr	r2, [sp, #32]
 8008056:	4650      	mov	r0, sl
 8008058:	4659      	mov	r1, fp
 800805a:	b1bb      	cbz	r3, 800808c <_strtod_l+0x914>
 800805c:	f7ff fb6e 	bl	800773c <sulp>
 8008060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008064:	ec53 2b10 	vmov	r2, r3, d0
 8008068:	f7f8 f910 	bl	800028c <__adddf3>
 800806c:	4682      	mov	sl, r0
 800806e:	468b      	mov	fp, r1
 8008070:	e7de      	b.n	8008030 <_strtod_l+0x8b8>
 8008072:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008076:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800807a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800807e:	f04f 3aff 	mov.w	sl, #4294967295
 8008082:	e7d5      	b.n	8008030 <_strtod_l+0x8b8>
 8008084:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008086:	ea13 0f0a 	tst.w	r3, sl
 800808a:	e7e1      	b.n	8008050 <_strtod_l+0x8d8>
 800808c:	f7ff fb56 	bl	800773c <sulp>
 8008090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008094:	ec53 2b10 	vmov	r2, r3, d0
 8008098:	f7f8 f8f6 	bl	8000288 <__aeabi_dsub>
 800809c:	2200      	movs	r2, #0
 800809e:	2300      	movs	r3, #0
 80080a0:	4682      	mov	sl, r0
 80080a2:	468b      	mov	fp, r1
 80080a4:	f7f8 fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d0c1      	beq.n	8008030 <_strtod_l+0x8b8>
 80080ac:	e619      	b.n	8007ce2 <_strtod_l+0x56a>
 80080ae:	4641      	mov	r1, r8
 80080b0:	4620      	mov	r0, r4
 80080b2:	f7ff facd 	bl	8007650 <__ratio>
 80080b6:	ec57 6b10 	vmov	r6, r7, d0
 80080ba:	2200      	movs	r2, #0
 80080bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80080c0:	4630      	mov	r0, r6
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 fd14 	bl	8000af0 <__aeabi_dcmple>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d06f      	beq.n	80081ac <_strtod_l+0xa34>
 80080cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d17a      	bne.n	80081c8 <_strtod_l+0xa50>
 80080d2:	f1ba 0f00 	cmp.w	sl, #0
 80080d6:	d158      	bne.n	800818a <_strtod_l+0xa12>
 80080d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d15a      	bne.n	8008198 <_strtod_l+0xa20>
 80080e2:	4b64      	ldr	r3, [pc, #400]	@ (8008274 <_strtod_l+0xafc>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	4630      	mov	r0, r6
 80080e8:	4639      	mov	r1, r7
 80080ea:	f7f8 fcf7 	bl	8000adc <__aeabi_dcmplt>
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d159      	bne.n	80081a6 <_strtod_l+0xa2e>
 80080f2:	4630      	mov	r0, r6
 80080f4:	4639      	mov	r1, r7
 80080f6:	4b60      	ldr	r3, [pc, #384]	@ (8008278 <_strtod_l+0xb00>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	f7f8 fa7d 	bl	80005f8 <__aeabi_dmul>
 80080fe:	4606      	mov	r6, r0
 8008100:	460f      	mov	r7, r1
 8008102:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008106:	9606      	str	r6, [sp, #24]
 8008108:	9307      	str	r3, [sp, #28]
 800810a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800810e:	4d57      	ldr	r5, [pc, #348]	@ (800826c <_strtod_l+0xaf4>)
 8008110:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008116:	401d      	ands	r5, r3
 8008118:	4b58      	ldr	r3, [pc, #352]	@ (800827c <_strtod_l+0xb04>)
 800811a:	429d      	cmp	r5, r3
 800811c:	f040 80b2 	bne.w	8008284 <_strtod_l+0xb0c>
 8008120:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008122:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008126:	ec4b ab10 	vmov	d0, sl, fp
 800812a:	f7ff f9c9 	bl	80074c0 <__ulp>
 800812e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008132:	ec51 0b10 	vmov	r0, r1, d0
 8008136:	f7f8 fa5f 	bl	80005f8 <__aeabi_dmul>
 800813a:	4652      	mov	r2, sl
 800813c:	465b      	mov	r3, fp
 800813e:	f7f8 f8a5 	bl	800028c <__adddf3>
 8008142:	460b      	mov	r3, r1
 8008144:	4949      	ldr	r1, [pc, #292]	@ (800826c <_strtod_l+0xaf4>)
 8008146:	4a4e      	ldr	r2, [pc, #312]	@ (8008280 <_strtod_l+0xb08>)
 8008148:	4019      	ands	r1, r3
 800814a:	4291      	cmp	r1, r2
 800814c:	4682      	mov	sl, r0
 800814e:	d942      	bls.n	80081d6 <_strtod_l+0xa5e>
 8008150:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008152:	4b47      	ldr	r3, [pc, #284]	@ (8008270 <_strtod_l+0xaf8>)
 8008154:	429a      	cmp	r2, r3
 8008156:	d103      	bne.n	8008160 <_strtod_l+0x9e8>
 8008158:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800815a:	3301      	adds	r3, #1
 800815c:	f43f ad2b 	beq.w	8007bb6 <_strtod_l+0x43e>
 8008160:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008270 <_strtod_l+0xaf8>
 8008164:	f04f 3aff 	mov.w	sl, #4294967295
 8008168:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800816a:	9805      	ldr	r0, [sp, #20]
 800816c:	f7fe fe74 	bl	8006e58 <_Bfree>
 8008170:	9805      	ldr	r0, [sp, #20]
 8008172:	4649      	mov	r1, r9
 8008174:	f7fe fe70 	bl	8006e58 <_Bfree>
 8008178:	9805      	ldr	r0, [sp, #20]
 800817a:	4641      	mov	r1, r8
 800817c:	f7fe fe6c 	bl	8006e58 <_Bfree>
 8008180:	9805      	ldr	r0, [sp, #20]
 8008182:	4621      	mov	r1, r4
 8008184:	f7fe fe68 	bl	8006e58 <_Bfree>
 8008188:	e618      	b.n	8007dbc <_strtod_l+0x644>
 800818a:	f1ba 0f01 	cmp.w	sl, #1
 800818e:	d103      	bne.n	8008198 <_strtod_l+0xa20>
 8008190:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008192:	2b00      	cmp	r3, #0
 8008194:	f43f ada5 	beq.w	8007ce2 <_strtod_l+0x56a>
 8008198:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008248 <_strtod_l+0xad0>
 800819c:	4f35      	ldr	r7, [pc, #212]	@ (8008274 <_strtod_l+0xafc>)
 800819e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80081a2:	2600      	movs	r6, #0
 80081a4:	e7b1      	b.n	800810a <_strtod_l+0x992>
 80081a6:	4f34      	ldr	r7, [pc, #208]	@ (8008278 <_strtod_l+0xb00>)
 80081a8:	2600      	movs	r6, #0
 80081aa:	e7aa      	b.n	8008102 <_strtod_l+0x98a>
 80081ac:	4b32      	ldr	r3, [pc, #200]	@ (8008278 <_strtod_l+0xb00>)
 80081ae:	4630      	mov	r0, r6
 80081b0:	4639      	mov	r1, r7
 80081b2:	2200      	movs	r2, #0
 80081b4:	f7f8 fa20 	bl	80005f8 <__aeabi_dmul>
 80081b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081ba:	4606      	mov	r6, r0
 80081bc:	460f      	mov	r7, r1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d09f      	beq.n	8008102 <_strtod_l+0x98a>
 80081c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80081c6:	e7a0      	b.n	800810a <_strtod_l+0x992>
 80081c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008250 <_strtod_l+0xad8>
 80081cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80081d0:	ec57 6b17 	vmov	r6, r7, d7
 80081d4:	e799      	b.n	800810a <_strtod_l+0x992>
 80081d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80081da:	9b08      	ldr	r3, [sp, #32]
 80081dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1c1      	bne.n	8008168 <_strtod_l+0x9f0>
 80081e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80081e8:	0d1b      	lsrs	r3, r3, #20
 80081ea:	051b      	lsls	r3, r3, #20
 80081ec:	429d      	cmp	r5, r3
 80081ee:	d1bb      	bne.n	8008168 <_strtod_l+0x9f0>
 80081f0:	4630      	mov	r0, r6
 80081f2:	4639      	mov	r1, r7
 80081f4:	f7f8 fd60 	bl	8000cb8 <__aeabi_d2lz>
 80081f8:	f7f8 f9d0 	bl	800059c <__aeabi_l2d>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4630      	mov	r0, r6
 8008202:	4639      	mov	r1, r7
 8008204:	f7f8 f840 	bl	8000288 <__aeabi_dsub>
 8008208:	460b      	mov	r3, r1
 800820a:	4602      	mov	r2, r0
 800820c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008210:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008216:	ea46 060a 	orr.w	r6, r6, sl
 800821a:	431e      	orrs	r6, r3
 800821c:	d06f      	beq.n	80082fe <_strtod_l+0xb86>
 800821e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008258 <_strtod_l+0xae0>)
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	f7f8 fc5a 	bl	8000adc <__aeabi_dcmplt>
 8008228:	2800      	cmp	r0, #0
 800822a:	f47f accf 	bne.w	8007bcc <_strtod_l+0x454>
 800822e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008260 <_strtod_l+0xae8>)
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008238:	f7f8 fc6e 	bl	8000b18 <__aeabi_dcmpgt>
 800823c:	2800      	cmp	r0, #0
 800823e:	d093      	beq.n	8008168 <_strtod_l+0x9f0>
 8008240:	e4c4      	b.n	8007bcc <_strtod_l+0x454>
 8008242:	bf00      	nop
 8008244:	f3af 8000 	nop.w
 8008248:	00000000 	.word	0x00000000
 800824c:	bff00000 	.word	0xbff00000
 8008250:	00000000 	.word	0x00000000
 8008254:	3ff00000 	.word	0x3ff00000
 8008258:	94a03595 	.word	0x94a03595
 800825c:	3fdfffff 	.word	0x3fdfffff
 8008260:	35afe535 	.word	0x35afe535
 8008264:	3fe00000 	.word	0x3fe00000
 8008268:	000fffff 	.word	0x000fffff
 800826c:	7ff00000 	.word	0x7ff00000
 8008270:	7fefffff 	.word	0x7fefffff
 8008274:	3ff00000 	.word	0x3ff00000
 8008278:	3fe00000 	.word	0x3fe00000
 800827c:	7fe00000 	.word	0x7fe00000
 8008280:	7c9fffff 	.word	0x7c9fffff
 8008284:	9b08      	ldr	r3, [sp, #32]
 8008286:	b323      	cbz	r3, 80082d2 <_strtod_l+0xb5a>
 8008288:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800828c:	d821      	bhi.n	80082d2 <_strtod_l+0xb5a>
 800828e:	a328      	add	r3, pc, #160	@ (adr r3, 8008330 <_strtod_l+0xbb8>)
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	4630      	mov	r0, r6
 8008296:	4639      	mov	r1, r7
 8008298:	f7f8 fc2a 	bl	8000af0 <__aeabi_dcmple>
 800829c:	b1a0      	cbz	r0, 80082c8 <_strtod_l+0xb50>
 800829e:	4639      	mov	r1, r7
 80082a0:	4630      	mov	r0, r6
 80082a2:	f7f8 fc81 	bl	8000ba8 <__aeabi_d2uiz>
 80082a6:	2801      	cmp	r0, #1
 80082a8:	bf38      	it	cc
 80082aa:	2001      	movcc	r0, #1
 80082ac:	f7f8 f92a 	bl	8000504 <__aeabi_ui2d>
 80082b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082b2:	4606      	mov	r6, r0
 80082b4:	460f      	mov	r7, r1
 80082b6:	b9fb      	cbnz	r3, 80082f8 <_strtod_l+0xb80>
 80082b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80082be:	9315      	str	r3, [sp, #84]	@ 0x54
 80082c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80082c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80082c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80082ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80082ce:	1b5b      	subs	r3, r3, r5
 80082d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80082d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80082d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80082da:	f7ff f8f1 	bl	80074c0 <__ulp>
 80082de:	4650      	mov	r0, sl
 80082e0:	ec53 2b10 	vmov	r2, r3, d0
 80082e4:	4659      	mov	r1, fp
 80082e6:	f7f8 f987 	bl	80005f8 <__aeabi_dmul>
 80082ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80082ee:	f7f7 ffcd 	bl	800028c <__adddf3>
 80082f2:	4682      	mov	sl, r0
 80082f4:	468b      	mov	fp, r1
 80082f6:	e770      	b.n	80081da <_strtod_l+0xa62>
 80082f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80082fc:	e7e0      	b.n	80082c0 <_strtod_l+0xb48>
 80082fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8008338 <_strtod_l+0xbc0>)
 8008300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008304:	f7f8 fbea 	bl	8000adc <__aeabi_dcmplt>
 8008308:	e798      	b.n	800823c <_strtod_l+0xac4>
 800830a:	2300      	movs	r3, #0
 800830c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800830e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008310:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008312:	6013      	str	r3, [r2, #0]
 8008314:	f7ff ba6d 	b.w	80077f2 <_strtod_l+0x7a>
 8008318:	2a65      	cmp	r2, #101	@ 0x65
 800831a:	f43f ab66 	beq.w	80079ea <_strtod_l+0x272>
 800831e:	2a45      	cmp	r2, #69	@ 0x45
 8008320:	f43f ab63 	beq.w	80079ea <_strtod_l+0x272>
 8008324:	2301      	movs	r3, #1
 8008326:	f7ff bb9e 	b.w	8007a66 <_strtod_l+0x2ee>
 800832a:	bf00      	nop
 800832c:	f3af 8000 	nop.w
 8008330:	ffc00000 	.word	0xffc00000
 8008334:	41dfffff 	.word	0x41dfffff
 8008338:	94a03595 	.word	0x94a03595
 800833c:	3fcfffff 	.word	0x3fcfffff

08008340 <_strtod_r>:
 8008340:	4b01      	ldr	r3, [pc, #4]	@ (8008348 <_strtod_r+0x8>)
 8008342:	f7ff ba19 	b.w	8007778 <_strtod_l>
 8008346:	bf00      	nop
 8008348:	2000006c 	.word	0x2000006c

0800834c <_strtol_l.constprop.0>:
 800834c:	2b24      	cmp	r3, #36	@ 0x24
 800834e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008352:	4686      	mov	lr, r0
 8008354:	4690      	mov	r8, r2
 8008356:	d801      	bhi.n	800835c <_strtol_l.constprop.0+0x10>
 8008358:	2b01      	cmp	r3, #1
 800835a:	d106      	bne.n	800836a <_strtol_l.constprop.0+0x1e>
 800835c:	f7fd fdba 	bl	8005ed4 <__errno>
 8008360:	2316      	movs	r3, #22
 8008362:	6003      	str	r3, [r0, #0]
 8008364:	2000      	movs	r0, #0
 8008366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800836a:	4834      	ldr	r0, [pc, #208]	@ (800843c <_strtol_l.constprop.0+0xf0>)
 800836c:	460d      	mov	r5, r1
 800836e:	462a      	mov	r2, r5
 8008370:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008374:	5d06      	ldrb	r6, [r0, r4]
 8008376:	f016 0608 	ands.w	r6, r6, #8
 800837a:	d1f8      	bne.n	800836e <_strtol_l.constprop.0+0x22>
 800837c:	2c2d      	cmp	r4, #45	@ 0x2d
 800837e:	d12d      	bne.n	80083dc <_strtol_l.constprop.0+0x90>
 8008380:	782c      	ldrb	r4, [r5, #0]
 8008382:	2601      	movs	r6, #1
 8008384:	1c95      	adds	r5, r2, #2
 8008386:	f033 0210 	bics.w	r2, r3, #16
 800838a:	d109      	bne.n	80083a0 <_strtol_l.constprop.0+0x54>
 800838c:	2c30      	cmp	r4, #48	@ 0x30
 800838e:	d12a      	bne.n	80083e6 <_strtol_l.constprop.0+0x9a>
 8008390:	782a      	ldrb	r2, [r5, #0]
 8008392:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008396:	2a58      	cmp	r2, #88	@ 0x58
 8008398:	d125      	bne.n	80083e6 <_strtol_l.constprop.0+0x9a>
 800839a:	786c      	ldrb	r4, [r5, #1]
 800839c:	2310      	movs	r3, #16
 800839e:	3502      	adds	r5, #2
 80083a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80083a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80083a8:	2200      	movs	r2, #0
 80083aa:	fbbc f9f3 	udiv	r9, ip, r3
 80083ae:	4610      	mov	r0, r2
 80083b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80083b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80083b8:	2f09      	cmp	r7, #9
 80083ba:	d81b      	bhi.n	80083f4 <_strtol_l.constprop.0+0xa8>
 80083bc:	463c      	mov	r4, r7
 80083be:	42a3      	cmp	r3, r4
 80083c0:	dd27      	ble.n	8008412 <_strtol_l.constprop.0+0xc6>
 80083c2:	1c57      	adds	r7, r2, #1
 80083c4:	d007      	beq.n	80083d6 <_strtol_l.constprop.0+0x8a>
 80083c6:	4581      	cmp	r9, r0
 80083c8:	d320      	bcc.n	800840c <_strtol_l.constprop.0+0xc0>
 80083ca:	d101      	bne.n	80083d0 <_strtol_l.constprop.0+0x84>
 80083cc:	45a2      	cmp	sl, r4
 80083ce:	db1d      	blt.n	800840c <_strtol_l.constprop.0+0xc0>
 80083d0:	fb00 4003 	mla	r0, r0, r3, r4
 80083d4:	2201      	movs	r2, #1
 80083d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083da:	e7eb      	b.n	80083b4 <_strtol_l.constprop.0+0x68>
 80083dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80083de:	bf04      	itt	eq
 80083e0:	782c      	ldrbeq	r4, [r5, #0]
 80083e2:	1c95      	addeq	r5, r2, #2
 80083e4:	e7cf      	b.n	8008386 <_strtol_l.constprop.0+0x3a>
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1da      	bne.n	80083a0 <_strtol_l.constprop.0+0x54>
 80083ea:	2c30      	cmp	r4, #48	@ 0x30
 80083ec:	bf0c      	ite	eq
 80083ee:	2308      	moveq	r3, #8
 80083f0:	230a      	movne	r3, #10
 80083f2:	e7d5      	b.n	80083a0 <_strtol_l.constprop.0+0x54>
 80083f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80083f8:	2f19      	cmp	r7, #25
 80083fa:	d801      	bhi.n	8008400 <_strtol_l.constprop.0+0xb4>
 80083fc:	3c37      	subs	r4, #55	@ 0x37
 80083fe:	e7de      	b.n	80083be <_strtol_l.constprop.0+0x72>
 8008400:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008404:	2f19      	cmp	r7, #25
 8008406:	d804      	bhi.n	8008412 <_strtol_l.constprop.0+0xc6>
 8008408:	3c57      	subs	r4, #87	@ 0x57
 800840a:	e7d8      	b.n	80083be <_strtol_l.constprop.0+0x72>
 800840c:	f04f 32ff 	mov.w	r2, #4294967295
 8008410:	e7e1      	b.n	80083d6 <_strtol_l.constprop.0+0x8a>
 8008412:	1c53      	adds	r3, r2, #1
 8008414:	d108      	bne.n	8008428 <_strtol_l.constprop.0+0xdc>
 8008416:	2322      	movs	r3, #34	@ 0x22
 8008418:	f8ce 3000 	str.w	r3, [lr]
 800841c:	4660      	mov	r0, ip
 800841e:	f1b8 0f00 	cmp.w	r8, #0
 8008422:	d0a0      	beq.n	8008366 <_strtol_l.constprop.0+0x1a>
 8008424:	1e69      	subs	r1, r5, #1
 8008426:	e006      	b.n	8008436 <_strtol_l.constprop.0+0xea>
 8008428:	b106      	cbz	r6, 800842c <_strtol_l.constprop.0+0xe0>
 800842a:	4240      	negs	r0, r0
 800842c:	f1b8 0f00 	cmp.w	r8, #0
 8008430:	d099      	beq.n	8008366 <_strtol_l.constprop.0+0x1a>
 8008432:	2a00      	cmp	r2, #0
 8008434:	d1f6      	bne.n	8008424 <_strtol_l.constprop.0+0xd8>
 8008436:	f8c8 1000 	str.w	r1, [r8]
 800843a:	e794      	b.n	8008366 <_strtol_l.constprop.0+0x1a>
 800843c:	08009981 	.word	0x08009981

08008440 <_strtol_r>:
 8008440:	f7ff bf84 	b.w	800834c <_strtol_l.constprop.0>

08008444 <__ssputs_r>:
 8008444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008448:	688e      	ldr	r6, [r1, #8]
 800844a:	461f      	mov	r7, r3
 800844c:	42be      	cmp	r6, r7
 800844e:	680b      	ldr	r3, [r1, #0]
 8008450:	4682      	mov	sl, r0
 8008452:	460c      	mov	r4, r1
 8008454:	4690      	mov	r8, r2
 8008456:	d82d      	bhi.n	80084b4 <__ssputs_r+0x70>
 8008458:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800845c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008460:	d026      	beq.n	80084b0 <__ssputs_r+0x6c>
 8008462:	6965      	ldr	r5, [r4, #20]
 8008464:	6909      	ldr	r1, [r1, #16]
 8008466:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800846a:	eba3 0901 	sub.w	r9, r3, r1
 800846e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008472:	1c7b      	adds	r3, r7, #1
 8008474:	444b      	add	r3, r9
 8008476:	106d      	asrs	r5, r5, #1
 8008478:	429d      	cmp	r5, r3
 800847a:	bf38      	it	cc
 800847c:	461d      	movcc	r5, r3
 800847e:	0553      	lsls	r3, r2, #21
 8008480:	d527      	bpl.n	80084d2 <__ssputs_r+0x8e>
 8008482:	4629      	mov	r1, r5
 8008484:	f7fe fc1c 	bl	8006cc0 <_malloc_r>
 8008488:	4606      	mov	r6, r0
 800848a:	b360      	cbz	r0, 80084e6 <__ssputs_r+0xa2>
 800848c:	6921      	ldr	r1, [r4, #16]
 800848e:	464a      	mov	r2, r9
 8008490:	f000 fa18 	bl	80088c4 <memcpy>
 8008494:	89a3      	ldrh	r3, [r4, #12]
 8008496:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800849a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800849e:	81a3      	strh	r3, [r4, #12]
 80084a0:	6126      	str	r6, [r4, #16]
 80084a2:	6165      	str	r5, [r4, #20]
 80084a4:	444e      	add	r6, r9
 80084a6:	eba5 0509 	sub.w	r5, r5, r9
 80084aa:	6026      	str	r6, [r4, #0]
 80084ac:	60a5      	str	r5, [r4, #8]
 80084ae:	463e      	mov	r6, r7
 80084b0:	42be      	cmp	r6, r7
 80084b2:	d900      	bls.n	80084b6 <__ssputs_r+0x72>
 80084b4:	463e      	mov	r6, r7
 80084b6:	6820      	ldr	r0, [r4, #0]
 80084b8:	4632      	mov	r2, r6
 80084ba:	4641      	mov	r1, r8
 80084bc:	f000 f9c6 	bl	800884c <memmove>
 80084c0:	68a3      	ldr	r3, [r4, #8]
 80084c2:	1b9b      	subs	r3, r3, r6
 80084c4:	60a3      	str	r3, [r4, #8]
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	4433      	add	r3, r6
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	2000      	movs	r0, #0
 80084ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d2:	462a      	mov	r2, r5
 80084d4:	f000 fd89 	bl	8008fea <_realloc_r>
 80084d8:	4606      	mov	r6, r0
 80084da:	2800      	cmp	r0, #0
 80084dc:	d1e0      	bne.n	80084a0 <__ssputs_r+0x5c>
 80084de:	6921      	ldr	r1, [r4, #16]
 80084e0:	4650      	mov	r0, sl
 80084e2:	f7fe fb79 	bl	8006bd8 <_free_r>
 80084e6:	230c      	movs	r3, #12
 80084e8:	f8ca 3000 	str.w	r3, [sl]
 80084ec:	89a3      	ldrh	r3, [r4, #12]
 80084ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084f2:	81a3      	strh	r3, [r4, #12]
 80084f4:	f04f 30ff 	mov.w	r0, #4294967295
 80084f8:	e7e9      	b.n	80084ce <__ssputs_r+0x8a>
	...

080084fc <_svfiprintf_r>:
 80084fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	4698      	mov	r8, r3
 8008502:	898b      	ldrh	r3, [r1, #12]
 8008504:	061b      	lsls	r3, r3, #24
 8008506:	b09d      	sub	sp, #116	@ 0x74
 8008508:	4607      	mov	r7, r0
 800850a:	460d      	mov	r5, r1
 800850c:	4614      	mov	r4, r2
 800850e:	d510      	bpl.n	8008532 <_svfiprintf_r+0x36>
 8008510:	690b      	ldr	r3, [r1, #16]
 8008512:	b973      	cbnz	r3, 8008532 <_svfiprintf_r+0x36>
 8008514:	2140      	movs	r1, #64	@ 0x40
 8008516:	f7fe fbd3 	bl	8006cc0 <_malloc_r>
 800851a:	6028      	str	r0, [r5, #0]
 800851c:	6128      	str	r0, [r5, #16]
 800851e:	b930      	cbnz	r0, 800852e <_svfiprintf_r+0x32>
 8008520:	230c      	movs	r3, #12
 8008522:	603b      	str	r3, [r7, #0]
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	b01d      	add	sp, #116	@ 0x74
 800852a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852e:	2340      	movs	r3, #64	@ 0x40
 8008530:	616b      	str	r3, [r5, #20]
 8008532:	2300      	movs	r3, #0
 8008534:	9309      	str	r3, [sp, #36]	@ 0x24
 8008536:	2320      	movs	r3, #32
 8008538:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800853c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008540:	2330      	movs	r3, #48	@ 0x30
 8008542:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80086e0 <_svfiprintf_r+0x1e4>
 8008546:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800854a:	f04f 0901 	mov.w	r9, #1
 800854e:	4623      	mov	r3, r4
 8008550:	469a      	mov	sl, r3
 8008552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008556:	b10a      	cbz	r2, 800855c <_svfiprintf_r+0x60>
 8008558:	2a25      	cmp	r2, #37	@ 0x25
 800855a:	d1f9      	bne.n	8008550 <_svfiprintf_r+0x54>
 800855c:	ebba 0b04 	subs.w	fp, sl, r4
 8008560:	d00b      	beq.n	800857a <_svfiprintf_r+0x7e>
 8008562:	465b      	mov	r3, fp
 8008564:	4622      	mov	r2, r4
 8008566:	4629      	mov	r1, r5
 8008568:	4638      	mov	r0, r7
 800856a:	f7ff ff6b 	bl	8008444 <__ssputs_r>
 800856e:	3001      	adds	r0, #1
 8008570:	f000 80a7 	beq.w	80086c2 <_svfiprintf_r+0x1c6>
 8008574:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008576:	445a      	add	r2, fp
 8008578:	9209      	str	r2, [sp, #36]	@ 0x24
 800857a:	f89a 3000 	ldrb.w	r3, [sl]
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 809f 	beq.w	80086c2 <_svfiprintf_r+0x1c6>
 8008584:	2300      	movs	r3, #0
 8008586:	f04f 32ff 	mov.w	r2, #4294967295
 800858a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800858e:	f10a 0a01 	add.w	sl, sl, #1
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	9307      	str	r3, [sp, #28]
 8008596:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800859a:	931a      	str	r3, [sp, #104]	@ 0x68
 800859c:	4654      	mov	r4, sl
 800859e:	2205      	movs	r2, #5
 80085a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a4:	484e      	ldr	r0, [pc, #312]	@ (80086e0 <_svfiprintf_r+0x1e4>)
 80085a6:	f7f7 fe13 	bl	80001d0 <memchr>
 80085aa:	9a04      	ldr	r2, [sp, #16]
 80085ac:	b9d8      	cbnz	r0, 80085e6 <_svfiprintf_r+0xea>
 80085ae:	06d0      	lsls	r0, r2, #27
 80085b0:	bf44      	itt	mi
 80085b2:	2320      	movmi	r3, #32
 80085b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085b8:	0711      	lsls	r1, r2, #28
 80085ba:	bf44      	itt	mi
 80085bc:	232b      	movmi	r3, #43	@ 0x2b
 80085be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085c2:	f89a 3000 	ldrb.w	r3, [sl]
 80085c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80085c8:	d015      	beq.n	80085f6 <_svfiprintf_r+0xfa>
 80085ca:	9a07      	ldr	r2, [sp, #28]
 80085cc:	4654      	mov	r4, sl
 80085ce:	2000      	movs	r0, #0
 80085d0:	f04f 0c0a 	mov.w	ip, #10
 80085d4:	4621      	mov	r1, r4
 80085d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085da:	3b30      	subs	r3, #48	@ 0x30
 80085dc:	2b09      	cmp	r3, #9
 80085de:	d94b      	bls.n	8008678 <_svfiprintf_r+0x17c>
 80085e0:	b1b0      	cbz	r0, 8008610 <_svfiprintf_r+0x114>
 80085e2:	9207      	str	r2, [sp, #28]
 80085e4:	e014      	b.n	8008610 <_svfiprintf_r+0x114>
 80085e6:	eba0 0308 	sub.w	r3, r0, r8
 80085ea:	fa09 f303 	lsl.w	r3, r9, r3
 80085ee:	4313      	orrs	r3, r2
 80085f0:	9304      	str	r3, [sp, #16]
 80085f2:	46a2      	mov	sl, r4
 80085f4:	e7d2      	b.n	800859c <_svfiprintf_r+0xa0>
 80085f6:	9b03      	ldr	r3, [sp, #12]
 80085f8:	1d19      	adds	r1, r3, #4
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	9103      	str	r1, [sp, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bfbb      	ittet	lt
 8008602:	425b      	neglt	r3, r3
 8008604:	f042 0202 	orrlt.w	r2, r2, #2
 8008608:	9307      	strge	r3, [sp, #28]
 800860a:	9307      	strlt	r3, [sp, #28]
 800860c:	bfb8      	it	lt
 800860e:	9204      	strlt	r2, [sp, #16]
 8008610:	7823      	ldrb	r3, [r4, #0]
 8008612:	2b2e      	cmp	r3, #46	@ 0x2e
 8008614:	d10a      	bne.n	800862c <_svfiprintf_r+0x130>
 8008616:	7863      	ldrb	r3, [r4, #1]
 8008618:	2b2a      	cmp	r3, #42	@ 0x2a
 800861a:	d132      	bne.n	8008682 <_svfiprintf_r+0x186>
 800861c:	9b03      	ldr	r3, [sp, #12]
 800861e:	1d1a      	adds	r2, r3, #4
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	9203      	str	r2, [sp, #12]
 8008624:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008628:	3402      	adds	r4, #2
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80086f0 <_svfiprintf_r+0x1f4>
 8008630:	7821      	ldrb	r1, [r4, #0]
 8008632:	2203      	movs	r2, #3
 8008634:	4650      	mov	r0, sl
 8008636:	f7f7 fdcb 	bl	80001d0 <memchr>
 800863a:	b138      	cbz	r0, 800864c <_svfiprintf_r+0x150>
 800863c:	9b04      	ldr	r3, [sp, #16]
 800863e:	eba0 000a 	sub.w	r0, r0, sl
 8008642:	2240      	movs	r2, #64	@ 0x40
 8008644:	4082      	lsls	r2, r0
 8008646:	4313      	orrs	r3, r2
 8008648:	3401      	adds	r4, #1
 800864a:	9304      	str	r3, [sp, #16]
 800864c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008650:	4824      	ldr	r0, [pc, #144]	@ (80086e4 <_svfiprintf_r+0x1e8>)
 8008652:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008656:	2206      	movs	r2, #6
 8008658:	f7f7 fdba 	bl	80001d0 <memchr>
 800865c:	2800      	cmp	r0, #0
 800865e:	d036      	beq.n	80086ce <_svfiprintf_r+0x1d2>
 8008660:	4b21      	ldr	r3, [pc, #132]	@ (80086e8 <_svfiprintf_r+0x1ec>)
 8008662:	bb1b      	cbnz	r3, 80086ac <_svfiprintf_r+0x1b0>
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	3307      	adds	r3, #7
 8008668:	f023 0307 	bic.w	r3, r3, #7
 800866c:	3308      	adds	r3, #8
 800866e:	9303      	str	r3, [sp, #12]
 8008670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008672:	4433      	add	r3, r6
 8008674:	9309      	str	r3, [sp, #36]	@ 0x24
 8008676:	e76a      	b.n	800854e <_svfiprintf_r+0x52>
 8008678:	fb0c 3202 	mla	r2, ip, r2, r3
 800867c:	460c      	mov	r4, r1
 800867e:	2001      	movs	r0, #1
 8008680:	e7a8      	b.n	80085d4 <_svfiprintf_r+0xd8>
 8008682:	2300      	movs	r3, #0
 8008684:	3401      	adds	r4, #1
 8008686:	9305      	str	r3, [sp, #20]
 8008688:	4619      	mov	r1, r3
 800868a:	f04f 0c0a 	mov.w	ip, #10
 800868e:	4620      	mov	r0, r4
 8008690:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008694:	3a30      	subs	r2, #48	@ 0x30
 8008696:	2a09      	cmp	r2, #9
 8008698:	d903      	bls.n	80086a2 <_svfiprintf_r+0x1a6>
 800869a:	2b00      	cmp	r3, #0
 800869c:	d0c6      	beq.n	800862c <_svfiprintf_r+0x130>
 800869e:	9105      	str	r1, [sp, #20]
 80086a0:	e7c4      	b.n	800862c <_svfiprintf_r+0x130>
 80086a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80086a6:	4604      	mov	r4, r0
 80086a8:	2301      	movs	r3, #1
 80086aa:	e7f0      	b.n	800868e <_svfiprintf_r+0x192>
 80086ac:	ab03      	add	r3, sp, #12
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	462a      	mov	r2, r5
 80086b2:	4b0e      	ldr	r3, [pc, #56]	@ (80086ec <_svfiprintf_r+0x1f0>)
 80086b4:	a904      	add	r1, sp, #16
 80086b6:	4638      	mov	r0, r7
 80086b8:	f7fc fc94 	bl	8004fe4 <_printf_float>
 80086bc:	1c42      	adds	r2, r0, #1
 80086be:	4606      	mov	r6, r0
 80086c0:	d1d6      	bne.n	8008670 <_svfiprintf_r+0x174>
 80086c2:	89ab      	ldrh	r3, [r5, #12]
 80086c4:	065b      	lsls	r3, r3, #25
 80086c6:	f53f af2d 	bmi.w	8008524 <_svfiprintf_r+0x28>
 80086ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086cc:	e72c      	b.n	8008528 <_svfiprintf_r+0x2c>
 80086ce:	ab03      	add	r3, sp, #12
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	462a      	mov	r2, r5
 80086d4:	4b05      	ldr	r3, [pc, #20]	@ (80086ec <_svfiprintf_r+0x1f0>)
 80086d6:	a904      	add	r1, sp, #16
 80086d8:	4638      	mov	r0, r7
 80086da:	f7fc ff1b 	bl	8005514 <_printf_i>
 80086de:	e7ed      	b.n	80086bc <_svfiprintf_r+0x1c0>
 80086e0:	08009a81 	.word	0x08009a81
 80086e4:	08009a8b 	.word	0x08009a8b
 80086e8:	08004fe5 	.word	0x08004fe5
 80086ec:	08008445 	.word	0x08008445
 80086f0:	08009a87 	.word	0x08009a87

080086f4 <__sflush_r>:
 80086f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086fc:	0716      	lsls	r6, r2, #28
 80086fe:	4605      	mov	r5, r0
 8008700:	460c      	mov	r4, r1
 8008702:	d454      	bmi.n	80087ae <__sflush_r+0xba>
 8008704:	684b      	ldr	r3, [r1, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	dc02      	bgt.n	8008710 <__sflush_r+0x1c>
 800870a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800870c:	2b00      	cmp	r3, #0
 800870e:	dd48      	ble.n	80087a2 <__sflush_r+0xae>
 8008710:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008712:	2e00      	cmp	r6, #0
 8008714:	d045      	beq.n	80087a2 <__sflush_r+0xae>
 8008716:	2300      	movs	r3, #0
 8008718:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800871c:	682f      	ldr	r7, [r5, #0]
 800871e:	6a21      	ldr	r1, [r4, #32]
 8008720:	602b      	str	r3, [r5, #0]
 8008722:	d030      	beq.n	8008786 <__sflush_r+0x92>
 8008724:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	0759      	lsls	r1, r3, #29
 800872a:	d505      	bpl.n	8008738 <__sflush_r+0x44>
 800872c:	6863      	ldr	r3, [r4, #4]
 800872e:	1ad2      	subs	r2, r2, r3
 8008730:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008732:	b10b      	cbz	r3, 8008738 <__sflush_r+0x44>
 8008734:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008736:	1ad2      	subs	r2, r2, r3
 8008738:	2300      	movs	r3, #0
 800873a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800873c:	6a21      	ldr	r1, [r4, #32]
 800873e:	4628      	mov	r0, r5
 8008740:	47b0      	blx	r6
 8008742:	1c43      	adds	r3, r0, #1
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	d106      	bne.n	8008756 <__sflush_r+0x62>
 8008748:	6829      	ldr	r1, [r5, #0]
 800874a:	291d      	cmp	r1, #29
 800874c:	d82b      	bhi.n	80087a6 <__sflush_r+0xb2>
 800874e:	4a2a      	ldr	r2, [pc, #168]	@ (80087f8 <__sflush_r+0x104>)
 8008750:	410a      	asrs	r2, r1
 8008752:	07d6      	lsls	r6, r2, #31
 8008754:	d427      	bmi.n	80087a6 <__sflush_r+0xb2>
 8008756:	2200      	movs	r2, #0
 8008758:	6062      	str	r2, [r4, #4]
 800875a:	04d9      	lsls	r1, r3, #19
 800875c:	6922      	ldr	r2, [r4, #16]
 800875e:	6022      	str	r2, [r4, #0]
 8008760:	d504      	bpl.n	800876c <__sflush_r+0x78>
 8008762:	1c42      	adds	r2, r0, #1
 8008764:	d101      	bne.n	800876a <__sflush_r+0x76>
 8008766:	682b      	ldr	r3, [r5, #0]
 8008768:	b903      	cbnz	r3, 800876c <__sflush_r+0x78>
 800876a:	6560      	str	r0, [r4, #84]	@ 0x54
 800876c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800876e:	602f      	str	r7, [r5, #0]
 8008770:	b1b9      	cbz	r1, 80087a2 <__sflush_r+0xae>
 8008772:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008776:	4299      	cmp	r1, r3
 8008778:	d002      	beq.n	8008780 <__sflush_r+0x8c>
 800877a:	4628      	mov	r0, r5
 800877c:	f7fe fa2c 	bl	8006bd8 <_free_r>
 8008780:	2300      	movs	r3, #0
 8008782:	6363      	str	r3, [r4, #52]	@ 0x34
 8008784:	e00d      	b.n	80087a2 <__sflush_r+0xae>
 8008786:	2301      	movs	r3, #1
 8008788:	4628      	mov	r0, r5
 800878a:	47b0      	blx	r6
 800878c:	4602      	mov	r2, r0
 800878e:	1c50      	adds	r0, r2, #1
 8008790:	d1c9      	bne.n	8008726 <__sflush_r+0x32>
 8008792:	682b      	ldr	r3, [r5, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0c6      	beq.n	8008726 <__sflush_r+0x32>
 8008798:	2b1d      	cmp	r3, #29
 800879a:	d001      	beq.n	80087a0 <__sflush_r+0xac>
 800879c:	2b16      	cmp	r3, #22
 800879e:	d11e      	bne.n	80087de <__sflush_r+0xea>
 80087a0:	602f      	str	r7, [r5, #0]
 80087a2:	2000      	movs	r0, #0
 80087a4:	e022      	b.n	80087ec <__sflush_r+0xf8>
 80087a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087aa:	b21b      	sxth	r3, r3
 80087ac:	e01b      	b.n	80087e6 <__sflush_r+0xf2>
 80087ae:	690f      	ldr	r7, [r1, #16]
 80087b0:	2f00      	cmp	r7, #0
 80087b2:	d0f6      	beq.n	80087a2 <__sflush_r+0xae>
 80087b4:	0793      	lsls	r3, r2, #30
 80087b6:	680e      	ldr	r6, [r1, #0]
 80087b8:	bf08      	it	eq
 80087ba:	694b      	ldreq	r3, [r1, #20]
 80087bc:	600f      	str	r7, [r1, #0]
 80087be:	bf18      	it	ne
 80087c0:	2300      	movne	r3, #0
 80087c2:	eba6 0807 	sub.w	r8, r6, r7
 80087c6:	608b      	str	r3, [r1, #8]
 80087c8:	f1b8 0f00 	cmp.w	r8, #0
 80087cc:	dde9      	ble.n	80087a2 <__sflush_r+0xae>
 80087ce:	6a21      	ldr	r1, [r4, #32]
 80087d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80087d2:	4643      	mov	r3, r8
 80087d4:	463a      	mov	r2, r7
 80087d6:	4628      	mov	r0, r5
 80087d8:	47b0      	blx	r6
 80087da:	2800      	cmp	r0, #0
 80087dc:	dc08      	bgt.n	80087f0 <__sflush_r+0xfc>
 80087de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087e6:	81a3      	strh	r3, [r4, #12]
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f0:	4407      	add	r7, r0
 80087f2:	eba8 0800 	sub.w	r8, r8, r0
 80087f6:	e7e7      	b.n	80087c8 <__sflush_r+0xd4>
 80087f8:	dfbffffe 	.word	0xdfbffffe

080087fc <_fflush_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	690b      	ldr	r3, [r1, #16]
 8008800:	4605      	mov	r5, r0
 8008802:	460c      	mov	r4, r1
 8008804:	b913      	cbnz	r3, 800880c <_fflush_r+0x10>
 8008806:	2500      	movs	r5, #0
 8008808:	4628      	mov	r0, r5
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	b118      	cbz	r0, 8008816 <_fflush_r+0x1a>
 800880e:	6a03      	ldr	r3, [r0, #32]
 8008810:	b90b      	cbnz	r3, 8008816 <_fflush_r+0x1a>
 8008812:	f7fd fa3f 	bl	8005c94 <__sinit>
 8008816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0f3      	beq.n	8008806 <_fflush_r+0xa>
 800881e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008820:	07d0      	lsls	r0, r2, #31
 8008822:	d404      	bmi.n	800882e <_fflush_r+0x32>
 8008824:	0599      	lsls	r1, r3, #22
 8008826:	d402      	bmi.n	800882e <_fflush_r+0x32>
 8008828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800882a:	f7fd fb7e 	bl	8005f2a <__retarget_lock_acquire_recursive>
 800882e:	4628      	mov	r0, r5
 8008830:	4621      	mov	r1, r4
 8008832:	f7ff ff5f 	bl	80086f4 <__sflush_r>
 8008836:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008838:	07da      	lsls	r2, r3, #31
 800883a:	4605      	mov	r5, r0
 800883c:	d4e4      	bmi.n	8008808 <_fflush_r+0xc>
 800883e:	89a3      	ldrh	r3, [r4, #12]
 8008840:	059b      	lsls	r3, r3, #22
 8008842:	d4e1      	bmi.n	8008808 <_fflush_r+0xc>
 8008844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008846:	f7fd fb71 	bl	8005f2c <__retarget_lock_release_recursive>
 800884a:	e7dd      	b.n	8008808 <_fflush_r+0xc>

0800884c <memmove>:
 800884c:	4288      	cmp	r0, r1
 800884e:	b510      	push	{r4, lr}
 8008850:	eb01 0402 	add.w	r4, r1, r2
 8008854:	d902      	bls.n	800885c <memmove+0x10>
 8008856:	4284      	cmp	r4, r0
 8008858:	4623      	mov	r3, r4
 800885a:	d807      	bhi.n	800886c <memmove+0x20>
 800885c:	1e43      	subs	r3, r0, #1
 800885e:	42a1      	cmp	r1, r4
 8008860:	d008      	beq.n	8008874 <memmove+0x28>
 8008862:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800886a:	e7f8      	b.n	800885e <memmove+0x12>
 800886c:	4402      	add	r2, r0
 800886e:	4601      	mov	r1, r0
 8008870:	428a      	cmp	r2, r1
 8008872:	d100      	bne.n	8008876 <memmove+0x2a>
 8008874:	bd10      	pop	{r4, pc}
 8008876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800887a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800887e:	e7f7      	b.n	8008870 <memmove+0x24>

08008880 <strncmp>:
 8008880:	b510      	push	{r4, lr}
 8008882:	b16a      	cbz	r2, 80088a0 <strncmp+0x20>
 8008884:	3901      	subs	r1, #1
 8008886:	1884      	adds	r4, r0, r2
 8008888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800888c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008890:	429a      	cmp	r2, r3
 8008892:	d103      	bne.n	800889c <strncmp+0x1c>
 8008894:	42a0      	cmp	r0, r4
 8008896:	d001      	beq.n	800889c <strncmp+0x1c>
 8008898:	2a00      	cmp	r2, #0
 800889a:	d1f5      	bne.n	8008888 <strncmp+0x8>
 800889c:	1ad0      	subs	r0, r2, r3
 800889e:	bd10      	pop	{r4, pc}
 80088a0:	4610      	mov	r0, r2
 80088a2:	e7fc      	b.n	800889e <strncmp+0x1e>

080088a4 <_sbrk_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	4d06      	ldr	r5, [pc, #24]	@ (80088c0 <_sbrk_r+0x1c>)
 80088a8:	2300      	movs	r3, #0
 80088aa:	4604      	mov	r4, r0
 80088ac:	4608      	mov	r0, r1
 80088ae:	602b      	str	r3, [r5, #0]
 80088b0:	f7f9 f8b6 	bl	8001a20 <_sbrk>
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	d102      	bne.n	80088be <_sbrk_r+0x1a>
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	b103      	cbz	r3, 80088be <_sbrk_r+0x1a>
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	2000058c 	.word	0x2000058c

080088c4 <memcpy>:
 80088c4:	440a      	add	r2, r1
 80088c6:	4291      	cmp	r1, r2
 80088c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80088cc:	d100      	bne.n	80088d0 <memcpy+0xc>
 80088ce:	4770      	bx	lr
 80088d0:	b510      	push	{r4, lr}
 80088d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088da:	4291      	cmp	r1, r2
 80088dc:	d1f9      	bne.n	80088d2 <memcpy+0xe>
 80088de:	bd10      	pop	{r4, pc}

080088e0 <nan>:
 80088e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80088e8 <nan+0x8>
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	00000000 	.word	0x00000000
 80088ec:	7ff80000 	.word	0x7ff80000

080088f0 <__assert_func>:
 80088f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088f2:	4614      	mov	r4, r2
 80088f4:	461a      	mov	r2, r3
 80088f6:	4b09      	ldr	r3, [pc, #36]	@ (800891c <__assert_func+0x2c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4605      	mov	r5, r0
 80088fc:	68d8      	ldr	r0, [r3, #12]
 80088fe:	b954      	cbnz	r4, 8008916 <__assert_func+0x26>
 8008900:	4b07      	ldr	r3, [pc, #28]	@ (8008920 <__assert_func+0x30>)
 8008902:	461c      	mov	r4, r3
 8008904:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008908:	9100      	str	r1, [sp, #0]
 800890a:	462b      	mov	r3, r5
 800890c:	4905      	ldr	r1, [pc, #20]	@ (8008924 <__assert_func+0x34>)
 800890e:	f000 fba7 	bl	8009060 <fiprintf>
 8008912:	f000 fbb7 	bl	8009084 <abort>
 8008916:	4b04      	ldr	r3, [pc, #16]	@ (8008928 <__assert_func+0x38>)
 8008918:	e7f4      	b.n	8008904 <__assert_func+0x14>
 800891a:	bf00      	nop
 800891c:	2000001c 	.word	0x2000001c
 8008920:	08009ad5 	.word	0x08009ad5
 8008924:	08009aa7 	.word	0x08009aa7
 8008928:	08009a9a 	.word	0x08009a9a

0800892c <_calloc_r>:
 800892c:	b570      	push	{r4, r5, r6, lr}
 800892e:	fba1 5402 	umull	r5, r4, r1, r2
 8008932:	b93c      	cbnz	r4, 8008944 <_calloc_r+0x18>
 8008934:	4629      	mov	r1, r5
 8008936:	f7fe f9c3 	bl	8006cc0 <_malloc_r>
 800893a:	4606      	mov	r6, r0
 800893c:	b928      	cbnz	r0, 800894a <_calloc_r+0x1e>
 800893e:	2600      	movs	r6, #0
 8008940:	4630      	mov	r0, r6
 8008942:	bd70      	pop	{r4, r5, r6, pc}
 8008944:	220c      	movs	r2, #12
 8008946:	6002      	str	r2, [r0, #0]
 8008948:	e7f9      	b.n	800893e <_calloc_r+0x12>
 800894a:	462a      	mov	r2, r5
 800894c:	4621      	mov	r1, r4
 800894e:	f7fd fa6e 	bl	8005e2e <memset>
 8008952:	e7f5      	b.n	8008940 <_calloc_r+0x14>

08008954 <rshift>:
 8008954:	6903      	ldr	r3, [r0, #16]
 8008956:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800895a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800895e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008962:	f100 0414 	add.w	r4, r0, #20
 8008966:	dd45      	ble.n	80089f4 <rshift+0xa0>
 8008968:	f011 011f 	ands.w	r1, r1, #31
 800896c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008970:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008974:	d10c      	bne.n	8008990 <rshift+0x3c>
 8008976:	f100 0710 	add.w	r7, r0, #16
 800897a:	4629      	mov	r1, r5
 800897c:	42b1      	cmp	r1, r6
 800897e:	d334      	bcc.n	80089ea <rshift+0x96>
 8008980:	1a9b      	subs	r3, r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	1eea      	subs	r2, r5, #3
 8008986:	4296      	cmp	r6, r2
 8008988:	bf38      	it	cc
 800898a:	2300      	movcc	r3, #0
 800898c:	4423      	add	r3, r4
 800898e:	e015      	b.n	80089bc <rshift+0x68>
 8008990:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008994:	f1c1 0820 	rsb	r8, r1, #32
 8008998:	40cf      	lsrs	r7, r1
 800899a:	f105 0e04 	add.w	lr, r5, #4
 800899e:	46a1      	mov	r9, r4
 80089a0:	4576      	cmp	r6, lr
 80089a2:	46f4      	mov	ip, lr
 80089a4:	d815      	bhi.n	80089d2 <rshift+0x7e>
 80089a6:	1a9a      	subs	r2, r3, r2
 80089a8:	0092      	lsls	r2, r2, #2
 80089aa:	3a04      	subs	r2, #4
 80089ac:	3501      	adds	r5, #1
 80089ae:	42ae      	cmp	r6, r5
 80089b0:	bf38      	it	cc
 80089b2:	2200      	movcc	r2, #0
 80089b4:	18a3      	adds	r3, r4, r2
 80089b6:	50a7      	str	r7, [r4, r2]
 80089b8:	b107      	cbz	r7, 80089bc <rshift+0x68>
 80089ba:	3304      	adds	r3, #4
 80089bc:	1b1a      	subs	r2, r3, r4
 80089be:	42a3      	cmp	r3, r4
 80089c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80089c4:	bf08      	it	eq
 80089c6:	2300      	moveq	r3, #0
 80089c8:	6102      	str	r2, [r0, #16]
 80089ca:	bf08      	it	eq
 80089cc:	6143      	streq	r3, [r0, #20]
 80089ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089d2:	f8dc c000 	ldr.w	ip, [ip]
 80089d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80089da:	ea4c 0707 	orr.w	r7, ip, r7
 80089de:	f849 7b04 	str.w	r7, [r9], #4
 80089e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80089e6:	40cf      	lsrs	r7, r1
 80089e8:	e7da      	b.n	80089a0 <rshift+0x4c>
 80089ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80089ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80089f2:	e7c3      	b.n	800897c <rshift+0x28>
 80089f4:	4623      	mov	r3, r4
 80089f6:	e7e1      	b.n	80089bc <rshift+0x68>

080089f8 <__hexdig_fun>:
 80089f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80089fc:	2b09      	cmp	r3, #9
 80089fe:	d802      	bhi.n	8008a06 <__hexdig_fun+0xe>
 8008a00:	3820      	subs	r0, #32
 8008a02:	b2c0      	uxtb	r0, r0
 8008a04:	4770      	bx	lr
 8008a06:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008a0a:	2b05      	cmp	r3, #5
 8008a0c:	d801      	bhi.n	8008a12 <__hexdig_fun+0x1a>
 8008a0e:	3847      	subs	r0, #71	@ 0x47
 8008a10:	e7f7      	b.n	8008a02 <__hexdig_fun+0xa>
 8008a12:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008a16:	2b05      	cmp	r3, #5
 8008a18:	d801      	bhi.n	8008a1e <__hexdig_fun+0x26>
 8008a1a:	3827      	subs	r0, #39	@ 0x27
 8008a1c:	e7f1      	b.n	8008a02 <__hexdig_fun+0xa>
 8008a1e:	2000      	movs	r0, #0
 8008a20:	4770      	bx	lr
	...

08008a24 <__gethex>:
 8008a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a28:	b085      	sub	sp, #20
 8008a2a:	468a      	mov	sl, r1
 8008a2c:	9302      	str	r3, [sp, #8]
 8008a2e:	680b      	ldr	r3, [r1, #0]
 8008a30:	9001      	str	r0, [sp, #4]
 8008a32:	4690      	mov	r8, r2
 8008a34:	1c9c      	adds	r4, r3, #2
 8008a36:	46a1      	mov	r9, r4
 8008a38:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008a3c:	2830      	cmp	r0, #48	@ 0x30
 8008a3e:	d0fa      	beq.n	8008a36 <__gethex+0x12>
 8008a40:	eba9 0303 	sub.w	r3, r9, r3
 8008a44:	f1a3 0b02 	sub.w	fp, r3, #2
 8008a48:	f7ff ffd6 	bl	80089f8 <__hexdig_fun>
 8008a4c:	4605      	mov	r5, r0
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d168      	bne.n	8008b24 <__gethex+0x100>
 8008a52:	49a0      	ldr	r1, [pc, #640]	@ (8008cd4 <__gethex+0x2b0>)
 8008a54:	2201      	movs	r2, #1
 8008a56:	4648      	mov	r0, r9
 8008a58:	f7ff ff12 	bl	8008880 <strncmp>
 8008a5c:	4607      	mov	r7, r0
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d167      	bne.n	8008b32 <__gethex+0x10e>
 8008a62:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008a66:	4626      	mov	r6, r4
 8008a68:	f7ff ffc6 	bl	80089f8 <__hexdig_fun>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d062      	beq.n	8008b36 <__gethex+0x112>
 8008a70:	4623      	mov	r3, r4
 8008a72:	7818      	ldrb	r0, [r3, #0]
 8008a74:	2830      	cmp	r0, #48	@ 0x30
 8008a76:	4699      	mov	r9, r3
 8008a78:	f103 0301 	add.w	r3, r3, #1
 8008a7c:	d0f9      	beq.n	8008a72 <__gethex+0x4e>
 8008a7e:	f7ff ffbb 	bl	80089f8 <__hexdig_fun>
 8008a82:	fab0 f580 	clz	r5, r0
 8008a86:	096d      	lsrs	r5, r5, #5
 8008a88:	f04f 0b01 	mov.w	fp, #1
 8008a8c:	464a      	mov	r2, r9
 8008a8e:	4616      	mov	r6, r2
 8008a90:	3201      	adds	r2, #1
 8008a92:	7830      	ldrb	r0, [r6, #0]
 8008a94:	f7ff ffb0 	bl	80089f8 <__hexdig_fun>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d1f8      	bne.n	8008a8e <__gethex+0x6a>
 8008a9c:	498d      	ldr	r1, [pc, #564]	@ (8008cd4 <__gethex+0x2b0>)
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f7ff feed 	bl	8008880 <strncmp>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d13f      	bne.n	8008b2a <__gethex+0x106>
 8008aaa:	b944      	cbnz	r4, 8008abe <__gethex+0x9a>
 8008aac:	1c74      	adds	r4, r6, #1
 8008aae:	4622      	mov	r2, r4
 8008ab0:	4616      	mov	r6, r2
 8008ab2:	3201      	adds	r2, #1
 8008ab4:	7830      	ldrb	r0, [r6, #0]
 8008ab6:	f7ff ff9f 	bl	80089f8 <__hexdig_fun>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d1f8      	bne.n	8008ab0 <__gethex+0x8c>
 8008abe:	1ba4      	subs	r4, r4, r6
 8008ac0:	00a7      	lsls	r7, r4, #2
 8008ac2:	7833      	ldrb	r3, [r6, #0]
 8008ac4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008ac8:	2b50      	cmp	r3, #80	@ 0x50
 8008aca:	d13e      	bne.n	8008b4a <__gethex+0x126>
 8008acc:	7873      	ldrb	r3, [r6, #1]
 8008ace:	2b2b      	cmp	r3, #43	@ 0x2b
 8008ad0:	d033      	beq.n	8008b3a <__gethex+0x116>
 8008ad2:	2b2d      	cmp	r3, #45	@ 0x2d
 8008ad4:	d034      	beq.n	8008b40 <__gethex+0x11c>
 8008ad6:	1c71      	adds	r1, r6, #1
 8008ad8:	2400      	movs	r4, #0
 8008ada:	7808      	ldrb	r0, [r1, #0]
 8008adc:	f7ff ff8c 	bl	80089f8 <__hexdig_fun>
 8008ae0:	1e43      	subs	r3, r0, #1
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b18      	cmp	r3, #24
 8008ae6:	d830      	bhi.n	8008b4a <__gethex+0x126>
 8008ae8:	f1a0 0210 	sub.w	r2, r0, #16
 8008aec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008af0:	f7ff ff82 	bl	80089f8 <__hexdig_fun>
 8008af4:	f100 3cff 	add.w	ip, r0, #4294967295
 8008af8:	fa5f fc8c 	uxtb.w	ip, ip
 8008afc:	f1bc 0f18 	cmp.w	ip, #24
 8008b00:	f04f 030a 	mov.w	r3, #10
 8008b04:	d91e      	bls.n	8008b44 <__gethex+0x120>
 8008b06:	b104      	cbz	r4, 8008b0a <__gethex+0xe6>
 8008b08:	4252      	negs	r2, r2
 8008b0a:	4417      	add	r7, r2
 8008b0c:	f8ca 1000 	str.w	r1, [sl]
 8008b10:	b1ed      	cbz	r5, 8008b4e <__gethex+0x12a>
 8008b12:	f1bb 0f00 	cmp.w	fp, #0
 8008b16:	bf0c      	ite	eq
 8008b18:	2506      	moveq	r5, #6
 8008b1a:	2500      	movne	r5, #0
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	b005      	add	sp, #20
 8008b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b24:	2500      	movs	r5, #0
 8008b26:	462c      	mov	r4, r5
 8008b28:	e7b0      	b.n	8008a8c <__gethex+0x68>
 8008b2a:	2c00      	cmp	r4, #0
 8008b2c:	d1c7      	bne.n	8008abe <__gethex+0x9a>
 8008b2e:	4627      	mov	r7, r4
 8008b30:	e7c7      	b.n	8008ac2 <__gethex+0x9e>
 8008b32:	464e      	mov	r6, r9
 8008b34:	462f      	mov	r7, r5
 8008b36:	2501      	movs	r5, #1
 8008b38:	e7c3      	b.n	8008ac2 <__gethex+0x9e>
 8008b3a:	2400      	movs	r4, #0
 8008b3c:	1cb1      	adds	r1, r6, #2
 8008b3e:	e7cc      	b.n	8008ada <__gethex+0xb6>
 8008b40:	2401      	movs	r4, #1
 8008b42:	e7fb      	b.n	8008b3c <__gethex+0x118>
 8008b44:	fb03 0002 	mla	r0, r3, r2, r0
 8008b48:	e7ce      	b.n	8008ae8 <__gethex+0xc4>
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	e7de      	b.n	8008b0c <__gethex+0xe8>
 8008b4e:	eba6 0309 	sub.w	r3, r6, r9
 8008b52:	3b01      	subs	r3, #1
 8008b54:	4629      	mov	r1, r5
 8008b56:	2b07      	cmp	r3, #7
 8008b58:	dc0a      	bgt.n	8008b70 <__gethex+0x14c>
 8008b5a:	9801      	ldr	r0, [sp, #4]
 8008b5c:	f7fe f93c 	bl	8006dd8 <_Balloc>
 8008b60:	4604      	mov	r4, r0
 8008b62:	b940      	cbnz	r0, 8008b76 <__gethex+0x152>
 8008b64:	4b5c      	ldr	r3, [pc, #368]	@ (8008cd8 <__gethex+0x2b4>)
 8008b66:	4602      	mov	r2, r0
 8008b68:	21e4      	movs	r1, #228	@ 0xe4
 8008b6a:	485c      	ldr	r0, [pc, #368]	@ (8008cdc <__gethex+0x2b8>)
 8008b6c:	f7ff fec0 	bl	80088f0 <__assert_func>
 8008b70:	3101      	adds	r1, #1
 8008b72:	105b      	asrs	r3, r3, #1
 8008b74:	e7ef      	b.n	8008b56 <__gethex+0x132>
 8008b76:	f100 0a14 	add.w	sl, r0, #20
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	4655      	mov	r5, sl
 8008b7e:	469b      	mov	fp, r3
 8008b80:	45b1      	cmp	r9, r6
 8008b82:	d337      	bcc.n	8008bf4 <__gethex+0x1d0>
 8008b84:	f845 bb04 	str.w	fp, [r5], #4
 8008b88:	eba5 050a 	sub.w	r5, r5, sl
 8008b8c:	10ad      	asrs	r5, r5, #2
 8008b8e:	6125      	str	r5, [r4, #16]
 8008b90:	4658      	mov	r0, fp
 8008b92:	f7fe fa13 	bl	8006fbc <__hi0bits>
 8008b96:	016d      	lsls	r5, r5, #5
 8008b98:	f8d8 6000 	ldr.w	r6, [r8]
 8008b9c:	1a2d      	subs	r5, r5, r0
 8008b9e:	42b5      	cmp	r5, r6
 8008ba0:	dd54      	ble.n	8008c4c <__gethex+0x228>
 8008ba2:	1bad      	subs	r5, r5, r6
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f7fe fda7 	bl	80076fa <__any_on>
 8008bac:	4681      	mov	r9, r0
 8008bae:	b178      	cbz	r0, 8008bd0 <__gethex+0x1ac>
 8008bb0:	1e6b      	subs	r3, r5, #1
 8008bb2:	1159      	asrs	r1, r3, #5
 8008bb4:	f003 021f 	and.w	r2, r3, #31
 8008bb8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008bbc:	f04f 0901 	mov.w	r9, #1
 8008bc0:	fa09 f202 	lsl.w	r2, r9, r2
 8008bc4:	420a      	tst	r2, r1
 8008bc6:	d003      	beq.n	8008bd0 <__gethex+0x1ac>
 8008bc8:	454b      	cmp	r3, r9
 8008bca:	dc36      	bgt.n	8008c3a <__gethex+0x216>
 8008bcc:	f04f 0902 	mov.w	r9, #2
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f7ff febe 	bl	8008954 <rshift>
 8008bd8:	442f      	add	r7, r5
 8008bda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bde:	42bb      	cmp	r3, r7
 8008be0:	da42      	bge.n	8008c68 <__gethex+0x244>
 8008be2:	9801      	ldr	r0, [sp, #4]
 8008be4:	4621      	mov	r1, r4
 8008be6:	f7fe f937 	bl	8006e58 <_Bfree>
 8008bea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bec:	2300      	movs	r3, #0
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	25a3      	movs	r5, #163	@ 0xa3
 8008bf2:	e793      	b.n	8008b1c <__gethex+0xf8>
 8008bf4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008bf8:	2a2e      	cmp	r2, #46	@ 0x2e
 8008bfa:	d012      	beq.n	8008c22 <__gethex+0x1fe>
 8008bfc:	2b20      	cmp	r3, #32
 8008bfe:	d104      	bne.n	8008c0a <__gethex+0x1e6>
 8008c00:	f845 bb04 	str.w	fp, [r5], #4
 8008c04:	f04f 0b00 	mov.w	fp, #0
 8008c08:	465b      	mov	r3, fp
 8008c0a:	7830      	ldrb	r0, [r6, #0]
 8008c0c:	9303      	str	r3, [sp, #12]
 8008c0e:	f7ff fef3 	bl	80089f8 <__hexdig_fun>
 8008c12:	9b03      	ldr	r3, [sp, #12]
 8008c14:	f000 000f 	and.w	r0, r0, #15
 8008c18:	4098      	lsls	r0, r3
 8008c1a:	ea4b 0b00 	orr.w	fp, fp, r0
 8008c1e:	3304      	adds	r3, #4
 8008c20:	e7ae      	b.n	8008b80 <__gethex+0x15c>
 8008c22:	45b1      	cmp	r9, r6
 8008c24:	d8ea      	bhi.n	8008bfc <__gethex+0x1d8>
 8008c26:	492b      	ldr	r1, [pc, #172]	@ (8008cd4 <__gethex+0x2b0>)
 8008c28:	9303      	str	r3, [sp, #12]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f7ff fe27 	bl	8008880 <strncmp>
 8008c32:	9b03      	ldr	r3, [sp, #12]
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d1e1      	bne.n	8008bfc <__gethex+0x1d8>
 8008c38:	e7a2      	b.n	8008b80 <__gethex+0x15c>
 8008c3a:	1ea9      	subs	r1, r5, #2
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f7fe fd5c 	bl	80076fa <__any_on>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d0c2      	beq.n	8008bcc <__gethex+0x1a8>
 8008c46:	f04f 0903 	mov.w	r9, #3
 8008c4a:	e7c1      	b.n	8008bd0 <__gethex+0x1ac>
 8008c4c:	da09      	bge.n	8008c62 <__gethex+0x23e>
 8008c4e:	1b75      	subs	r5, r6, r5
 8008c50:	4621      	mov	r1, r4
 8008c52:	9801      	ldr	r0, [sp, #4]
 8008c54:	462a      	mov	r2, r5
 8008c56:	f7fe fb17 	bl	8007288 <__lshift>
 8008c5a:	1b7f      	subs	r7, r7, r5
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	f100 0a14 	add.w	sl, r0, #20
 8008c62:	f04f 0900 	mov.w	r9, #0
 8008c66:	e7b8      	b.n	8008bda <__gethex+0x1b6>
 8008c68:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008c6c:	42bd      	cmp	r5, r7
 8008c6e:	dd6f      	ble.n	8008d50 <__gethex+0x32c>
 8008c70:	1bed      	subs	r5, r5, r7
 8008c72:	42ae      	cmp	r6, r5
 8008c74:	dc34      	bgt.n	8008ce0 <__gethex+0x2bc>
 8008c76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d022      	beq.n	8008cc4 <__gethex+0x2a0>
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	d024      	beq.n	8008ccc <__gethex+0x2a8>
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d115      	bne.n	8008cb2 <__gethex+0x28e>
 8008c86:	42ae      	cmp	r6, r5
 8008c88:	d113      	bne.n	8008cb2 <__gethex+0x28e>
 8008c8a:	2e01      	cmp	r6, #1
 8008c8c:	d10b      	bne.n	8008ca6 <__gethex+0x282>
 8008c8e:	9a02      	ldr	r2, [sp, #8]
 8008c90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c94:	6013      	str	r3, [r2, #0]
 8008c96:	2301      	movs	r3, #1
 8008c98:	6123      	str	r3, [r4, #16]
 8008c9a:	f8ca 3000 	str.w	r3, [sl]
 8008c9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ca0:	2562      	movs	r5, #98	@ 0x62
 8008ca2:	601c      	str	r4, [r3, #0]
 8008ca4:	e73a      	b.n	8008b1c <__gethex+0xf8>
 8008ca6:	1e71      	subs	r1, r6, #1
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f7fe fd26 	bl	80076fa <__any_on>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	d1ed      	bne.n	8008c8e <__gethex+0x26a>
 8008cb2:	9801      	ldr	r0, [sp, #4]
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	f7fe f8cf 	bl	8006e58 <_Bfree>
 8008cba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	6013      	str	r3, [r2, #0]
 8008cc0:	2550      	movs	r5, #80	@ 0x50
 8008cc2:	e72b      	b.n	8008b1c <__gethex+0xf8>
 8008cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1f3      	bne.n	8008cb2 <__gethex+0x28e>
 8008cca:	e7e0      	b.n	8008c8e <__gethex+0x26a>
 8008ccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1dd      	bne.n	8008c8e <__gethex+0x26a>
 8008cd2:	e7ee      	b.n	8008cb2 <__gethex+0x28e>
 8008cd4:	08009928 	.word	0x08009928
 8008cd8:	080097c1 	.word	0x080097c1
 8008cdc:	08009ad6 	.word	0x08009ad6
 8008ce0:	1e6f      	subs	r7, r5, #1
 8008ce2:	f1b9 0f00 	cmp.w	r9, #0
 8008ce6:	d130      	bne.n	8008d4a <__gethex+0x326>
 8008ce8:	b127      	cbz	r7, 8008cf4 <__gethex+0x2d0>
 8008cea:	4639      	mov	r1, r7
 8008cec:	4620      	mov	r0, r4
 8008cee:	f7fe fd04 	bl	80076fa <__any_on>
 8008cf2:	4681      	mov	r9, r0
 8008cf4:	117a      	asrs	r2, r7, #5
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008cfc:	f007 071f 	and.w	r7, r7, #31
 8008d00:	40bb      	lsls	r3, r7
 8008d02:	4213      	tst	r3, r2
 8008d04:	4629      	mov	r1, r5
 8008d06:	4620      	mov	r0, r4
 8008d08:	bf18      	it	ne
 8008d0a:	f049 0902 	orrne.w	r9, r9, #2
 8008d0e:	f7ff fe21 	bl	8008954 <rshift>
 8008d12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008d16:	1b76      	subs	r6, r6, r5
 8008d18:	2502      	movs	r5, #2
 8008d1a:	f1b9 0f00 	cmp.w	r9, #0
 8008d1e:	d047      	beq.n	8008db0 <__gethex+0x38c>
 8008d20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d015      	beq.n	8008d54 <__gethex+0x330>
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d017      	beq.n	8008d5c <__gethex+0x338>
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d109      	bne.n	8008d44 <__gethex+0x320>
 8008d30:	f019 0f02 	tst.w	r9, #2
 8008d34:	d006      	beq.n	8008d44 <__gethex+0x320>
 8008d36:	f8da 3000 	ldr.w	r3, [sl]
 8008d3a:	ea49 0903 	orr.w	r9, r9, r3
 8008d3e:	f019 0f01 	tst.w	r9, #1
 8008d42:	d10e      	bne.n	8008d62 <__gethex+0x33e>
 8008d44:	f045 0510 	orr.w	r5, r5, #16
 8008d48:	e032      	b.n	8008db0 <__gethex+0x38c>
 8008d4a:	f04f 0901 	mov.w	r9, #1
 8008d4e:	e7d1      	b.n	8008cf4 <__gethex+0x2d0>
 8008d50:	2501      	movs	r5, #1
 8008d52:	e7e2      	b.n	8008d1a <__gethex+0x2f6>
 8008d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d56:	f1c3 0301 	rsb	r3, r3, #1
 8008d5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0f0      	beq.n	8008d44 <__gethex+0x320>
 8008d62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d66:	f104 0314 	add.w	r3, r4, #20
 8008d6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008d6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008d72:	f04f 0c00 	mov.w	ip, #0
 8008d76:	4618      	mov	r0, r3
 8008d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008d80:	d01b      	beq.n	8008dba <__gethex+0x396>
 8008d82:	3201      	adds	r2, #1
 8008d84:	6002      	str	r2, [r0, #0]
 8008d86:	2d02      	cmp	r5, #2
 8008d88:	f104 0314 	add.w	r3, r4, #20
 8008d8c:	d13c      	bne.n	8008e08 <__gethex+0x3e4>
 8008d8e:	f8d8 2000 	ldr.w	r2, [r8]
 8008d92:	3a01      	subs	r2, #1
 8008d94:	42b2      	cmp	r2, r6
 8008d96:	d109      	bne.n	8008dac <__gethex+0x388>
 8008d98:	1171      	asrs	r1, r6, #5
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008da0:	f006 061f 	and.w	r6, r6, #31
 8008da4:	fa02 f606 	lsl.w	r6, r2, r6
 8008da8:	421e      	tst	r6, r3
 8008daa:	d13a      	bne.n	8008e22 <__gethex+0x3fe>
 8008dac:	f045 0520 	orr.w	r5, r5, #32
 8008db0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008db2:	601c      	str	r4, [r3, #0]
 8008db4:	9b02      	ldr	r3, [sp, #8]
 8008db6:	601f      	str	r7, [r3, #0]
 8008db8:	e6b0      	b.n	8008b1c <__gethex+0xf8>
 8008dba:	4299      	cmp	r1, r3
 8008dbc:	f843 cc04 	str.w	ip, [r3, #-4]
 8008dc0:	d8d9      	bhi.n	8008d76 <__gethex+0x352>
 8008dc2:	68a3      	ldr	r3, [r4, #8]
 8008dc4:	459b      	cmp	fp, r3
 8008dc6:	db17      	blt.n	8008df8 <__gethex+0x3d4>
 8008dc8:	6861      	ldr	r1, [r4, #4]
 8008dca:	9801      	ldr	r0, [sp, #4]
 8008dcc:	3101      	adds	r1, #1
 8008dce:	f7fe f803 	bl	8006dd8 <_Balloc>
 8008dd2:	4681      	mov	r9, r0
 8008dd4:	b918      	cbnz	r0, 8008dde <__gethex+0x3ba>
 8008dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8008e40 <__gethex+0x41c>)
 8008dd8:	4602      	mov	r2, r0
 8008dda:	2184      	movs	r1, #132	@ 0x84
 8008ddc:	e6c5      	b.n	8008b6a <__gethex+0x146>
 8008dde:	6922      	ldr	r2, [r4, #16]
 8008de0:	3202      	adds	r2, #2
 8008de2:	f104 010c 	add.w	r1, r4, #12
 8008de6:	0092      	lsls	r2, r2, #2
 8008de8:	300c      	adds	r0, #12
 8008dea:	f7ff fd6b 	bl	80088c4 <memcpy>
 8008dee:	4621      	mov	r1, r4
 8008df0:	9801      	ldr	r0, [sp, #4]
 8008df2:	f7fe f831 	bl	8006e58 <_Bfree>
 8008df6:	464c      	mov	r4, r9
 8008df8:	6923      	ldr	r3, [r4, #16]
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e00:	6122      	str	r2, [r4, #16]
 8008e02:	2201      	movs	r2, #1
 8008e04:	615a      	str	r2, [r3, #20]
 8008e06:	e7be      	b.n	8008d86 <__gethex+0x362>
 8008e08:	6922      	ldr	r2, [r4, #16]
 8008e0a:	455a      	cmp	r2, fp
 8008e0c:	dd0b      	ble.n	8008e26 <__gethex+0x402>
 8008e0e:	2101      	movs	r1, #1
 8008e10:	4620      	mov	r0, r4
 8008e12:	f7ff fd9f 	bl	8008954 <rshift>
 8008e16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e1a:	3701      	adds	r7, #1
 8008e1c:	42bb      	cmp	r3, r7
 8008e1e:	f6ff aee0 	blt.w	8008be2 <__gethex+0x1be>
 8008e22:	2501      	movs	r5, #1
 8008e24:	e7c2      	b.n	8008dac <__gethex+0x388>
 8008e26:	f016 061f 	ands.w	r6, r6, #31
 8008e2a:	d0fa      	beq.n	8008e22 <__gethex+0x3fe>
 8008e2c:	4453      	add	r3, sl
 8008e2e:	f1c6 0620 	rsb	r6, r6, #32
 8008e32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008e36:	f7fe f8c1 	bl	8006fbc <__hi0bits>
 8008e3a:	42b0      	cmp	r0, r6
 8008e3c:	dbe7      	blt.n	8008e0e <__gethex+0x3ea>
 8008e3e:	e7f0      	b.n	8008e22 <__gethex+0x3fe>
 8008e40:	080097c1 	.word	0x080097c1

08008e44 <L_shift>:
 8008e44:	f1c2 0208 	rsb	r2, r2, #8
 8008e48:	0092      	lsls	r2, r2, #2
 8008e4a:	b570      	push	{r4, r5, r6, lr}
 8008e4c:	f1c2 0620 	rsb	r6, r2, #32
 8008e50:	6843      	ldr	r3, [r0, #4]
 8008e52:	6804      	ldr	r4, [r0, #0]
 8008e54:	fa03 f506 	lsl.w	r5, r3, r6
 8008e58:	432c      	orrs	r4, r5
 8008e5a:	40d3      	lsrs	r3, r2
 8008e5c:	6004      	str	r4, [r0, #0]
 8008e5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e62:	4288      	cmp	r0, r1
 8008e64:	d3f4      	bcc.n	8008e50 <L_shift+0xc>
 8008e66:	bd70      	pop	{r4, r5, r6, pc}

08008e68 <__match>:
 8008e68:	b530      	push	{r4, r5, lr}
 8008e6a:	6803      	ldr	r3, [r0, #0]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e72:	b914      	cbnz	r4, 8008e7a <__match+0x12>
 8008e74:	6003      	str	r3, [r0, #0]
 8008e76:	2001      	movs	r0, #1
 8008e78:	bd30      	pop	{r4, r5, pc}
 8008e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e7e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008e82:	2d19      	cmp	r5, #25
 8008e84:	bf98      	it	ls
 8008e86:	3220      	addls	r2, #32
 8008e88:	42a2      	cmp	r2, r4
 8008e8a:	d0f0      	beq.n	8008e6e <__match+0x6>
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e7f3      	b.n	8008e78 <__match+0x10>

08008e90 <__hexnan>:
 8008e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e94:	680b      	ldr	r3, [r1, #0]
 8008e96:	6801      	ldr	r1, [r0, #0]
 8008e98:	115e      	asrs	r6, r3, #5
 8008e9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e9e:	f013 031f 	ands.w	r3, r3, #31
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	bf18      	it	ne
 8008ea6:	3604      	addne	r6, #4
 8008ea8:	2500      	movs	r5, #0
 8008eaa:	1f37      	subs	r7, r6, #4
 8008eac:	4682      	mov	sl, r0
 8008eae:	4690      	mov	r8, r2
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	f846 5c04 	str.w	r5, [r6, #-4]
 8008eb6:	46b9      	mov	r9, r7
 8008eb8:	463c      	mov	r4, r7
 8008eba:	9502      	str	r5, [sp, #8]
 8008ebc:	46ab      	mov	fp, r5
 8008ebe:	784a      	ldrb	r2, [r1, #1]
 8008ec0:	1c4b      	adds	r3, r1, #1
 8008ec2:	9303      	str	r3, [sp, #12]
 8008ec4:	b342      	cbz	r2, 8008f18 <__hexnan+0x88>
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	9105      	str	r1, [sp, #20]
 8008eca:	9204      	str	r2, [sp, #16]
 8008ecc:	f7ff fd94 	bl	80089f8 <__hexdig_fun>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d151      	bne.n	8008f78 <__hexnan+0xe8>
 8008ed4:	9a04      	ldr	r2, [sp, #16]
 8008ed6:	9905      	ldr	r1, [sp, #20]
 8008ed8:	2a20      	cmp	r2, #32
 8008eda:	d818      	bhi.n	8008f0e <__hexnan+0x7e>
 8008edc:	9b02      	ldr	r3, [sp, #8]
 8008ede:	459b      	cmp	fp, r3
 8008ee0:	dd13      	ble.n	8008f0a <__hexnan+0x7a>
 8008ee2:	454c      	cmp	r4, r9
 8008ee4:	d206      	bcs.n	8008ef4 <__hexnan+0x64>
 8008ee6:	2d07      	cmp	r5, #7
 8008ee8:	dc04      	bgt.n	8008ef4 <__hexnan+0x64>
 8008eea:	462a      	mov	r2, r5
 8008eec:	4649      	mov	r1, r9
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f7ff ffa8 	bl	8008e44 <L_shift>
 8008ef4:	4544      	cmp	r4, r8
 8008ef6:	d952      	bls.n	8008f9e <__hexnan+0x10e>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f1a4 0904 	sub.w	r9, r4, #4
 8008efe:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f02:	f8cd b008 	str.w	fp, [sp, #8]
 8008f06:	464c      	mov	r4, r9
 8008f08:	461d      	mov	r5, r3
 8008f0a:	9903      	ldr	r1, [sp, #12]
 8008f0c:	e7d7      	b.n	8008ebe <__hexnan+0x2e>
 8008f0e:	2a29      	cmp	r2, #41	@ 0x29
 8008f10:	d157      	bne.n	8008fc2 <__hexnan+0x132>
 8008f12:	3102      	adds	r1, #2
 8008f14:	f8ca 1000 	str.w	r1, [sl]
 8008f18:	f1bb 0f00 	cmp.w	fp, #0
 8008f1c:	d051      	beq.n	8008fc2 <__hexnan+0x132>
 8008f1e:	454c      	cmp	r4, r9
 8008f20:	d206      	bcs.n	8008f30 <__hexnan+0xa0>
 8008f22:	2d07      	cmp	r5, #7
 8008f24:	dc04      	bgt.n	8008f30 <__hexnan+0xa0>
 8008f26:	462a      	mov	r2, r5
 8008f28:	4649      	mov	r1, r9
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f7ff ff8a 	bl	8008e44 <L_shift>
 8008f30:	4544      	cmp	r4, r8
 8008f32:	d936      	bls.n	8008fa2 <__hexnan+0x112>
 8008f34:	f1a8 0204 	sub.w	r2, r8, #4
 8008f38:	4623      	mov	r3, r4
 8008f3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f3e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f42:	429f      	cmp	r7, r3
 8008f44:	d2f9      	bcs.n	8008f3a <__hexnan+0xaa>
 8008f46:	1b3b      	subs	r3, r7, r4
 8008f48:	f023 0303 	bic.w	r3, r3, #3
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	3401      	adds	r4, #1
 8008f50:	3e03      	subs	r6, #3
 8008f52:	42b4      	cmp	r4, r6
 8008f54:	bf88      	it	hi
 8008f56:	2304      	movhi	r3, #4
 8008f58:	4443      	add	r3, r8
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f843 2b04 	str.w	r2, [r3], #4
 8008f60:	429f      	cmp	r7, r3
 8008f62:	d2fb      	bcs.n	8008f5c <__hexnan+0xcc>
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	b91b      	cbnz	r3, 8008f70 <__hexnan+0xe0>
 8008f68:	4547      	cmp	r7, r8
 8008f6a:	d128      	bne.n	8008fbe <__hexnan+0x12e>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	603b      	str	r3, [r7, #0]
 8008f70:	2005      	movs	r0, #5
 8008f72:	b007      	add	sp, #28
 8008f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f78:	3501      	adds	r5, #1
 8008f7a:	2d08      	cmp	r5, #8
 8008f7c:	f10b 0b01 	add.w	fp, fp, #1
 8008f80:	dd06      	ble.n	8008f90 <__hexnan+0x100>
 8008f82:	4544      	cmp	r4, r8
 8008f84:	d9c1      	bls.n	8008f0a <__hexnan+0x7a>
 8008f86:	2300      	movs	r3, #0
 8008f88:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f8c:	2501      	movs	r5, #1
 8008f8e:	3c04      	subs	r4, #4
 8008f90:	6822      	ldr	r2, [r4, #0]
 8008f92:	f000 000f 	and.w	r0, r0, #15
 8008f96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008f9a:	6020      	str	r0, [r4, #0]
 8008f9c:	e7b5      	b.n	8008f0a <__hexnan+0x7a>
 8008f9e:	2508      	movs	r5, #8
 8008fa0:	e7b3      	b.n	8008f0a <__hexnan+0x7a>
 8008fa2:	9b01      	ldr	r3, [sp, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0dd      	beq.n	8008f64 <__hexnan+0xd4>
 8008fa8:	f1c3 0320 	rsb	r3, r3, #32
 8008fac:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb0:	40da      	lsrs	r2, r3
 8008fb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	f846 3c04 	str.w	r3, [r6, #-4]
 8008fbc:	e7d2      	b.n	8008f64 <__hexnan+0xd4>
 8008fbe:	3f04      	subs	r7, #4
 8008fc0:	e7d0      	b.n	8008f64 <__hexnan+0xd4>
 8008fc2:	2004      	movs	r0, #4
 8008fc4:	e7d5      	b.n	8008f72 <__hexnan+0xe2>

08008fc6 <__ascii_mbtowc>:
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	b901      	cbnz	r1, 8008fcc <__ascii_mbtowc+0x6>
 8008fca:	a901      	add	r1, sp, #4
 8008fcc:	b142      	cbz	r2, 8008fe0 <__ascii_mbtowc+0x1a>
 8008fce:	b14b      	cbz	r3, 8008fe4 <__ascii_mbtowc+0x1e>
 8008fd0:	7813      	ldrb	r3, [r2, #0]
 8008fd2:	600b      	str	r3, [r1, #0]
 8008fd4:	7812      	ldrb	r2, [r2, #0]
 8008fd6:	1e10      	subs	r0, r2, #0
 8008fd8:	bf18      	it	ne
 8008fda:	2001      	movne	r0, #1
 8008fdc:	b002      	add	sp, #8
 8008fde:	4770      	bx	lr
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	e7fb      	b.n	8008fdc <__ascii_mbtowc+0x16>
 8008fe4:	f06f 0001 	mvn.w	r0, #1
 8008fe8:	e7f8      	b.n	8008fdc <__ascii_mbtowc+0x16>

08008fea <_realloc_r>:
 8008fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fee:	4680      	mov	r8, r0
 8008ff0:	4615      	mov	r5, r2
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	b921      	cbnz	r1, 8009000 <_realloc_r+0x16>
 8008ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	f7fd be60 	b.w	8006cc0 <_malloc_r>
 8009000:	b92a      	cbnz	r2, 800900e <_realloc_r+0x24>
 8009002:	f7fd fde9 	bl	8006bd8 <_free_r>
 8009006:	2400      	movs	r4, #0
 8009008:	4620      	mov	r0, r4
 800900a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800900e:	f000 f840 	bl	8009092 <_malloc_usable_size_r>
 8009012:	4285      	cmp	r5, r0
 8009014:	4606      	mov	r6, r0
 8009016:	d802      	bhi.n	800901e <_realloc_r+0x34>
 8009018:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800901c:	d8f4      	bhi.n	8009008 <_realloc_r+0x1e>
 800901e:	4629      	mov	r1, r5
 8009020:	4640      	mov	r0, r8
 8009022:	f7fd fe4d 	bl	8006cc0 <_malloc_r>
 8009026:	4607      	mov	r7, r0
 8009028:	2800      	cmp	r0, #0
 800902a:	d0ec      	beq.n	8009006 <_realloc_r+0x1c>
 800902c:	42b5      	cmp	r5, r6
 800902e:	462a      	mov	r2, r5
 8009030:	4621      	mov	r1, r4
 8009032:	bf28      	it	cs
 8009034:	4632      	movcs	r2, r6
 8009036:	f7ff fc45 	bl	80088c4 <memcpy>
 800903a:	4621      	mov	r1, r4
 800903c:	4640      	mov	r0, r8
 800903e:	f7fd fdcb 	bl	8006bd8 <_free_r>
 8009042:	463c      	mov	r4, r7
 8009044:	e7e0      	b.n	8009008 <_realloc_r+0x1e>

08009046 <__ascii_wctomb>:
 8009046:	4603      	mov	r3, r0
 8009048:	4608      	mov	r0, r1
 800904a:	b141      	cbz	r1, 800905e <__ascii_wctomb+0x18>
 800904c:	2aff      	cmp	r2, #255	@ 0xff
 800904e:	d904      	bls.n	800905a <__ascii_wctomb+0x14>
 8009050:	228a      	movs	r2, #138	@ 0x8a
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	f04f 30ff 	mov.w	r0, #4294967295
 8009058:	4770      	bx	lr
 800905a:	700a      	strb	r2, [r1, #0]
 800905c:	2001      	movs	r0, #1
 800905e:	4770      	bx	lr

08009060 <fiprintf>:
 8009060:	b40e      	push	{r1, r2, r3}
 8009062:	b503      	push	{r0, r1, lr}
 8009064:	4601      	mov	r1, r0
 8009066:	ab03      	add	r3, sp, #12
 8009068:	4805      	ldr	r0, [pc, #20]	@ (8009080 <fiprintf+0x20>)
 800906a:	f853 2b04 	ldr.w	r2, [r3], #4
 800906e:	6800      	ldr	r0, [r0, #0]
 8009070:	9301      	str	r3, [sp, #4]
 8009072:	f000 f83f 	bl	80090f4 <_vfiprintf_r>
 8009076:	b002      	add	sp, #8
 8009078:	f85d eb04 	ldr.w	lr, [sp], #4
 800907c:	b003      	add	sp, #12
 800907e:	4770      	bx	lr
 8009080:	2000001c 	.word	0x2000001c

08009084 <abort>:
 8009084:	b508      	push	{r3, lr}
 8009086:	2006      	movs	r0, #6
 8009088:	f000 fa08 	bl	800949c <raise>
 800908c:	2001      	movs	r0, #1
 800908e:	f7f8 fc4f 	bl	8001930 <_exit>

08009092 <_malloc_usable_size_r>:
 8009092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009096:	1f18      	subs	r0, r3, #4
 8009098:	2b00      	cmp	r3, #0
 800909a:	bfbc      	itt	lt
 800909c:	580b      	ldrlt	r3, [r1, r0]
 800909e:	18c0      	addlt	r0, r0, r3
 80090a0:	4770      	bx	lr

080090a2 <__sfputc_r>:
 80090a2:	6893      	ldr	r3, [r2, #8]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	b410      	push	{r4}
 80090aa:	6093      	str	r3, [r2, #8]
 80090ac:	da08      	bge.n	80090c0 <__sfputc_r+0x1e>
 80090ae:	6994      	ldr	r4, [r2, #24]
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	db01      	blt.n	80090b8 <__sfputc_r+0x16>
 80090b4:	290a      	cmp	r1, #10
 80090b6:	d103      	bne.n	80090c0 <__sfputc_r+0x1e>
 80090b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090bc:	f000 b932 	b.w	8009324 <__swbuf_r>
 80090c0:	6813      	ldr	r3, [r2, #0]
 80090c2:	1c58      	adds	r0, r3, #1
 80090c4:	6010      	str	r0, [r2, #0]
 80090c6:	7019      	strb	r1, [r3, #0]
 80090c8:	4608      	mov	r0, r1
 80090ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <__sfputs_r>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	4606      	mov	r6, r0
 80090d4:	460f      	mov	r7, r1
 80090d6:	4614      	mov	r4, r2
 80090d8:	18d5      	adds	r5, r2, r3
 80090da:	42ac      	cmp	r4, r5
 80090dc:	d101      	bne.n	80090e2 <__sfputs_r+0x12>
 80090de:	2000      	movs	r0, #0
 80090e0:	e007      	b.n	80090f2 <__sfputs_r+0x22>
 80090e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e6:	463a      	mov	r2, r7
 80090e8:	4630      	mov	r0, r6
 80090ea:	f7ff ffda 	bl	80090a2 <__sfputc_r>
 80090ee:	1c43      	adds	r3, r0, #1
 80090f0:	d1f3      	bne.n	80090da <__sfputs_r+0xa>
 80090f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090f4 <_vfiprintf_r>:
 80090f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f8:	460d      	mov	r5, r1
 80090fa:	b09d      	sub	sp, #116	@ 0x74
 80090fc:	4614      	mov	r4, r2
 80090fe:	4698      	mov	r8, r3
 8009100:	4606      	mov	r6, r0
 8009102:	b118      	cbz	r0, 800910c <_vfiprintf_r+0x18>
 8009104:	6a03      	ldr	r3, [r0, #32]
 8009106:	b90b      	cbnz	r3, 800910c <_vfiprintf_r+0x18>
 8009108:	f7fc fdc4 	bl	8005c94 <__sinit>
 800910c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800910e:	07d9      	lsls	r1, r3, #31
 8009110:	d405      	bmi.n	800911e <_vfiprintf_r+0x2a>
 8009112:	89ab      	ldrh	r3, [r5, #12]
 8009114:	059a      	lsls	r2, r3, #22
 8009116:	d402      	bmi.n	800911e <_vfiprintf_r+0x2a>
 8009118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800911a:	f7fc ff06 	bl	8005f2a <__retarget_lock_acquire_recursive>
 800911e:	89ab      	ldrh	r3, [r5, #12]
 8009120:	071b      	lsls	r3, r3, #28
 8009122:	d501      	bpl.n	8009128 <_vfiprintf_r+0x34>
 8009124:	692b      	ldr	r3, [r5, #16]
 8009126:	b99b      	cbnz	r3, 8009150 <_vfiprintf_r+0x5c>
 8009128:	4629      	mov	r1, r5
 800912a:	4630      	mov	r0, r6
 800912c:	f000 f938 	bl	80093a0 <__swsetup_r>
 8009130:	b170      	cbz	r0, 8009150 <_vfiprintf_r+0x5c>
 8009132:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009134:	07dc      	lsls	r4, r3, #31
 8009136:	d504      	bpl.n	8009142 <_vfiprintf_r+0x4e>
 8009138:	f04f 30ff 	mov.w	r0, #4294967295
 800913c:	b01d      	add	sp, #116	@ 0x74
 800913e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009142:	89ab      	ldrh	r3, [r5, #12]
 8009144:	0598      	lsls	r0, r3, #22
 8009146:	d4f7      	bmi.n	8009138 <_vfiprintf_r+0x44>
 8009148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800914a:	f7fc feef 	bl	8005f2c <__retarget_lock_release_recursive>
 800914e:	e7f3      	b.n	8009138 <_vfiprintf_r+0x44>
 8009150:	2300      	movs	r3, #0
 8009152:	9309      	str	r3, [sp, #36]	@ 0x24
 8009154:	2320      	movs	r3, #32
 8009156:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800915a:	f8cd 800c 	str.w	r8, [sp, #12]
 800915e:	2330      	movs	r3, #48	@ 0x30
 8009160:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009310 <_vfiprintf_r+0x21c>
 8009164:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009168:	f04f 0901 	mov.w	r9, #1
 800916c:	4623      	mov	r3, r4
 800916e:	469a      	mov	sl, r3
 8009170:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009174:	b10a      	cbz	r2, 800917a <_vfiprintf_r+0x86>
 8009176:	2a25      	cmp	r2, #37	@ 0x25
 8009178:	d1f9      	bne.n	800916e <_vfiprintf_r+0x7a>
 800917a:	ebba 0b04 	subs.w	fp, sl, r4
 800917e:	d00b      	beq.n	8009198 <_vfiprintf_r+0xa4>
 8009180:	465b      	mov	r3, fp
 8009182:	4622      	mov	r2, r4
 8009184:	4629      	mov	r1, r5
 8009186:	4630      	mov	r0, r6
 8009188:	f7ff ffa2 	bl	80090d0 <__sfputs_r>
 800918c:	3001      	adds	r0, #1
 800918e:	f000 80a7 	beq.w	80092e0 <_vfiprintf_r+0x1ec>
 8009192:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009194:	445a      	add	r2, fp
 8009196:	9209      	str	r2, [sp, #36]	@ 0x24
 8009198:	f89a 3000 	ldrb.w	r3, [sl]
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 809f 	beq.w	80092e0 <_vfiprintf_r+0x1ec>
 80091a2:	2300      	movs	r3, #0
 80091a4:	f04f 32ff 	mov.w	r2, #4294967295
 80091a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ac:	f10a 0a01 	add.w	sl, sl, #1
 80091b0:	9304      	str	r3, [sp, #16]
 80091b2:	9307      	str	r3, [sp, #28]
 80091b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80091ba:	4654      	mov	r4, sl
 80091bc:	2205      	movs	r2, #5
 80091be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c2:	4853      	ldr	r0, [pc, #332]	@ (8009310 <_vfiprintf_r+0x21c>)
 80091c4:	f7f7 f804 	bl	80001d0 <memchr>
 80091c8:	9a04      	ldr	r2, [sp, #16]
 80091ca:	b9d8      	cbnz	r0, 8009204 <_vfiprintf_r+0x110>
 80091cc:	06d1      	lsls	r1, r2, #27
 80091ce:	bf44      	itt	mi
 80091d0:	2320      	movmi	r3, #32
 80091d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091d6:	0713      	lsls	r3, r2, #28
 80091d8:	bf44      	itt	mi
 80091da:	232b      	movmi	r3, #43	@ 0x2b
 80091dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091e0:	f89a 3000 	ldrb.w	r3, [sl]
 80091e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80091e6:	d015      	beq.n	8009214 <_vfiprintf_r+0x120>
 80091e8:	9a07      	ldr	r2, [sp, #28]
 80091ea:	4654      	mov	r4, sl
 80091ec:	2000      	movs	r0, #0
 80091ee:	f04f 0c0a 	mov.w	ip, #10
 80091f2:	4621      	mov	r1, r4
 80091f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091f8:	3b30      	subs	r3, #48	@ 0x30
 80091fa:	2b09      	cmp	r3, #9
 80091fc:	d94b      	bls.n	8009296 <_vfiprintf_r+0x1a2>
 80091fe:	b1b0      	cbz	r0, 800922e <_vfiprintf_r+0x13a>
 8009200:	9207      	str	r2, [sp, #28]
 8009202:	e014      	b.n	800922e <_vfiprintf_r+0x13a>
 8009204:	eba0 0308 	sub.w	r3, r0, r8
 8009208:	fa09 f303 	lsl.w	r3, r9, r3
 800920c:	4313      	orrs	r3, r2
 800920e:	9304      	str	r3, [sp, #16]
 8009210:	46a2      	mov	sl, r4
 8009212:	e7d2      	b.n	80091ba <_vfiprintf_r+0xc6>
 8009214:	9b03      	ldr	r3, [sp, #12]
 8009216:	1d19      	adds	r1, r3, #4
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	9103      	str	r1, [sp, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	bfbb      	ittet	lt
 8009220:	425b      	neglt	r3, r3
 8009222:	f042 0202 	orrlt.w	r2, r2, #2
 8009226:	9307      	strge	r3, [sp, #28]
 8009228:	9307      	strlt	r3, [sp, #28]
 800922a:	bfb8      	it	lt
 800922c:	9204      	strlt	r2, [sp, #16]
 800922e:	7823      	ldrb	r3, [r4, #0]
 8009230:	2b2e      	cmp	r3, #46	@ 0x2e
 8009232:	d10a      	bne.n	800924a <_vfiprintf_r+0x156>
 8009234:	7863      	ldrb	r3, [r4, #1]
 8009236:	2b2a      	cmp	r3, #42	@ 0x2a
 8009238:	d132      	bne.n	80092a0 <_vfiprintf_r+0x1ac>
 800923a:	9b03      	ldr	r3, [sp, #12]
 800923c:	1d1a      	adds	r2, r3, #4
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	9203      	str	r2, [sp, #12]
 8009242:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009246:	3402      	adds	r4, #2
 8009248:	9305      	str	r3, [sp, #20]
 800924a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009320 <_vfiprintf_r+0x22c>
 800924e:	7821      	ldrb	r1, [r4, #0]
 8009250:	2203      	movs	r2, #3
 8009252:	4650      	mov	r0, sl
 8009254:	f7f6 ffbc 	bl	80001d0 <memchr>
 8009258:	b138      	cbz	r0, 800926a <_vfiprintf_r+0x176>
 800925a:	9b04      	ldr	r3, [sp, #16]
 800925c:	eba0 000a 	sub.w	r0, r0, sl
 8009260:	2240      	movs	r2, #64	@ 0x40
 8009262:	4082      	lsls	r2, r0
 8009264:	4313      	orrs	r3, r2
 8009266:	3401      	adds	r4, #1
 8009268:	9304      	str	r3, [sp, #16]
 800926a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800926e:	4829      	ldr	r0, [pc, #164]	@ (8009314 <_vfiprintf_r+0x220>)
 8009270:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009274:	2206      	movs	r2, #6
 8009276:	f7f6 ffab 	bl	80001d0 <memchr>
 800927a:	2800      	cmp	r0, #0
 800927c:	d03f      	beq.n	80092fe <_vfiprintf_r+0x20a>
 800927e:	4b26      	ldr	r3, [pc, #152]	@ (8009318 <_vfiprintf_r+0x224>)
 8009280:	bb1b      	cbnz	r3, 80092ca <_vfiprintf_r+0x1d6>
 8009282:	9b03      	ldr	r3, [sp, #12]
 8009284:	3307      	adds	r3, #7
 8009286:	f023 0307 	bic.w	r3, r3, #7
 800928a:	3308      	adds	r3, #8
 800928c:	9303      	str	r3, [sp, #12]
 800928e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009290:	443b      	add	r3, r7
 8009292:	9309      	str	r3, [sp, #36]	@ 0x24
 8009294:	e76a      	b.n	800916c <_vfiprintf_r+0x78>
 8009296:	fb0c 3202 	mla	r2, ip, r2, r3
 800929a:	460c      	mov	r4, r1
 800929c:	2001      	movs	r0, #1
 800929e:	e7a8      	b.n	80091f2 <_vfiprintf_r+0xfe>
 80092a0:	2300      	movs	r3, #0
 80092a2:	3401      	adds	r4, #1
 80092a4:	9305      	str	r3, [sp, #20]
 80092a6:	4619      	mov	r1, r3
 80092a8:	f04f 0c0a 	mov.w	ip, #10
 80092ac:	4620      	mov	r0, r4
 80092ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092b2:	3a30      	subs	r2, #48	@ 0x30
 80092b4:	2a09      	cmp	r2, #9
 80092b6:	d903      	bls.n	80092c0 <_vfiprintf_r+0x1cc>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d0c6      	beq.n	800924a <_vfiprintf_r+0x156>
 80092bc:	9105      	str	r1, [sp, #20]
 80092be:	e7c4      	b.n	800924a <_vfiprintf_r+0x156>
 80092c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80092c4:	4604      	mov	r4, r0
 80092c6:	2301      	movs	r3, #1
 80092c8:	e7f0      	b.n	80092ac <_vfiprintf_r+0x1b8>
 80092ca:	ab03      	add	r3, sp, #12
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	462a      	mov	r2, r5
 80092d0:	4b12      	ldr	r3, [pc, #72]	@ (800931c <_vfiprintf_r+0x228>)
 80092d2:	a904      	add	r1, sp, #16
 80092d4:	4630      	mov	r0, r6
 80092d6:	f7fb fe85 	bl	8004fe4 <_printf_float>
 80092da:	4607      	mov	r7, r0
 80092dc:	1c78      	adds	r0, r7, #1
 80092de:	d1d6      	bne.n	800928e <_vfiprintf_r+0x19a>
 80092e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092e2:	07d9      	lsls	r1, r3, #31
 80092e4:	d405      	bmi.n	80092f2 <_vfiprintf_r+0x1fe>
 80092e6:	89ab      	ldrh	r3, [r5, #12]
 80092e8:	059a      	lsls	r2, r3, #22
 80092ea:	d402      	bmi.n	80092f2 <_vfiprintf_r+0x1fe>
 80092ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092ee:	f7fc fe1d 	bl	8005f2c <__retarget_lock_release_recursive>
 80092f2:	89ab      	ldrh	r3, [r5, #12]
 80092f4:	065b      	lsls	r3, r3, #25
 80092f6:	f53f af1f 	bmi.w	8009138 <_vfiprintf_r+0x44>
 80092fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092fc:	e71e      	b.n	800913c <_vfiprintf_r+0x48>
 80092fe:	ab03      	add	r3, sp, #12
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	462a      	mov	r2, r5
 8009304:	4b05      	ldr	r3, [pc, #20]	@ (800931c <_vfiprintf_r+0x228>)
 8009306:	a904      	add	r1, sp, #16
 8009308:	4630      	mov	r0, r6
 800930a:	f7fc f903 	bl	8005514 <_printf_i>
 800930e:	e7e4      	b.n	80092da <_vfiprintf_r+0x1e6>
 8009310:	08009a81 	.word	0x08009a81
 8009314:	08009a8b 	.word	0x08009a8b
 8009318:	08004fe5 	.word	0x08004fe5
 800931c:	080090d1 	.word	0x080090d1
 8009320:	08009a87 	.word	0x08009a87

08009324 <__swbuf_r>:
 8009324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009326:	460e      	mov	r6, r1
 8009328:	4614      	mov	r4, r2
 800932a:	4605      	mov	r5, r0
 800932c:	b118      	cbz	r0, 8009336 <__swbuf_r+0x12>
 800932e:	6a03      	ldr	r3, [r0, #32]
 8009330:	b90b      	cbnz	r3, 8009336 <__swbuf_r+0x12>
 8009332:	f7fc fcaf 	bl	8005c94 <__sinit>
 8009336:	69a3      	ldr	r3, [r4, #24]
 8009338:	60a3      	str	r3, [r4, #8]
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	071a      	lsls	r2, r3, #28
 800933e:	d501      	bpl.n	8009344 <__swbuf_r+0x20>
 8009340:	6923      	ldr	r3, [r4, #16]
 8009342:	b943      	cbnz	r3, 8009356 <__swbuf_r+0x32>
 8009344:	4621      	mov	r1, r4
 8009346:	4628      	mov	r0, r5
 8009348:	f000 f82a 	bl	80093a0 <__swsetup_r>
 800934c:	b118      	cbz	r0, 8009356 <__swbuf_r+0x32>
 800934e:	f04f 37ff 	mov.w	r7, #4294967295
 8009352:	4638      	mov	r0, r7
 8009354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	6922      	ldr	r2, [r4, #16]
 800935a:	1a98      	subs	r0, r3, r2
 800935c:	6963      	ldr	r3, [r4, #20]
 800935e:	b2f6      	uxtb	r6, r6
 8009360:	4283      	cmp	r3, r0
 8009362:	4637      	mov	r7, r6
 8009364:	dc05      	bgt.n	8009372 <__swbuf_r+0x4e>
 8009366:	4621      	mov	r1, r4
 8009368:	4628      	mov	r0, r5
 800936a:	f7ff fa47 	bl	80087fc <_fflush_r>
 800936e:	2800      	cmp	r0, #0
 8009370:	d1ed      	bne.n	800934e <__swbuf_r+0x2a>
 8009372:	68a3      	ldr	r3, [r4, #8]
 8009374:	3b01      	subs	r3, #1
 8009376:	60a3      	str	r3, [r4, #8]
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	6022      	str	r2, [r4, #0]
 800937e:	701e      	strb	r6, [r3, #0]
 8009380:	6962      	ldr	r2, [r4, #20]
 8009382:	1c43      	adds	r3, r0, #1
 8009384:	429a      	cmp	r2, r3
 8009386:	d004      	beq.n	8009392 <__swbuf_r+0x6e>
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	07db      	lsls	r3, r3, #31
 800938c:	d5e1      	bpl.n	8009352 <__swbuf_r+0x2e>
 800938e:	2e0a      	cmp	r6, #10
 8009390:	d1df      	bne.n	8009352 <__swbuf_r+0x2e>
 8009392:	4621      	mov	r1, r4
 8009394:	4628      	mov	r0, r5
 8009396:	f7ff fa31 	bl	80087fc <_fflush_r>
 800939a:	2800      	cmp	r0, #0
 800939c:	d0d9      	beq.n	8009352 <__swbuf_r+0x2e>
 800939e:	e7d6      	b.n	800934e <__swbuf_r+0x2a>

080093a0 <__swsetup_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4b29      	ldr	r3, [pc, #164]	@ (8009448 <__swsetup_r+0xa8>)
 80093a4:	4605      	mov	r5, r0
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	460c      	mov	r4, r1
 80093aa:	b118      	cbz	r0, 80093b4 <__swsetup_r+0x14>
 80093ac:	6a03      	ldr	r3, [r0, #32]
 80093ae:	b90b      	cbnz	r3, 80093b4 <__swsetup_r+0x14>
 80093b0:	f7fc fc70 	bl	8005c94 <__sinit>
 80093b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b8:	0719      	lsls	r1, r3, #28
 80093ba:	d422      	bmi.n	8009402 <__swsetup_r+0x62>
 80093bc:	06da      	lsls	r2, r3, #27
 80093be:	d407      	bmi.n	80093d0 <__swsetup_r+0x30>
 80093c0:	2209      	movs	r2, #9
 80093c2:	602a      	str	r2, [r5, #0]
 80093c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093c8:	81a3      	strh	r3, [r4, #12]
 80093ca:	f04f 30ff 	mov.w	r0, #4294967295
 80093ce:	e033      	b.n	8009438 <__swsetup_r+0x98>
 80093d0:	0758      	lsls	r0, r3, #29
 80093d2:	d512      	bpl.n	80093fa <__swsetup_r+0x5a>
 80093d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093d6:	b141      	cbz	r1, 80093ea <__swsetup_r+0x4a>
 80093d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093dc:	4299      	cmp	r1, r3
 80093de:	d002      	beq.n	80093e6 <__swsetup_r+0x46>
 80093e0:	4628      	mov	r0, r5
 80093e2:	f7fd fbf9 	bl	8006bd8 <_free_r>
 80093e6:	2300      	movs	r3, #0
 80093e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80093f0:	81a3      	strh	r3, [r4, #12]
 80093f2:	2300      	movs	r3, #0
 80093f4:	6063      	str	r3, [r4, #4]
 80093f6:	6923      	ldr	r3, [r4, #16]
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	f043 0308 	orr.w	r3, r3, #8
 8009400:	81a3      	strh	r3, [r4, #12]
 8009402:	6923      	ldr	r3, [r4, #16]
 8009404:	b94b      	cbnz	r3, 800941a <__swsetup_r+0x7a>
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800940c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009410:	d003      	beq.n	800941a <__swsetup_r+0x7a>
 8009412:	4621      	mov	r1, r4
 8009414:	4628      	mov	r0, r5
 8009416:	f000 f883 	bl	8009520 <__smakebuf_r>
 800941a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800941e:	f013 0201 	ands.w	r2, r3, #1
 8009422:	d00a      	beq.n	800943a <__swsetup_r+0x9a>
 8009424:	2200      	movs	r2, #0
 8009426:	60a2      	str	r2, [r4, #8]
 8009428:	6962      	ldr	r2, [r4, #20]
 800942a:	4252      	negs	r2, r2
 800942c:	61a2      	str	r2, [r4, #24]
 800942e:	6922      	ldr	r2, [r4, #16]
 8009430:	b942      	cbnz	r2, 8009444 <__swsetup_r+0xa4>
 8009432:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009436:	d1c5      	bne.n	80093c4 <__swsetup_r+0x24>
 8009438:	bd38      	pop	{r3, r4, r5, pc}
 800943a:	0799      	lsls	r1, r3, #30
 800943c:	bf58      	it	pl
 800943e:	6962      	ldrpl	r2, [r4, #20]
 8009440:	60a2      	str	r2, [r4, #8]
 8009442:	e7f4      	b.n	800942e <__swsetup_r+0x8e>
 8009444:	2000      	movs	r0, #0
 8009446:	e7f7      	b.n	8009438 <__swsetup_r+0x98>
 8009448:	2000001c 	.word	0x2000001c

0800944c <_raise_r>:
 800944c:	291f      	cmp	r1, #31
 800944e:	b538      	push	{r3, r4, r5, lr}
 8009450:	4605      	mov	r5, r0
 8009452:	460c      	mov	r4, r1
 8009454:	d904      	bls.n	8009460 <_raise_r+0x14>
 8009456:	2316      	movs	r3, #22
 8009458:	6003      	str	r3, [r0, #0]
 800945a:	f04f 30ff 	mov.w	r0, #4294967295
 800945e:	bd38      	pop	{r3, r4, r5, pc}
 8009460:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009462:	b112      	cbz	r2, 800946a <_raise_r+0x1e>
 8009464:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009468:	b94b      	cbnz	r3, 800947e <_raise_r+0x32>
 800946a:	4628      	mov	r0, r5
 800946c:	f000 f830 	bl	80094d0 <_getpid_r>
 8009470:	4622      	mov	r2, r4
 8009472:	4601      	mov	r1, r0
 8009474:	4628      	mov	r0, r5
 8009476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800947a:	f000 b817 	b.w	80094ac <_kill_r>
 800947e:	2b01      	cmp	r3, #1
 8009480:	d00a      	beq.n	8009498 <_raise_r+0x4c>
 8009482:	1c59      	adds	r1, r3, #1
 8009484:	d103      	bne.n	800948e <_raise_r+0x42>
 8009486:	2316      	movs	r3, #22
 8009488:	6003      	str	r3, [r0, #0]
 800948a:	2001      	movs	r0, #1
 800948c:	e7e7      	b.n	800945e <_raise_r+0x12>
 800948e:	2100      	movs	r1, #0
 8009490:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009494:	4620      	mov	r0, r4
 8009496:	4798      	blx	r3
 8009498:	2000      	movs	r0, #0
 800949a:	e7e0      	b.n	800945e <_raise_r+0x12>

0800949c <raise>:
 800949c:	4b02      	ldr	r3, [pc, #8]	@ (80094a8 <raise+0xc>)
 800949e:	4601      	mov	r1, r0
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	f7ff bfd3 	b.w	800944c <_raise_r>
 80094a6:	bf00      	nop
 80094a8:	2000001c 	.word	0x2000001c

080094ac <_kill_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4d07      	ldr	r5, [pc, #28]	@ (80094cc <_kill_r+0x20>)
 80094b0:	2300      	movs	r3, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	4611      	mov	r1, r2
 80094b8:	602b      	str	r3, [r5, #0]
 80094ba:	f7f8 fa29 	bl	8001910 <_kill>
 80094be:	1c43      	adds	r3, r0, #1
 80094c0:	d102      	bne.n	80094c8 <_kill_r+0x1c>
 80094c2:	682b      	ldr	r3, [r5, #0]
 80094c4:	b103      	cbz	r3, 80094c8 <_kill_r+0x1c>
 80094c6:	6023      	str	r3, [r4, #0]
 80094c8:	bd38      	pop	{r3, r4, r5, pc}
 80094ca:	bf00      	nop
 80094cc:	2000058c 	.word	0x2000058c

080094d0 <_getpid_r>:
 80094d0:	f7f8 ba16 	b.w	8001900 <_getpid>

080094d4 <__swhatbuf_r>:
 80094d4:	b570      	push	{r4, r5, r6, lr}
 80094d6:	460c      	mov	r4, r1
 80094d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094dc:	2900      	cmp	r1, #0
 80094de:	b096      	sub	sp, #88	@ 0x58
 80094e0:	4615      	mov	r5, r2
 80094e2:	461e      	mov	r6, r3
 80094e4:	da0d      	bge.n	8009502 <__swhatbuf_r+0x2e>
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80094ec:	f04f 0100 	mov.w	r1, #0
 80094f0:	bf14      	ite	ne
 80094f2:	2340      	movne	r3, #64	@ 0x40
 80094f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80094f8:	2000      	movs	r0, #0
 80094fa:	6031      	str	r1, [r6, #0]
 80094fc:	602b      	str	r3, [r5, #0]
 80094fe:	b016      	add	sp, #88	@ 0x58
 8009500:	bd70      	pop	{r4, r5, r6, pc}
 8009502:	466a      	mov	r2, sp
 8009504:	f000 f848 	bl	8009598 <_fstat_r>
 8009508:	2800      	cmp	r0, #0
 800950a:	dbec      	blt.n	80094e6 <__swhatbuf_r+0x12>
 800950c:	9901      	ldr	r1, [sp, #4]
 800950e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009512:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009516:	4259      	negs	r1, r3
 8009518:	4159      	adcs	r1, r3
 800951a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800951e:	e7eb      	b.n	80094f8 <__swhatbuf_r+0x24>

08009520 <__smakebuf_r>:
 8009520:	898b      	ldrh	r3, [r1, #12]
 8009522:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009524:	079d      	lsls	r5, r3, #30
 8009526:	4606      	mov	r6, r0
 8009528:	460c      	mov	r4, r1
 800952a:	d507      	bpl.n	800953c <__smakebuf_r+0x1c>
 800952c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	6123      	str	r3, [r4, #16]
 8009534:	2301      	movs	r3, #1
 8009536:	6163      	str	r3, [r4, #20]
 8009538:	b003      	add	sp, #12
 800953a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800953c:	ab01      	add	r3, sp, #4
 800953e:	466a      	mov	r2, sp
 8009540:	f7ff ffc8 	bl	80094d4 <__swhatbuf_r>
 8009544:	9f00      	ldr	r7, [sp, #0]
 8009546:	4605      	mov	r5, r0
 8009548:	4639      	mov	r1, r7
 800954a:	4630      	mov	r0, r6
 800954c:	f7fd fbb8 	bl	8006cc0 <_malloc_r>
 8009550:	b948      	cbnz	r0, 8009566 <__smakebuf_r+0x46>
 8009552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009556:	059a      	lsls	r2, r3, #22
 8009558:	d4ee      	bmi.n	8009538 <__smakebuf_r+0x18>
 800955a:	f023 0303 	bic.w	r3, r3, #3
 800955e:	f043 0302 	orr.w	r3, r3, #2
 8009562:	81a3      	strh	r3, [r4, #12]
 8009564:	e7e2      	b.n	800952c <__smakebuf_r+0xc>
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	6020      	str	r0, [r4, #0]
 800956a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800956e:	81a3      	strh	r3, [r4, #12]
 8009570:	9b01      	ldr	r3, [sp, #4]
 8009572:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009576:	b15b      	cbz	r3, 8009590 <__smakebuf_r+0x70>
 8009578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800957c:	4630      	mov	r0, r6
 800957e:	f000 f81d 	bl	80095bc <_isatty_r>
 8009582:	b128      	cbz	r0, 8009590 <__smakebuf_r+0x70>
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	f023 0303 	bic.w	r3, r3, #3
 800958a:	f043 0301 	orr.w	r3, r3, #1
 800958e:	81a3      	strh	r3, [r4, #12]
 8009590:	89a3      	ldrh	r3, [r4, #12]
 8009592:	431d      	orrs	r5, r3
 8009594:	81a5      	strh	r5, [r4, #12]
 8009596:	e7cf      	b.n	8009538 <__smakebuf_r+0x18>

08009598 <_fstat_r>:
 8009598:	b538      	push	{r3, r4, r5, lr}
 800959a:	4d07      	ldr	r5, [pc, #28]	@ (80095b8 <_fstat_r+0x20>)
 800959c:	2300      	movs	r3, #0
 800959e:	4604      	mov	r4, r0
 80095a0:	4608      	mov	r0, r1
 80095a2:	4611      	mov	r1, r2
 80095a4:	602b      	str	r3, [r5, #0]
 80095a6:	f7f8 fa13 	bl	80019d0 <_fstat>
 80095aa:	1c43      	adds	r3, r0, #1
 80095ac:	d102      	bne.n	80095b4 <_fstat_r+0x1c>
 80095ae:	682b      	ldr	r3, [r5, #0]
 80095b0:	b103      	cbz	r3, 80095b4 <_fstat_r+0x1c>
 80095b2:	6023      	str	r3, [r4, #0]
 80095b4:	bd38      	pop	{r3, r4, r5, pc}
 80095b6:	bf00      	nop
 80095b8:	2000058c 	.word	0x2000058c

080095bc <_isatty_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	4d06      	ldr	r5, [pc, #24]	@ (80095d8 <_isatty_r+0x1c>)
 80095c0:	2300      	movs	r3, #0
 80095c2:	4604      	mov	r4, r0
 80095c4:	4608      	mov	r0, r1
 80095c6:	602b      	str	r3, [r5, #0]
 80095c8:	f7f8 fa12 	bl	80019f0 <_isatty>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d102      	bne.n	80095d6 <_isatty_r+0x1a>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	b103      	cbz	r3, 80095d6 <_isatty_r+0x1a>
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	2000058c 	.word	0x2000058c

080095dc <_init>:
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095de:	bf00      	nop
 80095e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e2:	bc08      	pop	{r3}
 80095e4:	469e      	mov	lr, r3
 80095e6:	4770      	bx	lr

080095e8 <_fini>:
 80095e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ea:	bf00      	nop
 80095ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ee:	bc08      	pop	{r3}
 80095f0:	469e      	mov	lr, r3
 80095f2:	4770      	bx	lr
