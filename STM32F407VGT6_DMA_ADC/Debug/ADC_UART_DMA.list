
ADC_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800b454  0800b454  0000c454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b4  0800b4b4  0000d07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4b4  0800b4b4  0000c4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4bc  0800b4bc  0000d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4bc  0800b4bc  0000c4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b4c0  0800b4c0  0000c4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800b4c4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d07c  2**0
                  CONTENTS
 10 .bss          00000d54  2000007c  2000007c  0000d07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000dd0  20000dd0  0000d07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e6e5  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004640  00000000  00000000  0002b791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a60  00000000  00000000  0002fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001491  00000000  00000000  00031838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d0d  00000000  00000000  00032cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024e55  00000000  00000000  000599d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e31e1  00000000  00000000  0007e82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00161a0c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007630  00000000  00000000  00161a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00169080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b43c 	.word	0x0800b43c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800b43c 	.word	0x0800b43c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fe1c 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f824 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 fa08 	bl	8000990 <MX_GPIO_Init>
  MX_DMA_Init();
 8000580:	f000 f9e6 	bl	8000950 <MX_DMA_Init>
  MX_I2C1_Init();
 8000584:	f000 f8da 	bl	800073c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000588:	f000 f906 	bl	8000798 <MX_I2S3_Init>
  MX_SPI1_Init();
 800058c:	f000 f934 	bl	80007f8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000590:	f009 ff9a 	bl	800a4c8 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000594:	f000 f880 	bl	8000698 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000598:	f000 f964 	bl	8000864 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800059c:	f000 f9ae 	bl	80008fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Start ADC in DMA mode
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 80005a0:	2280      	movs	r2, #128	@ 0x80
 80005a2:	4905      	ldr	r1, [pc, #20]	@ (80005b8 <main+0x48>)
 80005a4:	4805      	ldr	r0, [pc, #20]	@ (80005bc <main+0x4c>)
 80005a6:	f000 fedd 	bl	8001364 <HAL_ADC_Start_DMA>
  // Start Timer
  HAL_TIM_Base_Start(&htim2);
 80005aa:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <main+0x50>)
 80005ac:	f005 fea0 	bl	80062f0 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005b0:	f009 ffb0 	bl	800a514 <MX_USB_HOST_Process>
 80005b4:	e7fc      	b.n	80005b0 <main+0x40>
 80005b6:	bf00      	nop
 80005b8:	200002c4 	.word	0x200002c4
 80005bc:	20000098 	.word	0x20000098
 80005c0:	20000234 	.word	0x20000234

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	@ 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	@ 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f00a fb60 	bl	800ac98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	@ (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b22      	ldr	r3, [pc, #136]	@ (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <SystemClock_Config+0xd0>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000638:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800063c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000642:	2307      	movs	r3, #7
 8000644:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	4618      	mov	r0, r3
 800064c:	f004 ff9e 	bl	800558c <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000656:	f000 fad7 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2302      	movs	r3, #2
 8000660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000666:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000670:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	2105      	movs	r1, #5
 8000678:	4618      	mov	r0, r3
 800067a:	f005 f9ff 	bl	8005a7c <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000684:	f000 fac0 	bl	8000c08 <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	3750      	adds	r7, #80	@ 0x50
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006aa:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006ac:	4a22      	ldr	r2, [pc, #136]	@ (8000738 <MX_ADC1_Init+0xa0>)
 80006ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b0:	4b20      	ldr	r3, [pc, #128]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006be:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006d2:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80006da:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006dc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80006e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006fc:	480d      	ldr	r0, [pc, #52]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006fe:	f000 fded 	bl	80012dc <HAL_ADC_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000708:	f000 fa7e 	bl	8000c08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800070c:	230b      	movs	r3, #11
 800070e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	@ (8000734 <MX_ADC1_Init+0x9c>)
 800071e:	f000 ff45 	bl	80015ac <HAL_ADC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000728:	f000 fa6e 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000098 	.word	0x20000098
 8000738:	40012000 	.word	0x40012000

0800073c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_I2C1_Init+0x50>)
 8000742:	4a13      	ldr	r2, [pc, #76]	@ (8000790 <MX_I2C1_Init+0x54>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_I2C1_Init+0x50>)
 8000748:	4a12      	ldr	r2, [pc, #72]	@ (8000794 <MX_I2C1_Init+0x58>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_I2C1_Init+0x50>)
 800075a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800075e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <MX_I2C1_Init+0x50>)
 800077a:	f004 f923 	bl	80049c4 <HAL_I2C_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000784:	f000 fa40 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000140 	.word	0x20000140
 8000790:	40005400 	.word	0x40005400
 8000794:	000186a0 	.word	0x000186a0

08000798 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800079c:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <MX_I2S3_Init+0x54>)
 800079e:	4a14      	ldr	r2, [pc, #80]	@ (80007f0 <MX_I2S3_Init+0x58>)
 80007a0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007a2:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_I2S3_Init+0x54>)
 80007a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <MX_I2S3_Init+0x54>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_I2S3_Init+0x54>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <MX_I2S3_Init+0x54>)
 80007b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007bc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <MX_I2S3_Init+0x54>)
 80007c0:	4a0c      	ldr	r2, [pc, #48]	@ (80007f4 <MX_I2S3_Init+0x5c>)
 80007c2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_I2S3_Init+0x54>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_I2S3_Init+0x54>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_I2S3_Init+0x54>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_I2S3_Init+0x54>)
 80007d8:	f004 fa38 	bl	8004c4c <HAL_I2S_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007e2:	f000 fa11 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000194 	.word	0x20000194
 80007f0:	40003c00 	.word	0x40003c00
 80007f4:	00017700 	.word	0x00017700

080007f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007fc:	4b17      	ldr	r3, [pc, #92]	@ (800085c <MX_SPI1_Init+0x64>)
 80007fe:	4a18      	ldr	r2, [pc, #96]	@ (8000860 <MX_SPI1_Init+0x68>)
 8000800:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000802:	4b16      	ldr	r3, [pc, #88]	@ (800085c <MX_SPI1_Init+0x64>)
 8000804:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000808:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080a:	4b14      	ldr	r3, [pc, #80]	@ (800085c <MX_SPI1_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <MX_SPI1_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_SPI1_Init+0x64>)
 8000824:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000828:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800082a:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_SPI1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000830:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <MX_SPI1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	@ (800085c <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_SPI1_Init+0x64>)
 8000844:	220a      	movs	r2, #10
 8000846:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	@ (800085c <MX_SPI1_Init+0x64>)
 800084a:	f005 fc79 	bl	8006140 <HAL_SPI_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000854:	f000 f9d8 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200001dc 	.word	0x200001dc
 8000860:	40013000 	.word	0x40013000

08000864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000880:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <MX_TIM2_Init+0x94>)
 8000882:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000888:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <MX_TIM2_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <MX_TIM2_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 56000;
 8000894:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <MX_TIM2_Init+0x94>)
 8000896:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 800089a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <MX_TIM2_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_TIM2_Init+0x94>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a8:	4813      	ldr	r0, [pc, #76]	@ (80008f8 <MX_TIM2_Init+0x94>)
 80008aa:	f005 fcd2 	bl	8006252 <HAL_TIM_Base_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008b4:	f000 f9a8 	bl	8000c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	4619      	mov	r1, r3
 80008c4:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <MX_TIM2_Init+0x94>)
 80008c6:	f005 fd7b 	bl	80063c0 <HAL_TIM_ConfigClockSource>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008d0:	f000 f99a 	bl	8000c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008d4:	2320      	movs	r3, #32
 80008d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_TIM2_Init+0x94>)
 80008e2:	f005 ff7b 	bl	80067dc <HAL_TIMEx_MasterConfigSynchronization>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008ec:	f000 f98c 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000234 	.word	0x20000234

080008fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	@ (800094c <MX_USART2_UART_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
//  huart2.Init.BaudRate = 115200;
  huart2.Init.BaudRate = 921600;
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000908:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800090c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000934:	f005 ffce 	bl	80068d4 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800093e:	f000 f963 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000027c 	.word	0x2000027c
 800094c:	40004400 	.word	0x40004400

08000950 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_DMA_Init+0x3c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a0b      	ldr	r2, [pc, #44]	@ (800098c <MX_DMA_Init+0x3c>)
 8000960:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_DMA_Init+0x3c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	2038      	movs	r0, #56	@ 0x38
 8000978:	f001 f993 	bl	8001ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800097c:	2038      	movs	r0, #56	@ 0x38
 800097e:	f001 f9ac 	bl	8001cda <HAL_NVIC_EnableIRQ>

}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	@ 0x30
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
 80009aa:	4b72      	ldr	r3, [pc, #456]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a71      	ldr	r2, [pc, #452]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 80009b0:	f043 0310 	orr.w	r3, r3, #16
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b6f      	ldr	r3, [pc, #444]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0310 	and.w	r3, r3, #16
 80009be:	61bb      	str	r3, [r7, #24]
 80009c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	4b6b      	ldr	r3, [pc, #428]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a6a      	ldr	r2, [pc, #424]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b68      	ldr	r3, [pc, #416]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b64      	ldr	r3, [pc, #400]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a63      	ldr	r2, [pc, #396]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b61      	ldr	r3, [pc, #388]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b5d      	ldr	r3, [pc, #372]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a5c      	ldr	r2, [pc, #368]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b5a      	ldr	r3, [pc, #360]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b56      	ldr	r3, [pc, #344]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a55      	ldr	r2, [pc, #340]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b53      	ldr	r3, [pc, #332]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b4f      	ldr	r3, [pc, #316]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a4e      	ldr	r2, [pc, #312]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b4c      	ldr	r3, [pc, #304]	@ (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2108      	movs	r1, #8
 8000a52:	4849      	ldr	r0, [pc, #292]	@ (8000b78 <MX_GPIO_Init+0x1e8>)
 8000a54:	f001 fe68 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4847      	ldr	r0, [pc, #284]	@ (8000b7c <MX_GPIO_Init+0x1ec>)
 8000a5e:	f001 fe63 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a62:	2200      	movs	r2, #0
 8000a64:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a68:	4845      	ldr	r0, [pc, #276]	@ (8000b80 <MX_GPIO_Init+0x1f0>)
 8000a6a:	f001 fe5d 	bl	8002728 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a6e:	2308      	movs	r3, #8
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	483c      	ldr	r0, [pc, #240]	@ (8000b78 <MX_GPIO_Init+0x1e8>)
 8000a86:	f001 fcb3 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4836      	ldr	r0, [pc, #216]	@ (8000b7c <MX_GPIO_Init+0x1ec>)
 8000aa2:	f001 fca5 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	482e      	ldr	r0, [pc, #184]	@ (8000b7c <MX_GPIO_Init+0x1ec>)
 8000ac2:	f001 fc95 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aca:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	482a      	ldr	r0, [pc, #168]	@ (8000b84 <MX_GPIO_Init+0x1f4>)
 8000adc:	f001 fc88 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	4825      	ldr	r0, [pc, #148]	@ (8000b88 <MX_GPIO_Init+0x1f8>)
 8000af4:	f001 fc7c 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000af8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	481c      	ldr	r0, [pc, #112]	@ (8000b88 <MX_GPIO_Init+0x1f8>)
 8000b16:	f001 fc6b 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b1a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000b1e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	4813      	ldr	r0, [pc, #76]	@ (8000b80 <MX_GPIO_Init+0x1f0>)
 8000b34:	f001 fc5c 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b38:	2320      	movs	r3, #32
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480d      	ldr	r0, [pc, #52]	@ (8000b80 <MX_GPIO_Init+0x1f0>)
 8000b4c:	f001 fc50 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b54:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4804      	ldr	r0, [pc, #16]	@ (8000b78 <MX_GPIO_Init+0x1e8>)
 8000b66:	f001 fc43 	bl	80023f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3730      	adds	r7, #48	@ 0x30
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40020800 	.word	0x40020800
 8000b80:	40020c00 	.word	0x40020c00
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400

08000b8c <send_adc_values_in_chunks>:

/* USER CODE BEGIN 4 */
void send_adc_values_in_chunks(void) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
    char adc_string[10];  // Buffer for each ADC value as a string

    // Loop through the ADC buffer in chunks of 16
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	e017      	b.n	8000bc8 <send_adc_values_in_chunks+0x3c>
        // Format the ADC value
        sprintf(adc_string, "%u\r\n", adc_buffer[i]);
 8000b98:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd8 <send_adc_values_in_chunks+0x4c>)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	490e      	ldr	r1, [pc, #56]	@ (8000bdc <send_adc_values_in_chunks+0x50>)
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f00a f857 	bl	800ac58 <siprintf>

        // Transmit the ADC value via UART
        HAL_UART_Transmit(&huart2, (uint8_t*)adc_string, strlen(adc_string), HAL_MAX_DELAY);
 8000baa:	463b      	mov	r3, r7
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fb0f 	bl	80001d0 <strlen>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	4639      	mov	r1, r7
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbc:	4808      	ldr	r0, [pc, #32]	@ (8000be0 <send_adc_values_in_chunks+0x54>)
 8000bbe:	f005 fed9 	bl	8006974 <HAL_UART_Transmit>
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bcc:	dde4      	ble.n	8000b98 <send_adc_values_in_chunks+0xc>
        // Every 16th value, delay to avoid overloading the UART
//        if ((i + 1) % 16 == 0) {
//            HAL_Delay(10);  // Small delay to allow UART to catch up
//        }
    }
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200002c4 	.word	0x200002c4
 8000bdc:	0800b454 	.word	0x0800b454
 8000be0:	2000027c 	.word	0x2000027c

08000be4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	@ (8000c04 <HAL_ADC_ConvCpltCallback+0x20>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <HAL_ADC_ConvCpltCallback+0x16>
        // Send all ADC values from the buffer once the conversion is complete
    	send_adc_values_in_chunks();
 8000bf6:	f7ff ffc9 	bl	8000b8c <send_adc_values_in_chunks>
    }
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40012000 	.word	0x40012000

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <Error_Handler+0x8>

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c22:	4a0f      	ldr	r2, [pc, #60]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	4a08      	ldr	r2, [pc, #32]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c52:	2007      	movs	r0, #7
 8000c54:	f001 f81a 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800

08000c64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	@ 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a2f      	ldr	r2, [pc, #188]	@ (8000d40 <HAL_ADC_MspInit+0xdc>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d157      	bne.n	8000d36 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d44 <HAL_ADC_MspInit+0xe0>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8000d44 <HAL_ADC_MspInit+0xe0>)
 8000c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c96:	4b2b      	ldr	r3, [pc, #172]	@ (8000d44 <HAL_ADC_MspInit+0xe0>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b27      	ldr	r3, [pc, #156]	@ (8000d44 <HAL_ADC_MspInit+0xe0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a26      	ldr	r2, [pc, #152]	@ (8000d44 <HAL_ADC_MspInit+0xe0>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <HAL_ADC_MspInit+0xe0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481d      	ldr	r0, [pc, #116]	@ (8000d48 <HAL_ADC_MspInit+0xe4>)
 8000cd2:	f001 fb8d 	bl	80023f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <HAL_ADC_MspInit+0xe8>)
 8000cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d50 <HAL_ADC_MspInit+0xec>)
 8000cda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <HAL_ADC_MspInit+0xe8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <HAL_ADC_MspInit+0xe8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <HAL_ADC_MspInit+0xe8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cee:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <HAL_ADC_MspInit+0xe8>)
 8000cf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cf4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <HAL_ADC_MspInit+0xe8>)
 8000cf8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cfc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <HAL_ADC_MspInit+0xe8>)
 8000d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <HAL_ADC_MspInit+0xe8>)
 8000d08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d0c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <HAL_ADC_MspInit+0xe8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <HAL_ADC_MspInit+0xe8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d1a:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <HAL_ADC_MspInit+0xe8>)
 8000d1c:	f000 fff8 	bl	8001d10 <HAL_DMA_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000d26:	f7ff ff6f 	bl	8000c08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	@ (8000d4c <HAL_ADC_MspInit+0xe8>)
 8000d2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d30:	4a06      	ldr	r2, [pc, #24]	@ (8000d4c <HAL_ADC_MspInit+0xe8>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	@ 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40012000 	.word	0x40012000
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020800 	.word	0x40020800
 8000d4c:	200000e0 	.word	0x200000e0
 8000d50:	40026410 	.word	0x40026410

08000d54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a19      	ldr	r2, [pc, #100]	@ (8000dd8 <HAL_I2C_MspInit+0x84>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12c      	bne.n	8000dd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <HAL_I2C_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a17      	ldr	r2, [pc, #92]	@ (8000ddc <HAL_I2C_MspInit+0x88>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <HAL_I2C_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d92:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d98:	2312      	movs	r3, #18
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da4:	2304      	movs	r3, #4
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	480c      	ldr	r0, [pc, #48]	@ (8000de0 <HAL_I2C_MspInit+0x8c>)
 8000db0:	f001 fb1e 	bl	80023f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <HAL_I2C_MspInit+0x88>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	4a07      	ldr	r2, [pc, #28]	@ (8000ddc <HAL_I2C_MspInit+0x88>)
 8000dbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <HAL_I2C_MspInit+0x88>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	@ 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40005400 	.word	0x40005400
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020400 	.word	0x40020400

08000de4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	@ 0x38
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a31      	ldr	r2, [pc, #196]	@ (8000ed4 <HAL_I2S_MspInit+0xf0>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d15a      	bne.n	8000eca <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e14:	2301      	movs	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e18:	23c0      	movs	r3, #192	@ 0xc0
 8000e1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4618      	mov	r0, r3
 8000e26:	f005 f849 	bl	8005ebc <HAL_RCCEx_PeriphCLKConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e30:	f7ff feea 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3c:	4a26      	ldr	r2, [pc, #152]	@ (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e44:	4b24      	ldr	r3, [pc, #144]	@ (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e58:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e74:	4a18      	ldr	r2, [pc, #96]	@ (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e88:	2310      	movs	r3, #16
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e98:	2306      	movs	r3, #6
 8000e9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480e      	ldr	r0, [pc, #56]	@ (8000edc <HAL_I2S_MspInit+0xf8>)
 8000ea4:	f001 faa4 	bl	80023f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ea8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eba:	2306      	movs	r3, #6
 8000ebc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4806      	ldr	r0, [pc, #24]	@ (8000ee0 <HAL_I2S_MspInit+0xfc>)
 8000ec6:	f001 fa93 	bl	80023f0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000eca:	bf00      	nop
 8000ecc:	3738      	adds	r7, #56	@ 0x38
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40003c00 	.word	0x40003c00
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020800 	.word	0x40020800

08000ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a19      	ldr	r2, [pc, #100]	@ (8000f68 <HAL_SPI_MspInit+0x84>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d12b      	bne.n	8000f5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <HAL_SPI_MspInit+0x88>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a17      	ldr	r2, [pc, #92]	@ (8000f6c <HAL_SPI_MspInit+0x88>)
 8000f10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <HAL_SPI_MspInit+0x88>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <HAL_SPI_MspInit+0x88>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a10      	ldr	r2, [pc, #64]	@ (8000f6c <HAL_SPI_MspInit+0x88>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <HAL_SPI_MspInit+0x88>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f3e:	23e0      	movs	r3, #224	@ 0xe0
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f4e:	2305      	movs	r3, #5
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <HAL_SPI_MspInit+0x8c>)
 8000f5a:	f001 fa49 	bl	80023f0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	@ 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40013000 	.word	0x40013000
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000

08000f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f84:	d10d      	bne.n	8000fa2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	4a08      	ldr	r2, [pc, #32]	@ (8000fb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800

08000fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	@ 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a19      	ldr	r2, [pc, #100]	@ (8001038 <HAL_UART_MspInit+0x84>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d12b      	bne.n	800102e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b18      	ldr	r3, [pc, #96]	@ (800103c <HAL_UART_MspInit+0x88>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	4a17      	ldr	r2, [pc, #92]	@ (800103c <HAL_UART_MspInit+0x88>)
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <HAL_UART_MspInit+0x88>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <HAL_UART_MspInit+0x88>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a10      	ldr	r2, [pc, #64]	@ (800103c <HAL_UART_MspInit+0x88>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <HAL_UART_MspInit+0x88>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800100e:	230c      	movs	r3, #12
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800101e:	2307      	movs	r3, #7
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <HAL_UART_MspInit+0x8c>)
 800102a:	f001 f9e1 	bl	80023f0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	@ 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40004400 	.word	0x40004400
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <NMI_Handler+0x4>

0800104c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <MemManage_Handler+0x4>

0800105c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <UsageFault_Handler+0x4>

0800106c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109a:	f000 f8db 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010a8:	4802      	ldr	r0, [pc, #8]	@ (80010b4 <DMA2_Stream0_IRQHandler+0x10>)
 80010aa:	f000 ff37 	bl	8001f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000e0 	.word	0x200000e0

080010b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010bc:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <OTG_FS_IRQHandler+0x10>)
 80010be:	f001 fe2d 	bl	8002d1c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200008a8 	.word	0x200008a8

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	@ (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	@ (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f009 fde4 	bl	800acc8 <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20020000 	.word	0x20020000
 800112c:	00000400 	.word	0x00000400
 8001130:	200004c4 	.word	0x200004c4
 8001134:	20000dd0 	.word	0x20000dd0

08001138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001194 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001160:	f7ff ffea 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001164:	480c      	ldr	r0, [pc, #48]	@ (8001198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001166:	490d      	ldr	r1, [pc, #52]	@ (800119c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800117c:	4c0a      	ldr	r4, [pc, #40]	@ (80011a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118a:	f009 fda3 	bl	800acd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118e:	f7ff f9ef 	bl	8000570 <main>
  bx  lr    
 8001192:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001194:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80011a0:	0800b4c4 	.word	0x0800b4c4
  ldr r2, =_sbss
 80011a4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80011a8:	20000dd0 	.word	0x20000dd0

080011ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b4:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0d      	ldr	r2, [pc, #52]	@ (80011f0 <HAL_Init+0x40>)
 80011ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c0:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <HAL_Init+0x40>)
 80011c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	@ (80011f0 <HAL_Init+0x40>)
 80011d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 fd57 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f808 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff fd16 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023c00 	.word	0x40023c00

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_InitTick+0x54>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_InitTick+0x58>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fd6f 	bl	8001cf6 <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 fd37 	bl	8001ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	@ (8001250 <HAL_InitTick+0x5c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000000 	.word	0x20000000
 800124c:	20000008 	.word	0x20000008
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008
 8001278:	200004c8 	.word	0x200004c8

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	200004c8 	.word	0x200004c8

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff ffee 	bl	800127c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffde 	bl	800127c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000008 	.word	0x20000008

080012dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e033      	b.n	800135a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fcb2 	bl	8000c64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	2b00      	cmp	r3, #0
 8001318:	d118      	bne.n	800134c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001322:	f023 0302 	bic.w	r3, r3, #2
 8001326:	f043 0202 	orr.w	r2, r3, #2
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 fa5e 	bl	80017f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	f023 0303 	bic.w	r3, r3, #3
 8001342:	f043 0201 	orr.w	r2, r3, #1
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	641a      	str	r2, [r3, #64]	@ 0x40
 800134a:	e001      	b.n	8001350 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001358:	7bfb      	ldrb	r3, [r7, #15]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800137a:	2b01      	cmp	r3, #1
 800137c:	d101      	bne.n	8001382 <HAL_ADC_Start_DMA+0x1e>
 800137e:	2302      	movs	r3, #2
 8001380:	e0e9      	b.n	8001556 <HAL_ADC_Start_DMA+0x1f2>
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b01      	cmp	r3, #1
 8001396:	d018      	beq.n	80013ca <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0201 	orr.w	r2, r2, #1
 80013a6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013a8:	4b6d      	ldr	r3, [pc, #436]	@ (8001560 <HAL_ADC_Start_DMA+0x1fc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a6d      	ldr	r2, [pc, #436]	@ (8001564 <HAL_ADC_Start_DMA+0x200>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	0c9a      	lsrs	r2, r3, #18
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80013bc:	e002      	b.n	80013c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f9      	bne.n	80013be <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013d8:	d107      	bne.n	80013ea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013e8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	f040 80a1 	bne.w	800153c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001418:	2b00      	cmp	r3, #0
 800141a:	d007      	beq.n	800142c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001420:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001424:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001430:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001438:	d106      	bne.n	8001448 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	f023 0206 	bic.w	r2, r3, #6
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	645a      	str	r2, [r3, #68]	@ 0x44
 8001446:	e002      	b.n	800144e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001456:	4b44      	ldr	r3, [pc, #272]	@ (8001568 <HAL_ADC_Start_DMA+0x204>)
 8001458:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800145e:	4a43      	ldr	r2, [pc, #268]	@ (800156c <HAL_ADC_Start_DMA+0x208>)
 8001460:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001466:	4a42      	ldr	r2, [pc, #264]	@ (8001570 <HAL_ADC_Start_DMA+0x20c>)
 8001468:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800146e:	4a41      	ldr	r2, [pc, #260]	@ (8001574 <HAL_ADC_Start_DMA+0x210>)
 8001470:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800147a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800148a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800149a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	334c      	adds	r3, #76	@ 0x4c
 80014a6:	4619      	mov	r1, r3
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f000 fcde 	bl	8001e6c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 031f 	and.w	r3, r3, #31
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d12a      	bne.n	8001512 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a2d      	ldr	r2, [pc, #180]	@ (8001578 <HAL_ADC_Start_DMA+0x214>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d015      	beq.n	80014f2 <HAL_ADC_Start_DMA+0x18e>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a2c      	ldr	r2, [pc, #176]	@ (800157c <HAL_ADC_Start_DMA+0x218>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d105      	bne.n	80014dc <HAL_ADC_Start_DMA+0x178>
 80014d0:	4b25      	ldr	r3, [pc, #148]	@ (8001568 <HAL_ADC_Start_DMA+0x204>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00a      	beq.n	80014f2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a27      	ldr	r2, [pc, #156]	@ (8001580 <HAL_ADC_Start_DMA+0x21c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d136      	bne.n	8001554 <HAL_ADC_Start_DMA+0x1f0>
 80014e6:	4b20      	ldr	r3, [pc, #128]	@ (8001568 <HAL_ADC_Start_DMA+0x204>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d130      	bne.n	8001554 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d129      	bne.n	8001554 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	e020      	b.n	8001554 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a18      	ldr	r2, [pc, #96]	@ (8001578 <HAL_ADC_Start_DMA+0x214>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d11b      	bne.n	8001554 <HAL_ADC_Start_DMA+0x1f0>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d114      	bne.n	8001554 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	e00b      	b.n	8001554 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001540:	f043 0210 	orr.w	r2, r3, #16
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154c:	f043 0201 	orr.w	r2, r3, #1
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000000 	.word	0x20000000
 8001564:	431bde83 	.word	0x431bde83
 8001568:	40012300 	.word	0x40012300
 800156c:	080019e9 	.word	0x080019e9
 8001570:	08001aa3 	.word	0x08001aa3
 8001574:	08001abf 	.word	0x08001abf
 8001578:	40012000 	.word	0x40012000
 800157c:	40012100 	.word	0x40012100
 8001580:	40012200 	.word	0x40012200

08001584 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1c>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e105      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x228>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b09      	cmp	r3, #9
 80015d6:	d925      	bls.n	8001624 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68d9      	ldr	r1, [r3, #12]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	3b1e      	subs	r3, #30
 80015ee:	2207      	movs	r2, #7
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43da      	mvns	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	400a      	ands	r2, r1
 80015fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68d9      	ldr	r1, [r3, #12]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	4603      	mov	r3, r0
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4403      	add	r3, r0
 8001616:	3b1e      	subs	r3, #30
 8001618:	409a      	lsls	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	e022      	b.n	800166a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6919      	ldr	r1, [r3, #16]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	2207      	movs	r2, #7
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	400a      	ands	r2, r1
 8001646:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6919      	ldr	r1, [r3, #16]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	4618      	mov	r0, r3
 800165a:	4603      	mov	r3, r0
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4403      	add	r3, r0
 8001660:	409a      	lsls	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b06      	cmp	r3, #6
 8001670:	d824      	bhi.n	80016bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	3b05      	subs	r3, #5
 8001684:	221f      	movs	r2, #31
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	400a      	ands	r2, r1
 8001692:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3b05      	subs	r3, #5
 80016ae:	fa00 f203 	lsl.w	r2, r0, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80016ba:	e04c      	b.n	8001756 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	d824      	bhi.n	800170e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	3b23      	subs	r3, #35	@ 0x23
 80016d6:	221f      	movs	r2, #31
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43da      	mvns	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	400a      	ands	r2, r1
 80016e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	3b23      	subs	r3, #35	@ 0x23
 8001700:	fa00 f203 	lsl.w	r2, r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	631a      	str	r2, [r3, #48]	@ 0x30
 800170c:	e023      	b.n	8001756 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3b41      	subs	r3, #65	@ 0x41
 8001720:	221f      	movs	r2, #31
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	400a      	ands	r2, r1
 800172e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b41      	subs	r3, #65	@ 0x41
 800174a:	fa00 f203 	lsl.w	r2, r0, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001756:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <HAL_ADC_ConfigChannel+0x234>)
 8001758:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a21      	ldr	r2, [pc, #132]	@ (80017e4 <HAL_ADC_ConfigChannel+0x238>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d109      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1cc>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b12      	cmp	r3, #18
 800176a:	d105      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a19      	ldr	r2, [pc, #100]	@ (80017e4 <HAL_ADC_ConfigChannel+0x238>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d123      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x21e>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b10      	cmp	r3, #16
 8001788:	d003      	beq.n	8001792 <HAL_ADC_ConfigChannel+0x1e6>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b11      	cmp	r3, #17
 8001790:	d11b      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d111      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017a6:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <HAL_ADC_ConfigChannel+0x23c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a10      	ldr	r2, [pc, #64]	@ (80017ec <HAL_ADC_ConfigChannel+0x240>)
 80017ac:	fba2 2303 	umull	r2, r3, r2, r3
 80017b0:	0c9a      	lsrs	r2, r3, #18
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017bc:	e002      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f9      	bne.n	80017be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40012300 	.word	0x40012300
 80017e4:	40012000 	.word	0x40012000
 80017e8:	20000000 	.word	0x20000000
 80017ec:	431bde83 	.word	0x431bde83

080017f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f8:	4b79      	ldr	r3, [pc, #484]	@ (80019e0 <ADC_Init+0x1f0>)
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	431a      	orrs	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	021a      	lsls	r2, r3, #8
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001848:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800186a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6899      	ldr	r1, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001882:	4a58      	ldr	r2, [pc, #352]	@ (80019e4 <ADC_Init+0x1f4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d022      	beq.n	80018ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001896:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6899      	ldr	r1, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6899      	ldr	r1, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	e00f      	b.n	80018ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0202 	bic.w	r2, r2, #2
 80018fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6899      	ldr	r1, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7e1b      	ldrb	r3, [r3, #24]
 8001908:	005a      	lsls	r2, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d01b      	beq.n	8001954 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800192a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800193a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6859      	ldr	r1, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	3b01      	subs	r3, #1
 8001948:	035a      	lsls	r2, r3, #13
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	e007      	b.n	8001964 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001962:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001972:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	3b01      	subs	r3, #1
 8001980:	051a      	lsls	r2, r3, #20
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6899      	ldr	r1, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019a6:	025a      	lsls	r2, r3, #9
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6899      	ldr	r1, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	029a      	lsls	r2, r3, #10
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	609a      	str	r2, [r3, #8]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40012300 	.word	0x40012300
 80019e4:	0f000001 	.word	0x0f000001

080019e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d13c      	bne.n	8001a7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d12b      	bne.n	8001a74 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d127      	bne.n	8001a74 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d006      	beq.n	8001a40 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d119      	bne.n	8001a74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0220 	bic.w	r2, r2, #32
 8001a4e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6c:	f043 0201 	orr.w	r2, r3, #1
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff f8b5 	bl	8000be4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a7a:	e00e      	b.n	8001a9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff fd85 	bl	8001598 <HAL_ADC_ErrorCallback>
}
 8001a8e:	e004      	b.n	8001a9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aae:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7ff fd67 	bl	8001584 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aca:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2240      	movs	r2, #64	@ 0x40
 8001ad0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	f043 0204 	orr.w	r2, r3, #4
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f7ff fd5a 	bl	8001598 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	@ (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4907      	ldr	r1, [pc, #28]	@ (8001b88 <__NVIC_EnableIRQ+0x38>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0a      	blt.n	8001bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	490c      	ldr	r1, [pc, #48]	@ (8001bd8 <__NVIC_SetPriority+0x4c>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb4:	e00a      	b.n	8001bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4908      	ldr	r1, [pc, #32]	@ (8001bdc <__NVIC_SetPriority+0x50>)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	761a      	strb	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	@ 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f1c3 0307 	rsb	r3, r3, #7
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	bf28      	it	cs
 8001bfe:	2304      	movcs	r3, #4
 8001c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d902      	bls.n	8001c10 <NVIC_EncodePriority+0x30>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b03      	subs	r3, #3
 8001c0e:	e000      	b.n	8001c12 <NVIC_EncodePriority+0x32>
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	4313      	orrs	r3, r2
         );
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	@ 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	210f      	movs	r1, #15
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f7ff ff8e 	bl	8001b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff29 	bl	8001aec <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb4:	f7ff ff3e 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7ff ff8e 	bl	8001be0 <NVIC_EncodePriority>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff5d 	bl	8001b8c <__NVIC_SetPriority>
}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff31 	bl	8001b50 <__NVIC_EnableIRQ>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffa2 	bl	8001c48 <SysTick_Config>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff faae 	bl	800127c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e099      	b.n	8001e60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4c:	e00f      	b.n	8001d6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d4e:	f7ff fa95 	bl	800127c <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d908      	bls.n	8001d6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2203      	movs	r2, #3
 8001d66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e078      	b.n	8001e60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1e8      	bne.n	8001d4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	4b38      	ldr	r3, [pc, #224]	@ (8001e68 <HAL_DMA_Init+0x158>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d107      	bne.n	8001dd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f023 0307 	bic.w	r3, r3, #7
 8001dee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d117      	bne.n	8001e32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00e      	beq.n	8001e32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fa6f 	bl	80022f8 <DMA_CheckFifoParam>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2240      	movs	r2, #64	@ 0x40
 8001e24:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e016      	b.n	8001e60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fa26 	bl	800228c <DMA_CalcBaseAndBitshift>
 8001e40:	4603      	mov	r3, r0
 8001e42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e48:	223f      	movs	r2, #63	@ 0x3f
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	f010803f 	.word	0xf010803f

08001e6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_DMA_Start_IT+0x26>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e040      	b.n	8001f14 <HAL_DMA_Start_IT+0xa8>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d12f      	bne.n	8001f06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 f9b8 	bl	8002230 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec4:	223f      	movs	r2, #63	@ 0x3f
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0216 	orr.w	r2, r2, #22
 8001eda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0208 	orr.w	r2, r2, #8
 8001ef2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e005      	b.n	8001f12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f28:	4b8e      	ldr	r3, [pc, #568]	@ (8002164 <HAL_DMA_IRQHandler+0x248>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a8e      	ldr	r2, [pc, #568]	@ (8002168 <HAL_DMA_IRQHandler+0x24c>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0a9b      	lsrs	r3, r3, #10
 8001f34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f46:	2208      	movs	r2, #8
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01a      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0204 	bic.w	r2, r2, #4
 8001f6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f74:	2208      	movs	r2, #8
 8001f76:	409a      	lsls	r2, r3
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d012      	beq.n	8001fbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001faa:	2201      	movs	r2, #1
 8001fac:	409a      	lsls	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb6:	f043 0202 	orr.w	r2, r3, #2
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d012      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00b      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fec:	f043 0204 	orr.w	r2, r3, #4
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d043      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d03c      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002016:	2210      	movs	r2, #16
 8002018:	409a      	lsls	r2, r3
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d018      	beq.n	800205e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d108      	bne.n	800204c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d024      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	4798      	blx	r3
 800204a:	e01f      	b.n	800208c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01b      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
 800205c:	e016      	b.n	800208c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d107      	bne.n	800207c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0208 	bic.w	r2, r2, #8
 800207a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002090:	2220      	movs	r2, #32
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 808f 	beq.w	80021bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8087 	beq.w	80021bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b2:	2220      	movs	r2, #32
 80020b4:	409a      	lsls	r2, r3
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b05      	cmp	r3, #5
 80020c4:	d136      	bne.n	8002134 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0216 	bic.w	r2, r2, #22
 80020d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <HAL_DMA_IRQHandler+0x1da>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0208 	bic.w	r2, r2, #8
 8002104:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210a:	223f      	movs	r2, #63	@ 0x3f
 800210c:	409a      	lsls	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002126:	2b00      	cmp	r3, #0
 8002128:	d07e      	beq.n	8002228 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	4798      	blx	r3
        }
        return;
 8002132:	e079      	b.n	8002228 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d01d      	beq.n	800217e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10d      	bne.n	800216c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002154:	2b00      	cmp	r3, #0
 8002156:	d031      	beq.n	80021bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4798      	blx	r3
 8002160:	e02c      	b.n	80021bc <HAL_DMA_IRQHandler+0x2a0>
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000
 8002168:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002170:	2b00      	cmp	r3, #0
 8002172:	d023      	beq.n	80021bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	4798      	blx	r3
 800217c:	e01e      	b.n	80021bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10f      	bne.n	80021ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0210 	bic.w	r2, r2, #16
 800219a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d032      	beq.n	800222a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d022      	beq.n	8002216 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2205      	movs	r2, #5
 80021d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	3301      	adds	r3, #1
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d307      	bcc.n	8002204 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f2      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x2cc>
 8002202:	e000      	b.n	8002206 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002204:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	4798      	blx	r3
 8002226:	e000      	b.n	800222a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002228:	bf00      	nop
    }
  }
}
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800224c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b40      	cmp	r3, #64	@ 0x40
 800225c:	d108      	bne.n	8002270 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800226e:	e007      	b.n	8002280 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	60da      	str	r2, [r3, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	3b10      	subs	r3, #16
 800229c:	4a14      	ldr	r2, [pc, #80]	@ (80022f0 <DMA_CalcBaseAndBitshift+0x64>)
 800229e:	fba2 2303 	umull	r2, r3, r2, r3
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022a6:	4a13      	ldr	r2, [pc, #76]	@ (80022f4 <DMA_CalcBaseAndBitshift+0x68>)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d909      	bls.n	80022ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022c2:	f023 0303 	bic.w	r3, r3, #3
 80022c6:	1d1a      	adds	r2, r3, #4
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80022cc:	e007      	b.n	80022de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022d6:	f023 0303 	bic.w	r3, r3, #3
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	aaaaaaab 	.word	0xaaaaaaab
 80022f4:	0800b478 	.word	0x0800b478

080022f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002308:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d11f      	bne.n	8002352 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d856      	bhi.n	80023c6 <DMA_CheckFifoParam+0xce>
 8002318:	a201      	add	r2, pc, #4	@ (adr r2, 8002320 <DMA_CheckFifoParam+0x28>)
 800231a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231e:	bf00      	nop
 8002320:	08002331 	.word	0x08002331
 8002324:	08002343 	.word	0x08002343
 8002328:	08002331 	.word	0x08002331
 800232c:	080023c7 	.word	0x080023c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002334:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d046      	beq.n	80023ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002340:	e043      	b.n	80023ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002346:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800234a:	d140      	bne.n	80023ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002350:	e03d      	b.n	80023ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800235a:	d121      	bne.n	80023a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d837      	bhi.n	80023d2 <DMA_CheckFifoParam+0xda>
 8002362:	a201      	add	r2, pc, #4	@ (adr r2, 8002368 <DMA_CheckFifoParam+0x70>)
 8002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002368:	08002379 	.word	0x08002379
 800236c:	0800237f 	.word	0x0800237f
 8002370:	08002379 	.word	0x08002379
 8002374:	08002391 	.word	0x08002391
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
      break;
 800237c:	e030      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002382:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d025      	beq.n	80023d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238e:	e022      	b.n	80023d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002394:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002398:	d11f      	bne.n	80023da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800239e:	e01c      	b.n	80023da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d903      	bls.n	80023ae <DMA_CheckFifoParam+0xb6>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d003      	beq.n	80023b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023ac:	e018      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
      break;
 80023b2:	e015      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00e      	beq.n	80023de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
      break;
 80023c4:	e00b      	b.n	80023de <DMA_CheckFifoParam+0xe6>
      break;
 80023c6:	bf00      	nop
 80023c8:	e00a      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023ca:	bf00      	nop
 80023cc:	e008      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023ce:	bf00      	nop
 80023d0:	e006      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023d2:	bf00      	nop
 80023d4:	e004      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023d6:	bf00      	nop
 80023d8:	e002      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80023da:	bf00      	nop
 80023dc:	e000      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023de:	bf00      	nop
    }
  } 
  
  return status; 
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop

080023f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	@ 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	e16b      	b.n	80026e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800240c:	2201      	movs	r2, #1
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	429a      	cmp	r2, r3
 8002426:	f040 815a 	bne.w	80026de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d005      	beq.n	8002442 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243e:	2b02      	cmp	r3, #2
 8002440:	d130      	bne.n	80024a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	2203      	movs	r2, #3
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002478:	2201      	movs	r2, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 0201 	and.w	r2, r3, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d017      	beq.n	80024e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d123      	bne.n	8002534 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	08da      	lsrs	r2, r3, #3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3208      	adds	r2, #8
 80024f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	220f      	movs	r2, #15
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	08da      	lsrs	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3208      	adds	r2, #8
 800252e:	69b9      	ldr	r1, [r7, #24]
 8002530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2203      	movs	r2, #3
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0203 	and.w	r2, r3, #3
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80b4 	beq.w	80026de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b60      	ldr	r3, [pc, #384]	@ (80026fc <HAL_GPIO_Init+0x30c>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	4a5f      	ldr	r2, [pc, #380]	@ (80026fc <HAL_GPIO_Init+0x30c>)
 8002580:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002584:	6453      	str	r3, [r2, #68]	@ 0x44
 8002586:	4b5d      	ldr	r3, [pc, #372]	@ (80026fc <HAL_GPIO_Init+0x30c>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002592:	4a5b      	ldr	r2, [pc, #364]	@ (8002700 <HAL_GPIO_Init+0x310>)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	089b      	lsrs	r3, r3, #2
 8002598:	3302      	adds	r3, #2
 800259a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	220f      	movs	r2, #15
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a52      	ldr	r2, [pc, #328]	@ (8002704 <HAL_GPIO_Init+0x314>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d02b      	beq.n	8002616 <HAL_GPIO_Init+0x226>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a51      	ldr	r2, [pc, #324]	@ (8002708 <HAL_GPIO_Init+0x318>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d025      	beq.n	8002612 <HAL_GPIO_Init+0x222>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a50      	ldr	r2, [pc, #320]	@ (800270c <HAL_GPIO_Init+0x31c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01f      	beq.n	800260e <HAL_GPIO_Init+0x21e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002710 <HAL_GPIO_Init+0x320>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d019      	beq.n	800260a <HAL_GPIO_Init+0x21a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002714 <HAL_GPIO_Init+0x324>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_Init+0x216>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002718 <HAL_GPIO_Init+0x328>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00d      	beq.n	8002602 <HAL_GPIO_Init+0x212>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4c      	ldr	r2, [pc, #304]	@ (800271c <HAL_GPIO_Init+0x32c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <HAL_GPIO_Init+0x20e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002720 <HAL_GPIO_Init+0x330>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_GPIO_Init+0x20a>
 80025f6:	2307      	movs	r3, #7
 80025f8:	e00e      	b.n	8002618 <HAL_GPIO_Init+0x228>
 80025fa:	2308      	movs	r3, #8
 80025fc:	e00c      	b.n	8002618 <HAL_GPIO_Init+0x228>
 80025fe:	2306      	movs	r3, #6
 8002600:	e00a      	b.n	8002618 <HAL_GPIO_Init+0x228>
 8002602:	2305      	movs	r3, #5
 8002604:	e008      	b.n	8002618 <HAL_GPIO_Init+0x228>
 8002606:	2304      	movs	r3, #4
 8002608:	e006      	b.n	8002618 <HAL_GPIO_Init+0x228>
 800260a:	2303      	movs	r3, #3
 800260c:	e004      	b.n	8002618 <HAL_GPIO_Init+0x228>
 800260e:	2302      	movs	r3, #2
 8002610:	e002      	b.n	8002618 <HAL_GPIO_Init+0x228>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_GPIO_Init+0x228>
 8002616:	2300      	movs	r3, #0
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	f002 0203 	and.w	r2, r2, #3
 800261e:	0092      	lsls	r2, r2, #2
 8002620:	4093      	lsls	r3, r2
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002628:	4935      	ldr	r1, [pc, #212]	@ (8002700 <HAL_GPIO_Init+0x310>)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	089b      	lsrs	r3, r3, #2
 800262e:	3302      	adds	r3, #2
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002636:	4b3b      	ldr	r3, [pc, #236]	@ (8002724 <HAL_GPIO_Init+0x334>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800265a:	4a32      	ldr	r2, [pc, #200]	@ (8002724 <HAL_GPIO_Init+0x334>)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002660:	4b30      	ldr	r3, [pc, #192]	@ (8002724 <HAL_GPIO_Init+0x334>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002684:	4a27      	ldr	r2, [pc, #156]	@ (8002724 <HAL_GPIO_Init+0x334>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800268a:	4b26      	ldr	r3, [pc, #152]	@ (8002724 <HAL_GPIO_Init+0x334>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002724 <HAL_GPIO_Init+0x334>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <HAL_GPIO_Init+0x334>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d8:	4a12      	ldr	r2, [pc, #72]	@ (8002724 <HAL_GPIO_Init+0x334>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3301      	adds	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b0f      	cmp	r3, #15
 80026e8:	f67f ae90 	bls.w	800240c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3724      	adds	r7, #36	@ 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	40013800 	.word	0x40013800
 8002704:	40020000 	.word	0x40020000
 8002708:	40020400 	.word	0x40020400
 800270c:	40020800 	.word	0x40020800
 8002710:	40020c00 	.word	0x40020c00
 8002714:	40021000 	.word	0x40021000
 8002718:	40021400 	.word	0x40021400
 800271c:	40021800 	.word	0x40021800
 8002720:	40021c00 	.word	0x40021c00
 8002724:	40013c00 	.word	0x40013c00

08002728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
 8002734:	4613      	mov	r3, r2
 8002736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002738:	787b      	ldrb	r3, [r7, #1]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002744:	e003      	b.n	800274e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002746:	887b      	ldrh	r3, [r7, #2]
 8002748:	041a      	lsls	r2, r3, #16
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	619a      	str	r2, [r3, #24]
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af02      	add	r7, sp, #8
 8002760:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e059      	b.n	8002820 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f007 fefc 	bl	800a584 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2203      	movs	r2, #3
 8002790:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800279a:	d102      	bne.n	80027a2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f004 fd15 	bl	80071d6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7c1a      	ldrb	r2, [r3, #16]
 80027b4:	f88d 2000 	strb.w	r2, [sp]
 80027b8:	3304      	adds	r3, #4
 80027ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027bc:	f004 fc96 	bl	80070ec <USB_CoreInit>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2202      	movs	r2, #2
 80027ca:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e026      	b.n	8002820 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2101      	movs	r1, #1
 80027d8:	4618      	mov	r0, r3
 80027da:	f004 fd0d 	bl	80071f8 <USB_SetCurrentMode>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e017      	b.n	8002820 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	7c1a      	ldrb	r2, [r3, #16]
 80027f8:	f88d 2000 	strb.w	r2, [sp]
 80027fc:	3304      	adds	r3, #4
 80027fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002800:	f004 feb0 	bl	8007564 <USB_HostInit>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2202      	movs	r2, #2
 800280e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e004      	b.n	8002820 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b08b      	sub	sp, #44	@ 0x2c
 800282c:	af04      	add	r7, sp, #16
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	4608      	mov	r0, r1
 8002832:	4611      	mov	r1, r2
 8002834:	461a      	mov	r2, r3
 8002836:	4603      	mov	r3, r0
 8002838:	70fb      	strb	r3, [r7, #3]
 800283a:	460b      	mov	r3, r1
 800283c:	70bb      	strb	r3, [r7, #2]
 800283e:	4613      	mov	r3, r2
 8002840:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002842:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002844:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_HCD_HC_Init+0x2c>
 8002850:	2302      	movs	r3, #2
 8002852:	e09d      	b.n	8002990 <HAL_HCD_HC_Init+0x168>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	3319      	adds	r3, #25
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	3314      	adds	r3, #20
 8002880:	787a      	ldrb	r2, [r7, #1]
 8002882:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3315      	adds	r3, #21
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	3326      	adds	r3, #38	@ 0x26
 80028a8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80028ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	78bb      	ldrb	r3, [r7, #2]
 80028b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028b6:	b2d8      	uxtb	r0, r3
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	3316      	adds	r3, #22
 80028c6:	4602      	mov	r2, r0
 80028c8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	4619      	mov	r1, r3
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fbc8 	bl	8003064 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80028d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	da0a      	bge.n	80028f2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	3317      	adds	r3, #23
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
 80028f0:	e009      	b.n	8002906 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	3317      	adds	r3, #23
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f004 ff8e 	bl	800782c <USB_GetHostSpeed>
 8002910:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002912:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002916:	2b01      	cmp	r3, #1
 8002918:	d10b      	bne.n	8002932 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800291a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800291e:	2b01      	cmp	r3, #1
 8002920:	d107      	bne.n	8002932 <HAL_HCD_HC_Init+0x10a>
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d104      	bne.n	8002932 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2bbc      	cmp	r3, #188	@ 0xbc
 800292c:	d901      	bls.n	8002932 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800292e:	23bc      	movs	r3, #188	@ 0xbc
 8002930:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3318      	adds	r3, #24
 8002942:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002946:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	b298      	uxth	r0, r3
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	3328      	adds	r3, #40	@ 0x28
 800295c:	4602      	mov	r2, r0
 800295e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	b29b      	uxth	r3, r3
 8002968:	787c      	ldrb	r4, [r7, #1]
 800296a:	78ba      	ldrb	r2, [r7, #2]
 800296c:	78f9      	ldrb	r1, [r7, #3]
 800296e:	9302      	str	r3, [sp, #8]
 8002970:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	4623      	mov	r3, r4
 800297e:	f004 ff7d 	bl	800787c <USB_HC_Init>
 8002982:	4603      	mov	r3, r0
 8002984:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002990:	4618      	mov	r0, r3
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd90      	pop	{r4, r7, pc}

08002998 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_HCD_HC_Halt+0x1e>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e00f      	b.n	80029d6 <HAL_HCD_HC_Halt+0x3e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f005 fb0f 	bl	8007fea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	4608      	mov	r0, r1
 80029ea:	4611      	mov	r1, r2
 80029ec:	461a      	mov	r2, r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	70fb      	strb	r3, [r7, #3]
 80029f2:	460b      	mov	r3, r1
 80029f4:	70bb      	strb	r3, [r7, #2]
 80029f6:	4613      	mov	r3, r2
 80029f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	1a9b      	subs	r3, r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	3317      	adds	r3, #23
 8002a0a:	78ba      	ldrb	r2, [r7, #2]
 8002a0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002a0e:	78fa      	ldrb	r2, [r7, #3]
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	3326      	adds	r3, #38	@ 0x26
 8002a1e:	787a      	ldrb	r2, [r7, #1]
 8002a20:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002a22:	7c3b      	ldrb	r3, [r7, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d114      	bne.n	8002a52 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	332a      	adds	r3, #42	@ 0x2a
 8002a38:	2203      	movs	r2, #3
 8002a3a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	3319      	adds	r3, #25
 8002a4c:	7f3a      	ldrb	r2, [r7, #28]
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e009      	b.n	8002a66 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	332a      	adds	r3, #42	@ 0x2a
 8002a62:	2202      	movs	r2, #2
 8002a64:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002a66:	787b      	ldrb	r3, [r7, #1]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	f200 8102 	bhi.w	8002c72 <HAL_HCD_HC_SubmitRequest+0x292>
 8002a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a74 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a74:	08002a85 	.word	0x08002a85
 8002a78:	08002c5d 	.word	0x08002c5d
 8002a7c:	08002b49 	.word	0x08002b49
 8002a80:	08002bd3 	.word	0x08002bd3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002a84:	7c3b      	ldrb	r3, [r7, #16]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	f040 80f5 	bne.w	8002c76 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002a8c:	78bb      	ldrb	r3, [r7, #2]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d12d      	bne.n	8002aee <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002a92:	8b3b      	ldrh	r3, [r7, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	333d      	adds	r3, #61	@ 0x3d
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	333d      	adds	r3, #61	@ 0x3d
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10a      	bne.n	8002ad8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	332a      	adds	r3, #42	@ 0x2a
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002ad6:	e0ce      	b.n	8002c76 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	332a      	adds	r3, #42	@ 0x2a
 8002ae8:	2202      	movs	r2, #2
 8002aea:	701a      	strb	r2, [r3, #0]
      break;
 8002aec:	e0c3      	b.n	8002c76 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	331a      	adds	r3, #26
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	f040 80b8 	bne.w	8002c76 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	1a9b      	subs	r3, r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	333c      	adds	r3, #60	@ 0x3c
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	332a      	adds	r3, #42	@ 0x2a
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
      break;
 8002b30:	e0a1      	b.n	8002c76 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	332a      	adds	r3, #42	@ 0x2a
 8002b42:	2202      	movs	r2, #2
 8002b44:	701a      	strb	r2, [r3, #0]
      break;
 8002b46:	e096      	b.n	8002c76 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002b48:	78bb      	ldrb	r3, [r7, #2]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d120      	bne.n	8002b90 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	333d      	adds	r3, #61	@ 0x3d
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	332a      	adds	r3, #42	@ 0x2a
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002b78:	e07e      	b.n	8002c78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b7a:	78fa      	ldrb	r2, [r7, #3]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	1a9b      	subs	r3, r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	332a      	adds	r3, #42	@ 0x2a
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	701a      	strb	r2, [r3, #0]
      break;
 8002b8e:	e073      	b.n	8002c78 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	333c      	adds	r3, #60	@ 0x3c
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	332a      	adds	r3, #42	@ 0x2a
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	701a      	strb	r2, [r3, #0]
      break;
 8002bba:	e05d      	b.n	8002c78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	332a      	adds	r3, #42	@ 0x2a
 8002bcc:	2202      	movs	r2, #2
 8002bce:	701a      	strb	r2, [r3, #0]
      break;
 8002bd0:	e052      	b.n	8002c78 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002bd2:	78bb      	ldrb	r3, [r7, #2]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d120      	bne.n	8002c1a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	333d      	adds	r3, #61	@ 0x3d
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10a      	bne.n	8002c04 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	332a      	adds	r3, #42	@ 0x2a
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c02:	e039      	b.n	8002c78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	332a      	adds	r3, #42	@ 0x2a
 8002c14:	2202      	movs	r2, #2
 8002c16:	701a      	strb	r2, [r3, #0]
      break;
 8002c18:	e02e      	b.n	8002c78 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	333c      	adds	r3, #60	@ 0x3c
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	332a      	adds	r3, #42	@ 0x2a
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
      break;
 8002c44:	e018      	b.n	8002c78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	332a      	adds	r3, #42	@ 0x2a
 8002c56:	2202      	movs	r2, #2
 8002c58:	701a      	strb	r2, [r3, #0]
      break;
 8002c5a:	e00d      	b.n	8002c78 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	332a      	adds	r3, #42	@ 0x2a
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
      break;
 8002c70:	e002      	b.n	8002c78 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002c72:	bf00      	nop
 8002c74:	e000      	b.n	8002c78 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002c76:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	332c      	adds	r3, #44	@ 0x2c
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	8b39      	ldrh	r1, [r7, #24]
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4403      	add	r3, r0
 8002c9c:	3334      	adds	r3, #52	@ 0x34
 8002c9e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	334c      	adds	r3, #76	@ 0x4c
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002cb4:	78fa      	ldrb	r2, [r7, #3]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3338      	adds	r3, #56	@ 0x38
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	1a9b      	subs	r3, r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3315      	adds	r3, #21
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	334d      	adds	r3, #77	@ 0x4d
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	3310      	adds	r3, #16
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	4413      	add	r3, r2
 8002d04:	1d19      	adds	r1, r3, #4
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	799b      	ldrb	r3, [r3, #6]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f004 fee2 	bl	8007ad4 <USB_HC_StartXfer>
 8002d10:	4603      	mov	r3, r0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop

08002d1c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f004 fbd6 	bl	80074e4 <USB_GetMode>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	f040 80fb 	bne.w	8002f36 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f004 fb99 	bl	800747c <USB_ReadInterrupts>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80f1 	beq.w	8002f34 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f004 fb90 	bl	800747c <USB_ReadInterrupts>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d66:	d104      	bne.n	8002d72 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002d70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f004 fb80 	bl	800747c <USB_ReadInterrupts>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d86:	d104      	bne.n	8002d92 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002d90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f004 fb70 	bl	800747c <USB_ReadInterrupts>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002da2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002da6:	d104      	bne.n	8002db2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002db0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f004 fb60 	bl	800747c <USB_ReadInterrupts>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d103      	bne.n	8002dce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f004 fb52 	bl	800747c <USB_ReadInterrupts>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002de2:	d120      	bne.n	8002e26 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002dec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d113      	bne.n	8002e26 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002dfe:	2110      	movs	r1, #16
 8002e00:	6938      	ldr	r0, [r7, #16]
 8002e02:	f004 fa45 	bl	8007290 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002e06:	6938      	ldr	r0, [r7, #16]
 8002e08:	f004 fa74 	bl	80072f4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	7a5b      	ldrb	r3, [r3, #9]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d105      	bne.n	8002e20 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2101      	movs	r1, #1
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f004 fc66 	bl	80076ec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f007 fc2d 	bl	800a680 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f004 fb26 	bl	800747c <USB_ReadInterrupts>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e3a:	d102      	bne.n	8002e42 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f001 fd4d 	bl	80048dc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f004 fb18 	bl	800747c <USB_ReadInterrupts>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d106      	bne.n	8002e64 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f007 fbf6 	bl	800a648 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2208      	movs	r2, #8
 8002e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f004 fb07 	bl	800747c <USB_ReadInterrupts>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e78:	d139      	bne.n	8002eee <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f005 f8a2 	bl	8007fc8 <USB_HC_ReadInterrupt>
 8002e84:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e025      	b.n	8002ed8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d018      	beq.n	8002ed2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eb6:	d106      	bne.n	8002ec6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f905 	bl	80030ce <HCD_HC_IN_IRQHandler>
 8002ec4:	e005      	b.n	8002ed2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	4619      	mov	r1, r3
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 ff67 	bl	8003da0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	795b      	ldrb	r3, [r3, #5]
 8002edc:	461a      	mov	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d3d3      	bcc.n	8002e8c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002eec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f004 fac2 	bl	800747c <USB_ReadInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d101      	bne.n	8002f06 <HAL_HCD_IRQHandler+0x1ea>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_HCD_IRQHandler+0x1ec>
 8002f06:	2300      	movs	r3, #0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d014      	beq.n	8002f36 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0210 	bic.w	r2, r2, #16
 8002f1a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f001 fbfe 	bl	800471e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699a      	ldr	r2, [r3, #24]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0210 	orr.w	r2, r2, #16
 8002f30:	619a      	str	r2, [r3, #24]
 8002f32:	e000      	b.n	8002f36 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002f34:	bf00      	nop
    }
  }
}
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_HCD_Start+0x16>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e013      	b.n	8002f7a <HAL_HCD_Start+0x3e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4618      	mov	r0, r3
 8002f62:	f004 fc2a 	bl	80077ba <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f004 f922 	bl	80071b4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_HCD_Stop+0x16>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e00d      	b.n	8002fb4 <HAL_HCD_Stop+0x32>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f005 f97d 	bl	80082a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f004 fbcc 	bl	8007766 <USB_ResetPort>
 8002fce:	4603      	mov	r3, r0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	334c      	adds	r3, #76	@ 0x4c
 8002ff4:	781b      	ldrb	r3, [r3, #0]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	3338      	adds	r3, #56	@ 0x38
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f004 fc0e 	bl	800785a <USB_GetCurrentFrame>
 800303e:	4603      	mov	r3, r0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f004 fbe9 	bl	800782c <USB_GetHostSpeed>
 800305a:	4603      	mov	r3, r0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	331a      	adds	r3, #26
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	331b      	adds	r3, #27
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	3325      	adds	r3, #37	@ 0x25
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3324      	adds	r3, #36	@ 0x24
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b086      	sub	sp, #24
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	460b      	mov	r3, r1
 80030d8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f004 f9d8 	bl	80074a2 <USB_ReadChInterrupts>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d11a      	bne.n	8003132 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4413      	add	r3, r2
 8003104:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003108:	461a      	mov	r2, r3
 800310a:	2304      	movs	r3, #4
 800310c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	334d      	adds	r3, #77	@ 0x4d
 800311e:	2207      	movs	r2, #7
 8003120:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f004 ff5d 	bl	8007fea <USB_HC_Halt>
 8003130:	e09e      	b.n	8003270 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f004 f9b1 	bl	80074a2 <USB_ReadChInterrupts>
 8003140:	4603      	mov	r3, r0
 8003142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003146:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800314a:	d11b      	bne.n	8003184 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003158:	461a      	mov	r2, r3
 800315a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800315e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	334d      	adds	r3, #77	@ 0x4d
 8003170:	2208      	movs	r2, #8
 8003172:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f004 ff34 	bl	8007fea <USB_HC_Halt>
 8003182:	e075      	b.n	8003270 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f004 f988 	bl	80074a2 <USB_ReadChInterrupts>
 8003192:	4603      	mov	r3, r0
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b08      	cmp	r3, #8
 800319a:	d11a      	bne.n	80031d2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a8:	461a      	mov	r2, r3
 80031aa:	2308      	movs	r3, #8
 80031ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	334d      	adds	r3, #77	@ 0x4d
 80031be:	2206      	movs	r2, #6
 80031c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f004 ff0d 	bl	8007fea <USB_HC_Halt>
 80031d0:	e04e      	b.n	8003270 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	4611      	mov	r1, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	f004 f961 	bl	80074a2 <USB_ReadChInterrupts>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ea:	d11b      	bne.n	8003224 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f8:	461a      	mov	r2, r3
 80031fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	334d      	adds	r3, #77	@ 0x4d
 8003210:	2209      	movs	r2, #9
 8003212:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f004 fee4 	bl	8007fea <USB_HC_Halt>
 8003222:	e025      	b.n	8003270 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f004 f938 	bl	80074a2 <USB_ReadChInterrupts>
 8003232:	4603      	mov	r3, r0
 8003234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003238:	2b80      	cmp	r3, #128	@ 0x80
 800323a:	d119      	bne.n	8003270 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003248:	461a      	mov	r2, r3
 800324a:	2380      	movs	r3, #128	@ 0x80
 800324c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	334d      	adds	r3, #77	@ 0x4d
 800325e:	2207      	movs	r2, #7
 8003260:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f004 febd 	bl	8007fea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f004 f912 	bl	80074a2 <USB_ReadChInterrupts>
 800327e:	4603      	mov	r3, r0
 8003280:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003288:	d112      	bne.n	80032b0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f004 fea9 	bl	8007fea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a4:	461a      	mov	r2, r3
 80032a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032aa:	6093      	str	r3, [r2, #8]
 80032ac:	f000 bd75 	b.w	8003d9a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f004 f8f2 	bl	80074a2 <USB_ReadChInterrupts>
 80032be:	4603      	mov	r3, r0
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	f040 8128 	bne.w	800351a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d6:	461a      	mov	r2, r3
 80032d8:	2320      	movs	r3, #32
 80032da:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	331b      	adds	r3, #27
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d119      	bne.n	8003326 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	331b      	adds	r3, #27
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	0151      	lsls	r1, r2, #5
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	440a      	add	r2, r1
 800331c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003324:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	799b      	ldrb	r3, [r3, #6]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d01b      	beq.n	8003366 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	3330      	adds	r3, #48	@ 0x30
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4413      	add	r3, r2
 8003348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	1ac9      	subs	r1, r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4403      	add	r3, r0
 8003362:	3338      	adds	r3, #56	@ 0x38
 8003364:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	334d      	adds	r3, #77	@ 0x4d
 8003376:	2201      	movs	r2, #1
 8003378:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	3344      	adds	r3, #68	@ 0x44
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800339a:	461a      	mov	r2, r3
 800339c:	2301      	movs	r3, #1
 800339e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	3326      	adds	r3, #38	@ 0x26
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	3326      	adds	r3, #38	@ 0x26
 80033c6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d110      	bne.n	80033ee <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f004 fe08 	bl	8007fea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e6:	461a      	mov	r2, r3
 80033e8:	2310      	movs	r3, #16
 80033ea:	6093      	str	r3, [r2, #8]
 80033ec:	e03d      	b.n	800346a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	3326      	adds	r3, #38	@ 0x26
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b03      	cmp	r3, #3
 8003402:	d00a      	beq.n	800341a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	3326      	adds	r3, #38	@ 0x26
 8003414:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003416:	2b01      	cmp	r3, #1
 8003418:	d127      	bne.n	800346a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800341a:	78fb      	ldrb	r3, [r7, #3]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4413      	add	r3, r2
 8003422:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	0151      	lsls	r1, r2, #5
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	440a      	add	r2, r1
 8003430:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003434:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003438:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	334c      	adds	r3, #76	@ 0x4c
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	334c      	adds	r3, #76	@ 0x4c
 800345e:	781a      	ldrb	r2, [r3, #0]
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	4619      	mov	r1, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f007 f919 	bl	800a69c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	799b      	ldrb	r3, [r3, #6]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d13b      	bne.n	80034ea <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	3338      	adds	r3, #56	@ 0x38
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4403      	add	r3, r0
 8003492:	3328      	adds	r3, #40	@ 0x28
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	440b      	add	r3, r1
 8003498:	1e59      	subs	r1, r3, #1
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4403      	add	r3, r0
 80034a8:	3328      	adds	r3, #40	@ 0x28
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8470 	beq.w	8003d9a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	333c      	adds	r3, #60	@ 0x3c
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	f083 0301 	eor.w	r3, r3, #1
 80034d2:	b2d8      	uxtb	r0, r3
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	333c      	adds	r3, #60	@ 0x3c
 80034e2:	4602      	mov	r2, r0
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	f000 bc58 	b.w	8003d9a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	333c      	adds	r3, #60	@ 0x3c
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	f083 0301 	eor.w	r3, r3, #1
 8003502:	b2d8      	uxtb	r0, r3
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	333c      	adds	r3, #60	@ 0x3c
 8003512:	4602      	mov	r2, r0
 8003514:	701a      	strb	r2, [r3, #0]
 8003516:	f000 bc40 	b.w	8003d9a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	4611      	mov	r1, r2
 8003522:	4618      	mov	r0, r3
 8003524:	f003 ffbd 	bl	80074a2 <USB_ReadChInterrupts>
 8003528:	4603      	mov	r3, r0
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b20      	cmp	r3, #32
 8003530:	d131      	bne.n	8003596 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4413      	add	r3, r2
 800353a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800353e:	461a      	mov	r2, r3
 8003540:	2320      	movs	r3, #32
 8003542:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	331a      	adds	r3, #26
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	f040 841f 	bne.w	8003d9a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	331b      	adds	r3, #27
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	334d      	adds	r3, #77	@ 0x4d
 8003580:	2203      	movs	r2, #3
 8003582:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f004 fd2c 	bl	8007fea <USB_HC_Halt>
 8003592:	f000 bc02 	b.w	8003d9a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	4611      	mov	r1, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f003 ff7f 	bl	80074a2 <USB_ReadChInterrupts>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	f040 8305 	bne.w	8003bba <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035bc:	461a      	mov	r2, r3
 80035be:	2302      	movs	r3, #2
 80035c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	334d      	adds	r3, #77	@ 0x4d
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d114      	bne.n	8003602 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	334d      	adds	r3, #77	@ 0x4d
 80035e8:	2202      	movs	r2, #2
 80035ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334c      	adds	r3, #76	@ 0x4c
 80035fc:	2201      	movs	r2, #1
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e2cc      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	334d      	adds	r3, #77	@ 0x4d
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b06      	cmp	r3, #6
 8003616:	d114      	bne.n	8003642 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	334d      	adds	r3, #77	@ 0x4d
 8003628:	2202      	movs	r2, #2
 800362a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800362c:	78fa      	ldrb	r2, [r7, #3]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	334c      	adds	r3, #76	@ 0x4c
 800363c:	2205      	movs	r2, #5
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	e2ac      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	334d      	adds	r3, #77	@ 0x4d
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b07      	cmp	r3, #7
 8003656:	d00b      	beq.n	8003670 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	334d      	adds	r3, #77	@ 0x4d
 8003668:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800366a:	2b09      	cmp	r3, #9
 800366c:	f040 80a6 	bne.w	80037bc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	334d      	adds	r3, #77	@ 0x4d
 8003680:	2202      	movs	r2, #2
 8003682:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	3344      	adds	r3, #68	@ 0x44
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	1c59      	adds	r1, r3, #1
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4403      	add	r3, r0
 80036a4:	3344      	adds	r3, #68	@ 0x44
 80036a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	3344      	adds	r3, #68	@ 0x44
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d943      	bls.n	8003746 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	3344      	adds	r3, #68	@ 0x44
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	331a      	adds	r3, #26
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d123      	bne.n	8003730 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	331b      	adds	r3, #27
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	331c      	adds	r3, #28
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	0151      	lsls	r1, r2, #5
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	440a      	add	r2, r1
 8003726:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800372a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800372e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	334c      	adds	r3, #76	@ 0x4c
 8003740:	2204      	movs	r2, #4
 8003742:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003744:	e229      	b.n	8003b9a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	334c      	adds	r3, #76	@ 0x4c
 8003756:	2202      	movs	r2, #2
 8003758:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800375a:	78fa      	ldrb	r2, [r7, #3]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	3326      	adds	r3, #38	@ 0x26
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00b      	beq.n	8003788 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003770:	78fa      	ldrb	r2, [r7, #3]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	3326      	adds	r3, #38	@ 0x26
 8003780:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003782:	2b02      	cmp	r3, #2
 8003784:	f040 8209 	bne.w	8003b9a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800379e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037b4:	461a      	mov	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037ba:	e1ee      	b.n	8003b9a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80037bc:	78fa      	ldrb	r2, [r7, #3]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	334d      	adds	r3, #77	@ 0x4d
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	f040 80c8 	bne.w	8003964 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037d4:	78fa      	ldrb	r2, [r7, #3]
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	334d      	adds	r3, #77	@ 0x4d
 80037e4:	2202      	movs	r2, #2
 80037e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80037e8:	78fa      	ldrb	r2, [r7, #3]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	331b      	adds	r3, #27
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	f040 81ce 	bne.w	8003b9c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	3326      	adds	r3, #38	@ 0x26
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b03      	cmp	r3, #3
 8003814:	d16b      	bne.n	80038ee <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	3348      	adds	r3, #72	@ 0x48
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	1c59      	adds	r1, r3, #1
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4403      	add	r3, r0
 8003836:	3348      	adds	r3, #72	@ 0x48
 8003838:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	3348      	adds	r3, #72	@ 0x48
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d943      	bls.n	80038d8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	3348      	adds	r3, #72	@ 0x48
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	331b      	adds	r3, #27
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	3344      	adds	r3, #68	@ 0x44
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d809      	bhi.n	80038a2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800388e:	78fa      	ldrb	r2, [r7, #3]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	331c      	adds	r3, #28
 800389e:	2201      	movs	r2, #1
 80038a0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	0151      	lsls	r1, r2, #5
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	440a      	add	r2, r1
 80038b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	334c      	adds	r3, #76	@ 0x4c
 80038d2:	2204      	movs	r2, #4
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	e014      	b.n	8003902 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	334c      	adds	r3, #76	@ 0x4c
 80038e8:	2202      	movs	r2, #2
 80038ea:	701a      	strb	r2, [r3, #0]
 80038ec:	e009      	b.n	8003902 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	334c      	adds	r3, #76	@ 0x4c
 80038fe:	2202      	movs	r2, #2
 8003900:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	3326      	adds	r3, #38	@ 0x26
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00b      	beq.n	8003930 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	3326      	adds	r3, #38	@ 0x26
 8003928:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800392a:	2b02      	cmp	r3, #2
 800392c:	f040 8136 	bne.w	8003b9c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4413      	add	r3, r2
 8003938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003946:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800394e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4413      	add	r3, r2
 8003958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800395c:	461a      	mov	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e11b      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	334d      	adds	r3, #77	@ 0x4d
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b03      	cmp	r3, #3
 8003978:	f040 8081 	bne.w	8003a7e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	334d      	adds	r3, #77	@ 0x4d
 800398c:	2202      	movs	r2, #2
 800398e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	331b      	adds	r3, #27
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	f040 80fa 	bne.w	8003b9c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	334c      	adds	r3, #76	@ 0x4c
 80039b8:	2202      	movs	r2, #2
 80039ba:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	0151      	lsls	r1, r2, #5
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	440a      	add	r2, r1
 80039d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039da:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	0151      	lsls	r1, r2, #5
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	440a      	add	r2, r1
 80039f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039fa:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	0151      	lsls	r1, r2, #5
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	440a      	add	r2, r1
 8003a12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a16:	f023 0320 	bic.w	r3, r3, #32
 8003a1a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	3326      	adds	r3, #38	@ 0x26
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	3326      	adds	r3, #38	@ 0x26
 8003a42:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	f040 80a9 	bne.w	8003b9c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a60:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a68:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a76:	461a      	mov	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	e08e      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	334d      	adds	r3, #77	@ 0x4d
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d143      	bne.n	8003b1c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	334d      	adds	r3, #77	@ 0x4d
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	334c      	adds	r3, #76	@ 0x4c
 8003ab8:	2202      	movs	r2, #2
 8003aba:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3326      	adds	r3, #38	@ 0x26
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	3326      	adds	r3, #38	@ 0x26
 8003ae2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d159      	bne.n	8003b9c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003afe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b06:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b14:	461a      	mov	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e03f      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	334d      	adds	r3, #77	@ 0x4d
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d126      	bne.n	8003b80 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	334d      	adds	r3, #77	@ 0x4d
 8003b42:	2202      	movs	r2, #2
 8003b44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	3344      	adds	r3, #68	@ 0x44
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	1c59      	adds	r1, r3, #1
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	1a9b      	subs	r3, r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4403      	add	r3, r0
 8003b66:	3344      	adds	r3, #68	@ 0x44
 8003b68:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	334c      	adds	r3, #76	@ 0x4c
 8003b7a:	2204      	movs	r2, #4
 8003b7c:	701a      	strb	r2, [r3, #0]
 8003b7e:	e00d      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003b80:	78fa      	ldrb	r2, [r7, #3]
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	4613      	mov	r3, r2
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	334d      	adds	r3, #77	@ 0x4d
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	f000 8100 	beq.w	8003d98 <HCD_HC_IN_IRQHandler+0xcca>
 8003b98:	e000      	b.n	8003b9c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b9a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	334c      	adds	r3, #76	@ 0x4c
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f006 fd72 	bl	800a69c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003bb8:	e0ef      	b.n	8003d9a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f003 fc6d 	bl	80074a2 <USB_ReadChInterrupts>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bce:	2b40      	cmp	r3, #64	@ 0x40
 8003bd0:	d12f      	bne.n	8003c32 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bde:	461a      	mov	r2, r3
 8003be0:	2340      	movs	r3, #64	@ 0x40
 8003be2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	334d      	adds	r3, #77	@ 0x4d
 8003bf4:	2205      	movs	r2, #5
 8003bf6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	331a      	adds	r3, #26
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d109      	bne.n	8003c22 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	1a9b      	subs	r3, r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	3344      	adds	r3, #68	@ 0x44
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	4611      	mov	r1, r2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f004 f9dd 	bl	8007fea <USB_HC_Halt>
 8003c30:	e0b3      	b.n	8003d9a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	78fa      	ldrb	r2, [r7, #3]
 8003c38:	4611      	mov	r1, r2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f003 fc31 	bl	80074a2 <USB_ReadChInterrupts>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	f040 80a7 	bne.w	8003d9a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	3326      	adds	r3, #38	@ 0x26
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d11b      	bne.n	8003c9a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	3344      	adds	r3, #68	@ 0x44
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	334d      	adds	r3, #77	@ 0x4d
 8003c86:	2204      	movs	r2, #4
 8003c88:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f004 f9a9 	bl	8007fea <USB_HC_Halt>
 8003c98:	e03f      	b.n	8003d1a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	3326      	adds	r3, #38	@ 0x26
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	3326      	adds	r3, #38	@ 0x26
 8003cc0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d129      	bne.n	8003d1a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003cc6:	78fa      	ldrb	r2, [r7, #3]
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3344      	adds	r3, #68	@ 0x44
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	799b      	ldrb	r3, [r3, #6]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HCD_HC_IN_IRQHandler+0xc2a>
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	331b      	adds	r3, #27
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d110      	bne.n	8003d1a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	334d      	adds	r3, #77	@ 0x4d
 8003d08:	2204      	movs	r2, #4
 8003d0a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f004 f968 	bl	8007fea <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	331b      	adds	r3, #27
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d129      	bne.n	8003d84 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	331b      	adds	r3, #27
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	0151      	lsls	r1, r2, #5
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	440a      	add	r2, r1
 8003d5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d62:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	0151      	lsls	r1, r2, #5
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	440a      	add	r2, r1
 8003d7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d7e:	f043 0320 	orr.w	r3, r3, #32
 8003d82:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d90:	461a      	mov	r2, r3
 8003d92:	2310      	movs	r3, #16
 8003d94:	6093      	str	r3, [r2, #8]
 8003d96:	e000      	b.n	8003d9a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003d98:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f003 fb6f 	bl	80074a2 <USB_ReadChInterrupts>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d11b      	bne.n	8003e06 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2304      	movs	r3, #4
 8003dde:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003de0:	78fa      	ldrb	r2, [r7, #3]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	334d      	adds	r3, #77	@ 0x4d
 8003df0:	2207      	movs	r2, #7
 8003df2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f004 f8f4 	bl	8007fea <USB_HC_Halt>
 8003e02:	f000 bc89 	b.w	8004718 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f003 fb47 	bl	80074a2 <USB_ReadChInterrupts>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	f040 8082 	bne.w	8003f24 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2320      	movs	r3, #32
 8003e30:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003e32:	78fa      	ldrb	r2, [r7, #3]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	3319      	adds	r3, #25
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d124      	bne.n	8003e92 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003e48:	78fa      	ldrb	r2, [r7, #3]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	3319      	adds	r3, #25
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e5c:	78fa      	ldrb	r2, [r7, #3]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	334c      	adds	r3, #76	@ 0x4c
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	334d      	adds	r3, #77	@ 0x4d
 8003e80:	2203      	movs	r2, #3
 8003e82:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f004 f8ac 	bl	8007fea <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003e92:	78fa      	ldrb	r2, [r7, #3]
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	331a      	adds	r3, #26
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	f040 8437 	bne.w	8004718 <HCD_HC_OUT_IRQHandler+0x978>
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	331b      	adds	r3, #27
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f040 842b 	bne.w	8004718 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	3326      	adds	r3, #38	@ 0x26
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d009      	beq.n	8003eec <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	331b      	adds	r3, #27
 8003ee8:	2201      	movs	r2, #1
 8003eea:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003eec:	78fa      	ldrb	r2, [r7, #3]
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	334d      	adds	r3, #77	@ 0x4d
 8003efc:	2203      	movs	r2, #3
 8003efe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f004 f86e 	bl	8007fea <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3344      	adds	r3, #68	@ 0x44
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	e3f9      	b.n	8004718 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f003 fab8 	bl	80074a2 <USB_ReadChInterrupts>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f3c:	d111      	bne.n	8003f62 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f50:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	78fa      	ldrb	r2, [r7, #3]
 8003f58:	4611      	mov	r1, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f004 f845 	bl	8007fea <USB_HC_Halt>
 8003f60:	e3da      	b.n	8004718 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	78fa      	ldrb	r2, [r7, #3]
 8003f68:	4611      	mov	r1, r2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f003 fa99 	bl	80074a2 <USB_ReadChInterrupts>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d168      	bne.n	800404c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003f7a:	78fa      	ldrb	r2, [r7, #3]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	3344      	adds	r3, #68	@ 0x44
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	4611      	mov	r1, r2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f003 fa83 	bl	80074a2 <USB_ReadChInterrupts>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa2:	2b40      	cmp	r3, #64	@ 0x40
 8003fa4:	d112      	bne.n	8003fcc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003fa6:	78fa      	ldrb	r2, [r7, #3]
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	3319      	adds	r3, #25
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	2340      	movs	r3, #64	@ 0x40
 8003fca:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	331b      	adds	r3, #27
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d019      	beq.n	8004016 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	331b      	adds	r3, #27
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	0151      	lsls	r1, r2, #5
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	440a      	add	r2, r1
 800400c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004010:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004014:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4413      	add	r3, r2
 800401e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004022:	461a      	mov	r2, r3
 8004024:	2301      	movs	r3, #1
 8004026:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	334d      	adds	r3, #77	@ 0x4d
 8004038:	2201      	movs	r2, #1
 800403a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	78fa      	ldrb	r2, [r7, #3]
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f003 ffd0 	bl	8007fea <USB_HC_Halt>
 800404a:	e365      	b.n	8004718 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f003 fa24 	bl	80074a2 <USB_ReadChInterrupts>
 800405a:	4603      	mov	r3, r0
 800405c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004060:	2b40      	cmp	r3, #64	@ 0x40
 8004062:	d139      	bne.n	80040d8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	334d      	adds	r3, #77	@ 0x4d
 8004074:	2205      	movs	r2, #5
 8004076:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	331a      	adds	r3, #26
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d109      	bne.n	80040a2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800408e:	78fa      	ldrb	r2, [r7, #3]
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	1a9b      	subs	r3, r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	3319      	adds	r3, #25
 800409e:	2201      	movs	r2, #1
 80040a0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80040a2:	78fa      	ldrb	r2, [r7, #3]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	3344      	adds	r3, #68	@ 0x44
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	78fa      	ldrb	r2, [r7, #3]
 80040bc:	4611      	mov	r1, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f003 ff93 	bl	8007fea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d0:	461a      	mov	r2, r3
 80040d2:	2340      	movs	r3, #64	@ 0x40
 80040d4:	6093      	str	r3, [r2, #8]
 80040d6:	e31f      	b.n	8004718 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	78fa      	ldrb	r2, [r7, #3]
 80040de:	4611      	mov	r1, r2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f003 f9de 	bl	80074a2 <USB_ReadChInterrupts>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d11a      	bne.n	8004126 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040fc:	461a      	mov	r2, r3
 80040fe:	2308      	movs	r3, #8
 8004100:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	334d      	adds	r3, #77	@ 0x4d
 8004112:	2206      	movs	r2, #6
 8004114:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	4611      	mov	r1, r2
 800411e:	4618      	mov	r0, r3
 8004120:	f003 ff63 	bl	8007fea <USB_HC_Halt>
 8004124:	e2f8      	b.n	8004718 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	78fa      	ldrb	r2, [r7, #3]
 800412c:	4611      	mov	r1, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f003 f9b7 	bl	80074a2 <USB_ReadChInterrupts>
 8004134:	4603      	mov	r3, r0
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	2b10      	cmp	r3, #16
 800413c:	d144      	bne.n	80041c8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	3344      	adds	r3, #68	@ 0x44
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004152:	78fa      	ldrb	r2, [r7, #3]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	334d      	adds	r3, #77	@ 0x4d
 8004162:	2204      	movs	r2, #4
 8004164:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004166:	78fa      	ldrb	r2, [r7, #3]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	3319      	adds	r3, #25
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d114      	bne.n	80041a6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	3318      	adds	r3, #24
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004192:	78fa      	ldrb	r2, [r7, #3]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	3319      	adds	r3, #25
 80041a2:	2201      	movs	r2, #1
 80041a4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f003 ff1b 	bl	8007fea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c0:	461a      	mov	r2, r3
 80041c2:	2310      	movs	r3, #16
 80041c4:	6093      	str	r3, [r2, #8]
 80041c6:	e2a7      	b.n	8004718 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	78fa      	ldrb	r2, [r7, #3]
 80041ce:	4611      	mov	r1, r2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f003 f966 	bl	80074a2 <USB_ReadChInterrupts>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041dc:	2b80      	cmp	r3, #128	@ 0x80
 80041de:	f040 8083 	bne.w	80042e8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	799b      	ldrb	r3, [r3, #6]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d111      	bne.n	800420e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	334d      	adds	r3, #77	@ 0x4d
 80041fa:	2207      	movs	r2, #7
 80041fc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	78fa      	ldrb	r2, [r7, #3]
 8004204:	4611      	mov	r1, r2
 8004206:	4618      	mov	r0, r3
 8004208:	f003 feef 	bl	8007fea <USB_HC_Halt>
 800420c:	e062      	b.n	80042d4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	3344      	adds	r3, #68	@ 0x44
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	1c59      	adds	r1, r3, #1
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4403      	add	r3, r0
 800422e:	3344      	adds	r3, #68	@ 0x44
 8004230:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	3344      	adds	r3, #68	@ 0x44
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d922      	bls.n	800428e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	3344      	adds	r3, #68	@ 0x44
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800425c:	78fa      	ldrb	r2, [r7, #3]
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	334c      	adds	r3, #76	@ 0x4c
 800426c:	2204      	movs	r2, #4
 800426e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	334c      	adds	r3, #76	@ 0x4c
 8004280:	781a      	ldrb	r2, [r3, #0]
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	4619      	mov	r1, r3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f006 fa08 	bl	800a69c <HAL_HCD_HC_NotifyURBChange_Callback>
 800428c:	e022      	b.n	80042d4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	334c      	adds	r3, #76	@ 0x4c
 800429e:	2202      	movs	r2, #2
 80042a0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042b8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042c0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ce:	461a      	mov	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042e0:	461a      	mov	r2, r3
 80042e2:	2380      	movs	r3, #128	@ 0x80
 80042e4:	6093      	str	r3, [r2, #8]
 80042e6:	e217      	b.n	8004718 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	78fa      	ldrb	r2, [r7, #3]
 80042ee:	4611      	mov	r1, r2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f003 f8d6 	bl	80074a2 <USB_ReadChInterrupts>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004300:	d11b      	bne.n	800433a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004302:	78fa      	ldrb	r2, [r7, #3]
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	334d      	adds	r3, #77	@ 0x4d
 8004312:	2209      	movs	r2, #9
 8004314:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	78fa      	ldrb	r2, [r7, #3]
 800431c:	4611      	mov	r1, r2
 800431e:	4618      	mov	r0, r3
 8004320:	f003 fe63 	bl	8007fea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4413      	add	r3, r2
 800432c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004330:	461a      	mov	r2, r3
 8004332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004336:	6093      	str	r3, [r2, #8]
 8004338:	e1ee      	b.n	8004718 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	78fa      	ldrb	r2, [r7, #3]
 8004340:	4611      	mov	r1, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f003 f8ad 	bl	80074a2 <USB_ReadChInterrupts>
 8004348:	4603      	mov	r3, r0
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b02      	cmp	r3, #2
 8004350:	f040 81df 	bne.w	8004712 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4413      	add	r3, r2
 800435c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004360:	461a      	mov	r2, r3
 8004362:	2302      	movs	r3, #2
 8004364:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004366:	78fa      	ldrb	r2, [r7, #3]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	334d      	adds	r3, #77	@ 0x4d
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	f040 8093 	bne.w	80044a4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800437e:	78fa      	ldrb	r2, [r7, #3]
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	334d      	adds	r3, #77	@ 0x4d
 800438e:	2202      	movs	r2, #2
 8004390:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004392:	78fa      	ldrb	r2, [r7, #3]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	334c      	adds	r3, #76	@ 0x4c
 80043a2:	2201      	movs	r2, #1
 80043a4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	3326      	adds	r3, #38	@ 0x26
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d00b      	beq.n	80043d4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80043bc:	78fa      	ldrb	r2, [r7, #3]
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	3326      	adds	r3, #38	@ 0x26
 80043cc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	f040 8190 	bne.w	80046f4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	799b      	ldrb	r3, [r3, #6]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d115      	bne.n	8004408 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	333d      	adds	r3, #61	@ 0x3d
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	f083 0301 	eor.w	r3, r3, #1
 80043f4:	b2d8      	uxtb	r0, r3
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	333d      	adds	r3, #61	@ 0x3d
 8004404:	4602      	mov	r2, r0
 8004406:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	799b      	ldrb	r3, [r3, #6]
 800440c:	2b01      	cmp	r3, #1
 800440e:	f040 8171 	bne.w	80046f4 <HCD_HC_OUT_IRQHandler+0x954>
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	3334      	adds	r3, #52	@ 0x34
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8165 	beq.w	80046f4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	3334      	adds	r3, #52	@ 0x34
 800443a:	6819      	ldr	r1, [r3, #0]
 800443c:	78fa      	ldrb	r2, [r7, #3]
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4403      	add	r3, r0
 800444a:	3328      	adds	r3, #40	@ 0x28
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	440b      	add	r3, r1
 8004450:	1e59      	subs	r1, r3, #1
 8004452:	78fa      	ldrb	r2, [r7, #3]
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4403      	add	r3, r0
 8004460:	3328      	adds	r3, #40	@ 0x28
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	fbb1 f3f3 	udiv	r3, r1, r3
 8004468:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 813f 	beq.w	80046f4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004476:	78fa      	ldrb	r2, [r7, #3]
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	1a9b      	subs	r3, r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	333d      	adds	r3, #61	@ 0x3d
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	78fa      	ldrb	r2, [r7, #3]
 800448a:	f083 0301 	eor.w	r3, r3, #1
 800448e:	b2d8      	uxtb	r0, r3
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	333d      	adds	r3, #61	@ 0x3d
 800449e:	4602      	mov	r2, r0
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	e127      	b.n	80046f4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80044a4:	78fa      	ldrb	r2, [r7, #3]
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	4613      	mov	r3, r2
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	334d      	adds	r3, #77	@ 0x4d
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d120      	bne.n	80044fc <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044ba:	78fa      	ldrb	r2, [r7, #3]
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	334d      	adds	r3, #77	@ 0x4d
 80044ca:	2202      	movs	r2, #2
 80044cc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80044ce:	78fa      	ldrb	r2, [r7, #3]
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	4613      	mov	r3, r2
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	1a9b      	subs	r3, r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	331b      	adds	r3, #27
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	f040 8107 	bne.w	80046f4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044e6:	78fa      	ldrb	r2, [r7, #3]
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	1a9b      	subs	r3, r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	334c      	adds	r3, #76	@ 0x4c
 80044f6:	2202      	movs	r2, #2
 80044f8:	701a      	strb	r2, [r3, #0]
 80044fa:	e0fb      	b.n	80046f4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80044fc:	78fa      	ldrb	r2, [r7, #3]
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	1a9b      	subs	r3, r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	334d      	adds	r3, #77	@ 0x4d
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b04      	cmp	r3, #4
 8004510:	d13a      	bne.n	8004588 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004512:	78fa      	ldrb	r2, [r7, #3]
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	334d      	adds	r3, #77	@ 0x4d
 8004522:	2202      	movs	r2, #2
 8004524:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004526:	78fa      	ldrb	r2, [r7, #3]
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	4613      	mov	r3, r2
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	1a9b      	subs	r3, r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	440b      	add	r3, r1
 8004534:	334c      	adds	r3, #76	@ 0x4c
 8004536:	2202      	movs	r2, #2
 8004538:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800453a:	78fa      	ldrb	r2, [r7, #3]
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	1a9b      	subs	r3, r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	331b      	adds	r3, #27
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b01      	cmp	r3, #1
 800454e:	f040 80d1 	bne.w	80046f4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	331b      	adds	r3, #27
 8004562:	2200      	movs	r2, #0
 8004564:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	4413      	add	r3, r2
 800456e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	0151      	lsls	r1, r2, #5
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	440a      	add	r2, r1
 800457c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004584:	6053      	str	r3, [r2, #4]
 8004586:	e0b5      	b.n	80046f4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004588:	78fa      	ldrb	r2, [r7, #3]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	334d      	adds	r3, #77	@ 0x4d
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b05      	cmp	r3, #5
 800459c:	d114      	bne.n	80045c8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	334d      	adds	r3, #77	@ 0x4d
 80045ae:	2202      	movs	r2, #2
 80045b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	334c      	adds	r3, #76	@ 0x4c
 80045c2:	2202      	movs	r2, #2
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	e095      	b.n	80046f4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	334d      	adds	r3, #77	@ 0x4d
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b06      	cmp	r3, #6
 80045dc:	d114      	bne.n	8004608 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	334d      	adds	r3, #77	@ 0x4d
 80045ee:	2202      	movs	r2, #2
 80045f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	334c      	adds	r3, #76	@ 0x4c
 8004602:	2205      	movs	r2, #5
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	e075      	b.n	80046f4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004608:	78fa      	ldrb	r2, [r7, #3]
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	334d      	adds	r3, #77	@ 0x4d
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b07      	cmp	r3, #7
 800461c:	d00a      	beq.n	8004634 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	1a9b      	subs	r3, r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	334d      	adds	r3, #77	@ 0x4d
 800462e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004630:	2b09      	cmp	r3, #9
 8004632:	d170      	bne.n	8004716 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	334d      	adds	r3, #77	@ 0x4d
 8004644:	2202      	movs	r2, #2
 8004646:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004648:	78fa      	ldrb	r2, [r7, #3]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	3344      	adds	r3, #68	@ 0x44
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	1c59      	adds	r1, r3, #1
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4403      	add	r3, r0
 8004668:	3344      	adds	r3, #68	@ 0x44
 800466a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	3344      	adds	r3, #68	@ 0x44
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d914      	bls.n	80046ac <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	3344      	adds	r3, #68	@ 0x44
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004696:	78fa      	ldrb	r2, [r7, #3]
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	334c      	adds	r3, #76	@ 0x4c
 80046a6:	2204      	movs	r2, #4
 80046a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046aa:	e022      	b.n	80046f2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	334c      	adds	r3, #76	@ 0x4c
 80046bc:	2202      	movs	r2, #2
 80046be:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046d6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80046de:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ec:	461a      	mov	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046f2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80046f4:	78fa      	ldrb	r2, [r7, #3]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	334c      	adds	r3, #76	@ 0x4c
 8004704:	781a      	ldrb	r2, [r3, #0]
 8004706:	78fb      	ldrb	r3, [r7, #3]
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f005 ffc6 	bl	800a69c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004710:	e002      	b.n	8004718 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004712:	bf00      	nop
 8004714:	e000      	b.n	8004718 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004716:	bf00      	nop
  }
}
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b08a      	sub	sp, #40	@ 0x28
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	0c5b      	lsrs	r3, r3, #17
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004752:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d004      	beq.n	8004764 <HCD_RXQLVL_IRQHandler+0x46>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b05      	cmp	r3, #5
 800475e:	f000 80b6 	beq.w	80048ce <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004762:	e0b7      	b.n	80048d4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80b3 	beq.w	80048d2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4613      	mov	r3, r2
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	332c      	adds	r3, #44	@ 0x2c
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 80a7 	beq.w	80048d2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4613      	mov	r3, r2
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	3338      	adds	r3, #56	@ 0x38
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	18d1      	adds	r1, r2, r3
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4613      	mov	r3, r2
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4403      	add	r3, r0
 80047a8:	3334      	adds	r3, #52	@ 0x34
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4299      	cmp	r1, r3
 80047ae:	f200 8083 	bhi.w	80048b8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	332c      	adds	r3, #44	@ 0x2c
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	b292      	uxth	r2, r2
 80047cc:	4619      	mov	r1, r3
 80047ce:	f002 fdfd 	bl	80073cc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4613      	mov	r3, r2
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	332c      	adds	r3, #44	@ 0x2c
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	18d1      	adds	r1, r2, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4613      	mov	r3, r2
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4403      	add	r3, r0
 80047f6:	332c      	adds	r3, #44	@ 0x2c
 80047f8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4613      	mov	r3, r2
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	3338      	adds	r3, #56	@ 0x38
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	18d1      	adds	r1, r2, r3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4613      	mov	r3, r2
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4403      	add	r3, r0
 800481e:	3338      	adds	r3, #56	@ 0x38
 8004820:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	4413      	add	r3, r2
 800482a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	0cdb      	lsrs	r3, r3, #19
 8004832:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004836:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4613      	mov	r3, r2
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	3328      	adds	r3, #40	@ 0x28
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4293      	cmp	r3, r2
 8004850:	d13f      	bne.n	80048d2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d03c      	beq.n	80048d2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	4413      	add	r3, r2
 8004860:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800486e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004876:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	4413      	add	r3, r2
 8004880:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004884:	461a      	mov	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4613      	mov	r3, r2
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	333c      	adds	r3, #60	@ 0x3c
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	f083 0301 	eor.w	r3, r3, #1
 80048a0:	b2d8      	uxtb	r0, r3
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4613      	mov	r3, r2
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	1a9b      	subs	r3, r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	440b      	add	r3, r1
 80048b0:	333c      	adds	r3, #60	@ 0x3c
 80048b2:	4602      	mov	r2, r0
 80048b4:	701a      	strb	r2, [r3, #0]
      break;
 80048b6:	e00c      	b.n	80048d2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	4613      	mov	r3, r2
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	1a9b      	subs	r3, r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	334c      	adds	r3, #76	@ 0x4c
 80048c8:	2204      	movs	r2, #4
 80048ca:	701a      	strb	r2, [r3, #0]
      break;
 80048cc:	e001      	b.n	80048d2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80048ce:	bf00      	nop
 80048d0:	e000      	b.n	80048d4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80048d2:	bf00      	nop
  }
}
 80048d4:	bf00      	nop
 80048d6:	3728      	adds	r7, #40	@ 0x28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004908:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b02      	cmp	r3, #2
 8004912:	d10b      	bne.n	800492c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b01      	cmp	r3, #1
 800491c:	d102      	bne.n	8004924 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f005 fea0 	bl	800a664 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f043 0302 	orr.w	r3, r3, #2
 800492a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b08      	cmp	r3, #8
 8004934:	d132      	bne.n	800499c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f043 0308 	orr.w	r3, r3, #8
 800493c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b04      	cmp	r3, #4
 8004946:	d126      	bne.n	8004996 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	7a5b      	ldrb	r3, [r3, #9]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d113      	bne.n	8004978 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004956:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800495a:	d106      	bne.n	800496a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2102      	movs	r1, #2
 8004962:	4618      	mov	r0, r3
 8004964:	f002 fec2 	bl	80076ec <USB_InitFSLSPClkSel>
 8004968:	e011      	b.n	800498e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2101      	movs	r1, #1
 8004970:	4618      	mov	r0, r3
 8004972:	f002 febb 	bl	80076ec <USB_InitFSLSPClkSel>
 8004976:	e00a      	b.n	800498e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	79db      	ldrb	r3, [r3, #7]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d106      	bne.n	800498e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004986:	461a      	mov	r2, r3
 8004988:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800498c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f005 fe92 	bl	800a6b8 <HAL_HCD_PortEnabled_Callback>
 8004994:	e002      	b.n	800499c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f005 fe9c 	bl	800a6d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d103      	bne.n	80049ae <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f043 0320 	orr.w	r3, r3, #32
 80049ac:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80049b4:	461a      	mov	r2, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	6013      	str	r3, [r2, #0]
}
 80049ba:	bf00      	nop
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e12b      	b.n	8004c2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fc f9b2 	bl	8000d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2224      	movs	r2, #36	@ 0x24
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a28:	f001 fa20 	bl	8005e6c <HAL_RCC_GetPCLK1Freq>
 8004a2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	4a81      	ldr	r2, [pc, #516]	@ (8004c38 <HAL_I2C_Init+0x274>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d807      	bhi.n	8004a48 <HAL_I2C_Init+0x84>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4a80      	ldr	r2, [pc, #512]	@ (8004c3c <HAL_I2C_Init+0x278>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	bf94      	ite	ls
 8004a40:	2301      	movls	r3, #1
 8004a42:	2300      	movhi	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	e006      	b.n	8004a56 <HAL_I2C_Init+0x92>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a7d      	ldr	r2, [pc, #500]	@ (8004c40 <HAL_I2C_Init+0x27c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	bf94      	ite	ls
 8004a50:	2301      	movls	r3, #1
 8004a52:	2300      	movhi	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e0e7      	b.n	8004c2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4a78      	ldr	r2, [pc, #480]	@ (8004c44 <HAL_I2C_Init+0x280>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	0c9b      	lsrs	r3, r3, #18
 8004a68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4a6a      	ldr	r2, [pc, #424]	@ (8004c38 <HAL_I2C_Init+0x274>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d802      	bhi.n	8004a98 <HAL_I2C_Init+0xd4>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	3301      	adds	r3, #1
 8004a96:	e009      	b.n	8004aac <HAL_I2C_Init+0xe8>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	4a69      	ldr	r2, [pc, #420]	@ (8004c48 <HAL_I2C_Init+0x284>)
 8004aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa8:	099b      	lsrs	r3, r3, #6
 8004aaa:	3301      	adds	r3, #1
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004abe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	495c      	ldr	r1, [pc, #368]	@ (8004c38 <HAL_I2C_Init+0x274>)
 8004ac8:	428b      	cmp	r3, r1
 8004aca:	d819      	bhi.n	8004b00 <HAL_I2C_Init+0x13c>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1e59      	subs	r1, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ada:	1c59      	adds	r1, r3, #1
 8004adc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004ae0:	400b      	ands	r3, r1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <HAL_I2C_Init+0x138>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1e59      	subs	r1, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004af4:	3301      	adds	r3, #1
 8004af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afa:	e051      	b.n	8004ba0 <HAL_I2C_Init+0x1dc>
 8004afc:	2304      	movs	r3, #4
 8004afe:	e04f      	b.n	8004ba0 <HAL_I2C_Init+0x1dc>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d111      	bne.n	8004b2c <HAL_I2C_Init+0x168>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	1e58      	subs	r0, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6859      	ldr	r1, [r3, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	440b      	add	r3, r1
 8004b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bf0c      	ite	eq
 8004b24:	2301      	moveq	r3, #1
 8004b26:	2300      	movne	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	e012      	b.n	8004b52 <HAL_I2C_Init+0x18e>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	1e58      	subs	r0, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6859      	ldr	r1, [r3, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	0099      	lsls	r1, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b42:	3301      	adds	r3, #1
 8004b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf0c      	ite	eq
 8004b4c:	2301      	moveq	r3, #1
 8004b4e:	2300      	movne	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_I2C_Init+0x196>
 8004b56:	2301      	movs	r3, #1
 8004b58:	e022      	b.n	8004ba0 <HAL_I2C_Init+0x1dc>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10e      	bne.n	8004b80 <HAL_I2C_Init+0x1bc>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1e58      	subs	r0, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6859      	ldr	r1, [r3, #4]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	440b      	add	r3, r1
 8004b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b74:	3301      	adds	r3, #1
 8004b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b7e:	e00f      	b.n	8004ba0 <HAL_I2C_Init+0x1dc>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	1e58      	subs	r0, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6859      	ldr	r1, [r3, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	0099      	lsls	r1, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b96:	3301      	adds	r3, #1
 8004b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	6809      	ldr	r1, [r1, #0]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004bce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6911      	ldr	r1, [r2, #16]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68d2      	ldr	r2, [r2, #12]
 8004bda:	4311      	orrs	r1, r2
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	430b      	orrs	r3, r1
 8004be2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0201 	orr.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	000186a0 	.word	0x000186a0
 8004c3c:	001e847f 	.word	0x001e847f
 8004c40:	003d08ff 	.word	0x003d08ff
 8004c44:	431bde83 	.word	0x431bde83
 8004c48:	10624dd3 	.word	0x10624dd3

08004c4c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e128      	b.n	8004eb0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a90      	ldr	r2, [pc, #576]	@ (8004eb8 <HAL_I2S_Init+0x26c>)
 8004c76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7fc f8b3 	bl	8000de4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2202      	movs	r2, #2
 8004c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6812      	ldr	r2, [r2, #0]
 8004c90:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004c94:	f023 030f 	bic.w	r3, r3, #15
 8004c98:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d060      	beq.n	8004d6c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d102      	bne.n	8004cb8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004cb2:	2310      	movs	r3, #16
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	e001      	b.n	8004cbc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004cb8:	2320      	movs	r3, #32
 8004cba:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d802      	bhi.n	8004cca <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004cca:	2001      	movs	r0, #1
 8004ccc:	f001 f9d8 	bl	8006080 <HAL_RCCEx_GetPeriphCLKFreq>
 8004cd0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cda:	d125      	bne.n	8004d28 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d010      	beq.n	8004d06 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d00:	3305      	adds	r3, #5
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	e01f      	b.n	8004d46 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	461a      	mov	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d22:	3305      	adds	r3, #5
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	e00e      	b.n	8004d46 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	461a      	mov	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d42:	3305      	adds	r3, #5
 8004d44:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4a5c      	ldr	r2, [pc, #368]	@ (8004ebc <HAL_I2S_Init+0x270>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	08db      	lsrs	r3, r3, #3
 8004d50:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	085b      	lsrs	r3, r3, #1
 8004d62:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	021b      	lsls	r3, r3, #8
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	e003      	b.n	8004d74 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d902      	bls.n	8004d80 <HAL_I2S_Init+0x134>
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	2bff      	cmp	r3, #255	@ 0xff
 8004d7e:	d907      	bls.n	8004d90 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d84:	f043 0210 	orr.w	r2, r3, #16
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e08f      	b.n	8004eb0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	ea42 0103 	orr.w	r1, r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004dae:	f023 030f 	bic.w	r3, r3, #15
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6851      	ldr	r1, [r2, #4]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6892      	ldr	r2, [r2, #8]
 8004dba:	4311      	orrs	r1, r2
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	68d2      	ldr	r2, [r2, #12]
 8004dc0:	4311      	orrs	r1, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6992      	ldr	r2, [r2, #24]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dd2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d161      	bne.n	8004ea0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a38      	ldr	r2, [pc, #224]	@ (8004ec0 <HAL_I2S_Init+0x274>)
 8004de0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a37      	ldr	r2, [pc, #220]	@ (8004ec4 <HAL_I2S_Init+0x278>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d101      	bne.n	8004df0 <HAL_I2S_Init+0x1a4>
 8004dec:	4b36      	ldr	r3, [pc, #216]	@ (8004ec8 <HAL_I2S_Init+0x27c>)
 8004dee:	e001      	b.n	8004df4 <HAL_I2S_Init+0x1a8>
 8004df0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	4932      	ldr	r1, [pc, #200]	@ (8004ec4 <HAL_I2S_Init+0x278>)
 8004dfc:	428a      	cmp	r2, r1
 8004dfe:	d101      	bne.n	8004e04 <HAL_I2S_Init+0x1b8>
 8004e00:	4a31      	ldr	r2, [pc, #196]	@ (8004ec8 <HAL_I2S_Init+0x27c>)
 8004e02:	e001      	b.n	8004e08 <HAL_I2S_Init+0x1bc>
 8004e04:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004e08:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004e0c:	f023 030f 	bic.w	r3, r3, #15
 8004e10:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a2b      	ldr	r2, [pc, #172]	@ (8004ec4 <HAL_I2S_Init+0x278>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d101      	bne.n	8004e20 <HAL_I2S_Init+0x1d4>
 8004e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec8 <HAL_I2S_Init+0x27c>)
 8004e1e:	e001      	b.n	8004e24 <HAL_I2S_Init+0x1d8>
 8004e20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e24:	2202      	movs	r2, #2
 8004e26:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a25      	ldr	r2, [pc, #148]	@ (8004ec4 <HAL_I2S_Init+0x278>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d101      	bne.n	8004e36 <HAL_I2S_Init+0x1ea>
 8004e32:	4b25      	ldr	r3, [pc, #148]	@ (8004ec8 <HAL_I2S_Init+0x27c>)
 8004e34:	e001      	b.n	8004e3a <HAL_I2S_Init+0x1ee>
 8004e36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e46:	d003      	beq.n	8004e50 <HAL_I2S_Init+0x204>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d103      	bne.n	8004e58 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004e50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	e001      	b.n	8004e5c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e66:	4313      	orrs	r3, r2
 8004e68:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e70:	4313      	orrs	r3, r2
 8004e72:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	897b      	ldrh	r3, [r7, #10]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004e88:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8004ec4 <HAL_I2S_Init+0x278>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d101      	bne.n	8004e98 <HAL_I2S_Init+0x24c>
 8004e94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <HAL_I2S_Init+0x27c>)
 8004e96:	e001      	b.n	8004e9c <HAL_I2S_Init+0x250>
 8004e98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e9c:	897a      	ldrh	r2, [r7, #10]
 8004e9e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3720      	adds	r7, #32
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	08004fc3 	.word	0x08004fc3
 8004ebc:	cccccccd 	.word	0xcccccccd
 8004ec0:	080050d9 	.word	0x080050d9
 8004ec4:	40003800 	.word	0x40003800
 8004ec8:	40003400 	.word	0x40003400

08004ecc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f14:	881a      	ldrh	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f20:	1c9a      	adds	r2, r3, #2
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10e      	bne.n	8004f5c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f4c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff ffb8 	bl	8004ecc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f76:	b292      	uxth	r2, r2
 8004f78:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7e:	1c9a      	adds	r2, r3, #2
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10e      	bne.n	8004fba <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004faa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff ff93 	bl	8004ee0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004fba:	bf00      	nop
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b086      	sub	sp, #24
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d13a      	bne.n	8005054 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d109      	bne.n	8004ffc <I2S_IRQHandler+0x3a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff2:	2b40      	cmp	r3, #64	@ 0x40
 8004ff4:	d102      	bne.n	8004ffc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff ffb4 	bl	8004f64 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005002:	2b40      	cmp	r3, #64	@ 0x40
 8005004:	d126      	bne.n	8005054 <I2S_IRQHandler+0x92>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f003 0320 	and.w	r3, r3, #32
 8005010:	2b20      	cmp	r3, #32
 8005012:	d11f      	bne.n	8005054 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005022:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005024:	2300      	movs	r3, #0
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005046:	f043 0202 	orr.w	r2, r3, #2
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff ff50 	bl	8004ef4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b03      	cmp	r3, #3
 800505e:	d136      	bne.n	80050ce <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b02      	cmp	r3, #2
 8005068:	d109      	bne.n	800507e <I2S_IRQHandler+0xbc>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005074:	2b80      	cmp	r3, #128	@ 0x80
 8005076:	d102      	bne.n	800507e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff ff45 	bl	8004f08 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b08      	cmp	r3, #8
 8005086:	d122      	bne.n	80050ce <I2S_IRQHandler+0x10c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f003 0320 	and.w	r3, r3, #32
 8005092:	2b20      	cmp	r3, #32
 8005094:	d11b      	bne.n	80050ce <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80050a4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c0:	f043 0204 	orr.w	r2, r3, #4
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff ff13 	bl	8004ef4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050ce:	bf00      	nop
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a92      	ldr	r2, [pc, #584]	@ (8005338 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d101      	bne.n	80050f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80050f2:	4b92      	ldr	r3, [pc, #584]	@ (800533c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050f4:	e001      	b.n	80050fa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80050f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a8b      	ldr	r2, [pc, #556]	@ (8005338 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d101      	bne.n	8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005110:	4b8a      	ldr	r3, [pc, #552]	@ (800533c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005112:	e001      	b.n	8005118 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005114:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005124:	d004      	beq.n	8005130 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	f040 8099 	bne.w	8005262 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b02      	cmp	r3, #2
 8005138:	d107      	bne.n	800514a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f925 	bl	8005394 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b01      	cmp	r3, #1
 8005152:	d107      	bne.n	8005164 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f9c8 	bl	80054f4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516a:	2b40      	cmp	r3, #64	@ 0x40
 800516c:	d13a      	bne.n	80051e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d035      	beq.n	80051e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a6e      	ldr	r2, [pc, #440]	@ (8005338 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d101      	bne.n	8005186 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005182:	4b6e      	ldr	r3, [pc, #440]	@ (800533c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005184:	e001      	b.n	800518a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005186:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4969      	ldr	r1, [pc, #420]	@ (8005338 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005192:	428b      	cmp	r3, r1
 8005194:	d101      	bne.n	800519a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005196:	4b69      	ldr	r3, [pc, #420]	@ (800533c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005198:	e001      	b.n	800519e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800519a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800519e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80051a2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80051b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d6:	f043 0202 	orr.w	r2, r3, #2
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff fe88 	bl	8004ef4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	f040 80c3 	bne.w	8005376 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 80bd 	beq.w	8005376 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800520a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a49      	ldr	r2, [pc, #292]	@ (8005338 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d101      	bne.n	800521a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005216:	4b49      	ldr	r3, [pc, #292]	@ (800533c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005218:	e001      	b.n	800521e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800521a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4944      	ldr	r1, [pc, #272]	@ (8005338 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005226:	428b      	cmp	r3, r1
 8005228:	d101      	bne.n	800522e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800522a:	4b44      	ldr	r3, [pc, #272]	@ (800533c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800522c:	e001      	b.n	8005232 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800522e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005232:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005236:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005238:	2300      	movs	r3, #0
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005252:	f043 0204 	orr.w	r2, r3, #4
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fe4a 	bl	8004ef4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005260:	e089      	b.n	8005376 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b02      	cmp	r3, #2
 800526a:	d107      	bne.n	800527c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f8be 	bl	80053f8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b01      	cmp	r3, #1
 8005284:	d107      	bne.n	8005296 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f8fd 	bl	8005490 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529c:	2b40      	cmp	r3, #64	@ 0x40
 800529e:	d12f      	bne.n	8005300 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d02a      	beq.n	8005300 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80052b8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1e      	ldr	r2, [pc, #120]	@ (8005338 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d101      	bne.n	80052c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80052c4:	4b1d      	ldr	r3, [pc, #116]	@ (800533c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052c6:	e001      	b.n	80052cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80052c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4919      	ldr	r1, [pc, #100]	@ (8005338 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052d4:	428b      	cmp	r3, r1
 80052d6:	d101      	bne.n	80052dc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80052d8:	4b18      	ldr	r3, [pc, #96]	@ (800533c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052da:	e001      	b.n	80052e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80052dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80052e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f2:	f043 0202 	orr.w	r2, r3, #2
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7ff fdfa 	bl	8004ef4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b08      	cmp	r3, #8
 8005308:	d136      	bne.n	8005378 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b00      	cmp	r3, #0
 8005312:	d031      	beq.n	8005378 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a07      	ldr	r2, [pc, #28]	@ (8005338 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d101      	bne.n	8005322 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800531e:	4b07      	ldr	r3, [pc, #28]	@ (800533c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005320:	e001      	b.n	8005326 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005322:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4902      	ldr	r1, [pc, #8]	@ (8005338 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800532e:	428b      	cmp	r3, r1
 8005330:	d106      	bne.n	8005340 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005332:	4b02      	ldr	r3, [pc, #8]	@ (800533c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005334:	e006      	b.n	8005344 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005336:	bf00      	nop
 8005338:	40003800 	.word	0x40003800
 800533c:	40003400 	.word	0x40003400
 8005340:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005344:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005348:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005358:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005366:	f043 0204 	orr.w	r2, r3, #4
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff fdc0 	bl	8004ef4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005374:	e000      	b.n	8005378 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005376:	bf00      	nop
}
 8005378:	bf00      	nop
 800537a:	3720      	adds	r7, #32
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a0:	1c99      	adds	r1, r3, #2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6251      	str	r1, [r2, #36]	@ 0x24
 80053a6:	881a      	ldrh	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d113      	bne.n	80053ee <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80053d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d106      	bne.n	80053ee <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7ff ffc9 	bl	8005380 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053ee:	bf00      	nop
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005404:	1c99      	adds	r1, r3, #2
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6251      	str	r1, [r2, #36]	@ 0x24
 800540a:	8819      	ldrh	r1, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1d      	ldr	r2, [pc, #116]	@ (8005488 <I2SEx_TxISR_I2SExt+0x90>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d101      	bne.n	800541a <I2SEx_TxISR_I2SExt+0x22>
 8005416:	4b1d      	ldr	r3, [pc, #116]	@ (800548c <I2SEx_TxISR_I2SExt+0x94>)
 8005418:	e001      	b.n	800541e <I2SEx_TxISR_I2SExt+0x26>
 800541a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800541e:	460a      	mov	r2, r1
 8005420:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005426:	b29b      	uxth	r3, r3
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d121      	bne.n	800547e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a12      	ldr	r2, [pc, #72]	@ (8005488 <I2SEx_TxISR_I2SExt+0x90>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d101      	bne.n	8005448 <I2SEx_TxISR_I2SExt+0x50>
 8005444:	4b11      	ldr	r3, [pc, #68]	@ (800548c <I2SEx_TxISR_I2SExt+0x94>)
 8005446:	e001      	b.n	800544c <I2SEx_TxISR_I2SExt+0x54>
 8005448:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	490d      	ldr	r1, [pc, #52]	@ (8005488 <I2SEx_TxISR_I2SExt+0x90>)
 8005454:	428b      	cmp	r3, r1
 8005456:	d101      	bne.n	800545c <I2SEx_TxISR_I2SExt+0x64>
 8005458:	4b0c      	ldr	r3, [pc, #48]	@ (800548c <I2SEx_TxISR_I2SExt+0x94>)
 800545a:	e001      	b.n	8005460 <I2SEx_TxISR_I2SExt+0x68>
 800545c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005460:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005464:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d106      	bne.n	800547e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff ff81 	bl	8005380 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40003800 	.word	0x40003800
 800548c:	40003400 	.word	0x40003400

08005490 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68d8      	ldr	r0, [r3, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a2:	1c99      	adds	r1, r3, #2
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80054a8:	b282      	uxth	r2, r0
 80054aa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d113      	bne.n	80054ec <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80054d2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff ff4a 	bl	8005380 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054ec:	bf00      	nop
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a20      	ldr	r2, [pc, #128]	@ (8005584 <I2SEx_RxISR_I2SExt+0x90>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d101      	bne.n	800550a <I2SEx_RxISR_I2SExt+0x16>
 8005506:	4b20      	ldr	r3, [pc, #128]	@ (8005588 <I2SEx_RxISR_I2SExt+0x94>)
 8005508:	e001      	b.n	800550e <I2SEx_RxISR_I2SExt+0x1a>
 800550a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800550e:	68d8      	ldr	r0, [r3, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005514:	1c99      	adds	r1, r3, #2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800551a:	b282      	uxth	r2, r0
 800551c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d121      	bne.n	800557a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a12      	ldr	r2, [pc, #72]	@ (8005584 <I2SEx_RxISR_I2SExt+0x90>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d101      	bne.n	8005544 <I2SEx_RxISR_I2SExt+0x50>
 8005540:	4b11      	ldr	r3, [pc, #68]	@ (8005588 <I2SEx_RxISR_I2SExt+0x94>)
 8005542:	e001      	b.n	8005548 <I2SEx_RxISR_I2SExt+0x54>
 8005544:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	490d      	ldr	r1, [pc, #52]	@ (8005584 <I2SEx_RxISR_I2SExt+0x90>)
 8005550:	428b      	cmp	r3, r1
 8005552:	d101      	bne.n	8005558 <I2SEx_RxISR_I2SExt+0x64>
 8005554:	4b0c      	ldr	r3, [pc, #48]	@ (8005588 <I2SEx_RxISR_I2SExt+0x94>)
 8005556:	e001      	b.n	800555c <I2SEx_RxISR_I2SExt+0x68>
 8005558:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800555c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005560:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d106      	bne.n	800557a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff ff03 	bl	8005380 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40003800 	.word	0x40003800
 8005588:	40003400 	.word	0x40003400

0800558c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e267      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d075      	beq.n	8005696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80055aa:	4b88      	ldr	r3, [pc, #544]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 030c 	and.w	r3, r3, #12
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d00c      	beq.n	80055d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055b6:	4b85      	ldr	r3, [pc, #532]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d112      	bne.n	80055e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055c2:	4b82      	ldr	r3, [pc, #520]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055ce:	d10b      	bne.n	80055e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d0:	4b7e      	ldr	r3, [pc, #504]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d05b      	beq.n	8005694 <HAL_RCC_OscConfig+0x108>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d157      	bne.n	8005694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e242      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055f0:	d106      	bne.n	8005600 <HAL_RCC_OscConfig+0x74>
 80055f2:	4b76      	ldr	r3, [pc, #472]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a75      	ldr	r2, [pc, #468]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 80055f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e01d      	b.n	800563c <HAL_RCC_OscConfig+0xb0>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005608:	d10c      	bne.n	8005624 <HAL_RCC_OscConfig+0x98>
 800560a:	4b70      	ldr	r3, [pc, #448]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a6f      	ldr	r2, [pc, #444]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 8005610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	4b6d      	ldr	r3, [pc, #436]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a6c      	ldr	r2, [pc, #432]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 800561c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	e00b      	b.n	800563c <HAL_RCC_OscConfig+0xb0>
 8005624:	4b69      	ldr	r3, [pc, #420]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a68      	ldr	r2, [pc, #416]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 800562a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	4b66      	ldr	r3, [pc, #408]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a65      	ldr	r2, [pc, #404]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 8005636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800563a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d013      	beq.n	800566c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005644:	f7fb fe1a 	bl	800127c <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800564c:	f7fb fe16 	bl	800127c <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b64      	cmp	r3, #100	@ 0x64
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e207      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800565e:	4b5b      	ldr	r3, [pc, #364]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0f0      	beq.n	800564c <HAL_RCC_OscConfig+0xc0>
 800566a:	e014      	b.n	8005696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566c:	f7fb fe06 	bl	800127c <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005674:	f7fb fe02 	bl	800127c <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b64      	cmp	r3, #100	@ 0x64
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e1f3      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005686:	4b51      	ldr	r3, [pc, #324]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f0      	bne.n	8005674 <HAL_RCC_OscConfig+0xe8>
 8005692:	e000      	b.n	8005696 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d063      	beq.n	800576a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80056a2:	4b4a      	ldr	r3, [pc, #296]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 030c 	and.w	r3, r3, #12
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00b      	beq.n	80056c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ae:	4b47      	ldr	r3, [pc, #284]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80056b6:	2b08      	cmp	r3, #8
 80056b8:	d11c      	bne.n	80056f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ba:	4b44      	ldr	r3, [pc, #272]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d116      	bne.n	80056f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056c6:	4b41      	ldr	r3, [pc, #260]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <HAL_RCC_OscConfig+0x152>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d001      	beq.n	80056de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e1c7      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056de:	4b3b      	ldr	r3, [pc, #236]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	4937      	ldr	r1, [pc, #220]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056f2:	e03a      	b.n	800576a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d020      	beq.n	800573e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056fc:	4b34      	ldr	r3, [pc, #208]	@ (80057d0 <HAL_RCC_OscConfig+0x244>)
 80056fe:	2201      	movs	r2, #1
 8005700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005702:	f7fb fdbb 	bl	800127c <HAL_GetTick>
 8005706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005708:	e008      	b.n	800571c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800570a:	f7fb fdb7 	bl	800127c <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e1a8      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800571c:	4b2b      	ldr	r3, [pc, #172]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0f0      	beq.n	800570a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005728:	4b28      	ldr	r3, [pc, #160]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4925      	ldr	r1, [pc, #148]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 8005738:	4313      	orrs	r3, r2
 800573a:	600b      	str	r3, [r1, #0]
 800573c:	e015      	b.n	800576a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800573e:	4b24      	ldr	r3, [pc, #144]	@ (80057d0 <HAL_RCC_OscConfig+0x244>)
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005744:	f7fb fd9a 	bl	800127c <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800574c:	f7fb fd96 	bl	800127c <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e187      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800575e:	4b1b      	ldr	r3, [pc, #108]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1f0      	bne.n	800574c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d036      	beq.n	80057e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d016      	beq.n	80057ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800577e:	4b15      	ldr	r3, [pc, #84]	@ (80057d4 <HAL_RCC_OscConfig+0x248>)
 8005780:	2201      	movs	r2, #1
 8005782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005784:	f7fb fd7a 	bl	800127c <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800578c:	f7fb fd76 	bl	800127c <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e167      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800579e:	4b0b      	ldr	r3, [pc, #44]	@ (80057cc <HAL_RCC_OscConfig+0x240>)
 80057a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0f0      	beq.n	800578c <HAL_RCC_OscConfig+0x200>
 80057aa:	e01b      	b.n	80057e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ac:	4b09      	ldr	r3, [pc, #36]	@ (80057d4 <HAL_RCC_OscConfig+0x248>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057b2:	f7fb fd63 	bl	800127c <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057b8:	e00e      	b.n	80057d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ba:	f7fb fd5f 	bl	800127c <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d907      	bls.n	80057d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e150      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
 80057cc:	40023800 	.word	0x40023800
 80057d0:	42470000 	.word	0x42470000
 80057d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057d8:	4b88      	ldr	r3, [pc, #544]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 80057da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1ea      	bne.n	80057ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8097 	beq.w	8005920 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057f2:	2300      	movs	r3, #0
 80057f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057f6:	4b81      	ldr	r3, [pc, #516]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 80057f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10f      	bne.n	8005822 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005802:	2300      	movs	r3, #0
 8005804:	60bb      	str	r3, [r7, #8]
 8005806:	4b7d      	ldr	r3, [pc, #500]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	4a7c      	ldr	r2, [pc, #496]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 800580c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005810:	6413      	str	r3, [r2, #64]	@ 0x40
 8005812:	4b7a      	ldr	r3, [pc, #488]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 8005814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800581a:	60bb      	str	r3, [r7, #8]
 800581c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800581e:	2301      	movs	r3, #1
 8005820:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005822:	4b77      	ldr	r3, [pc, #476]	@ (8005a00 <HAL_RCC_OscConfig+0x474>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582a:	2b00      	cmp	r3, #0
 800582c:	d118      	bne.n	8005860 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800582e:	4b74      	ldr	r3, [pc, #464]	@ (8005a00 <HAL_RCC_OscConfig+0x474>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a73      	ldr	r2, [pc, #460]	@ (8005a00 <HAL_RCC_OscConfig+0x474>)
 8005834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800583a:	f7fb fd1f 	bl	800127c <HAL_GetTick>
 800583e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005840:	e008      	b.n	8005854 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005842:	f7fb fd1b 	bl	800127c <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e10c      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005854:	4b6a      	ldr	r3, [pc, #424]	@ (8005a00 <HAL_RCC_OscConfig+0x474>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0f0      	beq.n	8005842 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d106      	bne.n	8005876 <HAL_RCC_OscConfig+0x2ea>
 8005868:	4b64      	ldr	r3, [pc, #400]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 800586a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586c:	4a63      	ldr	r2, [pc, #396]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	6713      	str	r3, [r2, #112]	@ 0x70
 8005874:	e01c      	b.n	80058b0 <HAL_RCC_OscConfig+0x324>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2b05      	cmp	r3, #5
 800587c:	d10c      	bne.n	8005898 <HAL_RCC_OscConfig+0x30c>
 800587e:	4b5f      	ldr	r3, [pc, #380]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 8005880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005882:	4a5e      	ldr	r2, [pc, #376]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 8005884:	f043 0304 	orr.w	r3, r3, #4
 8005888:	6713      	str	r3, [r2, #112]	@ 0x70
 800588a:	4b5c      	ldr	r3, [pc, #368]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 800588c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588e:	4a5b      	ldr	r2, [pc, #364]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	6713      	str	r3, [r2, #112]	@ 0x70
 8005896:	e00b      	b.n	80058b0 <HAL_RCC_OscConfig+0x324>
 8005898:	4b58      	ldr	r3, [pc, #352]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 800589a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589c:	4a57      	ldr	r2, [pc, #348]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 800589e:	f023 0301 	bic.w	r3, r3, #1
 80058a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80058a4:	4b55      	ldr	r3, [pc, #340]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 80058a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a8:	4a54      	ldr	r2, [pc, #336]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 80058aa:	f023 0304 	bic.w	r3, r3, #4
 80058ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d015      	beq.n	80058e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b8:	f7fb fce0 	bl	800127c <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058be:	e00a      	b.n	80058d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c0:	f7fb fcdc 	bl	800127c <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e0cb      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d6:	4b49      	ldr	r3, [pc, #292]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 80058d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0ee      	beq.n	80058c0 <HAL_RCC_OscConfig+0x334>
 80058e2:	e014      	b.n	800590e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058e4:	f7fb fcca 	bl	800127c <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058ea:	e00a      	b.n	8005902 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ec:	f7fb fcc6 	bl	800127c <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e0b5      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005902:	4b3e      	ldr	r3, [pc, #248]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1ee      	bne.n	80058ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d105      	bne.n	8005920 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005914:	4b39      	ldr	r3, [pc, #228]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 8005916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005918:	4a38      	ldr	r2, [pc, #224]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 800591a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800591e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 80a1 	beq.w	8005a6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800592a:	4b34      	ldr	r3, [pc, #208]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 030c 	and.w	r3, r3, #12
 8005932:	2b08      	cmp	r3, #8
 8005934:	d05c      	beq.n	80059f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	2b02      	cmp	r3, #2
 800593c:	d141      	bne.n	80059c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800593e:	4b31      	ldr	r3, [pc, #196]	@ (8005a04 <HAL_RCC_OscConfig+0x478>)
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005944:	f7fb fc9a 	bl	800127c <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800594c:	f7fb fc96 	bl	800127c <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e087      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800595e:	4b27      	ldr	r3, [pc, #156]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f0      	bne.n	800594c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69da      	ldr	r2, [r3, #28]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005978:	019b      	lsls	r3, r3, #6
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	3b01      	subs	r3, #1
 8005984:	041b      	lsls	r3, r3, #16
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	061b      	lsls	r3, r3, #24
 800598e:	491b      	ldr	r1, [pc, #108]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 8005990:	4313      	orrs	r3, r2
 8005992:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005994:	4b1b      	ldr	r3, [pc, #108]	@ (8005a04 <HAL_RCC_OscConfig+0x478>)
 8005996:	2201      	movs	r2, #1
 8005998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800599a:	f7fb fc6f 	bl	800127c <HAL_GetTick>
 800599e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059a0:	e008      	b.n	80059b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a2:	f7fb fc6b 	bl	800127c <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d901      	bls.n	80059b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e05c      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059b4:	4b11      	ldr	r3, [pc, #68]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d0f0      	beq.n	80059a2 <HAL_RCC_OscConfig+0x416>
 80059c0:	e054      	b.n	8005a6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c2:	4b10      	ldr	r3, [pc, #64]	@ (8005a04 <HAL_RCC_OscConfig+0x478>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c8:	f7fb fc58 	bl	800127c <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d0:	f7fb fc54 	bl	800127c <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e045      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059e2:	4b06      	ldr	r3, [pc, #24]	@ (80059fc <HAL_RCC_OscConfig+0x470>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1f0      	bne.n	80059d0 <HAL_RCC_OscConfig+0x444>
 80059ee:	e03d      	b.n	8005a6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d107      	bne.n	8005a08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e038      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
 80059fc:	40023800 	.word	0x40023800
 8005a00:	40007000 	.word	0x40007000
 8005a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a08:	4b1b      	ldr	r3, [pc, #108]	@ (8005a78 <HAL_RCC_OscConfig+0x4ec>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d028      	beq.n	8005a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d121      	bne.n	8005a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d11a      	bne.n	8005a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a38:	4013      	ands	r3, r2
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d111      	bne.n	8005a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4e:	085b      	lsrs	r3, r3, #1
 8005a50:	3b01      	subs	r3, #1
 8005a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d107      	bne.n	8005a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d001      	beq.n	8005a6c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e000      	b.n	8005a6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	40023800 	.word	0x40023800

08005a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e0cc      	b.n	8005c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a90:	4b68      	ldr	r3, [pc, #416]	@ (8005c34 <HAL_RCC_ClockConfig+0x1b8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d90c      	bls.n	8005ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a9e:	4b65      	ldr	r3, [pc, #404]	@ (8005c34 <HAL_RCC_ClockConfig+0x1b8>)
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa6:	4b63      	ldr	r3, [pc, #396]	@ (8005c34 <HAL_RCC_ClockConfig+0x1b8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d001      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e0b8      	b.n	8005c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d020      	beq.n	8005b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d005      	beq.n	8005adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ad0:	4b59      	ldr	r3, [pc, #356]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	4a58      	ldr	r2, [pc, #352]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ada:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d005      	beq.n	8005af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ae8:	4b53      	ldr	r3, [pc, #332]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	4a52      	ldr	r2, [pc, #328]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005aee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005af4:	4b50      	ldr	r3, [pc, #320]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	494d      	ldr	r1, [pc, #308]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d044      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d107      	bne.n	8005b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b1a:	4b47      	ldr	r3, [pc, #284]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d119      	bne.n	8005b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e07f      	b.n	8005c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d003      	beq.n	8005b3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d107      	bne.n	8005b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e06f      	b.n	8005c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e067      	b.n	8005c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b5a:	4b37      	ldr	r3, [pc, #220]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f023 0203 	bic.w	r2, r3, #3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	4934      	ldr	r1, [pc, #208]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b6c:	f7fb fb86 	bl	800127c <HAL_GetTick>
 8005b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b72:	e00a      	b.n	8005b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b74:	f7fb fb82 	bl	800127c <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e04f      	b.n	8005c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 020c 	and.w	r2, r3, #12
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d1eb      	bne.n	8005b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b9c:	4b25      	ldr	r3, [pc, #148]	@ (8005c34 <HAL_RCC_ClockConfig+0x1b8>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d20c      	bcs.n	8005bc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005baa:	4b22      	ldr	r3, [pc, #136]	@ (8005c34 <HAL_RCC_ClockConfig+0x1b8>)
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb2:	4b20      	ldr	r3, [pc, #128]	@ (8005c34 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d001      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e032      	b.n	8005c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d008      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bd0:	4b19      	ldr	r3, [pc, #100]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	4916      	ldr	r1, [pc, #88]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d009      	beq.n	8005c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bee:	4b12      	ldr	r3, [pc, #72]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	490e      	ldr	r1, [pc, #56]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c02:	f000 f821 	bl	8005c48 <HAL_RCC_GetSysClockFreq>
 8005c06:	4602      	mov	r2, r0
 8005c08:	4b0b      	ldr	r3, [pc, #44]	@ (8005c38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	091b      	lsrs	r3, r3, #4
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	490a      	ldr	r1, [pc, #40]	@ (8005c3c <HAL_RCC_ClockConfig+0x1c0>)
 8005c14:	5ccb      	ldrb	r3, [r1, r3]
 8005c16:	fa22 f303 	lsr.w	r3, r2, r3
 8005c1a:	4a09      	ldr	r2, [pc, #36]	@ (8005c40 <HAL_RCC_ClockConfig+0x1c4>)
 8005c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005c1e:	4b09      	ldr	r3, [pc, #36]	@ (8005c44 <HAL_RCC_ClockConfig+0x1c8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fb fae6 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	40023c00 	.word	0x40023c00
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	0800b460 	.word	0x0800b460
 8005c40:	20000000 	.word	0x20000000
 8005c44:	20000004 	.word	0x20000004

08005c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c4c:	b094      	sub	sp, #80	@ 0x50
 8005c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c60:	4b79      	ldr	r3, [pc, #484]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f003 030c 	and.w	r3, r3, #12
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d00d      	beq.n	8005c88 <HAL_RCC_GetSysClockFreq+0x40>
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	f200 80e1 	bhi.w	8005e34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_RCC_GetSysClockFreq+0x34>
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d003      	beq.n	8005c82 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c7a:	e0db      	b.n	8005e34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c7c:	4b73      	ldr	r3, [pc, #460]	@ (8005e4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c80:	e0db      	b.n	8005e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c82:	4b73      	ldr	r3, [pc, #460]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c86:	e0d8      	b.n	8005e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c88:	4b6f      	ldr	r3, [pc, #444]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c92:	4b6d      	ldr	r3, [pc, #436]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d063      	beq.n	8005d66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c9e:	4b6a      	ldr	r3, [pc, #424]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	099b      	lsrs	r3, r3, #6
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ca8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005cba:	4622      	mov	r2, r4
 8005cbc:	462b      	mov	r3, r5
 8005cbe:	f04f 0000 	mov.w	r0, #0
 8005cc2:	f04f 0100 	mov.w	r1, #0
 8005cc6:	0159      	lsls	r1, r3, #5
 8005cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ccc:	0150      	lsls	r0, r2, #5
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	1a51      	subs	r1, r2, r1
 8005cd6:	6139      	str	r1, [r7, #16]
 8005cd8:	4629      	mov	r1, r5
 8005cda:	eb63 0301 	sbc.w	r3, r3, r1
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cec:	4659      	mov	r1, fp
 8005cee:	018b      	lsls	r3, r1, #6
 8005cf0:	4651      	mov	r1, sl
 8005cf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cf6:	4651      	mov	r1, sl
 8005cf8:	018a      	lsls	r2, r1, #6
 8005cfa:	4651      	mov	r1, sl
 8005cfc:	ebb2 0801 	subs.w	r8, r2, r1
 8005d00:	4659      	mov	r1, fp
 8005d02:	eb63 0901 	sbc.w	r9, r3, r1
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	f04f 0300 	mov.w	r3, #0
 8005d0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d1a:	4690      	mov	r8, r2
 8005d1c:	4699      	mov	r9, r3
 8005d1e:	4623      	mov	r3, r4
 8005d20:	eb18 0303 	adds.w	r3, r8, r3
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	462b      	mov	r3, r5
 8005d28:	eb49 0303 	adc.w	r3, r9, r3
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	f04f 0300 	mov.w	r3, #0
 8005d36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	024b      	lsls	r3, r1, #9
 8005d3e:	4621      	mov	r1, r4
 8005d40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d44:	4621      	mov	r1, r4
 8005d46:	024a      	lsls	r2, r1, #9
 8005d48:	4610      	mov	r0, r2
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d4e:	2200      	movs	r2, #0
 8005d50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d58:	f7fa fa92 	bl	8000280 <__aeabi_uldivmod>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4613      	mov	r3, r2
 8005d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d64:	e058      	b.n	8005e18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d66:	4b38      	ldr	r3, [pc, #224]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	099b      	lsrs	r3, r3, #6
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	4618      	mov	r0, r3
 8005d70:	4611      	mov	r1, r2
 8005d72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d76:	623b      	str	r3, [r7, #32]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d80:	4642      	mov	r2, r8
 8005d82:	464b      	mov	r3, r9
 8005d84:	f04f 0000 	mov.w	r0, #0
 8005d88:	f04f 0100 	mov.w	r1, #0
 8005d8c:	0159      	lsls	r1, r3, #5
 8005d8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d92:	0150      	lsls	r0, r2, #5
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4641      	mov	r1, r8
 8005d9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d9e:	4649      	mov	r1, r9
 8005da0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	f04f 0300 	mov.w	r3, #0
 8005dac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005db0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005db4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005db8:	ebb2 040a 	subs.w	r4, r2, sl
 8005dbc:	eb63 050b 	sbc.w	r5, r3, fp
 8005dc0:	f04f 0200 	mov.w	r2, #0
 8005dc4:	f04f 0300 	mov.w	r3, #0
 8005dc8:	00eb      	lsls	r3, r5, #3
 8005dca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dce:	00e2      	lsls	r2, r4, #3
 8005dd0:	4614      	mov	r4, r2
 8005dd2:	461d      	mov	r5, r3
 8005dd4:	4643      	mov	r3, r8
 8005dd6:	18e3      	adds	r3, r4, r3
 8005dd8:	603b      	str	r3, [r7, #0]
 8005dda:	464b      	mov	r3, r9
 8005ddc:	eb45 0303 	adc.w	r3, r5, r3
 8005de0:	607b      	str	r3, [r7, #4]
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	f04f 0300 	mov.w	r3, #0
 8005dea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005dee:	4629      	mov	r1, r5
 8005df0:	028b      	lsls	r3, r1, #10
 8005df2:	4621      	mov	r1, r4
 8005df4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005df8:	4621      	mov	r1, r4
 8005dfa:	028a      	lsls	r2, r1, #10
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e02:	2200      	movs	r2, #0
 8005e04:	61bb      	str	r3, [r7, #24]
 8005e06:	61fa      	str	r2, [r7, #28]
 8005e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e0c:	f7fa fa38 	bl	8000280 <__aeabi_uldivmod>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4613      	mov	r3, r2
 8005e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005e18:	4b0b      	ldr	r3, [pc, #44]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	0c1b      	lsrs	r3, r3, #16
 8005e1e:	f003 0303 	and.w	r3, r3, #3
 8005e22:	3301      	adds	r3, #1
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005e28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e32:	e002      	b.n	8005e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e34:	4b05      	ldr	r3, [pc, #20]	@ (8005e4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005e36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3750      	adds	r7, #80	@ 0x50
 8005e40:	46bd      	mov	sp, r7
 8005e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e46:	bf00      	nop
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	00f42400 	.word	0x00f42400
 8005e50:	007a1200 	.word	0x007a1200

08005e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e58:	4b03      	ldr	r3, [pc, #12]	@ (8005e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	20000000 	.word	0x20000000

08005e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e70:	f7ff fff0 	bl	8005e54 <HAL_RCC_GetHCLKFreq>
 8005e74:	4602      	mov	r2, r0
 8005e76:	4b05      	ldr	r3, [pc, #20]	@ (8005e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	0a9b      	lsrs	r3, r3, #10
 8005e7c:	f003 0307 	and.w	r3, r3, #7
 8005e80:	4903      	ldr	r1, [pc, #12]	@ (8005e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e82:	5ccb      	ldrb	r3, [r1, r3]
 8005e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	0800b470 	.word	0x0800b470

08005e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e98:	f7ff ffdc 	bl	8005e54 <HAL_RCC_GetHCLKFreq>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	4b05      	ldr	r3, [pc, #20]	@ (8005eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	0b5b      	lsrs	r3, r3, #13
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	4903      	ldr	r1, [pc, #12]	@ (8005eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eaa:	5ccb      	ldrb	r3, [r1, r3]
 8005eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	40023800 	.word	0x40023800
 8005eb8:	0800b470 	.word	0x0800b470

08005ebc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d105      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d035      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ee4:	4b62      	ldr	r3, [pc, #392]	@ (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005eea:	f7fb f9c7 	bl	800127c <HAL_GetTick>
 8005eee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ef0:	e008      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ef2:	f7fb f9c3 	bl	800127c <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e0b0      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f04:	4b5b      	ldr	r3, [pc, #364]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1f0      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	019a      	lsls	r2, r3, #6
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	071b      	lsls	r3, r3, #28
 8005f1c:	4955      	ldr	r1, [pc, #340]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f24:	4b52      	ldr	r3, [pc, #328]	@ (8006070 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f2a:	f7fb f9a7 	bl	800127c <HAL_GetTick>
 8005f2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f30:	e008      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f32:	f7fb f9a3 	bl	800127c <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e090      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f44:	4b4b      	ldr	r3, [pc, #300]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0f0      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 8083 	beq.w	8006064 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	4b44      	ldr	r3, [pc, #272]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f66:	4a43      	ldr	r2, [pc, #268]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f6e:	4b41      	ldr	r3, [pc, #260]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a3e      	ldr	r2, [pc, #248]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f84:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f86:	f7fb f979 	bl	800127c <HAL_GetTick>
 8005f8a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005f8c:	e008      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f8e:	f7fb f975 	bl	800127c <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e062      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005fa0:	4b35      	ldr	r3, [pc, #212]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0f0      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fac:	4b31      	ldr	r3, [pc, #196]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fb4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d02f      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d028      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fca:	4b2a      	ldr	r3, [pc, #168]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fd2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fd4:	4b29      	ldr	r3, [pc, #164]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fda:	4b28      	ldr	r3, [pc, #160]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005fe0:	4a24      	ldr	r2, [pc, #144]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005fe6:	4b23      	ldr	r3, [pc, #140]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d114      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ff2:	f7fb f943 	bl	800127c <HAL_GetTick>
 8005ff6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff8:	e00a      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffa:	f7fb f93f 	bl	800127c <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006008:	4293      	cmp	r3, r2
 800600a:	d901      	bls.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e02a      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006010:	4b18      	ldr	r3, [pc, #96]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0ee      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006024:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006028:	d10d      	bne.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800602a:	4b12      	ldr	r3, [pc, #72]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800603a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800603e:	490d      	ldr	r1, [pc, #52]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006040:	4313      	orrs	r3, r2
 8006042:	608b      	str	r3, [r1, #8]
 8006044:	e005      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006046:	4b0b      	ldr	r3, [pc, #44]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	4a0a      	ldr	r2, [pc, #40]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800604c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006050:	6093      	str	r3, [r2, #8]
 8006052:	4b08      	ldr	r3, [pc, #32]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006054:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800605e:	4905      	ldr	r1, [pc, #20]	@ (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006060:	4313      	orrs	r3, r2
 8006062:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	42470068 	.word	0x42470068
 8006074:	40023800 	.word	0x40023800
 8006078:	40007000 	.word	0x40007000
 800607c:	42470e40 	.word	0x42470e40

08006080 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d13f      	bne.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800609e:	4b24      	ldr	r3, [pc, #144]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d006      	beq.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80060b4:	d12f      	bne.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80060b6:	4b1f      	ldr	r3, [pc, #124]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80060b8:	617b      	str	r3, [r7, #20]
          break;
 80060ba:	e02f      	b.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80060bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060c8:	d108      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80060ca:	4b19      	ldr	r3, [pc, #100]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060d2:	4a19      	ldr	r2, [pc, #100]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80060d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d8:	613b      	str	r3, [r7, #16]
 80060da:	e007      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80060dc:	4b14      	ldr	r3, [pc, #80]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060e4:	4a15      	ldr	r2, [pc, #84]	@ (800613c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80060e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ea:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80060ec:	4b10      	ldr	r3, [pc, #64]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80060ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060f2:	099b      	lsrs	r3, r3, #6
 80060f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	fb02 f303 	mul.w	r3, r2, r3
 80060fe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006100:	4b0b      	ldr	r3, [pc, #44]	@ (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006106:	0f1b      	lsrs	r3, r3, #28
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006112:	617b      	str	r3, [r7, #20]
          break;
 8006114:	e002      	b.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]
          break;
 800611a:	bf00      	nop
        }
      }
      break;
 800611c:	e000      	b.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800611e:	bf00      	nop
    }
  }
  return frequency;
 8006120:	697b      	ldr	r3, [r7, #20]
}
 8006122:	4618      	mov	r0, r3
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	40023800 	.word	0x40023800
 8006134:	00bb8000 	.word	0x00bb8000
 8006138:	007a1200 	.word	0x007a1200
 800613c:	00f42400 	.word	0x00f42400

08006140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e07b      	b.n	800624a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006156:	2b00      	cmp	r3, #0
 8006158:	d108      	bne.n	800616c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006162:	d009      	beq.n	8006178 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	61da      	str	r2, [r3, #28]
 800616a:	e005      	b.n	8006178 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7fa fea6 	bl	8000ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80061c0:	431a      	orrs	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	431a      	orrs	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061fc:	ea42 0103 	orr.w	r1, r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006204:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	0c1b      	lsrs	r3, r3, #16
 8006216:	f003 0104 	and.w	r1, r3, #4
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621e:	f003 0210 	and.w	r2, r3, #16
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006238:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b082      	sub	sp, #8
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e041      	b.n	80062e8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d106      	bne.n	800627e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7fa fe7b 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2202      	movs	r2, #2
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3304      	adds	r3, #4
 800628e:	4619      	mov	r1, r3
 8006290:	4610      	mov	r0, r2
 8006292:	f000 f95d 	bl	8006550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b01      	cmp	r3, #1
 8006302:	d001      	beq.n	8006308 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e046      	b.n	8006396 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a23      	ldr	r2, [pc, #140]	@ (80063a4 <HAL_TIM_Base_Start+0xb4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d022      	beq.n	8006360 <HAL_TIM_Base_Start+0x70>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006322:	d01d      	beq.n	8006360 <HAL_TIM_Base_Start+0x70>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a1f      	ldr	r2, [pc, #124]	@ (80063a8 <HAL_TIM_Base_Start+0xb8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d018      	beq.n	8006360 <HAL_TIM_Base_Start+0x70>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1e      	ldr	r2, [pc, #120]	@ (80063ac <HAL_TIM_Base_Start+0xbc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d013      	beq.n	8006360 <HAL_TIM_Base_Start+0x70>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1c      	ldr	r2, [pc, #112]	@ (80063b0 <HAL_TIM_Base_Start+0xc0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d00e      	beq.n	8006360 <HAL_TIM_Base_Start+0x70>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a1b      	ldr	r2, [pc, #108]	@ (80063b4 <HAL_TIM_Base_Start+0xc4>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d009      	beq.n	8006360 <HAL_TIM_Base_Start+0x70>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a19      	ldr	r2, [pc, #100]	@ (80063b8 <HAL_TIM_Base_Start+0xc8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d004      	beq.n	8006360 <HAL_TIM_Base_Start+0x70>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a18      	ldr	r2, [pc, #96]	@ (80063bc <HAL_TIM_Base_Start+0xcc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d111      	bne.n	8006384 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b06      	cmp	r3, #6
 8006370:	d010      	beq.n	8006394 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f042 0201 	orr.w	r2, r2, #1
 8006380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006382:	e007      	b.n	8006394 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0201 	orr.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40010000 	.word	0x40010000
 80063a8:	40000400 	.word	0x40000400
 80063ac:	40000800 	.word	0x40000800
 80063b0:	40000c00 	.word	0x40000c00
 80063b4:	40010400 	.word	0x40010400
 80063b8:	40014000 	.word	0x40014000
 80063bc:	40001800 	.word	0x40001800

080063c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_TIM_ConfigClockSource+0x1c>
 80063d8:	2302      	movs	r3, #2
 80063da:	e0b4      	b.n	8006546 <HAL_TIM_ConfigClockSource+0x186>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006402:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006414:	d03e      	beq.n	8006494 <HAL_TIM_ConfigClockSource+0xd4>
 8006416:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800641a:	f200 8087 	bhi.w	800652c <HAL_TIM_ConfigClockSource+0x16c>
 800641e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006422:	f000 8086 	beq.w	8006532 <HAL_TIM_ConfigClockSource+0x172>
 8006426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800642a:	d87f      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x16c>
 800642c:	2b70      	cmp	r3, #112	@ 0x70
 800642e:	d01a      	beq.n	8006466 <HAL_TIM_ConfigClockSource+0xa6>
 8006430:	2b70      	cmp	r3, #112	@ 0x70
 8006432:	d87b      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x16c>
 8006434:	2b60      	cmp	r3, #96	@ 0x60
 8006436:	d050      	beq.n	80064da <HAL_TIM_ConfigClockSource+0x11a>
 8006438:	2b60      	cmp	r3, #96	@ 0x60
 800643a:	d877      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x16c>
 800643c:	2b50      	cmp	r3, #80	@ 0x50
 800643e:	d03c      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0xfa>
 8006440:	2b50      	cmp	r3, #80	@ 0x50
 8006442:	d873      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x16c>
 8006444:	2b40      	cmp	r3, #64	@ 0x40
 8006446:	d058      	beq.n	80064fa <HAL_TIM_ConfigClockSource+0x13a>
 8006448:	2b40      	cmp	r3, #64	@ 0x40
 800644a:	d86f      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x16c>
 800644c:	2b30      	cmp	r3, #48	@ 0x30
 800644e:	d064      	beq.n	800651a <HAL_TIM_ConfigClockSource+0x15a>
 8006450:	2b30      	cmp	r3, #48	@ 0x30
 8006452:	d86b      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x16c>
 8006454:	2b20      	cmp	r3, #32
 8006456:	d060      	beq.n	800651a <HAL_TIM_ConfigClockSource+0x15a>
 8006458:	2b20      	cmp	r3, #32
 800645a:	d867      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x16c>
 800645c:	2b00      	cmp	r3, #0
 800645e:	d05c      	beq.n	800651a <HAL_TIM_ConfigClockSource+0x15a>
 8006460:	2b10      	cmp	r3, #16
 8006462:	d05a      	beq.n	800651a <HAL_TIM_ConfigClockSource+0x15a>
 8006464:	e062      	b.n	800652c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006476:	f000 f991 	bl	800679c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006488:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	609a      	str	r2, [r3, #8]
      break;
 8006492:	e04f      	b.n	8006534 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064a4:	f000 f97a 	bl	800679c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064b6:	609a      	str	r2, [r3, #8]
      break;
 80064b8:	e03c      	b.n	8006534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064c6:	461a      	mov	r2, r3
 80064c8:	f000 f8ee 	bl	80066a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2150      	movs	r1, #80	@ 0x50
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 f947 	bl	8006766 <TIM_ITRx_SetConfig>
      break;
 80064d8:	e02c      	b.n	8006534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064e6:	461a      	mov	r2, r3
 80064e8:	f000 f90d 	bl	8006706 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2160      	movs	r1, #96	@ 0x60
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 f937 	bl	8006766 <TIM_ITRx_SetConfig>
      break;
 80064f8:	e01c      	b.n	8006534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006506:	461a      	mov	r2, r3
 8006508:	f000 f8ce 	bl	80066a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2140      	movs	r1, #64	@ 0x40
 8006512:	4618      	mov	r0, r3
 8006514:	f000 f927 	bl	8006766 <TIM_ITRx_SetConfig>
      break;
 8006518:	e00c      	b.n	8006534 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4619      	mov	r1, r3
 8006524:	4610      	mov	r0, r2
 8006526:	f000 f91e 	bl	8006766 <TIM_ITRx_SetConfig>
      break;
 800652a:	e003      	b.n	8006534 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	73fb      	strb	r3, [r7, #15]
      break;
 8006530:	e000      	b.n	8006534 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006532:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006544:	7bfb      	ldrb	r3, [r7, #15]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a46      	ldr	r2, [pc, #280]	@ (800667c <TIM_Base_SetConfig+0x12c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d013      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800656e:	d00f      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a43      	ldr	r2, [pc, #268]	@ (8006680 <TIM_Base_SetConfig+0x130>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a42      	ldr	r2, [pc, #264]	@ (8006684 <TIM_Base_SetConfig+0x134>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d007      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a41      	ldr	r2, [pc, #260]	@ (8006688 <TIM_Base_SetConfig+0x138>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a40      	ldr	r2, [pc, #256]	@ (800668c <TIM_Base_SetConfig+0x13c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d108      	bne.n	80065a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a35      	ldr	r2, [pc, #212]	@ (800667c <TIM_Base_SetConfig+0x12c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d02b      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b0:	d027      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a32      	ldr	r2, [pc, #200]	@ (8006680 <TIM_Base_SetConfig+0x130>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d023      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a31      	ldr	r2, [pc, #196]	@ (8006684 <TIM_Base_SetConfig+0x134>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d01f      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a30      	ldr	r2, [pc, #192]	@ (8006688 <TIM_Base_SetConfig+0x138>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d01b      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a2f      	ldr	r2, [pc, #188]	@ (800668c <TIM_Base_SetConfig+0x13c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d017      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006690 <TIM_Base_SetConfig+0x140>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d013      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006694 <TIM_Base_SetConfig+0x144>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00f      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006698 <TIM_Base_SetConfig+0x148>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00b      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a2b      	ldr	r2, [pc, #172]	@ (800669c <TIM_Base_SetConfig+0x14c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d007      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a2a      	ldr	r2, [pc, #168]	@ (80066a0 <TIM_Base_SetConfig+0x150>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d003      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a29      	ldr	r2, [pc, #164]	@ (80066a4 <TIM_Base_SetConfig+0x154>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d108      	bne.n	8006614 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4313      	orrs	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a10      	ldr	r2, [pc, #64]	@ (800667c <TIM_Base_SetConfig+0x12c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d003      	beq.n	8006648 <TIM_Base_SetConfig+0xf8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a12      	ldr	r2, [pc, #72]	@ (800668c <TIM_Base_SetConfig+0x13c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d103      	bne.n	8006650 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b01      	cmp	r3, #1
 8006660:	d105      	bne.n	800666e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f023 0201 	bic.w	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	611a      	str	r2, [r3, #16]
  }
}
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40010000 	.word	0x40010000
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800
 8006688:	40000c00 	.word	0x40000c00
 800668c:	40010400 	.word	0x40010400
 8006690:	40014000 	.word	0x40014000
 8006694:	40014400 	.word	0x40014400
 8006698:	40014800 	.word	0x40014800
 800669c:	40001800 	.word	0x40001800
 80066a0:	40001c00 	.word	0x40001c00
 80066a4:	40002000 	.word	0x40002000

080066a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	f023 0201 	bic.w	r2, r3, #1
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4313      	orrs	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f023 030a 	bic.w	r3, r3, #10
 80066e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	621a      	str	r2, [r3, #32]
}
 80066fa:	bf00      	nop
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006706:	b480      	push	{r7}
 8006708:	b087      	sub	sp, #28
 800670a:	af00      	add	r7, sp, #0
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f023 0210 	bic.w	r2, r3, #16
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006730:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	031b      	lsls	r3, r3, #12
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006742:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	621a      	str	r2, [r3, #32]
}
 800675a:	bf00      	nop
 800675c:	371c      	adds	r7, #28
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006766:	b480      	push	{r7}
 8006768:	b085      	sub	sp, #20
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800677c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	f043 0307 	orr.w	r3, r3, #7
 8006788:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	609a      	str	r2, [r3, #8]
}
 8006790:	bf00      	nop
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	021a      	lsls	r2, r3, #8
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	431a      	orrs	r2, r3
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	609a      	str	r2, [r3, #8]
}
 80067d0:	bf00      	nop
 80067d2:	371c      	adds	r7, #28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e05a      	b.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800681a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a21      	ldr	r2, [pc, #132]	@ (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d022      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006840:	d01d      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1d      	ldr	r2, [pc, #116]	@ (80068bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d018      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a1b      	ldr	r2, [pc, #108]	@ (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1a      	ldr	r2, [pc, #104]	@ (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00e      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a18      	ldr	r2, [pc, #96]	@ (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d009      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a17      	ldr	r2, [pc, #92]	@ (80068cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d004      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a15      	ldr	r2, [pc, #84]	@ (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d10c      	bne.n	8006898 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	4313      	orrs	r3, r2
 800688e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40010000 	.word	0x40010000
 80068bc:	40000400 	.word	0x40000400
 80068c0:	40000800 	.word	0x40000800
 80068c4:	40000c00 	.word	0x40000c00
 80068c8:	40010400 	.word	0x40010400
 80068cc:	40014000 	.word	0x40014000
 80068d0:	40001800 	.word	0x40001800

080068d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e042      	b.n	800696c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d106      	bne.n	8006900 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fa fb5a 	bl	8000fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2224      	movs	r2, #36	@ 0x24
 8006904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006916:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f973 	bl	8006c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	691a      	ldr	r2, [r3, #16]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800692c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	695a      	ldr	r2, [r3, #20]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800693c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800694c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08a      	sub	sp, #40	@ 0x28
 8006978:	af02      	add	r7, sp, #8
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	4613      	mov	r3, r2
 8006982:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b20      	cmp	r3, #32
 8006992:	d175      	bne.n	8006a80 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <HAL_UART_Transmit+0x2c>
 800699a:	88fb      	ldrh	r3, [r7, #6]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e06e      	b.n	8006a82 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2221      	movs	r2, #33	@ 0x21
 80069ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069b2:	f7fa fc63 	bl	800127c <HAL_GetTick>
 80069b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	88fa      	ldrh	r2, [r7, #6]
 80069bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	88fa      	ldrh	r2, [r7, #6]
 80069c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069cc:	d108      	bne.n	80069e0 <HAL_UART_Transmit+0x6c>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d104      	bne.n	80069e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	61bb      	str	r3, [r7, #24]
 80069de:	e003      	b.n	80069e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069e4:	2300      	movs	r3, #0
 80069e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069e8:	e02e      	b.n	8006a48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2200      	movs	r2, #0
 80069f2:	2180      	movs	r1, #128	@ 0x80
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 f848 	bl	8006a8a <UART_WaitOnFlagUntilTimeout>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d005      	beq.n	8006a0c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e03a      	b.n	8006a82 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10b      	bne.n	8006a2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	461a      	mov	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	3302      	adds	r3, #2
 8006a26:	61bb      	str	r3, [r7, #24]
 8006a28:	e007      	b.n	8006a3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	781a      	ldrb	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	3301      	adds	r3, #1
 8006a38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1cb      	bne.n	80069ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2140      	movs	r1, #64	@ 0x40
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 f814 	bl	8006a8a <UART_WaitOnFlagUntilTimeout>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d005      	beq.n	8006a74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e006      	b.n	8006a82 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e000      	b.n	8006a82 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006a80:	2302      	movs	r3, #2
  }
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3720      	adds	r7, #32
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b086      	sub	sp, #24
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	603b      	str	r3, [r7, #0]
 8006a96:	4613      	mov	r3, r2
 8006a98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a9a:	e03b      	b.n	8006b14 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa2:	d037      	beq.n	8006b14 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aa4:	f7fa fbea 	bl	800127c <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	6a3a      	ldr	r2, [r7, #32]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d302      	bcc.n	8006aba <UART_WaitOnFlagUntilTimeout+0x30>
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e03a      	b.n	8006b34 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d023      	beq.n	8006b14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b80      	cmp	r3, #128	@ 0x80
 8006ad0:	d020      	beq.n	8006b14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b40      	cmp	r3, #64	@ 0x40
 8006ad6:	d01d      	beq.n	8006b14 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d116      	bne.n	8006b14 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	617b      	str	r3, [r7, #20]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	617b      	str	r3, [r7, #20]
 8006afa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f81d 	bl	8006b3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2208      	movs	r2, #8
 8006b06:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e00f      	b.n	8006b34 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	bf0c      	ite	eq
 8006b24:	2301      	moveq	r3, #1
 8006b26:	2300      	movne	r3, #0
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	79fb      	ldrb	r3, [r7, #7]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d0b4      	beq.n	8006a9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b095      	sub	sp, #84	@ 0x54
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	330c      	adds	r3, #12
 8006b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	330c      	adds	r3, #12
 8006b62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b64:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e5      	bne.n	8006b44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3314      	adds	r3, #20
 8006b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	f023 0301 	bic.w	r3, r3, #1
 8006b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3314      	adds	r3, #20
 8006b96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e5      	bne.n	8006b78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d119      	bne.n	8006be8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	330c      	adds	r3, #12
 8006bba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	e853 3f00 	ldrex	r3, [r3]
 8006bc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f023 0310 	bic.w	r3, r3, #16
 8006bca:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	330c      	adds	r3, #12
 8006bd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bd4:	61ba      	str	r2, [r7, #24]
 8006bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd8:	6979      	ldr	r1, [r7, #20]
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	e841 2300 	strex	r3, r2, [r1]
 8006be0:	613b      	str	r3, [r7, #16]
   return(result);
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1e5      	bne.n	8006bb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006bf6:	bf00      	nop
 8006bf8:	3754      	adds	r7, #84	@ 0x54
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
	...

08006c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c08:	b0c0      	sub	sp, #256	@ 0x100
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c20:	68d9      	ldr	r1, [r3, #12]
 8006c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	ea40 0301 	orr.w	r3, r0, r1
 8006c2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	431a      	orrs	r2, r3
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c5c:	f021 010c 	bic.w	r1, r1, #12
 8006c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c6a:	430b      	orrs	r3, r1
 8006c6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c7e:	6999      	ldr	r1, [r3, #24]
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	ea40 0301 	orr.w	r3, r0, r1
 8006c8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	4b8f      	ldr	r3, [pc, #572]	@ (8006ed0 <UART_SetConfig+0x2cc>)
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d005      	beq.n	8006ca4 <UART_SetConfig+0xa0>
 8006c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	4b8d      	ldr	r3, [pc, #564]	@ (8006ed4 <UART_SetConfig+0x2d0>)
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d104      	bne.n	8006cae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ca4:	f7ff f8f6 	bl	8005e94 <HAL_RCC_GetPCLK2Freq>
 8006ca8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006cac:	e003      	b.n	8006cb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cae:	f7ff f8dd 	bl	8005e6c <HAL_RCC_GetPCLK1Freq>
 8006cb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cc0:	f040 810c 	bne.w	8006edc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006cd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006cd6:	4622      	mov	r2, r4
 8006cd8:	462b      	mov	r3, r5
 8006cda:	1891      	adds	r1, r2, r2
 8006cdc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006cde:	415b      	adcs	r3, r3
 8006ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ce2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	eb12 0801 	adds.w	r8, r2, r1
 8006cec:	4629      	mov	r1, r5
 8006cee:	eb43 0901 	adc.w	r9, r3, r1
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d06:	4690      	mov	r8, r2
 8006d08:	4699      	mov	r9, r3
 8006d0a:	4623      	mov	r3, r4
 8006d0c:	eb18 0303 	adds.w	r3, r8, r3
 8006d10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d14:	462b      	mov	r3, r5
 8006d16:	eb49 0303 	adc.w	r3, r9, r3
 8006d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d32:	460b      	mov	r3, r1
 8006d34:	18db      	adds	r3, r3, r3
 8006d36:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d38:	4613      	mov	r3, r2
 8006d3a:	eb42 0303 	adc.w	r3, r2, r3
 8006d3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d48:	f7f9 fa9a 	bl	8000280 <__aeabi_uldivmod>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4b61      	ldr	r3, [pc, #388]	@ (8006ed8 <UART_SetConfig+0x2d4>)
 8006d52:	fba3 2302 	umull	r2, r3, r3, r2
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	011c      	lsls	r4, r3, #4
 8006d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d6c:	4642      	mov	r2, r8
 8006d6e:	464b      	mov	r3, r9
 8006d70:	1891      	adds	r1, r2, r2
 8006d72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d74:	415b      	adcs	r3, r3
 8006d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d7c:	4641      	mov	r1, r8
 8006d7e:	eb12 0a01 	adds.w	sl, r2, r1
 8006d82:	4649      	mov	r1, r9
 8006d84:	eb43 0b01 	adc.w	fp, r3, r1
 8006d88:	f04f 0200 	mov.w	r2, #0
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d9c:	4692      	mov	sl, r2
 8006d9e:	469b      	mov	fp, r3
 8006da0:	4643      	mov	r3, r8
 8006da2:	eb1a 0303 	adds.w	r3, sl, r3
 8006da6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006daa:	464b      	mov	r3, r9
 8006dac:	eb4b 0303 	adc.w	r3, fp, r3
 8006db0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006dc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006dc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	18db      	adds	r3, r3, r3
 8006dcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dce:	4613      	mov	r3, r2
 8006dd0:	eb42 0303 	adc.w	r3, r2, r3
 8006dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006dda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006dde:	f7f9 fa4f 	bl	8000280 <__aeabi_uldivmod>
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	4611      	mov	r1, r2
 8006de8:	4b3b      	ldr	r3, [pc, #236]	@ (8006ed8 <UART_SetConfig+0x2d4>)
 8006dea:	fba3 2301 	umull	r2, r3, r3, r1
 8006dee:	095b      	lsrs	r3, r3, #5
 8006df0:	2264      	movs	r2, #100	@ 0x64
 8006df2:	fb02 f303 	mul.w	r3, r2, r3
 8006df6:	1acb      	subs	r3, r1, r3
 8006df8:	00db      	lsls	r3, r3, #3
 8006dfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006dfe:	4b36      	ldr	r3, [pc, #216]	@ (8006ed8 <UART_SetConfig+0x2d4>)
 8006e00:	fba3 2302 	umull	r2, r3, r3, r2
 8006e04:	095b      	lsrs	r3, r3, #5
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e0c:	441c      	add	r4, r3
 8006e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e20:	4642      	mov	r2, r8
 8006e22:	464b      	mov	r3, r9
 8006e24:	1891      	adds	r1, r2, r2
 8006e26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e28:	415b      	adcs	r3, r3
 8006e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e30:	4641      	mov	r1, r8
 8006e32:	1851      	adds	r1, r2, r1
 8006e34:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e36:	4649      	mov	r1, r9
 8006e38:	414b      	adcs	r3, r1
 8006e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e3c:	f04f 0200 	mov.w	r2, #0
 8006e40:	f04f 0300 	mov.w	r3, #0
 8006e44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e48:	4659      	mov	r1, fp
 8006e4a:	00cb      	lsls	r3, r1, #3
 8006e4c:	4651      	mov	r1, sl
 8006e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e52:	4651      	mov	r1, sl
 8006e54:	00ca      	lsls	r2, r1, #3
 8006e56:	4610      	mov	r0, r2
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	189b      	adds	r3, r3, r2
 8006e60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e64:	464b      	mov	r3, r9
 8006e66:	460a      	mov	r2, r1
 8006e68:	eb42 0303 	adc.w	r3, r2, r3
 8006e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e84:	460b      	mov	r3, r1
 8006e86:	18db      	adds	r3, r3, r3
 8006e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	eb42 0303 	adc.w	r3, r2, r3
 8006e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e9a:	f7f9 f9f1 	bl	8000280 <__aeabi_uldivmod>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed8 <UART_SetConfig+0x2d4>)
 8006ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	2164      	movs	r1, #100	@ 0x64
 8006eac:	fb01 f303 	mul.w	r3, r1, r3
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	3332      	adds	r3, #50	@ 0x32
 8006eb6:	4a08      	ldr	r2, [pc, #32]	@ (8006ed8 <UART_SetConfig+0x2d4>)
 8006eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebc:	095b      	lsrs	r3, r3, #5
 8006ebe:	f003 0207 	and.w	r2, r3, #7
 8006ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4422      	add	r2, r4
 8006eca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ecc:	e106      	b.n	80070dc <UART_SetConfig+0x4d8>
 8006ece:	bf00      	nop
 8006ed0:	40011000 	.word	0x40011000
 8006ed4:	40011400 	.word	0x40011400
 8006ed8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ee6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006eea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006eee:	4642      	mov	r2, r8
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	1891      	adds	r1, r2, r2
 8006ef4:	6239      	str	r1, [r7, #32]
 8006ef6:	415b      	adcs	r3, r3
 8006ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006efa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006efe:	4641      	mov	r1, r8
 8006f00:	1854      	adds	r4, r2, r1
 8006f02:	4649      	mov	r1, r9
 8006f04:	eb43 0501 	adc.w	r5, r3, r1
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	f04f 0300 	mov.w	r3, #0
 8006f10:	00eb      	lsls	r3, r5, #3
 8006f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f16:	00e2      	lsls	r2, r4, #3
 8006f18:	4614      	mov	r4, r2
 8006f1a:	461d      	mov	r5, r3
 8006f1c:	4643      	mov	r3, r8
 8006f1e:	18e3      	adds	r3, r4, r3
 8006f20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f24:	464b      	mov	r3, r9
 8006f26:	eb45 0303 	adc.w	r3, r5, r3
 8006f2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f3e:	f04f 0200 	mov.w	r2, #0
 8006f42:	f04f 0300 	mov.w	r3, #0
 8006f46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	008b      	lsls	r3, r1, #2
 8006f4e:	4621      	mov	r1, r4
 8006f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f54:	4621      	mov	r1, r4
 8006f56:	008a      	lsls	r2, r1, #2
 8006f58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f5c:	f7f9 f990 	bl	8000280 <__aeabi_uldivmod>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4b60      	ldr	r3, [pc, #384]	@ (80070e8 <UART_SetConfig+0x4e4>)
 8006f66:	fba3 2302 	umull	r2, r3, r3, r2
 8006f6a:	095b      	lsrs	r3, r3, #5
 8006f6c:	011c      	lsls	r4, r3, #4
 8006f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f72:	2200      	movs	r2, #0
 8006f74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f80:	4642      	mov	r2, r8
 8006f82:	464b      	mov	r3, r9
 8006f84:	1891      	adds	r1, r2, r2
 8006f86:	61b9      	str	r1, [r7, #24]
 8006f88:	415b      	adcs	r3, r3
 8006f8a:	61fb      	str	r3, [r7, #28]
 8006f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f90:	4641      	mov	r1, r8
 8006f92:	1851      	adds	r1, r2, r1
 8006f94:	6139      	str	r1, [r7, #16]
 8006f96:	4649      	mov	r1, r9
 8006f98:	414b      	adcs	r3, r1
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fa8:	4659      	mov	r1, fp
 8006faa:	00cb      	lsls	r3, r1, #3
 8006fac:	4651      	mov	r1, sl
 8006fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fb2:	4651      	mov	r1, sl
 8006fb4:	00ca      	lsls	r2, r1, #3
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4642      	mov	r2, r8
 8006fbe:	189b      	adds	r3, r3, r2
 8006fc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fc4:	464b      	mov	r3, r9
 8006fc6:	460a      	mov	r2, r1
 8006fc8:	eb42 0303 	adc.w	r3, r2, r3
 8006fcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006fdc:	f04f 0200 	mov.w	r2, #0
 8006fe0:	f04f 0300 	mov.w	r3, #0
 8006fe4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006fe8:	4649      	mov	r1, r9
 8006fea:	008b      	lsls	r3, r1, #2
 8006fec:	4641      	mov	r1, r8
 8006fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ff2:	4641      	mov	r1, r8
 8006ff4:	008a      	lsls	r2, r1, #2
 8006ff6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ffa:	f7f9 f941 	bl	8000280 <__aeabi_uldivmod>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4611      	mov	r1, r2
 8007004:	4b38      	ldr	r3, [pc, #224]	@ (80070e8 <UART_SetConfig+0x4e4>)
 8007006:	fba3 2301 	umull	r2, r3, r3, r1
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	2264      	movs	r2, #100	@ 0x64
 800700e:	fb02 f303 	mul.w	r3, r2, r3
 8007012:	1acb      	subs	r3, r1, r3
 8007014:	011b      	lsls	r3, r3, #4
 8007016:	3332      	adds	r3, #50	@ 0x32
 8007018:	4a33      	ldr	r2, [pc, #204]	@ (80070e8 <UART_SetConfig+0x4e4>)
 800701a:	fba2 2303 	umull	r2, r3, r2, r3
 800701e:	095b      	lsrs	r3, r3, #5
 8007020:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007024:	441c      	add	r4, r3
 8007026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800702a:	2200      	movs	r2, #0
 800702c:	673b      	str	r3, [r7, #112]	@ 0x70
 800702e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007030:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007034:	4642      	mov	r2, r8
 8007036:	464b      	mov	r3, r9
 8007038:	1891      	adds	r1, r2, r2
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	415b      	adcs	r3, r3
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007044:	4641      	mov	r1, r8
 8007046:	1851      	adds	r1, r2, r1
 8007048:	6039      	str	r1, [r7, #0]
 800704a:	4649      	mov	r1, r9
 800704c:	414b      	adcs	r3, r1
 800704e:	607b      	str	r3, [r7, #4]
 8007050:	f04f 0200 	mov.w	r2, #0
 8007054:	f04f 0300 	mov.w	r3, #0
 8007058:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800705c:	4659      	mov	r1, fp
 800705e:	00cb      	lsls	r3, r1, #3
 8007060:	4651      	mov	r1, sl
 8007062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007066:	4651      	mov	r1, sl
 8007068:	00ca      	lsls	r2, r1, #3
 800706a:	4610      	mov	r0, r2
 800706c:	4619      	mov	r1, r3
 800706e:	4603      	mov	r3, r0
 8007070:	4642      	mov	r2, r8
 8007072:	189b      	adds	r3, r3, r2
 8007074:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007076:	464b      	mov	r3, r9
 8007078:	460a      	mov	r2, r1
 800707a:	eb42 0303 	adc.w	r3, r2, r3
 800707e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	663b      	str	r3, [r7, #96]	@ 0x60
 800708a:	667a      	str	r2, [r7, #100]	@ 0x64
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007098:	4649      	mov	r1, r9
 800709a:	008b      	lsls	r3, r1, #2
 800709c:	4641      	mov	r1, r8
 800709e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070a2:	4641      	mov	r1, r8
 80070a4:	008a      	lsls	r2, r1, #2
 80070a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80070aa:	f7f9 f8e9 	bl	8000280 <__aeabi_uldivmod>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4b0d      	ldr	r3, [pc, #52]	@ (80070e8 <UART_SetConfig+0x4e4>)
 80070b4:	fba3 1302 	umull	r1, r3, r3, r2
 80070b8:	095b      	lsrs	r3, r3, #5
 80070ba:	2164      	movs	r1, #100	@ 0x64
 80070bc:	fb01 f303 	mul.w	r3, r1, r3
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	3332      	adds	r3, #50	@ 0x32
 80070c6:	4a08      	ldr	r2, [pc, #32]	@ (80070e8 <UART_SetConfig+0x4e4>)
 80070c8:	fba2 2303 	umull	r2, r3, r2, r3
 80070cc:	095b      	lsrs	r3, r3, #5
 80070ce:	f003 020f 	and.w	r2, r3, #15
 80070d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4422      	add	r2, r4
 80070da:	609a      	str	r2, [r3, #8]
}
 80070dc:	bf00      	nop
 80070de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80070e2:	46bd      	mov	sp, r7
 80070e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070e8:	51eb851f 	.word	0x51eb851f

080070ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070ec:	b084      	sub	sp, #16
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	f107 001c 	add.w	r0, r7, #28
 80070fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007102:	2b01      	cmp	r3, #1
 8007104:	d123      	bne.n	800714e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800711a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800712e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007132:	2b01      	cmp	r3, #1
 8007134:	d105      	bne.n	8007142 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f9dc 	bl	8007500 <USB_CoreReset>
 8007148:	4603      	mov	r3, r0
 800714a:	73fb      	strb	r3, [r7, #15]
 800714c:	e01b      	b.n	8007186 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f9d0 	bl	8007500 <USB_CoreReset>
 8007160:	4603      	mov	r3, r0
 8007162:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007164:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007168:	2b00      	cmp	r3, #0
 800716a:	d106      	bne.n	800717a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007170:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	639a      	str	r2, [r3, #56]	@ 0x38
 8007178:	e005      	b.n	8007186 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800717e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007186:	7fbb      	ldrb	r3, [r7, #30]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d10b      	bne.n	80071a4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f043 0206 	orr.w	r2, r3, #6
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f043 0220 	orr.w	r2, r3, #32
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071b0:	b004      	add	sp, #16
 80071b2:	4770      	bx	lr

080071b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f043 0201 	orr.w	r2, r3, #1
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f023 0201 	bic.w	r2, r3, #1
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007214:	78fb      	ldrb	r3, [r7, #3]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d115      	bne.n	8007246 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007226:	200a      	movs	r0, #10
 8007228:	f7fa f834 	bl	8001294 <HAL_Delay>
      ms += 10U;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	330a      	adds	r3, #10
 8007230:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f956 	bl	80074e4 <USB_GetMode>
 8007238:	4603      	mov	r3, r0
 800723a:	2b01      	cmp	r3, #1
 800723c:	d01e      	beq.n	800727c <USB_SetCurrentMode+0x84>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2bc7      	cmp	r3, #199	@ 0xc7
 8007242:	d9f0      	bls.n	8007226 <USB_SetCurrentMode+0x2e>
 8007244:	e01a      	b.n	800727c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007246:	78fb      	ldrb	r3, [r7, #3]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d115      	bne.n	8007278 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007258:	200a      	movs	r0, #10
 800725a:	f7fa f81b 	bl	8001294 <HAL_Delay>
      ms += 10U;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	330a      	adds	r3, #10
 8007262:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f93d 	bl	80074e4 <USB_GetMode>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d005      	beq.n	800727c <USB_SetCurrentMode+0x84>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2bc7      	cmp	r3, #199	@ 0xc7
 8007274:	d9f0      	bls.n	8007258 <USB_SetCurrentMode+0x60>
 8007276:	e001      	b.n	800727c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e005      	b.n	8007288 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007280:	d101      	bne.n	8007286 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3301      	adds	r3, #1
 80072a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072aa:	d901      	bls.n	80072b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e01b      	b.n	80072e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	daf2      	bge.n	800729e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	019b      	lsls	r3, r3, #6
 80072c0:	f043 0220 	orr.w	r2, r3, #32
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3301      	adds	r3, #1
 80072cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072d4:	d901      	bls.n	80072da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e006      	b.n	80072e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f003 0320 	and.w	r3, r3, #32
 80072e2:	2b20      	cmp	r3, #32
 80072e4:	d0f0      	beq.n	80072c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	3301      	adds	r3, #1
 8007304:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800730c:	d901      	bls.n	8007312 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e018      	b.n	8007344 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	2b00      	cmp	r3, #0
 8007318:	daf2      	bge.n	8007300 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2210      	movs	r2, #16
 8007322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3301      	adds	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007330:	d901      	bls.n	8007336 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e006      	b.n	8007344 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f003 0310 	and.w	r3, r3, #16
 800733e:	2b10      	cmp	r3, #16
 8007340:	d0f0      	beq.n	8007324 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007350:	b480      	push	{r7}
 8007352:	b089      	sub	sp, #36	@ 0x24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	4611      	mov	r1, r2
 800735c:	461a      	mov	r2, r3
 800735e:	460b      	mov	r3, r1
 8007360:	71fb      	strb	r3, [r7, #7]
 8007362:	4613      	mov	r3, r2
 8007364:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800736e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007372:	2b00      	cmp	r3, #0
 8007374:	d123      	bne.n	80073be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007376:	88bb      	ldrh	r3, [r7, #4]
 8007378:	3303      	adds	r3, #3
 800737a:	089b      	lsrs	r3, r3, #2
 800737c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800737e:	2300      	movs	r3, #0
 8007380:	61bb      	str	r3, [r7, #24]
 8007382:	e018      	b.n	80073b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007384:	79fb      	ldrb	r3, [r7, #7]
 8007386:	031a      	lsls	r2, r3, #12
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	4413      	add	r3, r2
 800738c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007390:	461a      	mov	r2, r3
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	3301      	adds	r3, #1
 800739c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	3301      	adds	r3, #1
 80073a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	3301      	adds	r3, #1
 80073a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	3301      	adds	r3, #1
 80073ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	3301      	adds	r3, #1
 80073b4:	61bb      	str	r3, [r7, #24]
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d3e2      	bcc.n	8007384 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3724      	adds	r7, #36	@ 0x24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b08b      	sub	sp, #44	@ 0x2c
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	4613      	mov	r3, r2
 80073d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80073e2:	88fb      	ldrh	r3, [r7, #6]
 80073e4:	089b      	lsrs	r3, r3, #2
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80073ea:	88fb      	ldrh	r3, [r7, #6]
 80073ec:	f003 0303 	and.w	r3, r3, #3
 80073f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80073f2:	2300      	movs	r3, #0
 80073f4:	623b      	str	r3, [r7, #32]
 80073f6:	e014      	b.n	8007422 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	601a      	str	r2, [r3, #0]
    pDest++;
 8007404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007406:	3301      	adds	r3, #1
 8007408:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800740a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740c:	3301      	adds	r3, #1
 800740e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007412:	3301      	adds	r3, #1
 8007414:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	3301      	adds	r3, #1
 800741a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	3301      	adds	r3, #1
 8007420:	623b      	str	r3, [r7, #32]
 8007422:	6a3a      	ldr	r2, [r7, #32]
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	429a      	cmp	r2, r3
 8007428:	d3e6      	bcc.n	80073f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800742a:	8bfb      	ldrh	r3, [r7, #30]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01e      	beq.n	800746e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007430:	2300      	movs	r3, #0
 8007432:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800743a:	461a      	mov	r2, r3
 800743c:	f107 0310 	add.w	r3, r7, #16
 8007440:	6812      	ldr	r2, [r2, #0]
 8007442:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	fa22 f303 	lsr.w	r3, r2, r3
 8007450:	b2da      	uxtb	r2, r3
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007454:	701a      	strb	r2, [r3, #0]
      i++;
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	3301      	adds	r3, #1
 800745a:	623b      	str	r3, [r7, #32]
      pDest++;
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	3301      	adds	r3, #1
 8007460:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007462:	8bfb      	ldrh	r3, [r7, #30]
 8007464:	3b01      	subs	r3, #1
 8007466:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007468:	8bfb      	ldrh	r3, [r7, #30]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1ea      	bne.n	8007444 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007470:	4618      	mov	r0, r3
 8007472:	372c      	adds	r7, #44	@ 0x2c
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	4013      	ands	r3, r2
 8007492:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007494:	68fb      	ldr	r3, [r7, #12]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3714      	adds	r7, #20
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b085      	sub	sp, #20
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	460b      	mov	r3, r1
 80074ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80074c2:	78fb      	ldrb	r3, [r7, #3]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	4013      	ands	r3, r2
 80074d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80074d6:	68bb      	ldr	r3, [r7, #8]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	f003 0301 	and.w	r3, r3, #1
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007508:	2300      	movs	r3, #0
 800750a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3301      	adds	r3, #1
 8007510:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007518:	d901      	bls.n	800751e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e01b      	b.n	8007556 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	daf2      	bge.n	800750c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	f043 0201 	orr.w	r2, r3, #1
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3301      	adds	r3, #1
 800753a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007542:	d901      	bls.n	8007548 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e006      	b.n	8007556 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b01      	cmp	r3, #1
 8007552:	d0f0      	beq.n	8007536 <USB_CoreReset+0x36>

  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
	...

08007564 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007564:	b084      	sub	sp, #16
 8007566:	b580      	push	{r7, lr}
 8007568:	b086      	sub	sp, #24
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007584:	461a      	mov	r2, r3
 8007586:	2300      	movs	r3, #0
 8007588:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800759a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d119      	bne.n	80075ee <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80075ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d10a      	bne.n	80075d8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80075d0:	f043 0304 	orr.w	r3, r3, #4
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	e014      	b.n	8007602 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80075e6:	f023 0304 	bic.w	r3, r3, #4
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	e009      	b.n	8007602 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80075fc:	f023 0304 	bic.w	r3, r3, #4
 8007600:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007602:	2110      	movs	r1, #16
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff fe43 	bl	8007290 <USB_FlushTxFifo>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7ff fe6d 	bl	80072f4 <USB_FlushRxFifo>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007624:	2300      	movs	r3, #0
 8007626:	613b      	str	r3, [r7, #16]
 8007628:	e015      	b.n	8007656 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4413      	add	r3, r2
 8007632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007636:	461a      	mov	r2, r3
 8007638:	f04f 33ff 	mov.w	r3, #4294967295
 800763c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800764a:	461a      	mov	r2, r3
 800764c:	2300      	movs	r3, #0
 800764e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	3301      	adds	r3, #1
 8007654:	613b      	str	r3, [r7, #16]
 8007656:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800765a:	461a      	mov	r2, r3
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	4293      	cmp	r3, r2
 8007660:	d3e3      	bcc.n	800762a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f04f 32ff 	mov.w	r2, #4294967295
 800766e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a18      	ldr	r2, [pc, #96]	@ (80076d4 <USB_HostInit+0x170>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d10b      	bne.n	8007690 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800767e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a15      	ldr	r2, [pc, #84]	@ (80076d8 <USB_HostInit+0x174>)
 8007684:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a14      	ldr	r2, [pc, #80]	@ (80076dc <USB_HostInit+0x178>)
 800768a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800768e:	e009      	b.n	80076a4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2280      	movs	r2, #128	@ 0x80
 8007694:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a11      	ldr	r2, [pc, #68]	@ (80076e0 <USB_HostInit+0x17c>)
 800769a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a11      	ldr	r2, [pc, #68]	@ (80076e4 <USB_HostInit+0x180>)
 80076a0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d105      	bne.n	80076b8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	f043 0210 	orr.w	r2, r3, #16
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	699a      	ldr	r2, [r3, #24]
 80076bc:	4b0a      	ldr	r3, [pc, #40]	@ (80076e8 <USB_HostInit+0x184>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80076c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076d0:	b004      	add	sp, #16
 80076d2:	4770      	bx	lr
 80076d4:	40040000 	.word	0x40040000
 80076d8:	01000200 	.word	0x01000200
 80076dc:	00e00300 	.word	0x00e00300
 80076e0:	00600080 	.word	0x00600080
 80076e4:	004000e0 	.word	0x004000e0
 80076e8:	a3200008 	.word	0xa3200008

080076ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800770a:	f023 0303 	bic.w	r3, r3, #3
 800770e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	78fb      	ldrb	r3, [r7, #3]
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	68f9      	ldr	r1, [r7, #12]
 8007720:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007724:	4313      	orrs	r3, r2
 8007726:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007728:	78fb      	ldrb	r3, [r7, #3]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d107      	bne.n	800773e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007734:	461a      	mov	r2, r3
 8007736:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800773a:	6053      	str	r3, [r2, #4]
 800773c:	e00c      	b.n	8007758 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800773e:	78fb      	ldrb	r3, [r7, #3]
 8007740:	2b02      	cmp	r3, #2
 8007742:	d107      	bne.n	8007754 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800774a:	461a      	mov	r2, r3
 800774c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007750:	6053      	str	r3, [r2, #4]
 8007752:	e001      	b.n	8007758 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e000      	b.n	800775a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007786:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007794:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007796:	2064      	movs	r0, #100	@ 0x64
 8007798:	f7f9 fd7c 	bl	8001294 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80077a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077a8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80077aa:	200a      	movs	r0, #10
 80077ac:	f7f9 fd72 	bl	8001294 <HAL_Delay>

  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b085      	sub	sp, #20
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	460b      	mov	r3, r1
 80077c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80077de:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d109      	bne.n	80077fe <USB_DriveVbus+0x44>
 80077ea:	78fb      	ldrb	r3, [r7, #3]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d106      	bne.n	80077fe <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80077f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80077fc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007808:	d109      	bne.n	800781e <USB_DriveVbus+0x64>
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d106      	bne.n	800781e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007818:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800781c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	0c5b      	lsrs	r3, r3, #17
 800784a:	f003 0303 	and.w	r3, r3, #3
}
 800784e:	4618      	mov	r0, r3
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800785a:	b480      	push	{r7}
 800785c:	b085      	sub	sp, #20
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	b29b      	uxth	r3, r3
}
 8007870:	4618      	mov	r0, r3
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	4608      	mov	r0, r1
 8007886:	4611      	mov	r1, r2
 8007888:	461a      	mov	r2, r3
 800788a:	4603      	mov	r3, r0
 800788c:	70fb      	strb	r3, [r7, #3]
 800788e:	460b      	mov	r3, r1
 8007890:	70bb      	strb	r3, [r7, #2]
 8007892:	4613      	mov	r3, r2
 8007894:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078aa:	461a      	mov	r2, r3
 80078ac:	f04f 33ff 	mov.w	r3, #4294967295
 80078b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80078b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d87c      	bhi.n	80079b4 <USB_HC_Init+0x138>
 80078ba:	a201      	add	r2, pc, #4	@ (adr r2, 80078c0 <USB_HC_Init+0x44>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	080078d1 	.word	0x080078d1
 80078c4:	08007977 	.word	0x08007977
 80078c8:	080078d1 	.word	0x080078d1
 80078cc:	08007939 	.word	0x08007939
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078dc:	461a      	mov	r2, r3
 80078de:	f240 439d 	movw	r3, #1181	@ 0x49d
 80078e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80078e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	da10      	bge.n	800790e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	78fa      	ldrb	r2, [r7, #3]
 80078fc:	0151      	lsls	r1, r2, #5
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	440a      	add	r2, r1
 8007902:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800790a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800790c:	e055      	b.n	80079ba <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a6f      	ldr	r2, [pc, #444]	@ (8007ad0 <USB_HC_Init+0x254>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d151      	bne.n	80079ba <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007916:	78fb      	ldrb	r3, [r7, #3]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	4413      	add	r3, r2
 800791e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	78fa      	ldrb	r2, [r7, #3]
 8007926:	0151      	lsls	r1, r2, #5
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	440a      	add	r2, r1
 800792c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007930:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007934:	60d3      	str	r3, [r2, #12]
      break;
 8007936:	e040      	b.n	80079ba <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	4413      	add	r3, r2
 8007940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007944:	461a      	mov	r2, r3
 8007946:	f240 639d 	movw	r3, #1693	@ 0x69d
 800794a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800794c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007950:	2b00      	cmp	r3, #0
 8007952:	da34      	bge.n	80079be <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	4413      	add	r3, r2
 800795c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	78fa      	ldrb	r2, [r7, #3]
 8007964:	0151      	lsls	r1, r2, #5
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	440a      	add	r2, r1
 800796a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800796e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007972:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007974:	e023      	b.n	80079be <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007976:	78fb      	ldrb	r3, [r7, #3]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	4413      	add	r3, r2
 800797e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007982:	461a      	mov	r2, r3
 8007984:	f240 2325 	movw	r3, #549	@ 0x225
 8007988:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800798a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800798e:	2b00      	cmp	r3, #0
 8007990:	da17      	bge.n	80079c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007992:	78fb      	ldrb	r3, [r7, #3]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	4413      	add	r3, r2
 800799a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	78fa      	ldrb	r2, [r7, #3]
 80079a2:	0151      	lsls	r1, r2, #5
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	440a      	add	r2, r1
 80079a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079ac:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80079b0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80079b2:	e006      	b.n	80079c2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	77fb      	strb	r3, [r7, #31]
      break;
 80079b8:	e004      	b.n	80079c4 <USB_HC_Init+0x148>
      break;
 80079ba:	bf00      	nop
 80079bc:	e002      	b.n	80079c4 <USB_HC_Init+0x148>
      break;
 80079be:	bf00      	nop
 80079c0:	e000      	b.n	80079c4 <USB_HC_Init+0x148>
      break;
 80079c2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079d0:	461a      	mov	r2, r3
 80079d2:	2300      	movs	r3, #0
 80079d4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80079d6:	78fb      	ldrb	r3, [r7, #3]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	78fa      	ldrb	r2, [r7, #3]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079f0:	f043 0302 	orr.w	r3, r3, #2
 80079f4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079fc:	699a      	ldr	r2, [r3, #24]
 80079fe:	78fb      	ldrb	r3, [r7, #3]
 8007a00:	f003 030f 	and.w	r3, r3, #15
 8007a04:	2101      	movs	r1, #1
 8007a06:	fa01 f303 	lsl.w	r3, r1, r3
 8007a0a:	6939      	ldr	r1, [r7, #16]
 8007a0c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007a10:	4313      	orrs	r3, r2
 8007a12:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007a20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	da03      	bge.n	8007a30 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007a28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a2c:	61bb      	str	r3, [r7, #24]
 8007a2e:	e001      	b.n	8007a34 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff fef9 	bl	800782c <USB_GetHostSpeed>
 8007a3a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007a3c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d106      	bne.n	8007a52 <USB_HC_Init+0x1d6>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d003      	beq.n	8007a52 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007a4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007a4e:	617b      	str	r3, [r7, #20]
 8007a50:	e001      	b.n	8007a56 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a56:	787b      	ldrb	r3, [r7, #1]
 8007a58:	059b      	lsls	r3, r3, #22
 8007a5a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a5e:	78bb      	ldrb	r3, [r7, #2]
 8007a60:	02db      	lsls	r3, r3, #11
 8007a62:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a66:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007a6c:	049b      	lsls	r3, r3, #18
 8007a6e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a72:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007a74:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007a76:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a7a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a84:	78fa      	ldrb	r2, [r7, #3]
 8007a86:	0151      	lsls	r1, r2, #5
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	440a      	add	r2, r1
 8007a8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007a90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a94:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007a96:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d003      	beq.n	8007aa6 <USB_HC_Init+0x22a>
 8007a9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d10f      	bne.n	8007ac6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007aa6:	78fb      	ldrb	r3, [r7, #3]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	78fa      	ldrb	r2, [r7, #3]
 8007ab6:	0151      	lsls	r1, r2, #5
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	440a      	add	r2, r1
 8007abc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ac0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ac4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007ac6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3720      	adds	r7, #32
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	40040000 	.word	0x40040000

08007ad4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08c      	sub	sp, #48	@ 0x30
 8007ad8:	af02      	add	r7, sp, #8
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	785b      	ldrb	r3, [r3, #1]
 8007aea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007af0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4a5d      	ldr	r2, [pc, #372]	@ (8007c6c <USB_HC_StartXfer+0x198>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d12f      	bne.n	8007b5a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d11c      	bne.n	8007b3a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	7c9b      	ldrb	r3, [r3, #18]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d003      	beq.n	8007b10 <USB_HC_StartXfer+0x3c>
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	7c9b      	ldrb	r3, [r3, #18]
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d124      	bne.n	8007b5a <USB_HC_StartXfer+0x86>
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	799b      	ldrb	r3, [r3, #6]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d120      	bne.n	8007b5a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	69fa      	ldr	r2, [r7, #28]
 8007b28:	0151      	lsls	r1, r2, #5
 8007b2a:	6a3a      	ldr	r2, [r7, #32]
 8007b2c:	440a      	add	r2, r1
 8007b2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b36:	60d3      	str	r3, [r2, #12]
 8007b38:	e00f      	b.n	8007b5a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	791b      	ldrb	r3, [r3, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10b      	bne.n	8007b5a <USB_HC_StartXfer+0x86>
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	795b      	ldrb	r3, [r3, #5]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d107      	bne.n	8007b5a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	785b      	ldrb	r3, [r3, #1]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 fb6b 	bl	800822c <USB_DoPing>
        return HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	e232      	b.n	8007fc0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	799b      	ldrb	r3, [r3, #6]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d158      	bne.n	8007c14 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007b62:	2301      	movs	r3, #1
 8007b64:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	78db      	ldrb	r3, [r3, #3]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d007      	beq.n	8007b7e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	8a92      	ldrh	r2, [r2, #20]
 8007b74:	fb03 f202 	mul.w	r2, r3, r2
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	61da      	str	r2, [r3, #28]
 8007b7c:	e07c      	b.n	8007c78 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	7c9b      	ldrb	r3, [r3, #18]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d130      	bne.n	8007be8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	2bbc      	cmp	r3, #188	@ 0xbc
 8007b8c:	d918      	bls.n	8007bc0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	8a9b      	ldrh	r3, [r3, #20]
 8007b92:	461a      	mov	r2, r3
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	69da      	ldr	r2, [r3, #28]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d003      	beq.n	8007bb0 <USB_HC_StartXfer+0xdc>
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d103      	bne.n	8007bb8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	60da      	str	r2, [r3, #12]
 8007bb6:	e05f      	b.n	8007c78 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	60da      	str	r2, [r3, #12]
 8007bbe:	e05b      	b.n	8007c78 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	6a1a      	ldr	r2, [r3, #32]
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d007      	beq.n	8007be0 <USB_HC_StartXfer+0x10c>
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d003      	beq.n	8007be0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2204      	movs	r2, #4
 8007bdc:	60da      	str	r2, [r3, #12]
 8007bde:	e04b      	b.n	8007c78 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2203      	movs	r2, #3
 8007be4:	60da      	str	r2, [r3, #12]
 8007be6:	e047      	b.n	8007c78 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007be8:	79fb      	ldrb	r3, [r7, #7]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d10d      	bne.n	8007c0a <USB_HC_StartXfer+0x136>
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	8a92      	ldrh	r2, [r2, #20]
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d907      	bls.n	8007c0a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007bfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	8a92      	ldrh	r2, [r2, #20]
 8007c00:	fb03 f202 	mul.w	r2, r3, r2
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	61da      	str	r2, [r3, #28]
 8007c08:	e036      	b.n	8007c78 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	6a1a      	ldr	r2, [r3, #32]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	61da      	str	r2, [r3, #28]
 8007c12:	e031      	b.n	8007c78 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	6a1b      	ldr	r3, [r3, #32]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d018      	beq.n	8007c4e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	8a92      	ldrh	r2, [r2, #20]
 8007c24:	4413      	add	r3, r2
 8007c26:	3b01      	subs	r3, #1
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	8a92      	ldrh	r2, [r2, #20]
 8007c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c30:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007c32:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007c34:	8b7b      	ldrh	r3, [r7, #26]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d90b      	bls.n	8007c52 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007c3a:	8b7b      	ldrh	r3, [r7, #26]
 8007c3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	8a92      	ldrh	r2, [r2, #20]
 8007c44:	fb03 f202 	mul.w	r2, r3, r2
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	61da      	str	r2, [r3, #28]
 8007c4c:	e001      	b.n	8007c52 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	78db      	ldrb	r3, [r3, #3]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	8a92      	ldrh	r2, [r2, #20]
 8007c60:	fb03 f202 	mul.w	r2, r3, r2
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	61da      	str	r2, [r3, #28]
 8007c68:	e006      	b.n	8007c78 <USB_HC_StartXfer+0x1a4>
 8007c6a:	bf00      	nop
 8007c6c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	6a1a      	ldr	r2, [r3, #32]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c80:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007c82:	04d9      	lsls	r1, r3, #19
 8007c84:	4ba3      	ldr	r3, [pc, #652]	@ (8007f14 <USB_HC_StartXfer+0x440>)
 8007c86:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c88:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	7d9b      	ldrb	r3, [r3, #22]
 8007c8e:	075b      	lsls	r3, r3, #29
 8007c90:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c94:	69f9      	ldr	r1, [r7, #28]
 8007c96:	0148      	lsls	r0, r1, #5
 8007c98:	6a39      	ldr	r1, [r7, #32]
 8007c9a:	4401      	add	r1, r0
 8007c9c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ca0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ca2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d009      	beq.n	8007cbe <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	6999      	ldr	r1, [r3, #24]
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cba:	460a      	mov	r2, r1
 8007cbc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bf0c      	ite	eq
 8007cce:	2301      	moveq	r3, #1
 8007cd0:	2300      	movne	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	69fa      	ldr	r2, [r7, #28]
 8007ce6:	0151      	lsls	r1, r2, #5
 8007ce8:	6a3a      	ldr	r2, [r7, #32]
 8007cea:	440a      	add	r2, r1
 8007cec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cf0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007cf4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	7e7b      	ldrb	r3, [r7, #25]
 8007d06:	075b      	lsls	r3, r3, #29
 8007d08:	69f9      	ldr	r1, [r7, #28]
 8007d0a:	0148      	lsls	r0, r1, #5
 8007d0c:	6a39      	ldr	r1, [r7, #32]
 8007d0e:	4401      	add	r1, r0
 8007d10:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007d14:	4313      	orrs	r3, r2
 8007d16:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	799b      	ldrb	r3, [r3, #6]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	f040 80c3 	bne.w	8007ea8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	7c5b      	ldrb	r3, [r3, #17]
 8007d26:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	69fa      	ldr	r2, [r7, #28]
 8007d30:	0151      	lsls	r1, r2, #5
 8007d32:	6a3a      	ldr	r2, [r7, #32]
 8007d34:	440a      	add	r2, r1
 8007d36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007d3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007d3e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	69fa      	ldr	r2, [r7, #28]
 8007d50:	0151      	lsls	r1, r2, #5
 8007d52:	6a3a      	ldr	r2, [r7, #32]
 8007d54:	440a      	add	r2, r1
 8007d56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d5a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007d5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	79db      	ldrb	r3, [r3, #7]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d123      	bne.n	8007db0 <USB_HC_StartXfer+0x2dc>
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	78db      	ldrb	r3, [r3, #3]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d11f      	bne.n	8007db0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	0151      	lsls	r1, r2, #5
 8007d82:	6a3a      	ldr	r2, [r7, #32]
 8007d84:	440a      	add	r2, r1
 8007d86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d8e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	69fa      	ldr	r2, [r7, #28]
 8007da0:	0151      	lsls	r1, r2, #5
 8007da2:	6a3a      	ldr	r2, [r7, #32]
 8007da4:	440a      	add	r2, r1
 8007da6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dae:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	7c9b      	ldrb	r3, [r3, #18]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d003      	beq.n	8007dc0 <USB_HC_StartXfer+0x2ec>
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	7c9b      	ldrb	r3, [r3, #18]
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d117      	bne.n	8007df0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d113      	bne.n	8007df0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	78db      	ldrb	r3, [r3, #3]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d10f      	bne.n	8007df0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	69fa      	ldr	r2, [r7, #28]
 8007de0:	0151      	lsls	r1, r2, #5
 8007de2:	6a3a      	ldr	r2, [r7, #32]
 8007de4:	440a      	add	r2, r1
 8007de6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dee:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	7c9b      	ldrb	r3, [r3, #18]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d162      	bne.n	8007ebe <USB_HC_StartXfer+0x3ea>
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	78db      	ldrb	r3, [r3, #3]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d15e      	bne.n	8007ebe <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d858      	bhi.n	8007ebc <USB_HC_StartXfer+0x3e8>
 8007e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e10 <USB_HC_StartXfer+0x33c>)
 8007e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e10:	08007e21 	.word	0x08007e21
 8007e14:	08007e43 	.word	0x08007e43
 8007e18:	08007e65 	.word	0x08007e65
 8007e1c:	08007e87 	.word	0x08007e87
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	69fa      	ldr	r2, [r7, #28]
 8007e30:	0151      	lsls	r1, r2, #5
 8007e32:	6a3a      	ldr	r2, [r7, #32]
 8007e34:	440a      	add	r2, r1
 8007e36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e3e:	6053      	str	r3, [r2, #4]
          break;
 8007e40:	e03d      	b.n	8007ebe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	015a      	lsls	r2, r3, #5
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	69fa      	ldr	r2, [r7, #28]
 8007e52:	0151      	lsls	r1, r2, #5
 8007e54:	6a3a      	ldr	r2, [r7, #32]
 8007e56:	440a      	add	r2, r1
 8007e58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e5c:	f043 030e 	orr.w	r3, r3, #14
 8007e60:	6053      	str	r3, [r2, #4]
          break;
 8007e62:	e02c      	b.n	8007ebe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	0151      	lsls	r1, r2, #5
 8007e76:	6a3a      	ldr	r2, [r7, #32]
 8007e78:	440a      	add	r2, r1
 8007e7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e82:	6053      	str	r3, [r2, #4]
          break;
 8007e84:	e01b      	b.n	8007ebe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	69fa      	ldr	r2, [r7, #28]
 8007e96:	0151      	lsls	r1, r2, #5
 8007e98:	6a3a      	ldr	r2, [r7, #32]
 8007e9a:	440a      	add	r2, r1
 8007e9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ea0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ea4:	6053      	str	r3, [r2, #4]
          break;
 8007ea6:	e00a      	b.n	8007ebe <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	6053      	str	r3, [r2, #4]
 8007eba:	e000      	b.n	8007ebe <USB_HC_StartXfer+0x3ea>
          break;
 8007ebc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	015a      	lsls	r2, r3, #5
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ed4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	78db      	ldrb	r3, [r3, #3]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d004      	beq.n	8007ee8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ee4:	613b      	str	r3, [r7, #16]
 8007ee6:	e003      	b.n	8007ef0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007eee:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ef6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f04:	461a      	mov	r2, r3
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007f0a:	79fb      	ldrb	r3, [r7, #7]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	e055      	b.n	8007fc0 <USB_HC_StartXfer+0x4ec>
 8007f14:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	78db      	ldrb	r3, [r3, #3]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d14e      	bne.n	8007fbe <USB_HC_StartXfer+0x4ea>
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d04a      	beq.n	8007fbe <USB_HC_StartXfer+0x4ea>
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	79db      	ldrb	r3, [r3, #7]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d146      	bne.n	8007fbe <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	7c9b      	ldrb	r3, [r3, #18]
 8007f34:	2b03      	cmp	r3, #3
 8007f36:	d831      	bhi.n	8007f9c <USB_HC_StartXfer+0x4c8>
 8007f38:	a201      	add	r2, pc, #4	@ (adr r2, 8007f40 <USB_HC_StartXfer+0x46c>)
 8007f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3e:	bf00      	nop
 8007f40:	08007f51 	.word	0x08007f51
 8007f44:	08007f75 	.word	0x08007f75
 8007f48:	08007f51 	.word	0x08007f51
 8007f4c:	08007f75 	.word	0x08007f75
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	3303      	adds	r3, #3
 8007f56:	089b      	lsrs	r3, r3, #2
 8007f58:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007f5a:	8afa      	ldrh	r2, [r7, #22]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d91c      	bls.n	8007fa0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	f043 0220 	orr.w	r2, r3, #32
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	619a      	str	r2, [r3, #24]
        }
        break;
 8007f72:	e015      	b.n	8007fa0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	6a1b      	ldr	r3, [r3, #32]
 8007f78:	3303      	adds	r3, #3
 8007f7a:	089b      	lsrs	r3, r3, #2
 8007f7c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007f7e:	8afa      	ldrh	r2, [r7, #22]
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d90a      	bls.n	8007fa4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	619a      	str	r2, [r3, #24]
        }
        break;
 8007f9a:	e003      	b.n	8007fa4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007f9c:	bf00      	nop
 8007f9e:	e002      	b.n	8007fa6 <USB_HC_StartXfer+0x4d2>
        break;
 8007fa0:	bf00      	nop
 8007fa2:	e000      	b.n	8007fa6 <USB_HC_StartXfer+0x4d2>
        break;
 8007fa4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	6999      	ldr	r1, [r3, #24]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	785a      	ldrb	r2, [r3, #1]
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	9000      	str	r0, [sp, #0]
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f7ff f9c9 	bl	8007350 <USB_WritePacket>
  }

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3728      	adds	r7, #40	@ 0x28
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	b29b      	uxth	r3, r3
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b089      	sub	sp, #36	@ 0x24
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007ffa:	78fb      	ldrb	r3, [r7, #3]
 8007ffc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	4413      	add	r3, r2
 800800a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	0c9b      	lsrs	r3, r3, #18
 8008012:	f003 0303 	and.w	r3, r3, #3
 8008016:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	4413      	add	r3, r2
 8008020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	0fdb      	lsrs	r3, r3, #31
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	4413      	add	r3, r2
 8008036:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	0fdb      	lsrs	r3, r3, #31
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f003 0320 	and.w	r3, r3, #32
 800804c:	2b20      	cmp	r3, #32
 800804e:	d10d      	bne.n	800806c <USB_HC_Halt+0x82>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10a      	bne.n	800806c <USB_HC_Halt+0x82>
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d005      	beq.n	8008068 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d002      	beq.n	8008068 <USB_HC_Halt+0x7e>
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	2b03      	cmp	r3, #3
 8008066:	d101      	bne.n	800806c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	e0d8      	b.n	800821e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d002      	beq.n	8008078 <USB_HC_Halt+0x8e>
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	2b02      	cmp	r3, #2
 8008076:	d173      	bne.n	8008160 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	4413      	add	r3, r2
 8008080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	0151      	lsls	r1, r2, #5
 800808a:	69fa      	ldr	r2, [r7, #28]
 800808c:	440a      	add	r2, r1
 800808e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008092:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008096:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f003 0320 	and.w	r3, r3, #32
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d14a      	bne.n	800813a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d133      	bne.n	8008118 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	015a      	lsls	r2, r3, #5
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	4413      	add	r3, r2
 80080b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	69ba      	ldr	r2, [r7, #24]
 80080c0:	0151      	lsls	r1, r2, #5
 80080c2:	69fa      	ldr	r2, [r7, #28]
 80080c4:	440a      	add	r2, r1
 80080c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080ce:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	0151      	lsls	r1, r2, #5
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	440a      	add	r2, r1
 80080e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080ee:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	3301      	adds	r3, #1
 80080f4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080fc:	d82e      	bhi.n	800815c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	4413      	add	r3, r2
 8008106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008110:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008114:	d0ec      	beq.n	80080f0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008116:	e081      	b.n	800821c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	4413      	add	r3, r2
 8008120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	0151      	lsls	r1, r2, #5
 800812a:	69fa      	ldr	r2, [r7, #28]
 800812c:	440a      	add	r2, r1
 800812e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008132:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008136:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008138:	e070      	b.n	800821c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	4413      	add	r3, r2
 8008142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	0151      	lsls	r1, r2, #5
 800814c:	69fa      	ldr	r2, [r7, #28]
 800814e:	440a      	add	r2, r1
 8008150:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008158:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800815a:	e05f      	b.n	800821c <USB_HC_Halt+0x232>
            break;
 800815c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800815e:	e05d      	b.n	800821c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	4413      	add	r3, r2
 8008168:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	0151      	lsls	r1, r2, #5
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	440a      	add	r2, r1
 8008176:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800817a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800817e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d133      	bne.n	80081f8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	4413      	add	r3, r2
 8008198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	0151      	lsls	r1, r2, #5
 80081a2:	69fa      	ldr	r2, [r7, #28]
 80081a4:	440a      	add	r2, r1
 80081a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	0151      	lsls	r1, r2, #5
 80081c2:	69fa      	ldr	r2, [r7, #28]
 80081c4:	440a      	add	r2, r1
 80081c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081ce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	3301      	adds	r3, #1
 80081d4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80081dc:	d81d      	bhi.n	800821a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081f4:	d0ec      	beq.n	80081d0 <USB_HC_Halt+0x1e6>
 80081f6:	e011      	b.n	800821c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	015a      	lsls	r2, r3, #5
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	4413      	add	r3, r2
 8008200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	69ba      	ldr	r2, [r7, #24]
 8008208:	0151      	lsls	r1, r2, #5
 800820a:	69fa      	ldr	r2, [r7, #28]
 800820c:	440a      	add	r2, r1
 800820e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008212:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	e000      	b.n	800821c <USB_HC_Halt+0x232>
          break;
 800821a:	bf00      	nop
    }
  }

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3724      	adds	r7, #36	@ 0x24
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
	...

0800822c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008240:	2301      	movs	r3, #1
 8008242:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	04da      	lsls	r2, r3, #19
 8008248:	4b15      	ldr	r3, [pc, #84]	@ (80082a0 <USB_DoPing+0x74>)
 800824a:	4013      	ands	r3, r2
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	0151      	lsls	r1, r2, #5
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	440a      	add	r2, r1
 8008254:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008258:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800825c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	015a      	lsls	r2, r3, #5
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	4413      	add	r3, r2
 8008266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008274:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800827c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	4413      	add	r3, r2
 8008286:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800828a:	461a      	mov	r2, r3
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	371c      	adds	r7, #28
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	1ff80000 	.word	0x1ff80000

080082a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80082b4:	2300      	movs	r3, #0
 80082b6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7fe ff8c 	bl	80071d6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80082be:	2110      	movs	r1, #16
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f7fe ffe5 	bl	8007290 <USB_FlushTxFifo>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff f80f 	bl	80072f4 <USB_FlushRxFifo>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80082e0:	2300      	movs	r3, #0
 80082e2:	61bb      	str	r3, [r7, #24]
 80082e4:	e01f      	b.n	8008326 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008304:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800830c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	4413      	add	r3, r2
 8008316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800831a:	461a      	mov	r2, r3
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	3301      	adds	r3, #1
 8008324:	61bb      	str	r3, [r7, #24]
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	2b0f      	cmp	r3, #15
 800832a:	d9dc      	bls.n	80082e6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800832c:	2300      	movs	r3, #0
 800832e:	61bb      	str	r3, [r7, #24]
 8008330:	e034      	b.n	800839c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	4413      	add	r3, r2
 800833a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008348:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008350:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008358:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	015a      	lsls	r2, r3, #5
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	4413      	add	r3, r2
 8008362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008366:	461a      	mov	r2, r3
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3301      	adds	r3, #1
 8008370:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008378:	d80c      	bhi.n	8008394 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	4413      	add	r3, r2
 8008382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800838c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008390:	d0ec      	beq.n	800836c <USB_StopHost+0xc8>
 8008392:	e000      	b.n	8008396 <USB_StopHost+0xf2>
        break;
 8008394:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	3301      	adds	r3, #1
 800839a:	61bb      	str	r3, [r7, #24]
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	2b0f      	cmp	r3, #15
 80083a0:	d9c7      	bls.n	8008332 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083a8:	461a      	mov	r2, r3
 80083aa:	f04f 33ff 	mov.w	r3, #4294967295
 80083ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f04f 32ff 	mov.w	r2, #4294967295
 80083b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7fe fefb 	bl	80071b4 <USB_EnableGlobalInt>

  return ret;
 80083be:	7ffb      	ldrb	r3, [r7, #31]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3720      	adds	r7, #32
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80083c8:	b590      	push	{r4, r7, lr}
 80083ca:	b089      	sub	sp, #36	@ 0x24
 80083cc:	af04      	add	r7, sp, #16
 80083ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80083d0:	2301      	movs	r3, #1
 80083d2:	2202      	movs	r2, #2
 80083d4:	2102      	movs	r1, #2
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fc85 	bl	8008ce6 <USBH_FindInterface>
 80083dc:	4603      	mov	r3, r0
 80083de:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	2bff      	cmp	r3, #255	@ 0xff
 80083e4:	d002      	beq.n	80083ec <USBH_CDC_InterfaceInit+0x24>
 80083e6:	7bfb      	ldrb	r3, [r7, #15]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d901      	bls.n	80083f0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80083ec:	2302      	movs	r3, #2
 80083ee:	e13d      	b.n	800866c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fc5a 	bl	8008cae <USBH_SelectInterface>
 80083fa:	4603      	mov	r3, r0
 80083fc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008404:	2302      	movs	r3, #2
 8008406:	e131      	b.n	800866c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800840e:	2050      	movs	r0, #80	@ 0x50
 8008410:	f002 fb64 	bl	800aadc <malloc>
 8008414:	4603      	mov	r3, r0
 8008416:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008428:	2302      	movs	r3, #2
 800842a:	e11f      	b.n	800866c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800842c:	2250      	movs	r2, #80	@ 0x50
 800842e:	2100      	movs	r1, #0
 8008430:	68b8      	ldr	r0, [r7, #8]
 8008432:	f002 fc31 	bl	800ac98 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	211a      	movs	r1, #26
 800843c:	fb01 f303 	mul.w	r3, r1, r3
 8008440:	4413      	add	r3, r2
 8008442:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	b25b      	sxtb	r3, r3
 800844a:	2b00      	cmp	r3, #0
 800844c:	da15      	bge.n	800847a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	211a      	movs	r1, #26
 8008454:	fb01 f303 	mul.w	r3, r1, r3
 8008458:	4413      	add	r3, r2
 800845a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800845e:	781a      	ldrb	r2, [r3, #0]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	211a      	movs	r1, #26
 800846a:	fb01 f303 	mul.w	r3, r1, r3
 800846e:	4413      	add	r3, r2
 8008470:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008474:	881a      	ldrh	r2, [r3, #0]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	785b      	ldrb	r3, [r3, #1]
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f001 ffbe 	bl	800a402 <USBH_AllocPipe>
 8008486:	4603      	mov	r3, r0
 8008488:	461a      	mov	r2, r3
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	7819      	ldrb	r1, [r3, #0]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	7858      	ldrb	r0, [r3, #1]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	8952      	ldrh	r2, [r2, #10]
 80084a6:	9202      	str	r2, [sp, #8]
 80084a8:	2203      	movs	r2, #3
 80084aa:	9201      	str	r2, [sp, #4]
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	4623      	mov	r3, r4
 80084b0:	4602      	mov	r2, r0
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f001 ff76 	bl	800a3a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	2200      	movs	r2, #0
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f002 fa85 	bl	800a9d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80084c6:	2300      	movs	r3, #0
 80084c8:	2200      	movs	r2, #0
 80084ca:	210a      	movs	r1, #10
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fc0a 	bl	8008ce6 <USBH_FindInterface>
 80084d2:	4603      	mov	r3, r0
 80084d4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
 80084d8:	2bff      	cmp	r3, #255	@ 0xff
 80084da:	d002      	beq.n	80084e2 <USBH_CDC_InterfaceInit+0x11a>
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d901      	bls.n	80084e6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80084e2:	2302      	movs	r3, #2
 80084e4:	e0c2      	b.n	800866c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	211a      	movs	r1, #26
 80084ec:	fb01 f303 	mul.w	r3, r1, r3
 80084f0:	4413      	add	r3, r2
 80084f2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	b25b      	sxtb	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	da16      	bge.n	800852c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	211a      	movs	r1, #26
 8008504:	fb01 f303 	mul.w	r3, r1, r3
 8008508:	4413      	add	r3, r2
 800850a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800850e:	781a      	ldrb	r2, [r3, #0]
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	211a      	movs	r1, #26
 800851a:	fb01 f303 	mul.w	r3, r1, r3
 800851e:	4413      	add	r3, r2
 8008520:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008524:	881a      	ldrh	r2, [r3, #0]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	835a      	strh	r2, [r3, #26]
 800852a:	e015      	b.n	8008558 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	211a      	movs	r1, #26
 8008532:	fb01 f303 	mul.w	r3, r1, r3
 8008536:	4413      	add	r3, r2
 8008538:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800853c:	781a      	ldrb	r2, [r3, #0]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	211a      	movs	r1, #26
 8008548:	fb01 f303 	mul.w	r3, r1, r3
 800854c:	4413      	add	r3, r2
 800854e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008552:	881a      	ldrh	r2, [r3, #0]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	211a      	movs	r1, #26
 800855e:	fb01 f303 	mul.w	r3, r1, r3
 8008562:	4413      	add	r3, r2
 8008564:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	b25b      	sxtb	r3, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	da16      	bge.n	800859e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008570:	7bfb      	ldrb	r3, [r7, #15]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	211a      	movs	r1, #26
 8008576:	fb01 f303 	mul.w	r3, r1, r3
 800857a:	4413      	add	r3, r2
 800857c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008580:	781a      	ldrb	r2, [r3, #0]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	211a      	movs	r1, #26
 800858c:	fb01 f303 	mul.w	r3, r1, r3
 8008590:	4413      	add	r3, r2
 8008592:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008596:	881a      	ldrh	r2, [r3, #0]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	835a      	strh	r2, [r3, #26]
 800859c:	e015      	b.n	80085ca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	211a      	movs	r1, #26
 80085a4:	fb01 f303 	mul.w	r3, r1, r3
 80085a8:	4413      	add	r3, r2
 80085aa:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80085ae:	781a      	ldrb	r2, [r3, #0]
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	211a      	movs	r1, #26
 80085ba:	fb01 f303 	mul.w	r3, r1, r3
 80085be:	4413      	add	r3, r2
 80085c0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80085c4:	881a      	ldrh	r2, [r3, #0]
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	7b9b      	ldrb	r3, [r3, #14]
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 ff16 	bl	800a402 <USBH_AllocPipe>
 80085d6:	4603      	mov	r3, r0
 80085d8:	461a      	mov	r2, r3
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	7bdb      	ldrb	r3, [r3, #15]
 80085e2:	4619      	mov	r1, r3
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 ff0c 	bl	800a402 <USBH_AllocPipe>
 80085ea:	4603      	mov	r3, r0
 80085ec:	461a      	mov	r2, r3
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	7b59      	ldrb	r1, [r3, #13]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	7b98      	ldrb	r0, [r3, #14]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	8b12      	ldrh	r2, [r2, #24]
 800860a:	9202      	str	r2, [sp, #8]
 800860c:	2202      	movs	r2, #2
 800860e:	9201      	str	r2, [sp, #4]
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	4623      	mov	r3, r4
 8008614:	4602      	mov	r2, r0
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 fec4 	bl	800a3a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	7b19      	ldrb	r1, [r3, #12]
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	7bd8      	ldrb	r0, [r3, #15]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	8b52      	ldrh	r2, [r2, #26]
 8008634:	9202      	str	r2, [sp, #8]
 8008636:	2202      	movs	r2, #2
 8008638:	9201      	str	r2, [sp, #4]
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	4623      	mov	r3, r4
 800863e:	4602      	mov	r2, r0
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 feaf 	bl	800a3a4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	7b5b      	ldrb	r3, [r3, #13]
 8008652:	2200      	movs	r2, #0
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f002 f9ba 	bl	800a9d0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	7b1b      	ldrb	r3, [r3, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f002 f9b3 	bl	800a9d0 <USBH_LL_SetToggle>

  return USBH_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	bd90      	pop	{r4, r7, pc}

08008674 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00e      	beq.n	80086ac <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 fea4 	bl	800a3e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f001 fecf 	bl	800a444 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	7b1b      	ldrb	r3, [r3, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00e      	beq.n	80086d2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	7b1b      	ldrb	r3, [r3, #12]
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 fe91 	bl	800a3e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	7b1b      	ldrb	r3, [r3, #12]
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f001 febc 	bl	800a444 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	7b5b      	ldrb	r3, [r3, #13]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00e      	beq.n	80086f8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	7b5b      	ldrb	r3, [r3, #13]
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f001 fe7e 	bl	800a3e2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	7b5b      	ldrb	r3, [r3, #13]
 80086ea:	4619      	mov	r1, r3
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f001 fea9 	bl	800a444 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00b      	beq.n	800871c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	4618      	mov	r0, r3
 800870e:	f002 f9ed 	bl	800aaec <free>
    phost->pActiveClass->pData = 0U;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008718:	2200      	movs	r2, #0
 800871a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	3340      	adds	r3, #64	@ 0x40
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f8b1 	bl	80088a6 <GetLineCoding>
 8008744:	4603      	mov	r3, r0
 8008746:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008748:	7afb      	ldrb	r3, [r7, #11]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d105      	bne.n	800875a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008754:	2102      	movs	r1, #2
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800875a:	7afb      	ldrb	r3, [r7, #11]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800876c:	2301      	movs	r3, #1
 800876e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800877a:	69db      	ldr	r3, [r3, #28]
 800877c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008784:	2b04      	cmp	r3, #4
 8008786:	d877      	bhi.n	8008878 <USBH_CDC_Process+0x114>
 8008788:	a201      	add	r2, pc, #4	@ (adr r2, 8008790 <USBH_CDC_Process+0x2c>)
 800878a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878e:	bf00      	nop
 8008790:	080087a5 	.word	0x080087a5
 8008794:	080087ab 	.word	0x080087ab
 8008798:	080087db 	.word	0x080087db
 800879c:	0800884f 	.word	0x0800884f
 80087a0:	0800885d 	.word	0x0800885d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73fb      	strb	r3, [r7, #15]
      break;
 80087a8:	e06d      	b.n	8008886 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f897 	bl	80088e4 <SetLineCoding>
 80087b6:	4603      	mov	r3, r0
 80087b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d104      	bne.n	80087ca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80087c8:	e058      	b.n	800887c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d055      	beq.n	800887c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2204      	movs	r2, #4
 80087d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80087d8:	e050      	b.n	800887c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	3340      	adds	r3, #64	@ 0x40
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f860 	bl	80088a6 <GetLineCoding>
 80087e6:	4603      	mov	r3, r0
 80087e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d126      	bne.n	800883e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008802:	791b      	ldrb	r3, [r3, #4]
 8008804:	429a      	cmp	r2, r3
 8008806:	d13b      	bne.n	8008880 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008812:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008814:	429a      	cmp	r2, r3
 8008816:	d133      	bne.n	8008880 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008822:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008824:	429a      	cmp	r2, r3
 8008826:	d12b      	bne.n	8008880 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008830:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008832:	429a      	cmp	r2, r3
 8008834:	d124      	bne.n	8008880 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f958 	bl	8008aec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800883c:	e020      	b.n	8008880 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d01d      	beq.n	8008880 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2204      	movs	r2, #4
 8008848:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800884c:	e018      	b.n	8008880 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f867 	bl	8008922 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f8da 	bl	8008a0e <CDC_ProcessReception>
      break;
 800885a:	e014      	b.n	8008886 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800885c:	2100      	movs	r1, #0
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f001 f81a 	bl	8009898 <USBH_ClrFeature>
 8008864:	4603      	mov	r3, r0
 8008866:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008868:	7bbb      	ldrb	r3, [r7, #14]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008876:	e005      	b.n	8008884 <USBH_CDC_Process+0x120>

    default:
      break;
 8008878:	bf00      	nop
 800887a:	e004      	b.n	8008886 <USBH_CDC_Process+0x122>
      break;
 800887c:	bf00      	nop
 800887e:	e002      	b.n	8008886 <USBH_CDC_Process+0x122>
      break;
 8008880:	bf00      	nop
 8008882:	e000      	b.n	8008886 <USBH_CDC_Process+0x122>
      break;
 8008884:	bf00      	nop

  }

  return status;
 8008886:	7bfb      	ldrb	r3, [r7, #15]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	22a1      	movs	r2, #161	@ 0xa1
 80088b4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2221      	movs	r2, #33	@ 0x21
 80088ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2207      	movs	r2, #7
 80088cc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	2207      	movs	r2, #7
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f001 fb14 	bl	8009f02 <USBH_CtlReq>
 80088da:	4603      	mov	r3, r0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2221      	movs	r2, #33	@ 0x21
 80088f2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2220      	movs	r2, #32
 80088f8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2207      	movs	r2, #7
 800890a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2207      	movs	r2, #7
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f001 faf5 	bl	8009f02 <USBH_CtlReq>
 8008918:	4603      	mov	r3, r0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b086      	sub	sp, #24
 8008926:	af02      	add	r7, sp, #8
 8008928:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008934:	2300      	movs	r3, #0
 8008936:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800893e:	2b01      	cmp	r3, #1
 8008940:	d002      	beq.n	8008948 <CDC_ProcessTransmission+0x26>
 8008942:	2b02      	cmp	r3, #2
 8008944:	d023      	beq.n	800898e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008946:	e05e      	b.n	8008a06 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	8b12      	ldrh	r2, [r2, #24]
 8008950:	4293      	cmp	r3, r2
 8008952:	d90b      	bls.n	800896c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	69d9      	ldr	r1, [r3, #28]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	8b1a      	ldrh	r2, [r3, #24]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	7b5b      	ldrb	r3, [r3, #13]
 8008960:	2001      	movs	r0, #1
 8008962:	9000      	str	r0, [sp, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f001 fcda 	bl	800a31e <USBH_BulkSendData>
 800896a:	e00b      	b.n	8008984 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008974:	b29a      	uxth	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	7b5b      	ldrb	r3, [r3, #13]
 800897a:	2001      	movs	r0, #1
 800897c:	9000      	str	r0, [sp, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f001 fccd 	bl	800a31e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2202      	movs	r2, #2
 8008988:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800898c:	e03b      	b.n	8008a06 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	7b5b      	ldrb	r3, [r3, #13]
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f001 fff1 	bl	800a97c <USBH_LL_GetURBState>
 800899a:	4603      	mov	r3, r0
 800899c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800899e:	7afb      	ldrb	r3, [r7, #11]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d128      	bne.n	80089f6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	8b12      	ldrh	r2, [r2, #24]
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d90e      	bls.n	80089ce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	8b12      	ldrh	r2, [r2, #24]
 80089b8:	1a9a      	subs	r2, r3, r2
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	8b12      	ldrh	r2, [r2, #24]
 80089c6:	441a      	add	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	61da      	str	r2, [r3, #28]
 80089cc:	e002      	b.n	80089d4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d004      	beq.n	80089e6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80089e4:	e00e      	b.n	8008a04 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f868 	bl	8008ac4 <USBH_CDC_TransmitCallback>
      break;
 80089f4:	e006      	b.n	8008a04 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80089f6:	7afb      	ldrb	r3, [r7, #11]
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d103      	bne.n	8008a04 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008a04:	bf00      	nop
  }
}
 8008a06:	bf00      	nop
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b086      	sub	sp, #24
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a1c:	69db      	ldr	r3, [r3, #28]
 8008a1e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008a20:	2300      	movs	r3, #0
 8008a22:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d002      	beq.n	8008a34 <CDC_ProcessReception+0x26>
 8008a2e:	2b04      	cmp	r3, #4
 8008a30:	d00e      	beq.n	8008a50 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008a32:	e043      	b.n	8008abc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	6a19      	ldr	r1, [r3, #32]
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	8b5a      	ldrh	r2, [r3, #26]
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	7b1b      	ldrb	r3, [r3, #12]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f001 fc91 	bl	800a368 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2204      	movs	r2, #4
 8008a4a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008a4e:	e035      	b.n	8008abc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	7b1b      	ldrb	r3, [r3, #12]
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f001 ff90 	bl	800a97c <USBH_LL_GetURBState>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008a60:	7cfb      	ldrb	r3, [r7, #19]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d129      	bne.n	8008aba <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	7b1b      	ldrb	r3, [r3, #12]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 fef3 	bl	800a858 <USBH_LL_GetLastXferSize>
 8008a72:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d016      	beq.n	8008aac <CDC_ProcessReception+0x9e>
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	8b5b      	ldrh	r3, [r3, #26]
 8008a82:	461a      	mov	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d110      	bne.n	8008aac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	1ad2      	subs	r2, r2, r3
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	6a1a      	ldr	r2, [r3, #32]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	441a      	add	r2, r3
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2203      	movs	r2, #3
 8008aa6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008aaa:	e006      	b.n	8008aba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f80f 	bl	8008ad8 <USBH_CDC_ReceiveCallback>
      break;
 8008aba:	bf00      	nop
  }
}
 8008abc:	bf00      	nop
 8008abe:	3718      	adds	r7, #24
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d101      	bne.n	8008b18 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008b14:	2302      	movs	r3, #2
 8008b16:	e029      	b.n	8008b6c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	79fa      	ldrb	r2, [r7, #7]
 8008b1c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 f81f 	bl	8008b74 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d003      	beq.n	8008b64 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f001 fdc3 	bl	800a6f0 <USBH_LL_Init>

  return USBH_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008b80:	2300      	movs	r3, #0
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	e009      	b.n	8008b9a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	33e0      	adds	r3, #224	@ 0xe0
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	2200      	movs	r2, #0
 8008b92:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	3301      	adds	r3, #1
 8008b98:	60fb      	str	r3, [r7, #12]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2b0f      	cmp	r3, #15
 8008b9e:	d9f2      	bls.n	8008b86 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	e009      	b.n	8008bba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	4413      	add	r3, r2
 8008bac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	60fb      	str	r3, [r7, #12]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bc0:	d3f1      	bcc.n	8008ba6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2240      	movs	r2, #64	@ 0x40
 8008be6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	331c      	adds	r3, #28
 8008c12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c16:	2100      	movs	r1, #0
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f002 f83d 	bl	800ac98 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008c24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c28:	2100      	movs	r1, #0
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f002 f834 	bl	800ac98 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008c36:	2212      	movs	r2, #18
 8008c38:	2100      	movs	r1, #0
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f002 f82c 	bl	800ac98 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008c46:	223e      	movs	r2, #62	@ 0x3e
 8008c48:	2100      	movs	r1, #0
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f002 f824 	bl	800ac98 <memset>

  return USBH_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b085      	sub	sp, #20
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d016      	beq.n	8008c9c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10e      	bne.n	8008c96 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008c7e:	1c59      	adds	r1, r3, #1
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	33de      	adds	r3, #222	@ 0xde
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	73fb      	strb	r3, [r7, #15]
 8008c94:	e004      	b.n	8008ca0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008c96:	2302      	movs	r3, #2
 8008c98:	73fb      	strb	r3, [r7, #15]
 8008c9a:	e001      	b.n	8008ca0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b085      	sub	sp, #20
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008cc4:	78fa      	ldrb	r2, [r7, #3]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d204      	bcs.n	8008cd4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	78fa      	ldrb	r2, [r7, #3]
 8008cce:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008cd2:	e001      	b.n	8008cd8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b087      	sub	sp, #28
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	4608      	mov	r0, r1
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	70fb      	strb	r3, [r7, #3]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	70bb      	strb	r3, [r7, #2]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008d00:	2300      	movs	r3, #0
 8008d02:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008d04:	2300      	movs	r3, #0
 8008d06:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008d0e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d10:	e025      	b.n	8008d5e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	221a      	movs	r2, #26
 8008d16:	fb02 f303 	mul.w	r3, r2, r3
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	4413      	add	r3, r2
 8008d20:	3302      	adds	r3, #2
 8008d22:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	795b      	ldrb	r3, [r3, #5]
 8008d28:	78fa      	ldrb	r2, [r7, #3]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d002      	beq.n	8008d34 <USBH_FindInterface+0x4e>
 8008d2e:	78fb      	ldrb	r3, [r7, #3]
 8008d30:	2bff      	cmp	r3, #255	@ 0xff
 8008d32:	d111      	bne.n	8008d58 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d38:	78ba      	ldrb	r2, [r7, #2]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d002      	beq.n	8008d44 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d3e:	78bb      	ldrb	r3, [r7, #2]
 8008d40:	2bff      	cmp	r3, #255	@ 0xff
 8008d42:	d109      	bne.n	8008d58 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d48:	787a      	ldrb	r2, [r7, #1]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d002      	beq.n	8008d54 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d4e:	787b      	ldrb	r3, [r7, #1]
 8008d50:	2bff      	cmp	r3, #255	@ 0xff
 8008d52:	d101      	bne.n	8008d58 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008d54:	7dfb      	ldrb	r3, [r7, #23]
 8008d56:	e006      	b.n	8008d66 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008d58:	7dfb      	ldrb	r3, [r7, #23]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d9d6      	bls.n	8008d12 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008d64:	23ff      	movs	r3, #255	@ 0xff
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b082      	sub	sp, #8
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f001 fcf4 	bl	800a768 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008d80:	2101      	movs	r1, #1
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 fe0d 	bl	800a9a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b088      	sub	sp, #32
 8008d98:	af04      	add	r7, sp, #16
 8008d9a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008da0:	2300      	movs	r3, #0
 8008da2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d102      	bne.n	8008db6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2203      	movs	r2, #3
 8008db4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b0b      	cmp	r3, #11
 8008dbe:	f200 81bb 	bhi.w	8009138 <USBH_Process+0x3a4>
 8008dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc8 <USBH_Process+0x34>)
 8008dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc8:	08008df9 	.word	0x08008df9
 8008dcc:	08008e2b 	.word	0x08008e2b
 8008dd0:	08008e93 	.word	0x08008e93
 8008dd4:	080090d3 	.word	0x080090d3
 8008dd8:	08009139 	.word	0x08009139
 8008ddc:	08008f33 	.word	0x08008f33
 8008de0:	08009079 	.word	0x08009079
 8008de4:	08008f69 	.word	0x08008f69
 8008de8:	08008f89 	.word	0x08008f89
 8008dec:	08008fa7 	.word	0x08008fa7
 8008df0:	08008feb 	.word	0x08008feb
 8008df4:	080090bb 	.word	0x080090bb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 819b 	beq.w	800913c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008e0c:	20c8      	movs	r0, #200	@ 0xc8
 8008e0e:	f001 fe12 	bl	800aa36 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f001 fd05 	bl	800a822 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008e28:	e188      	b.n	800913c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d107      	bne.n	8008e44 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e42:	e18a      	b.n	800915a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008e4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e4e:	d914      	bls.n	8008e7a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008e56:	3301      	adds	r3, #1
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d903      	bls.n	8008e72 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	220d      	movs	r2, #13
 8008e6e:	701a      	strb	r2, [r3, #0]
      break;
 8008e70:	e173      	b.n	800915a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	701a      	strb	r2, [r3, #0]
      break;
 8008e78:	e16f      	b.n	800915a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008e80:	f103 020a 	add.w	r2, r3, #10
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008e8a:	200a      	movs	r0, #10
 8008e8c:	f001 fdd3 	bl	800aa36 <USBH_Delay>
      break;
 8008e90:	e163      	b.n	800915a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d005      	beq.n	8008ea8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ea2:	2104      	movs	r1, #4
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008ea8:	2064      	movs	r0, #100	@ 0x64
 8008eaa:	f001 fdc4 	bl	800aa36 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f001 fc90 	bl	800a7d4 <USBH_LL_GetSpeed>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2205      	movs	r2, #5
 8008ec2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f001 fa9b 	bl	800a402 <USBH_AllocPipe>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	461a      	mov	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008ed4:	2180      	movs	r1, #128	@ 0x80
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f001 fa93 	bl	800a402 <USBH_AllocPipe>
 8008edc:	4603      	mov	r3, r0
 8008ede:	461a      	mov	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	7919      	ldrb	r1, [r3, #4]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ef8:	9202      	str	r2, [sp, #8]
 8008efa:	2200      	movs	r2, #0
 8008efc:	9201      	str	r2, [sp, #4]
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	4603      	mov	r3, r0
 8008f02:	2280      	movs	r2, #128	@ 0x80
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 fa4d 	bl	800a3a4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	7959      	ldrb	r1, [r3, #5]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f1e:	9202      	str	r2, [sp, #8]
 8008f20:	2200      	movs	r2, #0
 8008f22:	9201      	str	r2, [sp, #4]
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	4603      	mov	r3, r0
 8008f28:	2200      	movs	r2, #0
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f001 fa3a 	bl	800a3a4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f30:	e113      	b.n	800915a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f916 	bl	8009164 <USBH_HandleEnum>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f040 80fd 	bne.w	8009140 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d103      	bne.n	8008f60 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2208      	movs	r2, #8
 8008f5c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f5e:	e0ef      	b.n	8009140 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2207      	movs	r2, #7
 8008f64:	701a      	strb	r2, [r3, #0]
      break;
 8008f66:	e0eb      	b.n	8009140 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 80e8 	beq.w	8009144 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f7a:	2101      	movs	r1, #1
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2208      	movs	r2, #8
 8008f84:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008f86:	e0dd      	b.n	8009144 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fc3a 	bl	800980a <USBH_SetCfg>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f040 80d5 	bne.w	8009148 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2209      	movs	r2, #9
 8008fa2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008fa4:	e0d0      	b.n	8009148 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008fac:	f003 0320 	and.w	r3, r3, #32
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d016      	beq.n	8008fe2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008fb4:	2101      	movs	r1, #1
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fc4a 	bl	8009850 <USBH_SetFeature>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d103      	bne.n	8008fd0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	220a      	movs	r2, #10
 8008fcc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008fce:	e0bd      	b.n	800914c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008fd0:	7bbb      	ldrb	r3, [r7, #14]
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	f040 80b9 	bne.w	800914c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	220a      	movs	r2, #10
 8008fde:	701a      	strb	r2, [r3, #0]
      break;
 8008fe0:	e0b4      	b.n	800914c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	220a      	movs	r2, #10
 8008fe6:	701a      	strb	r2, [r3, #0]
      break;
 8008fe8:	e0b0      	b.n	800914c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 80ad 	beq.w	8009150 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ffe:	2300      	movs	r3, #0
 8009000:	73fb      	strb	r3, [r7, #15]
 8009002:	e016      	b.n	8009032 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009004:	7bfa      	ldrb	r2, [r7, #15]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	32de      	adds	r2, #222	@ 0xde
 800900a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900e:	791a      	ldrb	r2, [r3, #4]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009016:	429a      	cmp	r2, r3
 8009018:	d108      	bne.n	800902c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800901a:	7bfa      	ldrb	r2, [r7, #15]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	32de      	adds	r2, #222	@ 0xde
 8009020:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800902a:	e005      	b.n	8009038 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	3301      	adds	r3, #1
 8009030:	73fb      	strb	r3, [r7, #15]
 8009032:	7bfb      	ldrb	r3, [r7, #15]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d0e5      	beq.n	8009004 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800903e:	2b00      	cmp	r3, #0
 8009040:	d016      	beq.n	8009070 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	4798      	blx	r3
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d109      	bne.n	8009068 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2206      	movs	r2, #6
 8009058:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009060:	2103      	movs	r1, #3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009066:	e073      	b.n	8009150 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	220d      	movs	r2, #13
 800906c:	701a      	strb	r2, [r3, #0]
      break;
 800906e:	e06f      	b.n	8009150 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	220d      	movs	r2, #13
 8009074:	701a      	strb	r2, [r3, #0]
      break;
 8009076:	e06b      	b.n	8009150 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800907e:	2b00      	cmp	r3, #0
 8009080:	d017      	beq.n	80090b2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	4798      	blx	r3
 800908e:	4603      	mov	r3, r0
 8009090:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	b2db      	uxtb	r3, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d103      	bne.n	80090a2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	220b      	movs	r2, #11
 800909e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090a0:	e058      	b.n	8009154 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80090a2:	7bbb      	ldrb	r3, [r7, #14]
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d154      	bne.n	8009154 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	220d      	movs	r2, #13
 80090ae:	701a      	strb	r2, [r3, #0]
      break;
 80090b0:	e050      	b.n	8009154 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	220d      	movs	r2, #13
 80090b6:	701a      	strb	r2, [r3, #0]
      break;
 80090b8:	e04c      	b.n	8009154 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d049      	beq.n	8009158 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090ca:	695b      	ldr	r3, [r3, #20]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	4798      	blx	r3
      }
      break;
 80090d0:	e042      	b.n	8009158 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f7ff fd4a 	bl	8008b74 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d009      	beq.n	80090fe <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009104:	2b00      	cmp	r3, #0
 8009106:	d005      	beq.n	8009114 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800910e:	2105      	movs	r1, #5
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b01      	cmp	r3, #1
 800911e:	d107      	bne.n	8009130 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f7ff fe22 	bl	8008d72 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800912e:	e014      	b.n	800915a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 fb19 	bl	800a768 <USBH_LL_Start>
      break;
 8009136:	e010      	b.n	800915a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009138:	bf00      	nop
 800913a:	e00e      	b.n	800915a <USBH_Process+0x3c6>
      break;
 800913c:	bf00      	nop
 800913e:	e00c      	b.n	800915a <USBH_Process+0x3c6>
      break;
 8009140:	bf00      	nop
 8009142:	e00a      	b.n	800915a <USBH_Process+0x3c6>
    break;
 8009144:	bf00      	nop
 8009146:	e008      	b.n	800915a <USBH_Process+0x3c6>
      break;
 8009148:	bf00      	nop
 800914a:	e006      	b.n	800915a <USBH_Process+0x3c6>
      break;
 800914c:	bf00      	nop
 800914e:	e004      	b.n	800915a <USBH_Process+0x3c6>
      break;
 8009150:	bf00      	nop
 8009152:	e002      	b.n	800915a <USBH_Process+0x3c6>
      break;
 8009154:	bf00      	nop
 8009156:	e000      	b.n	800915a <USBH_Process+0x3c6>
      break;
 8009158:	bf00      	nop
  }
  return USBH_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b088      	sub	sp, #32
 8009168:	af04      	add	r7, sp, #16
 800916a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800916c:	2301      	movs	r3, #1
 800916e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009170:	2301      	movs	r3, #1
 8009172:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	785b      	ldrb	r3, [r3, #1]
 8009178:	2b07      	cmp	r3, #7
 800917a:	f200 81bd 	bhi.w	80094f8 <USBH_HandleEnum+0x394>
 800917e:	a201      	add	r2, pc, #4	@ (adr r2, 8009184 <USBH_HandleEnum+0x20>)
 8009180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009184:	080091a5 	.word	0x080091a5
 8009188:	0800925f 	.word	0x0800925f
 800918c:	080092c9 	.word	0x080092c9
 8009190:	08009353 	.word	0x08009353
 8009194:	080093bd 	.word	0x080093bd
 8009198:	0800942d 	.word	0x0800942d
 800919c:	08009473 	.word	0x08009473
 80091a0:	080094b9 	.word	0x080094b9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80091a4:	2108      	movs	r1, #8
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fa4c 	bl	8009644 <USBH_Get_DevDesc>
 80091ac:	4603      	mov	r3, r0
 80091ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d12e      	bne.n	8009214 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7919      	ldrb	r1, [r3, #4]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80091da:	9202      	str	r2, [sp, #8]
 80091dc:	2200      	movs	r2, #0
 80091de:	9201      	str	r2, [sp, #4]
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	4603      	mov	r3, r0
 80091e4:	2280      	movs	r2, #128	@ 0x80
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f001 f8dc 	bl	800a3a4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	7959      	ldrb	r1, [r3, #5]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009200:	9202      	str	r2, [sp, #8]
 8009202:	2200      	movs	r2, #0
 8009204:	9201      	str	r2, [sp, #4]
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	4603      	mov	r3, r0
 800920a:	2200      	movs	r2, #0
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f001 f8c9 	bl	800a3a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009212:	e173      	b.n	80094fc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009214:	7bbb      	ldrb	r3, [r7, #14]
 8009216:	2b03      	cmp	r3, #3
 8009218:	f040 8170 	bne.w	80094fc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009222:	3301      	adds	r3, #1
 8009224:	b2da      	uxtb	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009232:	2b03      	cmp	r3, #3
 8009234:	d903      	bls.n	800923e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	220d      	movs	r2, #13
 800923a:	701a      	strb	r2, [r3, #0]
      break;
 800923c:	e15e      	b.n	80094fc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	795b      	ldrb	r3, [r3, #5]
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 f8fd 	bl	800a444 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	791b      	ldrb	r3, [r3, #4]
 800924e:	4619      	mov	r1, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f001 f8f7 	bl	800a444 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	701a      	strb	r2, [r3, #0]
      break;
 800925c:	e14e      	b.n	80094fc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800925e:	2112      	movs	r1, #18
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f9ef 	bl	8009644 <USBH_Get_DevDesc>
 8009266:	4603      	mov	r3, r0
 8009268:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800926a:	7bbb      	ldrb	r3, [r7, #14]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d103      	bne.n	8009278 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2202      	movs	r2, #2
 8009274:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009276:	e143      	b.n	8009500 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009278:	7bbb      	ldrb	r3, [r7, #14]
 800927a:	2b03      	cmp	r3, #3
 800927c:	f040 8140 	bne.w	8009500 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009286:	3301      	adds	r3, #1
 8009288:	b2da      	uxtb	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009296:	2b03      	cmp	r3, #3
 8009298:	d903      	bls.n	80092a2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	220d      	movs	r2, #13
 800929e:	701a      	strb	r2, [r3, #0]
      break;
 80092a0:	e12e      	b.n	8009500 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	795b      	ldrb	r3, [r3, #5]
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f001 f8cb 	bl	800a444 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	791b      	ldrb	r3, [r3, #4]
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 f8c5 	bl	800a444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	701a      	strb	r2, [r3, #0]
      break;
 80092c6:	e11b      	b.n	8009500 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80092c8:	2101      	movs	r1, #1
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fa79 	bl	80097c2 <USBH_SetAddress>
 80092d0:	4603      	mov	r3, r0
 80092d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d130      	bne.n	800933c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80092da:	2002      	movs	r0, #2
 80092dc:	f001 fbab 	bl	800aa36 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2203      	movs	r2, #3
 80092ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	7919      	ldrb	r1, [r3, #4]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009302:	9202      	str	r2, [sp, #8]
 8009304:	2200      	movs	r2, #0
 8009306:	9201      	str	r2, [sp, #4]
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	4603      	mov	r3, r0
 800930c:	2280      	movs	r2, #128	@ 0x80
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 f848 	bl	800a3a4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	7959      	ldrb	r1, [r3, #5]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009328:	9202      	str	r2, [sp, #8]
 800932a:	2200      	movs	r2, #0
 800932c:	9201      	str	r2, [sp, #4]
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	4603      	mov	r3, r0
 8009332:	2200      	movs	r2, #0
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f001 f835 	bl	800a3a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800933a:	e0e3      	b.n	8009504 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800933c:	7bbb      	ldrb	r3, [r7, #14]
 800933e:	2b03      	cmp	r3, #3
 8009340:	f040 80e0 	bne.w	8009504 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	220d      	movs	r2, #13
 8009348:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	705a      	strb	r2, [r3, #1]
      break;
 8009350:	e0d8      	b.n	8009504 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009352:	2109      	movs	r1, #9
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f9a1 	bl	800969c <USBH_Get_CfgDesc>
 800935a:	4603      	mov	r3, r0
 800935c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800935e:	7bbb      	ldrb	r3, [r7, #14]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d103      	bne.n	800936c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2204      	movs	r2, #4
 8009368:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800936a:	e0cd      	b.n	8009508 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	2b03      	cmp	r3, #3
 8009370:	f040 80ca 	bne.w	8009508 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800937a:	3301      	adds	r3, #1
 800937c:	b2da      	uxtb	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800938a:	2b03      	cmp	r3, #3
 800938c:	d903      	bls.n	8009396 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	220d      	movs	r2, #13
 8009392:	701a      	strb	r2, [r3, #0]
      break;
 8009394:	e0b8      	b.n	8009508 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	795b      	ldrb	r3, [r3, #5]
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f001 f851 	bl	800a444 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	791b      	ldrb	r3, [r3, #4]
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 f84b 	bl	800a444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	701a      	strb	r2, [r3, #0]
      break;
 80093ba:	e0a5      	b.n	8009508 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80093c2:	4619      	mov	r1, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f969 	bl	800969c <USBH_Get_CfgDesc>
 80093ca:	4603      	mov	r3, r0
 80093cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093ce:	7bbb      	ldrb	r3, [r7, #14]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d103      	bne.n	80093dc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2205      	movs	r2, #5
 80093d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80093da:	e097      	b.n	800950c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	2b03      	cmp	r3, #3
 80093e0:	f040 8094 	bne.w	800950c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80093ea:	3301      	adds	r3, #1
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d903      	bls.n	8009406 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	220d      	movs	r2, #13
 8009402:	701a      	strb	r2, [r3, #0]
      break;
 8009404:	e082      	b.n	800950c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	795b      	ldrb	r3, [r3, #5]
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 f819 	bl	800a444 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	791b      	ldrb	r3, [r3, #4]
 8009416:	4619      	mov	r1, r3
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f001 f813 	bl	800a444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	701a      	strb	r2, [r3, #0]
      break;
 800942a:	e06f      	b.n	800950c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009432:	2b00      	cmp	r3, #0
 8009434:	d019      	beq.n	800946a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009442:	23ff      	movs	r3, #255	@ 0xff
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f953 	bl	80096f0 <USBH_Get_StringDesc>
 800944a:	4603      	mov	r3, r0
 800944c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800944e:	7bbb      	ldrb	r3, [r7, #14]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d103      	bne.n	800945c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2206      	movs	r2, #6
 8009458:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800945a:	e059      	b.n	8009510 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800945c:	7bbb      	ldrb	r3, [r7, #14]
 800945e:	2b03      	cmp	r3, #3
 8009460:	d156      	bne.n	8009510 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2206      	movs	r2, #6
 8009466:	705a      	strb	r2, [r3, #1]
      break;
 8009468:	e052      	b.n	8009510 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2206      	movs	r2, #6
 800946e:	705a      	strb	r2, [r3, #1]
      break;
 8009470:	e04e      	b.n	8009510 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009478:	2b00      	cmp	r3, #0
 800947a:	d019      	beq.n	80094b0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009488:	23ff      	movs	r3, #255	@ 0xff
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f930 	bl	80096f0 <USBH_Get_StringDesc>
 8009490:	4603      	mov	r3, r0
 8009492:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009494:	7bbb      	ldrb	r3, [r7, #14]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d103      	bne.n	80094a2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2207      	movs	r2, #7
 800949e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80094a0:	e038      	b.n	8009514 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094a2:	7bbb      	ldrb	r3, [r7, #14]
 80094a4:	2b03      	cmp	r3, #3
 80094a6:	d135      	bne.n	8009514 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2207      	movs	r2, #7
 80094ac:	705a      	strb	r2, [r3, #1]
      break;
 80094ae:	e031      	b.n	8009514 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2207      	movs	r2, #7
 80094b4:	705a      	strb	r2, [r3, #1]
      break;
 80094b6:	e02d      	b.n	8009514 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d017      	beq.n	80094f2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80094ce:	23ff      	movs	r3, #255	@ 0xff
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f90d 	bl	80096f0 <USBH_Get_StringDesc>
 80094d6:	4603      	mov	r3, r0
 80094d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80094da:	7bbb      	ldrb	r3, [r7, #14]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d102      	bne.n	80094e6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80094e4:	e018      	b.n	8009518 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	2b03      	cmp	r3, #3
 80094ea:	d115      	bne.n	8009518 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]
      break;
 80094f0:	e012      	b.n	8009518 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	73fb      	strb	r3, [r7, #15]
      break;
 80094f6:	e00f      	b.n	8009518 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80094f8:	bf00      	nop
 80094fa:	e00e      	b.n	800951a <USBH_HandleEnum+0x3b6>
      break;
 80094fc:	bf00      	nop
 80094fe:	e00c      	b.n	800951a <USBH_HandleEnum+0x3b6>
      break;
 8009500:	bf00      	nop
 8009502:	e00a      	b.n	800951a <USBH_HandleEnum+0x3b6>
      break;
 8009504:	bf00      	nop
 8009506:	e008      	b.n	800951a <USBH_HandleEnum+0x3b6>
      break;
 8009508:	bf00      	nop
 800950a:	e006      	b.n	800951a <USBH_HandleEnum+0x3b6>
      break;
 800950c:	bf00      	nop
 800950e:	e004      	b.n	800951a <USBH_HandleEnum+0x3b6>
      break;
 8009510:	bf00      	nop
 8009512:	e002      	b.n	800951a <USBH_HandleEnum+0x3b6>
      break;
 8009514:	bf00      	nop
 8009516:	e000      	b.n	800951a <USBH_HandleEnum+0x3b6>
      break;
 8009518:	bf00      	nop
  }
  return Status;
 800951a:	7bfb      	ldrb	r3, [r7, #15]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	683a      	ldr	r2, [r7, #0]
 8009532:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009536:	bf00      	nop
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b082      	sub	sp, #8
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009550:	1c5a      	adds	r2, r3, #1
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f804 	bl	8009566 <USBH_HandleSof>
}
 800955e:	bf00      	nop
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b082      	sub	sp, #8
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b0b      	cmp	r3, #11
 8009576:	d10a      	bne.n	800958e <USBH_HandleSof+0x28>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	4798      	blx	r3
  }
}
 800958e:	bf00      	nop
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80095a6:	bf00      	nop
}
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80095b2:	b480      	push	{r7}
 80095b4:	b083      	sub	sp, #12
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80095c2:	bf00      	nop
}
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80095ce:	b480      	push	{r7}
 80095d0:	b083      	sub	sp, #12
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f001 f8be 	bl	800a79e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	791b      	ldrb	r3, [r3, #4]
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 ff0b 	bl	800a444 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	795b      	ldrb	r3, [r3, #5]
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 ff05 	bl	800a444 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af02      	add	r7, sp, #8
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	460b      	mov	r3, r1
 800964e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009650:	887b      	ldrh	r3, [r7, #2]
 8009652:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009656:	d901      	bls.n	800965c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009658:	2303      	movs	r3, #3
 800965a:	e01b      	b.n	8009694 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009662:	887b      	ldrh	r3, [r7, #2]
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	4613      	mov	r3, r2
 8009668:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800966c:	2100      	movs	r1, #0
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f872 	bl	8009758 <USBH_GetDescriptor>
 8009674:	4603      	mov	r3, r0
 8009676:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d109      	bne.n	8009692 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009684:	887a      	ldrh	r2, [r7, #2]
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f929 	bl	80098e0 <USBH_ParseDevDesc>
 800968e:	4603      	mov	r3, r0
 8009690:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009692:	7bfb      	ldrb	r3, [r7, #15]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af02      	add	r7, sp, #8
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	331c      	adds	r3, #28
 80096ac:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80096ae:	887b      	ldrh	r3, [r7, #2]
 80096b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096b4:	d901      	bls.n	80096ba <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80096b6:	2303      	movs	r3, #3
 80096b8:	e016      	b.n	80096e8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80096ba:	887b      	ldrh	r3, [r7, #2]
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80096c4:	2100      	movs	r1, #0
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f846 	bl	8009758 <USBH_GetDescriptor>
 80096cc:	4603      	mov	r3, r0
 80096ce:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d107      	bne.n	80096e6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80096d6:	887b      	ldrh	r3, [r7, #2]
 80096d8:	461a      	mov	r2, r3
 80096da:	68b9      	ldr	r1, [r7, #8]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f9af 	bl	8009a40 <USBH_ParseCfgDesc>
 80096e2:	4603      	mov	r3, r0
 80096e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af02      	add	r7, sp, #8
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	607a      	str	r2, [r7, #4]
 80096fa:	461a      	mov	r2, r3
 80096fc:	460b      	mov	r3, r1
 80096fe:	72fb      	strb	r3, [r7, #11]
 8009700:	4613      	mov	r3, r2
 8009702:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009704:	893b      	ldrh	r3, [r7, #8]
 8009706:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800970a:	d802      	bhi.n	8009712 <USBH_Get_StringDesc+0x22>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d101      	bne.n	8009716 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009712:	2303      	movs	r3, #3
 8009714:	e01c      	b.n	8009750 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009716:	7afb      	ldrb	r3, [r7, #11]
 8009718:	b29b      	uxth	r3, r3
 800971a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800971e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009726:	893b      	ldrh	r3, [r7, #8]
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	460b      	mov	r3, r1
 800972c:	2100      	movs	r1, #0
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f000 f812 	bl	8009758 <USBH_GetDescriptor>
 8009734:	4603      	mov	r3, r0
 8009736:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009738:	7dfb      	ldrb	r3, [r7, #23]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d107      	bne.n	800974e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009744:	893a      	ldrh	r2, [r7, #8]
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	4618      	mov	r0, r3
 800974a:	f000 fb8d 	bl	8009e68 <USBH_ParseStringDesc>
  }

  return status;
 800974e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	607b      	str	r3, [r7, #4]
 8009762:	460b      	mov	r3, r1
 8009764:	72fb      	strb	r3, [r7, #11]
 8009766:	4613      	mov	r3, r2
 8009768:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	789b      	ldrb	r3, [r3, #2]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d11c      	bne.n	80097ac <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009772:	7afb      	ldrb	r3, [r7, #11]
 8009774:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009778:	b2da      	uxtb	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2206      	movs	r2, #6
 8009782:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	893a      	ldrh	r2, [r7, #8]
 8009788:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800978a:	893b      	ldrh	r3, [r7, #8]
 800978c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009790:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009794:	d104      	bne.n	80097a0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f240 4209 	movw	r2, #1033	@ 0x409
 800979c:	829a      	strh	r2, [r3, #20]
 800979e:	e002      	b.n	80097a6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	8b3a      	ldrh	r2, [r7, #24]
 80097aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80097ac:	8b3b      	ldrh	r3, [r7, #24]
 80097ae:	461a      	mov	r2, r3
 80097b0:	6879      	ldr	r1, [r7, #4]
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 fba5 	bl	8009f02 <USBH_CtlReq>
 80097b8:	4603      	mov	r3, r0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b082      	sub	sp, #8
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	460b      	mov	r3, r1
 80097cc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	789b      	ldrb	r3, [r3, #2]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d10f      	bne.n	80097f6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2205      	movs	r2, #5
 80097e0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80097e2:	78fb      	ldrb	r3, [r7, #3]
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80097f6:	2200      	movs	r2, #0
 80097f8:	2100      	movs	r1, #0
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fb81 	bl	8009f02 <USBH_CtlReq>
 8009800:	4603      	mov	r3, r0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b082      	sub	sp, #8
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	460b      	mov	r3, r1
 8009814:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	789b      	ldrb	r3, [r3, #2]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d10e      	bne.n	800983c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2209      	movs	r2, #9
 8009828:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	887a      	ldrh	r2, [r7, #2]
 800982e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800983c:	2200      	movs	r2, #0
 800983e:	2100      	movs	r1, #0
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fb5e 	bl	8009f02 <USBH_CtlReq>
 8009846:	4603      	mov	r3, r0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	789b      	ldrb	r3, [r3, #2]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d10f      	bne.n	8009884 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2203      	movs	r2, #3
 800986e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009870:	78fb      	ldrb	r3, [r7, #3]
 8009872:	b29a      	uxth	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009884:	2200      	movs	r2, #0
 8009886:	2100      	movs	r1, #0
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fb3a 	bl	8009f02 <USBH_CtlReq>
 800988e:	4603      	mov	r3, r0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	789b      	ldrb	r3, [r3, #2]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d10f      	bne.n	80098cc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2202      	movs	r2, #2
 80098b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80098be:	78fb      	ldrb	r3, [r7, #3]
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80098cc:	2200      	movs	r2, #0
 80098ce:	2100      	movs	r1, #0
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fb16 	bl	8009f02 <USBH_CtlReq>
 80098d6:	4603      	mov	r3, r0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b087      	sub	sp, #28
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	4613      	mov	r3, r2
 80098ec:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80098f4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d101      	bne.n	8009904 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009900:	2302      	movs	r3, #2
 8009902:	e094      	b.n	8009a2e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	781a      	ldrb	r2, [r3, #0]
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	785a      	ldrb	r2, [r3, #1]
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	3302      	adds	r3, #2
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	461a      	mov	r2, r3
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	3303      	adds	r3, #3
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	021b      	lsls	r3, r3, #8
 8009924:	b29b      	uxth	r3, r3
 8009926:	4313      	orrs	r3, r2
 8009928:	b29a      	uxth	r2, r3
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	791a      	ldrb	r2, [r3, #4]
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	795a      	ldrb	r2, [r3, #5]
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	799a      	ldrb	r2, [r3, #6]
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	79da      	ldrb	r2, [r3, #7]
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009954:	2b00      	cmp	r3, #0
 8009956:	d004      	beq.n	8009962 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800995e:	2b01      	cmp	r3, #1
 8009960:	d11b      	bne.n	800999a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	79db      	ldrb	r3, [r3, #7]
 8009966:	2b20      	cmp	r3, #32
 8009968:	dc0f      	bgt.n	800998a <USBH_ParseDevDesc+0xaa>
 800996a:	2b08      	cmp	r3, #8
 800996c:	db0f      	blt.n	800998e <USBH_ParseDevDesc+0xae>
 800996e:	3b08      	subs	r3, #8
 8009970:	4a32      	ldr	r2, [pc, #200]	@ (8009a3c <USBH_ParseDevDesc+0x15c>)
 8009972:	fa22 f303 	lsr.w	r3, r2, r3
 8009976:	f003 0301 	and.w	r3, r3, #1
 800997a:	2b00      	cmp	r3, #0
 800997c:	bf14      	ite	ne
 800997e:	2301      	movne	r3, #1
 8009980:	2300      	moveq	r3, #0
 8009982:	b2db      	uxtb	r3, r3
 8009984:	2b00      	cmp	r3, #0
 8009986:	d106      	bne.n	8009996 <USBH_ParseDevDesc+0xb6>
 8009988:	e001      	b.n	800998e <USBH_ParseDevDesc+0xae>
 800998a:	2b40      	cmp	r3, #64	@ 0x40
 800998c:	d003      	beq.n	8009996 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	2208      	movs	r2, #8
 8009992:	71da      	strb	r2, [r3, #7]
        break;
 8009994:	e000      	b.n	8009998 <USBH_ParseDevDesc+0xb8>
        break;
 8009996:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009998:	e00e      	b.n	80099b8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d107      	bne.n	80099b4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	79db      	ldrb	r3, [r3, #7]
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d005      	beq.n	80099b8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	2208      	movs	r2, #8
 80099b0:	71da      	strb	r2, [r3, #7]
 80099b2:	e001      	b.n	80099b8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80099b4:	2303      	movs	r3, #3
 80099b6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80099b8:	88fb      	ldrh	r3, [r7, #6]
 80099ba:	2b08      	cmp	r3, #8
 80099bc:	d936      	bls.n	8009a2c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	3308      	adds	r3, #8
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	461a      	mov	r2, r3
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	3309      	adds	r3, #9
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	021b      	lsls	r3, r3, #8
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	4313      	orrs	r3, r2
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	330a      	adds	r3, #10
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	330b      	adds	r3, #11
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	021b      	lsls	r3, r3, #8
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	4313      	orrs	r3, r2
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	330c      	adds	r3, #12
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	461a      	mov	r2, r3
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	330d      	adds	r3, #13
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	021b      	lsls	r3, r3, #8
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	4313      	orrs	r3, r2
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	7b9a      	ldrb	r2, [r3, #14]
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	7bda      	ldrb	r2, [r3, #15]
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	7c1a      	ldrb	r2, [r3, #16]
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	7c5a      	ldrb	r2, [r3, #17]
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	371c      	adds	r7, #28
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	01000101 	.word	0x01000101

08009a40 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b08c      	sub	sp, #48	@ 0x30
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009a54:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009a62:	2300      	movs	r3, #0
 8009a64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d101      	bne.n	8009a72 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009a6e:	2302      	movs	r3, #2
 8009a70:	e0da      	b.n	8009c28 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	2b09      	cmp	r3, #9
 8009a7c:	d002      	beq.n	8009a84 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a80:	2209      	movs	r2, #9
 8009a82:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	781a      	ldrb	r2, [r3, #0]
 8009a88:	6a3b      	ldr	r3, [r7, #32]
 8009a8a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	785a      	ldrb	r2, [r3, #1]
 8009a90:	6a3b      	ldr	r3, [r7, #32]
 8009a92:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	3302      	adds	r3, #2
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	3303      	adds	r3, #3
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	021b      	lsls	r3, r3, #8
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aae:	bf28      	it	cs
 8009ab0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	791a      	ldrb	r2, [r3, #4]
 8009abe:	6a3b      	ldr	r3, [r7, #32]
 8009ac0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	795a      	ldrb	r2, [r3, #5]
 8009ac6:	6a3b      	ldr	r3, [r7, #32]
 8009ac8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	799a      	ldrb	r2, [r3, #6]
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	79da      	ldrb	r2, [r3, #7]
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	7a1a      	ldrb	r2, [r3, #8]
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009ae2:	88fb      	ldrh	r3, [r7, #6]
 8009ae4:	2b09      	cmp	r3, #9
 8009ae6:	f240 809d 	bls.w	8009c24 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009aea:	2309      	movs	r3, #9
 8009aec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009af2:	e081      	b.n	8009bf8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009af4:	f107 0316 	add.w	r3, r7, #22
 8009af8:	4619      	mov	r1, r3
 8009afa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009afc:	f000 f9e7 	bl	8009ece <USBH_GetNextDesc>
 8009b00:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b04:	785b      	ldrb	r3, [r3, #1]
 8009b06:	2b04      	cmp	r3, #4
 8009b08:	d176      	bne.n	8009bf8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	2b09      	cmp	r3, #9
 8009b10:	d002      	beq.n	8009b18 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b14:	2209      	movs	r2, #9
 8009b16:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009b18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b1c:	221a      	movs	r2, #26
 8009b1e:	fb02 f303 	mul.w	r3, r2, r3
 8009b22:	3308      	adds	r3, #8
 8009b24:	6a3a      	ldr	r2, [r7, #32]
 8009b26:	4413      	add	r3, r2
 8009b28:	3302      	adds	r3, #2
 8009b2a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009b2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b2e:	69f8      	ldr	r0, [r7, #28]
 8009b30:	f000 f87e 	bl	8009c30 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009b34:	2300      	movs	r3, #0
 8009b36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009b3e:	e043      	b.n	8009bc8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009b40:	f107 0316 	add.w	r3, r7, #22
 8009b44:	4619      	mov	r1, r3
 8009b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b48:	f000 f9c1 	bl	8009ece <USBH_GetNextDesc>
 8009b4c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b50:	785b      	ldrb	r3, [r3, #1]
 8009b52:	2b05      	cmp	r3, #5
 8009b54:	d138      	bne.n	8009bc8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	795b      	ldrb	r3, [r3, #5]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d113      	bne.n	8009b86 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d003      	beq.n	8009b6e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	799b      	ldrb	r3, [r3, #6]
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d10b      	bne.n	8009b86 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	79db      	ldrb	r3, [r3, #7]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d10b      	bne.n	8009b8e <USBH_ParseCfgDesc+0x14e>
 8009b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	2b09      	cmp	r3, #9
 8009b7c:	d007      	beq.n	8009b8e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b80:	2209      	movs	r2, #9
 8009b82:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009b84:	e003      	b.n	8009b8e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b88:	2207      	movs	r2, #7
 8009b8a:	701a      	strb	r2, [r3, #0]
 8009b8c:	e000      	b.n	8009b90 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009b8e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009b90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b94:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009b98:	3201      	adds	r2, #1
 8009b9a:	00d2      	lsls	r2, r2, #3
 8009b9c:	211a      	movs	r1, #26
 8009b9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ba2:	4413      	add	r3, r2
 8009ba4:	3308      	adds	r3, #8
 8009ba6:	6a3a      	ldr	r2, [r7, #32]
 8009ba8:	4413      	add	r3, r2
 8009baa:	3304      	adds	r3, #4
 8009bac:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009bae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009bb0:	69b9      	ldr	r1, [r7, #24]
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f000 f870 	bl	8009c98 <USBH_ParseEPDesc>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009bbe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	791b      	ldrb	r3, [r3, #4]
 8009bcc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d204      	bcs.n	8009bde <USBH_ParseCfgDesc+0x19e>
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	885a      	ldrh	r2, [r3, #2]
 8009bd8:	8afb      	ldrh	r3, [r7, #22]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d8b0      	bhi.n	8009b40 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	791b      	ldrb	r3, [r3, #4]
 8009be2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d201      	bcs.n	8009bee <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e01c      	b.n	8009c28 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009bee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d805      	bhi.n	8009c0c <USBH_ParseCfgDesc+0x1cc>
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	885a      	ldrh	r2, [r3, #2]
 8009c04:	8afb      	ldrh	r3, [r7, #22]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	f63f af74 	bhi.w	8009af4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	791b      	ldrb	r3, [r3, #4]
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	bf28      	it	cs
 8009c14:	2302      	movcs	r3, #2
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d201      	bcs.n	8009c24 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e001      	b.n	8009c28 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009c24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3730      	adds	r7, #48	@ 0x30
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	781a      	ldrb	r2, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	785a      	ldrb	r2, [r3, #1]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	789a      	ldrb	r2, [r3, #2]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	78da      	ldrb	r2, [r3, #3]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	bf28      	it	cs
 8009c64:	2302      	movcs	r3, #2
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	795a      	ldrb	r2, [r3, #5]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	799a      	ldrb	r2, [r3, #6]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	79da      	ldrb	r2, [r3, #7]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	7a1a      	ldrb	r2, [r3, #8]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	721a      	strb	r2, [r3, #8]
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b087      	sub	sp, #28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	781a      	ldrb	r2, [r3, #0]
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	785a      	ldrb	r2, [r3, #1]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	789a      	ldrb	r2, [r3, #2]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	78da      	ldrb	r2, [r3, #3]
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	3304      	adds	r3, #4
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	3305      	adds	r3, #5
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	021b      	lsls	r3, r3, #8
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	799a      	ldrb	r2, [r3, #6]
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	889b      	ldrh	r3, [r3, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d009      	beq.n	8009d06 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cfa:	d804      	bhi.n	8009d06 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d04:	d901      	bls.n	8009d0a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009d06:	2303      	movs	r3, #3
 8009d08:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d136      	bne.n	8009d82 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	78db      	ldrb	r3, [r3, #3]
 8009d18:	f003 0303 	and.w	r3, r3, #3
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d108      	bne.n	8009d32 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	889b      	ldrh	r3, [r3, #4]
 8009d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d28:	f240 8097 	bls.w	8009e5a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	75fb      	strb	r3, [r7, #23]
 8009d30:	e093      	b.n	8009e5a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	78db      	ldrb	r3, [r3, #3]
 8009d36:	f003 0303 	and.w	r3, r3, #3
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d107      	bne.n	8009d4e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	889b      	ldrh	r3, [r3, #4]
 8009d42:	2b40      	cmp	r3, #64	@ 0x40
 8009d44:	f240 8089 	bls.w	8009e5a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	75fb      	strb	r3, [r7, #23]
 8009d4c:	e085      	b.n	8009e5a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	78db      	ldrb	r3, [r3, #3]
 8009d52:	f003 0303 	and.w	r3, r3, #3
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d005      	beq.n	8009d66 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	78db      	ldrb	r3, [r3, #3]
 8009d5e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009d62:	2b03      	cmp	r3, #3
 8009d64:	d10a      	bne.n	8009d7c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	799b      	ldrb	r3, [r3, #6]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <USBH_ParseEPDesc+0xde>
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	799b      	ldrb	r3, [r3, #6]
 8009d72:	2b10      	cmp	r3, #16
 8009d74:	d970      	bls.n	8009e58 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009d76:	2303      	movs	r3, #3
 8009d78:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009d7a:	e06d      	b.n	8009e58 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	75fb      	strb	r3, [r7, #23]
 8009d80:	e06b      	b.n	8009e5a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d13c      	bne.n	8009e06 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	78db      	ldrb	r3, [r3, #3]
 8009d90:	f003 0303 	and.w	r3, r3, #3
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d005      	beq.n	8009da4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	78db      	ldrb	r3, [r3, #3]
 8009d9c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d106      	bne.n	8009db2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	889b      	ldrh	r3, [r3, #4]
 8009da8:	2b40      	cmp	r3, #64	@ 0x40
 8009daa:	d956      	bls.n	8009e5a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009dac:	2303      	movs	r3, #3
 8009dae:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009db0:	e053      	b.n	8009e5a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	78db      	ldrb	r3, [r3, #3]
 8009db6:	f003 0303 	and.w	r3, r3, #3
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d10e      	bne.n	8009ddc <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	799b      	ldrb	r3, [r3, #6]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d007      	beq.n	8009dd6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009dca:	2b10      	cmp	r3, #16
 8009dcc:	d803      	bhi.n	8009dd6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009dd2:	2b40      	cmp	r3, #64	@ 0x40
 8009dd4:	d941      	bls.n	8009e5a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	75fb      	strb	r3, [r7, #23]
 8009dda:	e03e      	b.n	8009e5a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	78db      	ldrb	r3, [r3, #3]
 8009de0:	f003 0303 	and.w	r3, r3, #3
 8009de4:	2b03      	cmp	r3, #3
 8009de6:	d10b      	bne.n	8009e00 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	799b      	ldrb	r3, [r3, #6]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d004      	beq.n	8009dfa <USBH_ParseEPDesc+0x162>
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	889b      	ldrh	r3, [r3, #4]
 8009df4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009df8:	d32f      	bcc.n	8009e5a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	75fb      	strb	r3, [r7, #23]
 8009dfe:	e02c      	b.n	8009e5a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009e00:	2303      	movs	r3, #3
 8009e02:	75fb      	strb	r3, [r7, #23]
 8009e04:	e029      	b.n	8009e5a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d120      	bne.n	8009e52 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	78db      	ldrb	r3, [r3, #3]
 8009e14:	f003 0303 	and.w	r3, r3, #3
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d106      	bne.n	8009e2a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	889b      	ldrh	r3, [r3, #4]
 8009e20:	2b08      	cmp	r3, #8
 8009e22:	d01a      	beq.n	8009e5a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009e24:	2303      	movs	r3, #3
 8009e26:	75fb      	strb	r3, [r7, #23]
 8009e28:	e017      	b.n	8009e5a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	78db      	ldrb	r3, [r3, #3]
 8009e2e:	f003 0303 	and.w	r3, r3, #3
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d10a      	bne.n	8009e4c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	799b      	ldrb	r3, [r3, #6]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <USBH_ParseEPDesc+0x1ae>
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	889b      	ldrh	r3, [r3, #4]
 8009e42:	2b08      	cmp	r3, #8
 8009e44:	d909      	bls.n	8009e5a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009e46:	2303      	movs	r3, #3
 8009e48:	75fb      	strb	r3, [r7, #23]
 8009e4a:	e006      	b.n	8009e5a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	75fb      	strb	r3, [r7, #23]
 8009e50:	e003      	b.n	8009e5a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009e52:	2303      	movs	r3, #3
 8009e54:	75fb      	strb	r3, [r7, #23]
 8009e56:	e000      	b.n	8009e5a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009e58:	bf00      	nop
  }

  return status;
 8009e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	371c      	adds	r7, #28
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b087      	sub	sp, #28
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	4613      	mov	r3, r2
 8009e74:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	2b03      	cmp	r3, #3
 8009e7e:	d120      	bne.n	8009ec2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	1e9a      	subs	r2, r3, #2
 8009e86:	88fb      	ldrh	r3, [r7, #6]
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	bf28      	it	cs
 8009e8c:	4613      	movcs	r3, r2
 8009e8e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	3302      	adds	r3, #2
 8009e94:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009e96:	2300      	movs	r3, #0
 8009e98:	82fb      	strh	r3, [r7, #22]
 8009e9a:	e00b      	b.n	8009eb4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009e9c:	8afb      	ldrh	r3, [r7, #22]
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	781a      	ldrb	r2, [r3, #0]
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009eae:	8afb      	ldrh	r3, [r7, #22]
 8009eb0:	3302      	adds	r3, #2
 8009eb2:	82fb      	strh	r3, [r7, #22]
 8009eb4:	8afa      	ldrh	r2, [r7, #22]
 8009eb6:	8abb      	ldrh	r3, [r7, #20]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d3ef      	bcc.n	8009e9c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	701a      	strb	r2, [r3, #0]
  }
}
 8009ec2:	bf00      	nop
 8009ec4:	371c      	adds	r7, #28
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009ece:	b480      	push	{r7}
 8009ed0:	b085      	sub	sp, #20
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	881b      	ldrh	r3, [r3, #0]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	7812      	ldrb	r2, [r2, #0]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b086      	sub	sp, #24
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	60f8      	str	r0, [r7, #12]
 8009f0a:	60b9      	str	r1, [r7, #8]
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009f10:	2301      	movs	r3, #1
 8009f12:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	789b      	ldrb	r3, [r3, #2]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d002      	beq.n	8009f22 <USBH_CtlReq+0x20>
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d00f      	beq.n	8009f40 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009f20:	e027      	b.n	8009f72 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	88fa      	ldrh	r2, [r7, #6]
 8009f2c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2201      	movs	r2, #1
 8009f32:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2202      	movs	r2, #2
 8009f38:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f3e:	e018      	b.n	8009f72 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f000 f81b 	bl	8009f7c <USBH_HandleControl>
 8009f46:	4603      	mov	r3, r0
 8009f48:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009f4a:	7dfb      	ldrb	r3, [r7, #23]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <USBH_CtlReq+0x54>
 8009f50:	7dfb      	ldrb	r3, [r7, #23]
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d106      	bne.n	8009f64 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	761a      	strb	r2, [r3, #24]
      break;
 8009f62:	e005      	b.n	8009f70 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009f64:	7dfb      	ldrb	r3, [r7, #23]
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d102      	bne.n	8009f70 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	709a      	strb	r2, [r3, #2]
      break;
 8009f70:	bf00      	nop
  }
  return status;
 8009f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3718      	adds	r7, #24
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af02      	add	r7, sp, #8
 8009f82:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009f84:	2301      	movs	r3, #1
 8009f86:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	7e1b      	ldrb	r3, [r3, #24]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	2b0a      	cmp	r3, #10
 8009f94:	f200 8156 	bhi.w	800a244 <USBH_HandleControl+0x2c8>
 8009f98:	a201      	add	r2, pc, #4	@ (adr r2, 8009fa0 <USBH_HandleControl+0x24>)
 8009f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9e:	bf00      	nop
 8009fa0:	08009fcd 	.word	0x08009fcd
 8009fa4:	08009fe7 	.word	0x08009fe7
 8009fa8:	0800a051 	.word	0x0800a051
 8009fac:	0800a077 	.word	0x0800a077
 8009fb0:	0800a0af 	.word	0x0800a0af
 8009fb4:	0800a0d9 	.word	0x0800a0d9
 8009fb8:	0800a12b 	.word	0x0800a12b
 8009fbc:	0800a14d 	.word	0x0800a14d
 8009fc0:	0800a189 	.word	0x0800a189
 8009fc4:	0800a1af 	.word	0x0800a1af
 8009fc8:	0800a1ed 	.word	0x0800a1ed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f103 0110 	add.w	r1, r3, #16
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	795b      	ldrb	r3, [r3, #5]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f943 	bl	800a264 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2202      	movs	r2, #2
 8009fe2:	761a      	strb	r2, [r3, #24]
      break;
 8009fe4:	e139      	b.n	800a25a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	795b      	ldrb	r3, [r3, #5]
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fcc5 	bl	800a97c <USBH_LL_GetURBState>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009ff6:	7bbb      	ldrb	r3, [r7, #14]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d11e      	bne.n	800a03a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	7c1b      	ldrb	r3, [r3, #16]
 800a000:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a004:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	8adb      	ldrh	r3, [r3, #22]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00a      	beq.n	800a024 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a00e:	7b7b      	ldrb	r3, [r7, #13]
 800a010:	2b80      	cmp	r3, #128	@ 0x80
 800a012:	d103      	bne.n	800a01c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2203      	movs	r2, #3
 800a018:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a01a:	e115      	b.n	800a248 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2205      	movs	r2, #5
 800a020:	761a      	strb	r2, [r3, #24]
      break;
 800a022:	e111      	b.n	800a248 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a024:	7b7b      	ldrb	r3, [r7, #13]
 800a026:	2b80      	cmp	r3, #128	@ 0x80
 800a028:	d103      	bne.n	800a032 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2209      	movs	r2, #9
 800a02e:	761a      	strb	r2, [r3, #24]
      break;
 800a030:	e10a      	b.n	800a248 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2207      	movs	r2, #7
 800a036:	761a      	strb	r2, [r3, #24]
      break;
 800a038:	e106      	b.n	800a248 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a03a:	7bbb      	ldrb	r3, [r7, #14]
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	d003      	beq.n	800a048 <USBH_HandleControl+0xcc>
 800a040:	7bbb      	ldrb	r3, [r7, #14]
 800a042:	2b02      	cmp	r3, #2
 800a044:	f040 8100 	bne.w	800a248 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	220b      	movs	r2, #11
 800a04c:	761a      	strb	r2, [r3, #24]
      break;
 800a04e:	e0fb      	b.n	800a248 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a056:	b29a      	uxth	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6899      	ldr	r1, [r3, #8]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	899a      	ldrh	r2, [r3, #12]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	791b      	ldrb	r3, [r3, #4]
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 f93a 	bl	800a2e2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2204      	movs	r2, #4
 800a072:	761a      	strb	r2, [r3, #24]
      break;
 800a074:	e0f1      	b.n	800a25a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	791b      	ldrb	r3, [r3, #4]
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fc7d 	bl	800a97c <USBH_LL_GetURBState>
 800a082:	4603      	mov	r3, r0
 800a084:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a086:	7bbb      	ldrb	r3, [r7, #14]
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d102      	bne.n	800a092 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2209      	movs	r2, #9
 800a090:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a092:	7bbb      	ldrb	r3, [r7, #14]
 800a094:	2b05      	cmp	r3, #5
 800a096:	d102      	bne.n	800a09e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a098:	2303      	movs	r3, #3
 800a09a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a09c:	e0d6      	b.n	800a24c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a09e:	7bbb      	ldrb	r3, [r7, #14]
 800a0a0:	2b04      	cmp	r3, #4
 800a0a2:	f040 80d3 	bne.w	800a24c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	220b      	movs	r2, #11
 800a0aa:	761a      	strb	r2, [r3, #24]
      break;
 800a0ac:	e0ce      	b.n	800a24c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6899      	ldr	r1, [r3, #8]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	899a      	ldrh	r2, [r3, #12]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	795b      	ldrb	r3, [r3, #5]
 800a0ba:	2001      	movs	r0, #1
 800a0bc:	9000      	str	r0, [sp, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f8ea 	bl	800a298 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2206      	movs	r2, #6
 800a0d4:	761a      	strb	r2, [r3, #24]
      break;
 800a0d6:	e0c0      	b.n	800a25a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	795b      	ldrb	r3, [r3, #5]
 800a0dc:	4619      	mov	r1, r3
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 fc4c 	bl	800a97c <USBH_LL_GetURBState>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d103      	bne.n	800a0f6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2207      	movs	r2, #7
 800a0f2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a0f4:	e0ac      	b.n	800a250 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a0f6:	7bbb      	ldrb	r3, [r7, #14]
 800a0f8:	2b05      	cmp	r3, #5
 800a0fa:	d105      	bne.n	800a108 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	220c      	movs	r2, #12
 800a100:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a102:	2303      	movs	r3, #3
 800a104:	73fb      	strb	r3, [r7, #15]
      break;
 800a106:	e0a3      	b.n	800a250 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a108:	7bbb      	ldrb	r3, [r7, #14]
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d103      	bne.n	800a116 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2205      	movs	r2, #5
 800a112:	761a      	strb	r2, [r3, #24]
      break;
 800a114:	e09c      	b.n	800a250 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a116:	7bbb      	ldrb	r3, [r7, #14]
 800a118:	2b04      	cmp	r3, #4
 800a11a:	f040 8099 	bne.w	800a250 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	220b      	movs	r2, #11
 800a122:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a124:	2302      	movs	r3, #2
 800a126:	73fb      	strb	r3, [r7, #15]
      break;
 800a128:	e092      	b.n	800a250 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	791b      	ldrb	r3, [r3, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	2100      	movs	r1, #0
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f8d5 	bl	800a2e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a13e:	b29a      	uxth	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2208      	movs	r2, #8
 800a148:	761a      	strb	r2, [r3, #24]

      break;
 800a14a:	e086      	b.n	800a25a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	791b      	ldrb	r3, [r3, #4]
 800a150:	4619      	mov	r1, r3
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fc12 	bl	800a97c <USBH_LL_GetURBState>
 800a158:	4603      	mov	r3, r0
 800a15a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a15c:	7bbb      	ldrb	r3, [r7, #14]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d105      	bne.n	800a16e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	220d      	movs	r2, #13
 800a166:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a168:	2300      	movs	r3, #0
 800a16a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a16c:	e072      	b.n	800a254 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a16e:	7bbb      	ldrb	r3, [r7, #14]
 800a170:	2b04      	cmp	r3, #4
 800a172:	d103      	bne.n	800a17c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	220b      	movs	r2, #11
 800a178:	761a      	strb	r2, [r3, #24]
      break;
 800a17a:	e06b      	b.n	800a254 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a17c:	7bbb      	ldrb	r3, [r7, #14]
 800a17e:	2b05      	cmp	r3, #5
 800a180:	d168      	bne.n	800a254 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a182:	2303      	movs	r3, #3
 800a184:	73fb      	strb	r3, [r7, #15]
      break;
 800a186:	e065      	b.n	800a254 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	795b      	ldrb	r3, [r3, #5]
 800a18c:	2201      	movs	r2, #1
 800a18e:	9200      	str	r2, [sp, #0]
 800a190:	2200      	movs	r2, #0
 800a192:	2100      	movs	r1, #0
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 f87f 	bl	800a298 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	220a      	movs	r2, #10
 800a1aa:	761a      	strb	r2, [r3, #24]
      break;
 800a1ac:	e055      	b.n	800a25a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	795b      	ldrb	r3, [r3, #5]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fbe1 	bl	800a97c <USBH_LL_GetURBState>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a1be:	7bbb      	ldrb	r3, [r7, #14]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d105      	bne.n	800a1d0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	220d      	movs	r2, #13
 800a1cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a1ce:	e043      	b.n	800a258 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a1d0:	7bbb      	ldrb	r3, [r7, #14]
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d103      	bne.n	800a1de <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2209      	movs	r2, #9
 800a1da:	761a      	strb	r2, [r3, #24]
      break;
 800a1dc:	e03c      	b.n	800a258 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a1de:	7bbb      	ldrb	r3, [r7, #14]
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	d139      	bne.n	800a258 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	220b      	movs	r2, #11
 800a1e8:	761a      	strb	r2, [r3, #24]
      break;
 800a1ea:	e035      	b.n	800a258 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	7e5b      	ldrb	r3, [r3, #25]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	b2da      	uxtb	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	765a      	strb	r2, [r3, #25]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	7e5b      	ldrb	r3, [r3, #25]
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	d806      	bhi.n	800a20e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a20c:	e025      	b.n	800a25a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a214:	2106      	movs	r1, #6
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	795b      	ldrb	r3, [r3, #5]
 800a224:	4619      	mov	r1, r3
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 f90c 	bl	800a444 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	791b      	ldrb	r3, [r3, #4]
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f906 	bl	800a444 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a23e:	2302      	movs	r3, #2
 800a240:	73fb      	strb	r3, [r7, #15]
      break;
 800a242:	e00a      	b.n	800a25a <USBH_HandleControl+0x2de>

    default:
      break;
 800a244:	bf00      	nop
 800a246:	e008      	b.n	800a25a <USBH_HandleControl+0x2de>
      break;
 800a248:	bf00      	nop
 800a24a:	e006      	b.n	800a25a <USBH_HandleControl+0x2de>
      break;
 800a24c:	bf00      	nop
 800a24e:	e004      	b.n	800a25a <USBH_HandleControl+0x2de>
      break;
 800a250:	bf00      	nop
 800a252:	e002      	b.n	800a25a <USBH_HandleControl+0x2de>
      break;
 800a254:	bf00      	nop
 800a256:	e000      	b.n	800a25a <USBH_HandleControl+0x2de>
      break;
 800a258:	bf00      	nop
  }

  return status;
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b088      	sub	sp, #32
 800a268:	af04      	add	r7, sp, #16
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	4613      	mov	r3, r2
 800a270:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a272:	79f9      	ldrb	r1, [r7, #7]
 800a274:	2300      	movs	r3, #0
 800a276:	9303      	str	r3, [sp, #12]
 800a278:	2308      	movs	r3, #8
 800a27a:	9302      	str	r3, [sp, #8]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	9301      	str	r3, [sp, #4]
 800a280:	2300      	movs	r3, #0
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	2300      	movs	r3, #0
 800a286:	2200      	movs	r2, #0
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f000 fb46 	bl	800a91a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b088      	sub	sp, #32
 800a29c:	af04      	add	r7, sp, #16
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	80fb      	strh	r3, [r7, #6]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d001      	beq.n	800a2bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a2bc:	7979      	ldrb	r1, [r7, #5]
 800a2be:	7e3b      	ldrb	r3, [r7, #24]
 800a2c0:	9303      	str	r3, [sp, #12]
 800a2c2:	88fb      	ldrh	r3, [r7, #6]
 800a2c4:	9302      	str	r3, [sp, #8]
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	9301      	str	r3, [sp, #4]
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f000 fb21 	bl	800a91a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b088      	sub	sp, #32
 800a2e6:	af04      	add	r7, sp, #16
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	60b9      	str	r1, [r7, #8]
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	80fb      	strh	r3, [r7, #6]
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a2f8:	7979      	ldrb	r1, [r7, #5]
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	9303      	str	r3, [sp, #12]
 800a2fe:	88fb      	ldrh	r3, [r7, #6]
 800a300:	9302      	str	r3, [sp, #8]
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	9301      	str	r3, [sp, #4]
 800a306:	2301      	movs	r3, #1
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	2300      	movs	r3, #0
 800a30c:	2201      	movs	r2, #1
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f000 fb03 	bl	800a91a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a314:	2300      	movs	r3, #0

}
 800a316:	4618      	mov	r0, r3
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b088      	sub	sp, #32
 800a322:	af04      	add	r7, sp, #16
 800a324:	60f8      	str	r0, [r7, #12]
 800a326:	60b9      	str	r1, [r7, #8]
 800a328:	4611      	mov	r1, r2
 800a32a:	461a      	mov	r2, r3
 800a32c:	460b      	mov	r3, r1
 800a32e:	80fb      	strh	r3, [r7, #6]
 800a330:	4613      	mov	r3, r2
 800a332:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a33e:	2300      	movs	r3, #0
 800a340:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a342:	7979      	ldrb	r1, [r7, #5]
 800a344:	7e3b      	ldrb	r3, [r7, #24]
 800a346:	9303      	str	r3, [sp, #12]
 800a348:	88fb      	ldrh	r3, [r7, #6]
 800a34a:	9302      	str	r3, [sp, #8]
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	9301      	str	r3, [sp, #4]
 800a350:	2301      	movs	r3, #1
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	2302      	movs	r3, #2
 800a356:	2200      	movs	r2, #0
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f000 fade 	bl	800a91a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b088      	sub	sp, #32
 800a36c:	af04      	add	r7, sp, #16
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	4611      	mov	r1, r2
 800a374:	461a      	mov	r2, r3
 800a376:	460b      	mov	r3, r1
 800a378:	80fb      	strh	r3, [r7, #6]
 800a37a:	4613      	mov	r3, r2
 800a37c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a37e:	7979      	ldrb	r1, [r7, #5]
 800a380:	2300      	movs	r3, #0
 800a382:	9303      	str	r3, [sp, #12]
 800a384:	88fb      	ldrh	r3, [r7, #6]
 800a386:	9302      	str	r3, [sp, #8]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	9301      	str	r3, [sp, #4]
 800a38c:	2301      	movs	r3, #1
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	2302      	movs	r3, #2
 800a392:	2201      	movs	r2, #1
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f000 fac0 	bl	800a91a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b086      	sub	sp, #24
 800a3a8:	af04      	add	r7, sp, #16
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	4608      	mov	r0, r1
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	70fb      	strb	r3, [r7, #3]
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	70bb      	strb	r3, [r7, #2]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a3be:	7878      	ldrb	r0, [r7, #1]
 800a3c0:	78ba      	ldrb	r2, [r7, #2]
 800a3c2:	78f9      	ldrb	r1, [r7, #3]
 800a3c4:	8b3b      	ldrh	r3, [r7, #24]
 800a3c6:	9302      	str	r3, [sp, #8]
 800a3c8:	7d3b      	ldrb	r3, [r7, #20]
 800a3ca:	9301      	str	r3, [sp, #4]
 800a3cc:	7c3b      	ldrb	r3, [r7, #16]
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fa53 	bl	800a87e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b082      	sub	sp, #8
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a3ee:	78fb      	ldrb	r3, [r7, #3]
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fa72 	bl	800a8dc <USBH_LL_ClosePipe>

  return USBH_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b084      	sub	sp, #16
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	460b      	mov	r3, r1
 800a40c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 f836 	bl	800a480 <USBH_GetFreePipe>
 800a414:	4603      	mov	r3, r0
 800a416:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a418:	89fb      	ldrh	r3, [r7, #14]
 800a41a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a41e:	4293      	cmp	r3, r2
 800a420:	d00a      	beq.n	800a438 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a422:	78fa      	ldrb	r2, [r7, #3]
 800a424:	89fb      	ldrh	r3, [r7, #14]
 800a426:	f003 030f 	and.w	r3, r3, #15
 800a42a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	33e0      	adds	r3, #224	@ 0xe0
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	440b      	add	r3, r1
 800a436:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a438:	89fb      	ldrh	r3, [r7, #14]
 800a43a:	b2db      	uxtb	r3, r3
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a450:	78fb      	ldrb	r3, [r7, #3]
 800a452:	2b0f      	cmp	r3, #15
 800a454:	d80d      	bhi.n	800a472 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a456:	78fb      	ldrb	r3, [r7, #3]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	33e0      	adds	r3, #224	@ 0xe0
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	4413      	add	r3, r2
 800a460:	685a      	ldr	r2, [r3, #4]
 800a462:	78fb      	ldrb	r3, [r7, #3]
 800a464:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a468:	6879      	ldr	r1, [r7, #4]
 800a46a:	33e0      	adds	r3, #224	@ 0xe0
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	440b      	add	r3, r1
 800a470:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a488:	2300      	movs	r3, #0
 800a48a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a48c:	2300      	movs	r3, #0
 800a48e:	73fb      	strb	r3, [r7, #15]
 800a490:	e00f      	b.n	800a4b2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a492:	7bfb      	ldrb	r3, [r7, #15]
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	33e0      	adds	r3, #224	@ 0xe0
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	4413      	add	r3, r2
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d102      	bne.n	800a4ac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	e007      	b.n	800a4bc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	73fb      	strb	r3, [r7, #15]
 800a4b2:	7bfb      	ldrb	r3, [r7, #15]
 800a4b4:	2b0f      	cmp	r3, #15
 800a4b6:	d9ec      	bls.n	800a492 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a4b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	490e      	ldr	r1, [pc, #56]	@ (800a508 <MX_USB_HOST_Init+0x40>)
 800a4d0:	480e      	ldr	r0, [pc, #56]	@ (800a50c <MX_USB_HOST_Init+0x44>)
 800a4d2:	f7fe fb15 	bl	8008b00 <USBH_Init>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a4dc:	f7f6 fb94 	bl	8000c08 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a4e0:	490b      	ldr	r1, [pc, #44]	@ (800a510 <MX_USB_HOST_Init+0x48>)
 800a4e2:	480a      	ldr	r0, [pc, #40]	@ (800a50c <MX_USB_HOST_Init+0x44>)
 800a4e4:	f7fe fbb9 	bl	8008c5a <USBH_RegisterClass>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a4ee:	f7f6 fb8b 	bl	8000c08 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a4f2:	4806      	ldr	r0, [pc, #24]	@ (800a50c <MX_USB_HOST_Init+0x44>)
 800a4f4:	f7fe fc3d 	bl	8008d72 <USBH_Start>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a4fe:	f7f6 fb83 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a502:	bf00      	nop
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	0800a529 	.word	0x0800a529
 800a50c:	200004cc 	.word	0x200004cc
 800a510:	2000000c 	.word	0x2000000c

0800a514 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a518:	4802      	ldr	r0, [pc, #8]	@ (800a524 <MX_USB_HOST_Process+0x10>)
 800a51a:	f7fe fc3b 	bl	8008d94 <USBH_Process>
}
 800a51e:	bf00      	nop
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	200004cc 	.word	0x200004cc

0800a528 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	460b      	mov	r3, r1
 800a532:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a534:	78fb      	ldrb	r3, [r7, #3]
 800a536:	3b01      	subs	r3, #1
 800a538:	2b04      	cmp	r3, #4
 800a53a:	d819      	bhi.n	800a570 <USBH_UserProcess+0x48>
 800a53c:	a201      	add	r2, pc, #4	@ (adr r2, 800a544 <USBH_UserProcess+0x1c>)
 800a53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a542:	bf00      	nop
 800a544:	0800a571 	.word	0x0800a571
 800a548:	0800a561 	.word	0x0800a561
 800a54c:	0800a571 	.word	0x0800a571
 800a550:	0800a569 	.word	0x0800a569
 800a554:	0800a559 	.word	0x0800a559
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a558:	4b09      	ldr	r3, [pc, #36]	@ (800a580 <USBH_UserProcess+0x58>)
 800a55a:	2203      	movs	r2, #3
 800a55c:	701a      	strb	r2, [r3, #0]
  break;
 800a55e:	e008      	b.n	800a572 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a560:	4b07      	ldr	r3, [pc, #28]	@ (800a580 <USBH_UserProcess+0x58>)
 800a562:	2202      	movs	r2, #2
 800a564:	701a      	strb	r2, [r3, #0]
  break;
 800a566:	e004      	b.n	800a572 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a568:	4b05      	ldr	r3, [pc, #20]	@ (800a580 <USBH_UserProcess+0x58>)
 800a56a:	2201      	movs	r2, #1
 800a56c:	701a      	strb	r2, [r3, #0]
  break;
 800a56e:	e000      	b.n	800a572 <USBH_UserProcess+0x4a>

  default:
  break;
 800a570:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a572:	bf00      	nop
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	200008a4 	.word	0x200008a4

0800a584 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b08a      	sub	sp, #40	@ 0x28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a58c:	f107 0314 	add.w	r3, r7, #20
 800a590:	2200      	movs	r2, #0
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	605a      	str	r2, [r3, #4]
 800a596:	609a      	str	r2, [r3, #8]
 800a598:	60da      	str	r2, [r3, #12]
 800a59a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5a4:	d147      	bne.n	800a636 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	613b      	str	r3, [r7, #16]
 800a5aa:	4b25      	ldr	r3, [pc, #148]	@ (800a640 <HAL_HCD_MspInit+0xbc>)
 800a5ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ae:	4a24      	ldr	r2, [pc, #144]	@ (800a640 <HAL_HCD_MspInit+0xbc>)
 800a5b0:	f043 0301 	orr.w	r3, r3, #1
 800a5b4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a5b6:	4b22      	ldr	r3, [pc, #136]	@ (800a640 <HAL_HCD_MspInit+0xbc>)
 800a5b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	613b      	str	r3, [r7, #16]
 800a5c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a5c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a5d0:	f107 0314 	add.w	r3, r7, #20
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	481b      	ldr	r0, [pc, #108]	@ (800a644 <HAL_HCD_MspInit+0xc0>)
 800a5d8:	f7f7 ff0a 	bl	80023f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a5dc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a5e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a5ee:	230a      	movs	r3, #10
 800a5f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5f2:	f107 0314 	add.w	r3, r7, #20
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	4812      	ldr	r0, [pc, #72]	@ (800a644 <HAL_HCD_MspInit+0xc0>)
 800a5fa:	f7f7 fef9 	bl	80023f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a5fe:	4b10      	ldr	r3, [pc, #64]	@ (800a640 <HAL_HCD_MspInit+0xbc>)
 800a600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a602:	4a0f      	ldr	r2, [pc, #60]	@ (800a640 <HAL_HCD_MspInit+0xbc>)
 800a604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a608:	6353      	str	r3, [r2, #52]	@ 0x34
 800a60a:	2300      	movs	r3, #0
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	4b0c      	ldr	r3, [pc, #48]	@ (800a640 <HAL_HCD_MspInit+0xbc>)
 800a610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a612:	4a0b      	ldr	r2, [pc, #44]	@ (800a640 <HAL_HCD_MspInit+0xbc>)
 800a614:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a618:	6453      	str	r3, [r2, #68]	@ 0x44
 800a61a:	4b09      	ldr	r3, [pc, #36]	@ (800a640 <HAL_HCD_MspInit+0xbc>)
 800a61c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a61e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a622:	60fb      	str	r3, [r7, #12]
 800a624:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a626:	2200      	movs	r2, #0
 800a628:	2100      	movs	r1, #0
 800a62a:	2043      	movs	r0, #67	@ 0x43
 800a62c:	f7f7 fb39 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a630:	2043      	movs	r0, #67	@ 0x43
 800a632:	f7f7 fb52 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a636:	bf00      	nop
 800a638:	3728      	adds	r7, #40	@ 0x28
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	40023800 	.word	0x40023800
 800a644:	40020000 	.word	0x40020000

0800a648 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe ff73 	bl	8009542 <USBH_LL_IncTimer>
}
 800a65c:	bf00      	nop
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a672:	4618      	mov	r0, r3
 800a674:	f7fe ffab 	bl	80095ce <USBH_LL_Connect>
}
 800a678:	bf00      	nop
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fe ffb4 	bl	80095fc <USBH_LL_Disconnect>
}
 800a694:	bf00      	nop
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	70fb      	strb	r3, [r7, #3]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fe ff65 	bl	8009596 <USBH_LL_PortEnabled>
}
 800a6cc:	bf00      	nop
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fe ff65 	bl	80095b2 <USBH_LL_PortDisabled>
}
 800a6e8:	bf00      	nop
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d12a      	bne.n	800a758 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a702:	4a18      	ldr	r2, [pc, #96]	@ (800a764 <USBH_LL_Init+0x74>)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a15      	ldr	r2, [pc, #84]	@ (800a764 <USBH_LL_Init+0x74>)
 800a70e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a712:	4b14      	ldr	r3, [pc, #80]	@ (800a764 <USBH_LL_Init+0x74>)
 800a714:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a718:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a71a:	4b12      	ldr	r3, [pc, #72]	@ (800a764 <USBH_LL_Init+0x74>)
 800a71c:	2208      	movs	r2, #8
 800a71e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a720:	4b10      	ldr	r3, [pc, #64]	@ (800a764 <USBH_LL_Init+0x74>)
 800a722:	2201      	movs	r2, #1
 800a724:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a726:	4b0f      	ldr	r3, [pc, #60]	@ (800a764 <USBH_LL_Init+0x74>)
 800a728:	2200      	movs	r2, #0
 800a72a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a72c:	4b0d      	ldr	r3, [pc, #52]	@ (800a764 <USBH_LL_Init+0x74>)
 800a72e:	2202      	movs	r2, #2
 800a730:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a732:	4b0c      	ldr	r3, [pc, #48]	@ (800a764 <USBH_LL_Init+0x74>)
 800a734:	2200      	movs	r2, #0
 800a736:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a738:	480a      	ldr	r0, [pc, #40]	@ (800a764 <USBH_LL_Init+0x74>)
 800a73a:	f7f8 f80e 	bl	800275a <HAL_HCD_Init>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a744:	f7f6 fa60 	bl	8000c08 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a748:	4806      	ldr	r0, [pc, #24]	@ (800a764 <USBH_LL_Init+0x74>)
 800a74a:	f7f8 fc6f 	bl	800302c <HAL_HCD_GetCurrentFrame>
 800a74e:	4603      	mov	r3, r0
 800a750:	4619      	mov	r1, r3
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f7fe fee6 	bl	8009524 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	200008a8 	.word	0x200008a8

0800a768 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a77e:	4618      	mov	r0, r3
 800a780:	f7f8 fbdc 	bl	8002f3c <HAL_HCD_Start>
 800a784:	4603      	mov	r3, r0
 800a786:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a788:	7bfb      	ldrb	r3, [r7, #15]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 f95e 	bl	800aa4c <USBH_Get_USB_Status>
 800a790:	4603      	mov	r3, r0
 800a792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a794:	7bbb      	ldrb	r3, [r7, #14]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b084      	sub	sp, #16
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7f8 fbe4 	bl	8002f82 <HAL_HCD_Stop>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a7be:	7bfb      	ldrb	r3, [r7, #15]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f000 f943 	bl	800aa4c <USBH_Get_USB_Status>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7f8 fc2e 	bl	8003048 <HAL_HCD_GetCurrentSpeed>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b02      	cmp	r3, #2
 800a7f0:	d00c      	beq.n	800a80c <USBH_LL_GetSpeed+0x38>
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d80d      	bhi.n	800a812 <USBH_LL_GetSpeed+0x3e>
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d002      	beq.n	800a800 <USBH_LL_GetSpeed+0x2c>
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d003      	beq.n	800a806 <USBH_LL_GetSpeed+0x32>
 800a7fe:	e008      	b.n	800a812 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a800:	2300      	movs	r3, #0
 800a802:	73fb      	strb	r3, [r7, #15]
    break;
 800a804:	e008      	b.n	800a818 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a806:	2301      	movs	r3, #1
 800a808:	73fb      	strb	r3, [r7, #15]
    break;
 800a80a:	e005      	b.n	800a818 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a80c:	2302      	movs	r3, #2
 800a80e:	73fb      	strb	r3, [r7, #15]
    break;
 800a810:	e002      	b.n	800a818 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a812:	2301      	movs	r3, #1
 800a814:	73fb      	strb	r3, [r7, #15]
    break;
 800a816:	bf00      	nop
  }
  return  speed;
 800a818:	7bfb      	ldrb	r3, [r7, #15]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b084      	sub	sp, #16
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a82e:	2300      	movs	r3, #0
 800a830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a838:	4618      	mov	r0, r3
 800a83a:	f7f8 fbbf 	bl	8002fbc <HAL_HCD_ResetPort>
 800a83e:	4603      	mov	r3, r0
 800a840:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a842:	7bfb      	ldrb	r3, [r7, #15]
 800a844:	4618      	mov	r0, r3
 800a846:	f000 f901 	bl	800aa4c <USBH_Get_USB_Status>
 800a84a:	4603      	mov	r3, r0
 800a84c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a84e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	460b      	mov	r3, r1
 800a862:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a86a:	78fa      	ldrb	r2, [r7, #3]
 800a86c:	4611      	mov	r1, r2
 800a86e:	4618      	mov	r0, r3
 800a870:	f7f8 fbc7 	bl	8003002 <HAL_HCD_HC_GetXferCount>
 800a874:	4603      	mov	r3, r0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a87e:	b590      	push	{r4, r7, lr}
 800a880:	b089      	sub	sp, #36	@ 0x24
 800a882:	af04      	add	r7, sp, #16
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	4608      	mov	r0, r1
 800a888:	4611      	mov	r1, r2
 800a88a:	461a      	mov	r2, r3
 800a88c:	4603      	mov	r3, r0
 800a88e:	70fb      	strb	r3, [r7, #3]
 800a890:	460b      	mov	r3, r1
 800a892:	70bb      	strb	r3, [r7, #2]
 800a894:	4613      	mov	r3, r2
 800a896:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a8a6:	787c      	ldrb	r4, [r7, #1]
 800a8a8:	78ba      	ldrb	r2, [r7, #2]
 800a8aa:	78f9      	ldrb	r1, [r7, #3]
 800a8ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a8ae:	9302      	str	r3, [sp, #8]
 800a8b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a8b4:	9301      	str	r3, [sp, #4]
 800a8b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	4623      	mov	r3, r4
 800a8be:	f7f7 ffb3 	bl	8002828 <HAL_HCD_HC_Init>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a8c6:	7bfb      	ldrb	r3, [r7, #15]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 f8bf 	bl	800aa4c <USBH_Get_USB_Status>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd90      	pop	{r4, r7, pc}

0800a8dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a8f6:	78fa      	ldrb	r2, [r7, #3]
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7f8 f84c 	bl	8002998 <HAL_HCD_HC_Halt>
 800a900:	4603      	mov	r3, r0
 800a902:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a904:	7bfb      	ldrb	r3, [r7, #15]
 800a906:	4618      	mov	r0, r3
 800a908:	f000 f8a0 	bl	800aa4c <USBH_Get_USB_Status>
 800a90c:	4603      	mov	r3, r0
 800a90e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a910:	7bbb      	ldrb	r3, [r7, #14]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a91a:	b590      	push	{r4, r7, lr}
 800a91c:	b089      	sub	sp, #36	@ 0x24
 800a91e:	af04      	add	r7, sp, #16
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	4608      	mov	r0, r1
 800a924:	4611      	mov	r1, r2
 800a926:	461a      	mov	r2, r3
 800a928:	4603      	mov	r3, r0
 800a92a:	70fb      	strb	r3, [r7, #3]
 800a92c:	460b      	mov	r3, r1
 800a92e:	70bb      	strb	r3, [r7, #2]
 800a930:	4613      	mov	r3, r2
 800a932:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a942:	787c      	ldrb	r4, [r7, #1]
 800a944:	78ba      	ldrb	r2, [r7, #2]
 800a946:	78f9      	ldrb	r1, [r7, #3]
 800a948:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a94c:	9303      	str	r3, [sp, #12]
 800a94e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a950:	9302      	str	r3, [sp, #8]
 800a952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	4623      	mov	r3, r4
 800a95e:	f7f8 f83f 	bl	80029e0 <HAL_HCD_HC_SubmitRequest>
 800a962:	4603      	mov	r3, r0
 800a964:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a966:	7bfb      	ldrb	r3, [r7, #15]
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 f86f 	bl	800aa4c <USBH_Get_USB_Status>
 800a96e:	4603      	mov	r3, r0
 800a970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a972:	7bbb      	ldrb	r3, [r7, #14]
}
 800a974:	4618      	mov	r0, r3
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd90      	pop	{r4, r7, pc}

0800a97c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	460b      	mov	r3, r1
 800a986:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a98e:	78fa      	ldrb	r2, [r7, #3]
 800a990:	4611      	mov	r1, r2
 800a992:	4618      	mov	r0, r3
 800a994:	f7f8 fb20 	bl	8002fd8 <HAL_HCD_HC_GetURBState>
 800a998:	4603      	mov	r3, r0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b082      	sub	sp, #8
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d103      	bne.n	800a9c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a9b8:	78fb      	ldrb	r3, [r7, #3]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f000 f872 	bl	800aaa4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a9c0:	20c8      	movs	r0, #200	@ 0xc8
 800a9c2:	f7f6 fc67 	bl	8001294 <HAL_Delay>
  return USBH_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	70fb      	strb	r3, [r7, #3]
 800a9dc:	4613      	mov	r3, r2
 800a9de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a9e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a9e8:	78fa      	ldrb	r2, [r7, #3]
 800a9ea:	68f9      	ldr	r1, [r7, #12]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	011b      	lsls	r3, r3, #4
 800a9f0:	1a9b      	subs	r3, r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	440b      	add	r3, r1
 800a9f6:	3317      	adds	r3, #23
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00a      	beq.n	800aa14 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a9fe:	78fa      	ldrb	r2, [r7, #3]
 800aa00:	68f9      	ldr	r1, [r7, #12]
 800aa02:	4613      	mov	r3, r2
 800aa04:	011b      	lsls	r3, r3, #4
 800aa06:	1a9b      	subs	r3, r3, r2
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	440b      	add	r3, r1
 800aa0c:	333c      	adds	r3, #60	@ 0x3c
 800aa0e:	78ba      	ldrb	r2, [r7, #2]
 800aa10:	701a      	strb	r2, [r3, #0]
 800aa12:	e009      	b.n	800aa28 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aa14:	78fa      	ldrb	r2, [r7, #3]
 800aa16:	68f9      	ldr	r1, [r7, #12]
 800aa18:	4613      	mov	r3, r2
 800aa1a:	011b      	lsls	r3, r3, #4
 800aa1c:	1a9b      	subs	r3, r3, r2
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	440b      	add	r3, r1
 800aa22:	333d      	adds	r3, #61	@ 0x3d
 800aa24:	78ba      	ldrb	r2, [r7, #2]
 800aa26:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3714      	adds	r7, #20
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b082      	sub	sp, #8
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f7f6 fc28 	bl	8001294 <HAL_Delay>
}
 800aa44:	bf00      	nop
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	4603      	mov	r3, r0
 800aa54:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa5a:	79fb      	ldrb	r3, [r7, #7]
 800aa5c:	2b03      	cmp	r3, #3
 800aa5e:	d817      	bhi.n	800aa90 <USBH_Get_USB_Status+0x44>
 800aa60:	a201      	add	r2, pc, #4	@ (adr r2, 800aa68 <USBH_Get_USB_Status+0x1c>)
 800aa62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa66:	bf00      	nop
 800aa68:	0800aa79 	.word	0x0800aa79
 800aa6c:	0800aa7f 	.word	0x0800aa7f
 800aa70:	0800aa85 	.word	0x0800aa85
 800aa74:	0800aa8b 	.word	0x0800aa8b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa7c:	e00b      	b.n	800aa96 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800aa7e:	2302      	movs	r3, #2
 800aa80:	73fb      	strb	r3, [r7, #15]
    break;
 800aa82:	e008      	b.n	800aa96 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800aa84:	2301      	movs	r3, #1
 800aa86:	73fb      	strb	r3, [r7, #15]
    break;
 800aa88:	e005      	b.n	800aa96 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800aa8a:	2302      	movs	r3, #2
 800aa8c:	73fb      	strb	r3, [r7, #15]
    break;
 800aa8e:	e002      	b.n	800aa96 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800aa90:	2302      	movs	r3, #2
 800aa92:	73fb      	strb	r3, [r7, #15]
    break;
 800aa94:	bf00      	nop
  }
  return usb_status;
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3714      	adds	r7, #20
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800aaae:	79fb      	ldrb	r3, [r7, #7]
 800aab0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800aab2:	79fb      	ldrb	r3, [r7, #7]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d102      	bne.n	800aabe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800aab8:	2300      	movs	r3, #0
 800aaba:	73fb      	strb	r3, [r7, #15]
 800aabc:	e001      	b.n	800aac2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800aabe:	2301      	movs	r3, #1
 800aac0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
 800aac4:	461a      	mov	r2, r3
 800aac6:	2101      	movs	r1, #1
 800aac8:	4803      	ldr	r0, [pc, #12]	@ (800aad8 <MX_DriverVbusFS+0x34>)
 800aaca:	f7f7 fe2d 	bl	8002728 <HAL_GPIO_WritePin>
}
 800aace:	bf00      	nop
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	40020800 	.word	0x40020800

0800aadc <malloc>:
 800aadc:	4b02      	ldr	r3, [pc, #8]	@ (800aae8 <malloc+0xc>)
 800aade:	4601      	mov	r1, r0
 800aae0:	6818      	ldr	r0, [r3, #0]
 800aae2:	f000 b82d 	b.w	800ab40 <_malloc_r>
 800aae6:	bf00      	nop
 800aae8:	2000002c 	.word	0x2000002c

0800aaec <free>:
 800aaec:	4b02      	ldr	r3, [pc, #8]	@ (800aaf8 <free+0xc>)
 800aaee:	4601      	mov	r1, r0
 800aaf0:	6818      	ldr	r0, [r3, #0]
 800aaf2:	f000 b915 	b.w	800ad20 <_free_r>
 800aaf6:	bf00      	nop
 800aaf8:	2000002c 	.word	0x2000002c

0800aafc <sbrk_aligned>:
 800aafc:	b570      	push	{r4, r5, r6, lr}
 800aafe:	4e0f      	ldr	r6, [pc, #60]	@ (800ab3c <sbrk_aligned+0x40>)
 800ab00:	460c      	mov	r4, r1
 800ab02:	6831      	ldr	r1, [r6, #0]
 800ab04:	4605      	mov	r5, r0
 800ab06:	b911      	cbnz	r1, 800ab0e <sbrk_aligned+0x12>
 800ab08:	f000 f8ce 	bl	800aca8 <_sbrk_r>
 800ab0c:	6030      	str	r0, [r6, #0]
 800ab0e:	4621      	mov	r1, r4
 800ab10:	4628      	mov	r0, r5
 800ab12:	f000 f8c9 	bl	800aca8 <_sbrk_r>
 800ab16:	1c43      	adds	r3, r0, #1
 800ab18:	d103      	bne.n	800ab22 <sbrk_aligned+0x26>
 800ab1a:	f04f 34ff 	mov.w	r4, #4294967295
 800ab1e:	4620      	mov	r0, r4
 800ab20:	bd70      	pop	{r4, r5, r6, pc}
 800ab22:	1cc4      	adds	r4, r0, #3
 800ab24:	f024 0403 	bic.w	r4, r4, #3
 800ab28:	42a0      	cmp	r0, r4
 800ab2a:	d0f8      	beq.n	800ab1e <sbrk_aligned+0x22>
 800ab2c:	1a21      	subs	r1, r4, r0
 800ab2e:	4628      	mov	r0, r5
 800ab30:	f000 f8ba 	bl	800aca8 <_sbrk_r>
 800ab34:	3001      	adds	r0, #1
 800ab36:	d1f2      	bne.n	800ab1e <sbrk_aligned+0x22>
 800ab38:	e7ef      	b.n	800ab1a <sbrk_aligned+0x1e>
 800ab3a:	bf00      	nop
 800ab3c:	20000c88 	.word	0x20000c88

0800ab40 <_malloc_r>:
 800ab40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab44:	1ccd      	adds	r5, r1, #3
 800ab46:	f025 0503 	bic.w	r5, r5, #3
 800ab4a:	3508      	adds	r5, #8
 800ab4c:	2d0c      	cmp	r5, #12
 800ab4e:	bf38      	it	cc
 800ab50:	250c      	movcc	r5, #12
 800ab52:	2d00      	cmp	r5, #0
 800ab54:	4606      	mov	r6, r0
 800ab56:	db01      	blt.n	800ab5c <_malloc_r+0x1c>
 800ab58:	42a9      	cmp	r1, r5
 800ab5a:	d904      	bls.n	800ab66 <_malloc_r+0x26>
 800ab5c:	230c      	movs	r3, #12
 800ab5e:	6033      	str	r3, [r6, #0]
 800ab60:	2000      	movs	r0, #0
 800ab62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac3c <_malloc_r+0xfc>
 800ab6a:	f000 f869 	bl	800ac40 <__malloc_lock>
 800ab6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ab72:	461c      	mov	r4, r3
 800ab74:	bb44      	cbnz	r4, 800abc8 <_malloc_r+0x88>
 800ab76:	4629      	mov	r1, r5
 800ab78:	4630      	mov	r0, r6
 800ab7a:	f7ff ffbf 	bl	800aafc <sbrk_aligned>
 800ab7e:	1c43      	adds	r3, r0, #1
 800ab80:	4604      	mov	r4, r0
 800ab82:	d158      	bne.n	800ac36 <_malloc_r+0xf6>
 800ab84:	f8d8 4000 	ldr.w	r4, [r8]
 800ab88:	4627      	mov	r7, r4
 800ab8a:	2f00      	cmp	r7, #0
 800ab8c:	d143      	bne.n	800ac16 <_malloc_r+0xd6>
 800ab8e:	2c00      	cmp	r4, #0
 800ab90:	d04b      	beq.n	800ac2a <_malloc_r+0xea>
 800ab92:	6823      	ldr	r3, [r4, #0]
 800ab94:	4639      	mov	r1, r7
 800ab96:	4630      	mov	r0, r6
 800ab98:	eb04 0903 	add.w	r9, r4, r3
 800ab9c:	f000 f884 	bl	800aca8 <_sbrk_r>
 800aba0:	4581      	cmp	r9, r0
 800aba2:	d142      	bne.n	800ac2a <_malloc_r+0xea>
 800aba4:	6821      	ldr	r1, [r4, #0]
 800aba6:	1a6d      	subs	r5, r5, r1
 800aba8:	4629      	mov	r1, r5
 800abaa:	4630      	mov	r0, r6
 800abac:	f7ff ffa6 	bl	800aafc <sbrk_aligned>
 800abb0:	3001      	adds	r0, #1
 800abb2:	d03a      	beq.n	800ac2a <_malloc_r+0xea>
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	442b      	add	r3, r5
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	f8d8 3000 	ldr.w	r3, [r8]
 800abbe:	685a      	ldr	r2, [r3, #4]
 800abc0:	bb62      	cbnz	r2, 800ac1c <_malloc_r+0xdc>
 800abc2:	f8c8 7000 	str.w	r7, [r8]
 800abc6:	e00f      	b.n	800abe8 <_malloc_r+0xa8>
 800abc8:	6822      	ldr	r2, [r4, #0]
 800abca:	1b52      	subs	r2, r2, r5
 800abcc:	d420      	bmi.n	800ac10 <_malloc_r+0xd0>
 800abce:	2a0b      	cmp	r2, #11
 800abd0:	d917      	bls.n	800ac02 <_malloc_r+0xc2>
 800abd2:	1961      	adds	r1, r4, r5
 800abd4:	42a3      	cmp	r3, r4
 800abd6:	6025      	str	r5, [r4, #0]
 800abd8:	bf18      	it	ne
 800abda:	6059      	strne	r1, [r3, #4]
 800abdc:	6863      	ldr	r3, [r4, #4]
 800abde:	bf08      	it	eq
 800abe0:	f8c8 1000 	streq.w	r1, [r8]
 800abe4:	5162      	str	r2, [r4, r5]
 800abe6:	604b      	str	r3, [r1, #4]
 800abe8:	4630      	mov	r0, r6
 800abea:	f000 f82f 	bl	800ac4c <__malloc_unlock>
 800abee:	f104 000b 	add.w	r0, r4, #11
 800abf2:	1d23      	adds	r3, r4, #4
 800abf4:	f020 0007 	bic.w	r0, r0, #7
 800abf8:	1ac2      	subs	r2, r0, r3
 800abfa:	bf1c      	itt	ne
 800abfc:	1a1b      	subne	r3, r3, r0
 800abfe:	50a3      	strne	r3, [r4, r2]
 800ac00:	e7af      	b.n	800ab62 <_malloc_r+0x22>
 800ac02:	6862      	ldr	r2, [r4, #4]
 800ac04:	42a3      	cmp	r3, r4
 800ac06:	bf0c      	ite	eq
 800ac08:	f8c8 2000 	streq.w	r2, [r8]
 800ac0c:	605a      	strne	r2, [r3, #4]
 800ac0e:	e7eb      	b.n	800abe8 <_malloc_r+0xa8>
 800ac10:	4623      	mov	r3, r4
 800ac12:	6864      	ldr	r4, [r4, #4]
 800ac14:	e7ae      	b.n	800ab74 <_malloc_r+0x34>
 800ac16:	463c      	mov	r4, r7
 800ac18:	687f      	ldr	r7, [r7, #4]
 800ac1a:	e7b6      	b.n	800ab8a <_malloc_r+0x4a>
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	42a3      	cmp	r3, r4
 800ac22:	d1fb      	bne.n	800ac1c <_malloc_r+0xdc>
 800ac24:	2300      	movs	r3, #0
 800ac26:	6053      	str	r3, [r2, #4]
 800ac28:	e7de      	b.n	800abe8 <_malloc_r+0xa8>
 800ac2a:	230c      	movs	r3, #12
 800ac2c:	6033      	str	r3, [r6, #0]
 800ac2e:	4630      	mov	r0, r6
 800ac30:	f000 f80c 	bl	800ac4c <__malloc_unlock>
 800ac34:	e794      	b.n	800ab60 <_malloc_r+0x20>
 800ac36:	6005      	str	r5, [r0, #0]
 800ac38:	e7d6      	b.n	800abe8 <_malloc_r+0xa8>
 800ac3a:	bf00      	nop
 800ac3c:	20000c8c 	.word	0x20000c8c

0800ac40 <__malloc_lock>:
 800ac40:	4801      	ldr	r0, [pc, #4]	@ (800ac48 <__malloc_lock+0x8>)
 800ac42:	f000 b86b 	b.w	800ad1c <__retarget_lock_acquire_recursive>
 800ac46:	bf00      	nop
 800ac48:	20000dcc 	.word	0x20000dcc

0800ac4c <__malloc_unlock>:
 800ac4c:	4801      	ldr	r0, [pc, #4]	@ (800ac54 <__malloc_unlock+0x8>)
 800ac4e:	f000 b866 	b.w	800ad1e <__retarget_lock_release_recursive>
 800ac52:	bf00      	nop
 800ac54:	20000dcc 	.word	0x20000dcc

0800ac58 <siprintf>:
 800ac58:	b40e      	push	{r1, r2, r3}
 800ac5a:	b500      	push	{lr}
 800ac5c:	b09c      	sub	sp, #112	@ 0x70
 800ac5e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ac60:	9002      	str	r0, [sp, #8]
 800ac62:	9006      	str	r0, [sp, #24]
 800ac64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ac68:	4809      	ldr	r0, [pc, #36]	@ (800ac90 <siprintf+0x38>)
 800ac6a:	9107      	str	r1, [sp, #28]
 800ac6c:	9104      	str	r1, [sp, #16]
 800ac6e:	4909      	ldr	r1, [pc, #36]	@ (800ac94 <siprintf+0x3c>)
 800ac70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac74:	9105      	str	r1, [sp, #20]
 800ac76:	6800      	ldr	r0, [r0, #0]
 800ac78:	9301      	str	r3, [sp, #4]
 800ac7a:	a902      	add	r1, sp, #8
 800ac7c:	f000 f8f6 	bl	800ae6c <_svfiprintf_r>
 800ac80:	9b02      	ldr	r3, [sp, #8]
 800ac82:	2200      	movs	r2, #0
 800ac84:	701a      	strb	r2, [r3, #0]
 800ac86:	b01c      	add	sp, #112	@ 0x70
 800ac88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac8c:	b003      	add	sp, #12
 800ac8e:	4770      	bx	lr
 800ac90:	2000002c 	.word	0x2000002c
 800ac94:	ffff0208 	.word	0xffff0208

0800ac98 <memset>:
 800ac98:	4402      	add	r2, r0
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d100      	bne.n	800aca2 <memset+0xa>
 800aca0:	4770      	bx	lr
 800aca2:	f803 1b01 	strb.w	r1, [r3], #1
 800aca6:	e7f9      	b.n	800ac9c <memset+0x4>

0800aca8 <_sbrk_r>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	4d06      	ldr	r5, [pc, #24]	@ (800acc4 <_sbrk_r+0x1c>)
 800acac:	2300      	movs	r3, #0
 800acae:	4604      	mov	r4, r0
 800acb0:	4608      	mov	r0, r1
 800acb2:	602b      	str	r3, [r5, #0]
 800acb4:	f7f6 fa0a 	bl	80010cc <_sbrk>
 800acb8:	1c43      	adds	r3, r0, #1
 800acba:	d102      	bne.n	800acc2 <_sbrk_r+0x1a>
 800acbc:	682b      	ldr	r3, [r5, #0]
 800acbe:	b103      	cbz	r3, 800acc2 <_sbrk_r+0x1a>
 800acc0:	6023      	str	r3, [r4, #0]
 800acc2:	bd38      	pop	{r3, r4, r5, pc}
 800acc4:	20000dc8 	.word	0x20000dc8

0800acc8 <__errno>:
 800acc8:	4b01      	ldr	r3, [pc, #4]	@ (800acd0 <__errno+0x8>)
 800acca:	6818      	ldr	r0, [r3, #0]
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	2000002c 	.word	0x2000002c

0800acd4 <__libc_init_array>:
 800acd4:	b570      	push	{r4, r5, r6, lr}
 800acd6:	4d0d      	ldr	r5, [pc, #52]	@ (800ad0c <__libc_init_array+0x38>)
 800acd8:	4c0d      	ldr	r4, [pc, #52]	@ (800ad10 <__libc_init_array+0x3c>)
 800acda:	1b64      	subs	r4, r4, r5
 800acdc:	10a4      	asrs	r4, r4, #2
 800acde:	2600      	movs	r6, #0
 800ace0:	42a6      	cmp	r6, r4
 800ace2:	d109      	bne.n	800acf8 <__libc_init_array+0x24>
 800ace4:	4d0b      	ldr	r5, [pc, #44]	@ (800ad14 <__libc_init_array+0x40>)
 800ace6:	4c0c      	ldr	r4, [pc, #48]	@ (800ad18 <__libc_init_array+0x44>)
 800ace8:	f000 fba8 	bl	800b43c <_init>
 800acec:	1b64      	subs	r4, r4, r5
 800acee:	10a4      	asrs	r4, r4, #2
 800acf0:	2600      	movs	r6, #0
 800acf2:	42a6      	cmp	r6, r4
 800acf4:	d105      	bne.n	800ad02 <__libc_init_array+0x2e>
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
 800acf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800acfc:	4798      	blx	r3
 800acfe:	3601      	adds	r6, #1
 800ad00:	e7ee      	b.n	800ace0 <__libc_init_array+0xc>
 800ad02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad06:	4798      	blx	r3
 800ad08:	3601      	adds	r6, #1
 800ad0a:	e7f2      	b.n	800acf2 <__libc_init_array+0x1e>
 800ad0c:	0800b4bc 	.word	0x0800b4bc
 800ad10:	0800b4bc 	.word	0x0800b4bc
 800ad14:	0800b4bc 	.word	0x0800b4bc
 800ad18:	0800b4c0 	.word	0x0800b4c0

0800ad1c <__retarget_lock_acquire_recursive>:
 800ad1c:	4770      	bx	lr

0800ad1e <__retarget_lock_release_recursive>:
 800ad1e:	4770      	bx	lr

0800ad20 <_free_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4605      	mov	r5, r0
 800ad24:	2900      	cmp	r1, #0
 800ad26:	d041      	beq.n	800adac <_free_r+0x8c>
 800ad28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad2c:	1f0c      	subs	r4, r1, #4
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	bfb8      	it	lt
 800ad32:	18e4      	addlt	r4, r4, r3
 800ad34:	f7ff ff84 	bl	800ac40 <__malloc_lock>
 800ad38:	4a1d      	ldr	r2, [pc, #116]	@ (800adb0 <_free_r+0x90>)
 800ad3a:	6813      	ldr	r3, [r2, #0]
 800ad3c:	b933      	cbnz	r3, 800ad4c <_free_r+0x2c>
 800ad3e:	6063      	str	r3, [r4, #4]
 800ad40:	6014      	str	r4, [r2, #0]
 800ad42:	4628      	mov	r0, r5
 800ad44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad48:	f7ff bf80 	b.w	800ac4c <__malloc_unlock>
 800ad4c:	42a3      	cmp	r3, r4
 800ad4e:	d908      	bls.n	800ad62 <_free_r+0x42>
 800ad50:	6820      	ldr	r0, [r4, #0]
 800ad52:	1821      	adds	r1, r4, r0
 800ad54:	428b      	cmp	r3, r1
 800ad56:	bf01      	itttt	eq
 800ad58:	6819      	ldreq	r1, [r3, #0]
 800ad5a:	685b      	ldreq	r3, [r3, #4]
 800ad5c:	1809      	addeq	r1, r1, r0
 800ad5e:	6021      	streq	r1, [r4, #0]
 800ad60:	e7ed      	b.n	800ad3e <_free_r+0x1e>
 800ad62:	461a      	mov	r2, r3
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	b10b      	cbz	r3, 800ad6c <_free_r+0x4c>
 800ad68:	42a3      	cmp	r3, r4
 800ad6a:	d9fa      	bls.n	800ad62 <_free_r+0x42>
 800ad6c:	6811      	ldr	r1, [r2, #0]
 800ad6e:	1850      	adds	r0, r2, r1
 800ad70:	42a0      	cmp	r0, r4
 800ad72:	d10b      	bne.n	800ad8c <_free_r+0x6c>
 800ad74:	6820      	ldr	r0, [r4, #0]
 800ad76:	4401      	add	r1, r0
 800ad78:	1850      	adds	r0, r2, r1
 800ad7a:	4283      	cmp	r3, r0
 800ad7c:	6011      	str	r1, [r2, #0]
 800ad7e:	d1e0      	bne.n	800ad42 <_free_r+0x22>
 800ad80:	6818      	ldr	r0, [r3, #0]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	6053      	str	r3, [r2, #4]
 800ad86:	4408      	add	r0, r1
 800ad88:	6010      	str	r0, [r2, #0]
 800ad8a:	e7da      	b.n	800ad42 <_free_r+0x22>
 800ad8c:	d902      	bls.n	800ad94 <_free_r+0x74>
 800ad8e:	230c      	movs	r3, #12
 800ad90:	602b      	str	r3, [r5, #0]
 800ad92:	e7d6      	b.n	800ad42 <_free_r+0x22>
 800ad94:	6820      	ldr	r0, [r4, #0]
 800ad96:	1821      	adds	r1, r4, r0
 800ad98:	428b      	cmp	r3, r1
 800ad9a:	bf04      	itt	eq
 800ad9c:	6819      	ldreq	r1, [r3, #0]
 800ad9e:	685b      	ldreq	r3, [r3, #4]
 800ada0:	6063      	str	r3, [r4, #4]
 800ada2:	bf04      	itt	eq
 800ada4:	1809      	addeq	r1, r1, r0
 800ada6:	6021      	streq	r1, [r4, #0]
 800ada8:	6054      	str	r4, [r2, #4]
 800adaa:	e7ca      	b.n	800ad42 <_free_r+0x22>
 800adac:	bd38      	pop	{r3, r4, r5, pc}
 800adae:	bf00      	nop
 800adb0:	20000c8c 	.word	0x20000c8c

0800adb4 <__ssputs_r>:
 800adb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adb8:	688e      	ldr	r6, [r1, #8]
 800adba:	461f      	mov	r7, r3
 800adbc:	42be      	cmp	r6, r7
 800adbe:	680b      	ldr	r3, [r1, #0]
 800adc0:	4682      	mov	sl, r0
 800adc2:	460c      	mov	r4, r1
 800adc4:	4690      	mov	r8, r2
 800adc6:	d82d      	bhi.n	800ae24 <__ssputs_r+0x70>
 800adc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800adcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800add0:	d026      	beq.n	800ae20 <__ssputs_r+0x6c>
 800add2:	6965      	ldr	r5, [r4, #20]
 800add4:	6909      	ldr	r1, [r1, #16]
 800add6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adda:	eba3 0901 	sub.w	r9, r3, r1
 800adde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ade2:	1c7b      	adds	r3, r7, #1
 800ade4:	444b      	add	r3, r9
 800ade6:	106d      	asrs	r5, r5, #1
 800ade8:	429d      	cmp	r5, r3
 800adea:	bf38      	it	cc
 800adec:	461d      	movcc	r5, r3
 800adee:	0553      	lsls	r3, r2, #21
 800adf0:	d527      	bpl.n	800ae42 <__ssputs_r+0x8e>
 800adf2:	4629      	mov	r1, r5
 800adf4:	f7ff fea4 	bl	800ab40 <_malloc_r>
 800adf8:	4606      	mov	r6, r0
 800adfa:	b360      	cbz	r0, 800ae56 <__ssputs_r+0xa2>
 800adfc:	6921      	ldr	r1, [r4, #16]
 800adfe:	464a      	mov	r2, r9
 800ae00:	f000 fad8 	bl	800b3b4 <memcpy>
 800ae04:	89a3      	ldrh	r3, [r4, #12]
 800ae06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae0e:	81a3      	strh	r3, [r4, #12]
 800ae10:	6126      	str	r6, [r4, #16]
 800ae12:	6165      	str	r5, [r4, #20]
 800ae14:	444e      	add	r6, r9
 800ae16:	eba5 0509 	sub.w	r5, r5, r9
 800ae1a:	6026      	str	r6, [r4, #0]
 800ae1c:	60a5      	str	r5, [r4, #8]
 800ae1e:	463e      	mov	r6, r7
 800ae20:	42be      	cmp	r6, r7
 800ae22:	d900      	bls.n	800ae26 <__ssputs_r+0x72>
 800ae24:	463e      	mov	r6, r7
 800ae26:	6820      	ldr	r0, [r4, #0]
 800ae28:	4632      	mov	r2, r6
 800ae2a:	4641      	mov	r1, r8
 800ae2c:	f000 faa8 	bl	800b380 <memmove>
 800ae30:	68a3      	ldr	r3, [r4, #8]
 800ae32:	1b9b      	subs	r3, r3, r6
 800ae34:	60a3      	str	r3, [r4, #8]
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	4433      	add	r3, r6
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae42:	462a      	mov	r2, r5
 800ae44:	f000 fac4 	bl	800b3d0 <_realloc_r>
 800ae48:	4606      	mov	r6, r0
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	d1e0      	bne.n	800ae10 <__ssputs_r+0x5c>
 800ae4e:	6921      	ldr	r1, [r4, #16]
 800ae50:	4650      	mov	r0, sl
 800ae52:	f7ff ff65 	bl	800ad20 <_free_r>
 800ae56:	230c      	movs	r3, #12
 800ae58:	f8ca 3000 	str.w	r3, [sl]
 800ae5c:	89a3      	ldrh	r3, [r4, #12]
 800ae5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae62:	81a3      	strh	r3, [r4, #12]
 800ae64:	f04f 30ff 	mov.w	r0, #4294967295
 800ae68:	e7e9      	b.n	800ae3e <__ssputs_r+0x8a>
	...

0800ae6c <_svfiprintf_r>:
 800ae6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae70:	4698      	mov	r8, r3
 800ae72:	898b      	ldrh	r3, [r1, #12]
 800ae74:	061b      	lsls	r3, r3, #24
 800ae76:	b09d      	sub	sp, #116	@ 0x74
 800ae78:	4607      	mov	r7, r0
 800ae7a:	460d      	mov	r5, r1
 800ae7c:	4614      	mov	r4, r2
 800ae7e:	d510      	bpl.n	800aea2 <_svfiprintf_r+0x36>
 800ae80:	690b      	ldr	r3, [r1, #16]
 800ae82:	b973      	cbnz	r3, 800aea2 <_svfiprintf_r+0x36>
 800ae84:	2140      	movs	r1, #64	@ 0x40
 800ae86:	f7ff fe5b 	bl	800ab40 <_malloc_r>
 800ae8a:	6028      	str	r0, [r5, #0]
 800ae8c:	6128      	str	r0, [r5, #16]
 800ae8e:	b930      	cbnz	r0, 800ae9e <_svfiprintf_r+0x32>
 800ae90:	230c      	movs	r3, #12
 800ae92:	603b      	str	r3, [r7, #0]
 800ae94:	f04f 30ff 	mov.w	r0, #4294967295
 800ae98:	b01d      	add	sp, #116	@ 0x74
 800ae9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9e:	2340      	movs	r3, #64	@ 0x40
 800aea0:	616b      	str	r3, [r5, #20]
 800aea2:	2300      	movs	r3, #0
 800aea4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aea6:	2320      	movs	r3, #32
 800aea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aeac:	f8cd 800c 	str.w	r8, [sp, #12]
 800aeb0:	2330      	movs	r3, #48	@ 0x30
 800aeb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b050 <_svfiprintf_r+0x1e4>
 800aeb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aeba:	f04f 0901 	mov.w	r9, #1
 800aebe:	4623      	mov	r3, r4
 800aec0:	469a      	mov	sl, r3
 800aec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aec6:	b10a      	cbz	r2, 800aecc <_svfiprintf_r+0x60>
 800aec8:	2a25      	cmp	r2, #37	@ 0x25
 800aeca:	d1f9      	bne.n	800aec0 <_svfiprintf_r+0x54>
 800aecc:	ebba 0b04 	subs.w	fp, sl, r4
 800aed0:	d00b      	beq.n	800aeea <_svfiprintf_r+0x7e>
 800aed2:	465b      	mov	r3, fp
 800aed4:	4622      	mov	r2, r4
 800aed6:	4629      	mov	r1, r5
 800aed8:	4638      	mov	r0, r7
 800aeda:	f7ff ff6b 	bl	800adb4 <__ssputs_r>
 800aede:	3001      	adds	r0, #1
 800aee0:	f000 80a7 	beq.w	800b032 <_svfiprintf_r+0x1c6>
 800aee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aee6:	445a      	add	r2, fp
 800aee8:	9209      	str	r2, [sp, #36]	@ 0x24
 800aeea:	f89a 3000 	ldrb.w	r3, [sl]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f000 809f 	beq.w	800b032 <_svfiprintf_r+0x1c6>
 800aef4:	2300      	movs	r3, #0
 800aef6:	f04f 32ff 	mov.w	r2, #4294967295
 800aefa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aefe:	f10a 0a01 	add.w	sl, sl, #1
 800af02:	9304      	str	r3, [sp, #16]
 800af04:	9307      	str	r3, [sp, #28]
 800af06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af0a:	931a      	str	r3, [sp, #104]	@ 0x68
 800af0c:	4654      	mov	r4, sl
 800af0e:	2205      	movs	r2, #5
 800af10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af14:	484e      	ldr	r0, [pc, #312]	@ (800b050 <_svfiprintf_r+0x1e4>)
 800af16:	f7f5 f963 	bl	80001e0 <memchr>
 800af1a:	9a04      	ldr	r2, [sp, #16]
 800af1c:	b9d8      	cbnz	r0, 800af56 <_svfiprintf_r+0xea>
 800af1e:	06d0      	lsls	r0, r2, #27
 800af20:	bf44      	itt	mi
 800af22:	2320      	movmi	r3, #32
 800af24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af28:	0711      	lsls	r1, r2, #28
 800af2a:	bf44      	itt	mi
 800af2c:	232b      	movmi	r3, #43	@ 0x2b
 800af2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af32:	f89a 3000 	ldrb.w	r3, [sl]
 800af36:	2b2a      	cmp	r3, #42	@ 0x2a
 800af38:	d015      	beq.n	800af66 <_svfiprintf_r+0xfa>
 800af3a:	9a07      	ldr	r2, [sp, #28]
 800af3c:	4654      	mov	r4, sl
 800af3e:	2000      	movs	r0, #0
 800af40:	f04f 0c0a 	mov.w	ip, #10
 800af44:	4621      	mov	r1, r4
 800af46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af4a:	3b30      	subs	r3, #48	@ 0x30
 800af4c:	2b09      	cmp	r3, #9
 800af4e:	d94b      	bls.n	800afe8 <_svfiprintf_r+0x17c>
 800af50:	b1b0      	cbz	r0, 800af80 <_svfiprintf_r+0x114>
 800af52:	9207      	str	r2, [sp, #28]
 800af54:	e014      	b.n	800af80 <_svfiprintf_r+0x114>
 800af56:	eba0 0308 	sub.w	r3, r0, r8
 800af5a:	fa09 f303 	lsl.w	r3, r9, r3
 800af5e:	4313      	orrs	r3, r2
 800af60:	9304      	str	r3, [sp, #16]
 800af62:	46a2      	mov	sl, r4
 800af64:	e7d2      	b.n	800af0c <_svfiprintf_r+0xa0>
 800af66:	9b03      	ldr	r3, [sp, #12]
 800af68:	1d19      	adds	r1, r3, #4
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	9103      	str	r1, [sp, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	bfbb      	ittet	lt
 800af72:	425b      	neglt	r3, r3
 800af74:	f042 0202 	orrlt.w	r2, r2, #2
 800af78:	9307      	strge	r3, [sp, #28]
 800af7a:	9307      	strlt	r3, [sp, #28]
 800af7c:	bfb8      	it	lt
 800af7e:	9204      	strlt	r2, [sp, #16]
 800af80:	7823      	ldrb	r3, [r4, #0]
 800af82:	2b2e      	cmp	r3, #46	@ 0x2e
 800af84:	d10a      	bne.n	800af9c <_svfiprintf_r+0x130>
 800af86:	7863      	ldrb	r3, [r4, #1]
 800af88:	2b2a      	cmp	r3, #42	@ 0x2a
 800af8a:	d132      	bne.n	800aff2 <_svfiprintf_r+0x186>
 800af8c:	9b03      	ldr	r3, [sp, #12]
 800af8e:	1d1a      	adds	r2, r3, #4
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	9203      	str	r2, [sp, #12]
 800af94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af98:	3402      	adds	r4, #2
 800af9a:	9305      	str	r3, [sp, #20]
 800af9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b060 <_svfiprintf_r+0x1f4>
 800afa0:	7821      	ldrb	r1, [r4, #0]
 800afa2:	2203      	movs	r2, #3
 800afa4:	4650      	mov	r0, sl
 800afa6:	f7f5 f91b 	bl	80001e0 <memchr>
 800afaa:	b138      	cbz	r0, 800afbc <_svfiprintf_r+0x150>
 800afac:	9b04      	ldr	r3, [sp, #16]
 800afae:	eba0 000a 	sub.w	r0, r0, sl
 800afb2:	2240      	movs	r2, #64	@ 0x40
 800afb4:	4082      	lsls	r2, r0
 800afb6:	4313      	orrs	r3, r2
 800afb8:	3401      	adds	r4, #1
 800afba:	9304      	str	r3, [sp, #16]
 800afbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc0:	4824      	ldr	r0, [pc, #144]	@ (800b054 <_svfiprintf_r+0x1e8>)
 800afc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afc6:	2206      	movs	r2, #6
 800afc8:	f7f5 f90a 	bl	80001e0 <memchr>
 800afcc:	2800      	cmp	r0, #0
 800afce:	d036      	beq.n	800b03e <_svfiprintf_r+0x1d2>
 800afd0:	4b21      	ldr	r3, [pc, #132]	@ (800b058 <_svfiprintf_r+0x1ec>)
 800afd2:	bb1b      	cbnz	r3, 800b01c <_svfiprintf_r+0x1b0>
 800afd4:	9b03      	ldr	r3, [sp, #12]
 800afd6:	3307      	adds	r3, #7
 800afd8:	f023 0307 	bic.w	r3, r3, #7
 800afdc:	3308      	adds	r3, #8
 800afde:	9303      	str	r3, [sp, #12]
 800afe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afe2:	4433      	add	r3, r6
 800afe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800afe6:	e76a      	b.n	800aebe <_svfiprintf_r+0x52>
 800afe8:	fb0c 3202 	mla	r2, ip, r2, r3
 800afec:	460c      	mov	r4, r1
 800afee:	2001      	movs	r0, #1
 800aff0:	e7a8      	b.n	800af44 <_svfiprintf_r+0xd8>
 800aff2:	2300      	movs	r3, #0
 800aff4:	3401      	adds	r4, #1
 800aff6:	9305      	str	r3, [sp, #20]
 800aff8:	4619      	mov	r1, r3
 800affa:	f04f 0c0a 	mov.w	ip, #10
 800affe:	4620      	mov	r0, r4
 800b000:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b004:	3a30      	subs	r2, #48	@ 0x30
 800b006:	2a09      	cmp	r2, #9
 800b008:	d903      	bls.n	800b012 <_svfiprintf_r+0x1a6>
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d0c6      	beq.n	800af9c <_svfiprintf_r+0x130>
 800b00e:	9105      	str	r1, [sp, #20]
 800b010:	e7c4      	b.n	800af9c <_svfiprintf_r+0x130>
 800b012:	fb0c 2101 	mla	r1, ip, r1, r2
 800b016:	4604      	mov	r4, r0
 800b018:	2301      	movs	r3, #1
 800b01a:	e7f0      	b.n	800affe <_svfiprintf_r+0x192>
 800b01c:	ab03      	add	r3, sp, #12
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	462a      	mov	r2, r5
 800b022:	4b0e      	ldr	r3, [pc, #56]	@ (800b05c <_svfiprintf_r+0x1f0>)
 800b024:	a904      	add	r1, sp, #16
 800b026:	4638      	mov	r0, r7
 800b028:	f3af 8000 	nop.w
 800b02c:	1c42      	adds	r2, r0, #1
 800b02e:	4606      	mov	r6, r0
 800b030:	d1d6      	bne.n	800afe0 <_svfiprintf_r+0x174>
 800b032:	89ab      	ldrh	r3, [r5, #12]
 800b034:	065b      	lsls	r3, r3, #25
 800b036:	f53f af2d 	bmi.w	800ae94 <_svfiprintf_r+0x28>
 800b03a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b03c:	e72c      	b.n	800ae98 <_svfiprintf_r+0x2c>
 800b03e:	ab03      	add	r3, sp, #12
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	462a      	mov	r2, r5
 800b044:	4b05      	ldr	r3, [pc, #20]	@ (800b05c <_svfiprintf_r+0x1f0>)
 800b046:	a904      	add	r1, sp, #16
 800b048:	4638      	mov	r0, r7
 800b04a:	f000 f879 	bl	800b140 <_printf_i>
 800b04e:	e7ed      	b.n	800b02c <_svfiprintf_r+0x1c0>
 800b050:	0800b480 	.word	0x0800b480
 800b054:	0800b48a 	.word	0x0800b48a
 800b058:	00000000 	.word	0x00000000
 800b05c:	0800adb5 	.word	0x0800adb5
 800b060:	0800b486 	.word	0x0800b486

0800b064 <_printf_common>:
 800b064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b068:	4616      	mov	r6, r2
 800b06a:	4698      	mov	r8, r3
 800b06c:	688a      	ldr	r2, [r1, #8]
 800b06e:	690b      	ldr	r3, [r1, #16]
 800b070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b074:	4293      	cmp	r3, r2
 800b076:	bfb8      	it	lt
 800b078:	4613      	movlt	r3, r2
 800b07a:	6033      	str	r3, [r6, #0]
 800b07c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b080:	4607      	mov	r7, r0
 800b082:	460c      	mov	r4, r1
 800b084:	b10a      	cbz	r2, 800b08a <_printf_common+0x26>
 800b086:	3301      	adds	r3, #1
 800b088:	6033      	str	r3, [r6, #0]
 800b08a:	6823      	ldr	r3, [r4, #0]
 800b08c:	0699      	lsls	r1, r3, #26
 800b08e:	bf42      	ittt	mi
 800b090:	6833      	ldrmi	r3, [r6, #0]
 800b092:	3302      	addmi	r3, #2
 800b094:	6033      	strmi	r3, [r6, #0]
 800b096:	6825      	ldr	r5, [r4, #0]
 800b098:	f015 0506 	ands.w	r5, r5, #6
 800b09c:	d106      	bne.n	800b0ac <_printf_common+0x48>
 800b09e:	f104 0a19 	add.w	sl, r4, #25
 800b0a2:	68e3      	ldr	r3, [r4, #12]
 800b0a4:	6832      	ldr	r2, [r6, #0]
 800b0a6:	1a9b      	subs	r3, r3, r2
 800b0a8:	42ab      	cmp	r3, r5
 800b0aa:	dc26      	bgt.n	800b0fa <_printf_common+0x96>
 800b0ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b0b0:	6822      	ldr	r2, [r4, #0]
 800b0b2:	3b00      	subs	r3, #0
 800b0b4:	bf18      	it	ne
 800b0b6:	2301      	movne	r3, #1
 800b0b8:	0692      	lsls	r2, r2, #26
 800b0ba:	d42b      	bmi.n	800b114 <_printf_common+0xb0>
 800b0bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b0c0:	4641      	mov	r1, r8
 800b0c2:	4638      	mov	r0, r7
 800b0c4:	47c8      	blx	r9
 800b0c6:	3001      	adds	r0, #1
 800b0c8:	d01e      	beq.n	800b108 <_printf_common+0xa4>
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	6922      	ldr	r2, [r4, #16]
 800b0ce:	f003 0306 	and.w	r3, r3, #6
 800b0d2:	2b04      	cmp	r3, #4
 800b0d4:	bf02      	ittt	eq
 800b0d6:	68e5      	ldreq	r5, [r4, #12]
 800b0d8:	6833      	ldreq	r3, [r6, #0]
 800b0da:	1aed      	subeq	r5, r5, r3
 800b0dc:	68a3      	ldr	r3, [r4, #8]
 800b0de:	bf0c      	ite	eq
 800b0e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0e4:	2500      	movne	r5, #0
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	bfc4      	itt	gt
 800b0ea:	1a9b      	subgt	r3, r3, r2
 800b0ec:	18ed      	addgt	r5, r5, r3
 800b0ee:	2600      	movs	r6, #0
 800b0f0:	341a      	adds	r4, #26
 800b0f2:	42b5      	cmp	r5, r6
 800b0f4:	d11a      	bne.n	800b12c <_printf_common+0xc8>
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	e008      	b.n	800b10c <_printf_common+0xa8>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	4652      	mov	r2, sl
 800b0fe:	4641      	mov	r1, r8
 800b100:	4638      	mov	r0, r7
 800b102:	47c8      	blx	r9
 800b104:	3001      	adds	r0, #1
 800b106:	d103      	bne.n	800b110 <_printf_common+0xac>
 800b108:	f04f 30ff 	mov.w	r0, #4294967295
 800b10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b110:	3501      	adds	r5, #1
 800b112:	e7c6      	b.n	800b0a2 <_printf_common+0x3e>
 800b114:	18e1      	adds	r1, r4, r3
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	2030      	movs	r0, #48	@ 0x30
 800b11a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b11e:	4422      	add	r2, r4
 800b120:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b128:	3302      	adds	r3, #2
 800b12a:	e7c7      	b.n	800b0bc <_printf_common+0x58>
 800b12c:	2301      	movs	r3, #1
 800b12e:	4622      	mov	r2, r4
 800b130:	4641      	mov	r1, r8
 800b132:	4638      	mov	r0, r7
 800b134:	47c8      	blx	r9
 800b136:	3001      	adds	r0, #1
 800b138:	d0e6      	beq.n	800b108 <_printf_common+0xa4>
 800b13a:	3601      	adds	r6, #1
 800b13c:	e7d9      	b.n	800b0f2 <_printf_common+0x8e>
	...

0800b140 <_printf_i>:
 800b140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b144:	7e0f      	ldrb	r7, [r1, #24]
 800b146:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b148:	2f78      	cmp	r7, #120	@ 0x78
 800b14a:	4691      	mov	r9, r2
 800b14c:	4680      	mov	r8, r0
 800b14e:	460c      	mov	r4, r1
 800b150:	469a      	mov	sl, r3
 800b152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b156:	d807      	bhi.n	800b168 <_printf_i+0x28>
 800b158:	2f62      	cmp	r7, #98	@ 0x62
 800b15a:	d80a      	bhi.n	800b172 <_printf_i+0x32>
 800b15c:	2f00      	cmp	r7, #0
 800b15e:	f000 80d2 	beq.w	800b306 <_printf_i+0x1c6>
 800b162:	2f58      	cmp	r7, #88	@ 0x58
 800b164:	f000 80b9 	beq.w	800b2da <_printf_i+0x19a>
 800b168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b16c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b170:	e03a      	b.n	800b1e8 <_printf_i+0xa8>
 800b172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b176:	2b15      	cmp	r3, #21
 800b178:	d8f6      	bhi.n	800b168 <_printf_i+0x28>
 800b17a:	a101      	add	r1, pc, #4	@ (adr r1, 800b180 <_printf_i+0x40>)
 800b17c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b180:	0800b1d9 	.word	0x0800b1d9
 800b184:	0800b1ed 	.word	0x0800b1ed
 800b188:	0800b169 	.word	0x0800b169
 800b18c:	0800b169 	.word	0x0800b169
 800b190:	0800b169 	.word	0x0800b169
 800b194:	0800b169 	.word	0x0800b169
 800b198:	0800b1ed 	.word	0x0800b1ed
 800b19c:	0800b169 	.word	0x0800b169
 800b1a0:	0800b169 	.word	0x0800b169
 800b1a4:	0800b169 	.word	0x0800b169
 800b1a8:	0800b169 	.word	0x0800b169
 800b1ac:	0800b2ed 	.word	0x0800b2ed
 800b1b0:	0800b217 	.word	0x0800b217
 800b1b4:	0800b2a7 	.word	0x0800b2a7
 800b1b8:	0800b169 	.word	0x0800b169
 800b1bc:	0800b169 	.word	0x0800b169
 800b1c0:	0800b30f 	.word	0x0800b30f
 800b1c4:	0800b169 	.word	0x0800b169
 800b1c8:	0800b217 	.word	0x0800b217
 800b1cc:	0800b169 	.word	0x0800b169
 800b1d0:	0800b169 	.word	0x0800b169
 800b1d4:	0800b2af 	.word	0x0800b2af
 800b1d8:	6833      	ldr	r3, [r6, #0]
 800b1da:	1d1a      	adds	r2, r3, #4
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	6032      	str	r2, [r6, #0]
 800b1e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e09d      	b.n	800b328 <_printf_i+0x1e8>
 800b1ec:	6833      	ldr	r3, [r6, #0]
 800b1ee:	6820      	ldr	r0, [r4, #0]
 800b1f0:	1d19      	adds	r1, r3, #4
 800b1f2:	6031      	str	r1, [r6, #0]
 800b1f4:	0606      	lsls	r6, r0, #24
 800b1f6:	d501      	bpl.n	800b1fc <_printf_i+0xbc>
 800b1f8:	681d      	ldr	r5, [r3, #0]
 800b1fa:	e003      	b.n	800b204 <_printf_i+0xc4>
 800b1fc:	0645      	lsls	r5, r0, #25
 800b1fe:	d5fb      	bpl.n	800b1f8 <_printf_i+0xb8>
 800b200:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b204:	2d00      	cmp	r5, #0
 800b206:	da03      	bge.n	800b210 <_printf_i+0xd0>
 800b208:	232d      	movs	r3, #45	@ 0x2d
 800b20a:	426d      	negs	r5, r5
 800b20c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b210:	4859      	ldr	r0, [pc, #356]	@ (800b378 <_printf_i+0x238>)
 800b212:	230a      	movs	r3, #10
 800b214:	e011      	b.n	800b23a <_printf_i+0xfa>
 800b216:	6821      	ldr	r1, [r4, #0]
 800b218:	6833      	ldr	r3, [r6, #0]
 800b21a:	0608      	lsls	r0, r1, #24
 800b21c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b220:	d402      	bmi.n	800b228 <_printf_i+0xe8>
 800b222:	0649      	lsls	r1, r1, #25
 800b224:	bf48      	it	mi
 800b226:	b2ad      	uxthmi	r5, r5
 800b228:	2f6f      	cmp	r7, #111	@ 0x6f
 800b22a:	4853      	ldr	r0, [pc, #332]	@ (800b378 <_printf_i+0x238>)
 800b22c:	6033      	str	r3, [r6, #0]
 800b22e:	bf14      	ite	ne
 800b230:	230a      	movne	r3, #10
 800b232:	2308      	moveq	r3, #8
 800b234:	2100      	movs	r1, #0
 800b236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b23a:	6866      	ldr	r6, [r4, #4]
 800b23c:	60a6      	str	r6, [r4, #8]
 800b23e:	2e00      	cmp	r6, #0
 800b240:	bfa2      	ittt	ge
 800b242:	6821      	ldrge	r1, [r4, #0]
 800b244:	f021 0104 	bicge.w	r1, r1, #4
 800b248:	6021      	strge	r1, [r4, #0]
 800b24a:	b90d      	cbnz	r5, 800b250 <_printf_i+0x110>
 800b24c:	2e00      	cmp	r6, #0
 800b24e:	d04b      	beq.n	800b2e8 <_printf_i+0x1a8>
 800b250:	4616      	mov	r6, r2
 800b252:	fbb5 f1f3 	udiv	r1, r5, r3
 800b256:	fb03 5711 	mls	r7, r3, r1, r5
 800b25a:	5dc7      	ldrb	r7, [r0, r7]
 800b25c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b260:	462f      	mov	r7, r5
 800b262:	42bb      	cmp	r3, r7
 800b264:	460d      	mov	r5, r1
 800b266:	d9f4      	bls.n	800b252 <_printf_i+0x112>
 800b268:	2b08      	cmp	r3, #8
 800b26a:	d10b      	bne.n	800b284 <_printf_i+0x144>
 800b26c:	6823      	ldr	r3, [r4, #0]
 800b26e:	07df      	lsls	r7, r3, #31
 800b270:	d508      	bpl.n	800b284 <_printf_i+0x144>
 800b272:	6923      	ldr	r3, [r4, #16]
 800b274:	6861      	ldr	r1, [r4, #4]
 800b276:	4299      	cmp	r1, r3
 800b278:	bfde      	ittt	le
 800b27a:	2330      	movle	r3, #48	@ 0x30
 800b27c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b280:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b284:	1b92      	subs	r2, r2, r6
 800b286:	6122      	str	r2, [r4, #16]
 800b288:	f8cd a000 	str.w	sl, [sp]
 800b28c:	464b      	mov	r3, r9
 800b28e:	aa03      	add	r2, sp, #12
 800b290:	4621      	mov	r1, r4
 800b292:	4640      	mov	r0, r8
 800b294:	f7ff fee6 	bl	800b064 <_printf_common>
 800b298:	3001      	adds	r0, #1
 800b29a:	d14a      	bne.n	800b332 <_printf_i+0x1f2>
 800b29c:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a0:	b004      	add	sp, #16
 800b2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	f043 0320 	orr.w	r3, r3, #32
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	4833      	ldr	r0, [pc, #204]	@ (800b37c <_printf_i+0x23c>)
 800b2b0:	2778      	movs	r7, #120	@ 0x78
 800b2b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b2b6:	6823      	ldr	r3, [r4, #0]
 800b2b8:	6831      	ldr	r1, [r6, #0]
 800b2ba:	061f      	lsls	r7, r3, #24
 800b2bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800b2c0:	d402      	bmi.n	800b2c8 <_printf_i+0x188>
 800b2c2:	065f      	lsls	r7, r3, #25
 800b2c4:	bf48      	it	mi
 800b2c6:	b2ad      	uxthmi	r5, r5
 800b2c8:	6031      	str	r1, [r6, #0]
 800b2ca:	07d9      	lsls	r1, r3, #31
 800b2cc:	bf44      	itt	mi
 800b2ce:	f043 0320 	orrmi.w	r3, r3, #32
 800b2d2:	6023      	strmi	r3, [r4, #0]
 800b2d4:	b11d      	cbz	r5, 800b2de <_printf_i+0x19e>
 800b2d6:	2310      	movs	r3, #16
 800b2d8:	e7ac      	b.n	800b234 <_printf_i+0xf4>
 800b2da:	4827      	ldr	r0, [pc, #156]	@ (800b378 <_printf_i+0x238>)
 800b2dc:	e7e9      	b.n	800b2b2 <_printf_i+0x172>
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	f023 0320 	bic.w	r3, r3, #32
 800b2e4:	6023      	str	r3, [r4, #0]
 800b2e6:	e7f6      	b.n	800b2d6 <_printf_i+0x196>
 800b2e8:	4616      	mov	r6, r2
 800b2ea:	e7bd      	b.n	800b268 <_printf_i+0x128>
 800b2ec:	6833      	ldr	r3, [r6, #0]
 800b2ee:	6825      	ldr	r5, [r4, #0]
 800b2f0:	6961      	ldr	r1, [r4, #20]
 800b2f2:	1d18      	adds	r0, r3, #4
 800b2f4:	6030      	str	r0, [r6, #0]
 800b2f6:	062e      	lsls	r6, r5, #24
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	d501      	bpl.n	800b300 <_printf_i+0x1c0>
 800b2fc:	6019      	str	r1, [r3, #0]
 800b2fe:	e002      	b.n	800b306 <_printf_i+0x1c6>
 800b300:	0668      	lsls	r0, r5, #25
 800b302:	d5fb      	bpl.n	800b2fc <_printf_i+0x1bc>
 800b304:	8019      	strh	r1, [r3, #0]
 800b306:	2300      	movs	r3, #0
 800b308:	6123      	str	r3, [r4, #16]
 800b30a:	4616      	mov	r6, r2
 800b30c:	e7bc      	b.n	800b288 <_printf_i+0x148>
 800b30e:	6833      	ldr	r3, [r6, #0]
 800b310:	1d1a      	adds	r2, r3, #4
 800b312:	6032      	str	r2, [r6, #0]
 800b314:	681e      	ldr	r6, [r3, #0]
 800b316:	6862      	ldr	r2, [r4, #4]
 800b318:	2100      	movs	r1, #0
 800b31a:	4630      	mov	r0, r6
 800b31c:	f7f4 ff60 	bl	80001e0 <memchr>
 800b320:	b108      	cbz	r0, 800b326 <_printf_i+0x1e6>
 800b322:	1b80      	subs	r0, r0, r6
 800b324:	6060      	str	r0, [r4, #4]
 800b326:	6863      	ldr	r3, [r4, #4]
 800b328:	6123      	str	r3, [r4, #16]
 800b32a:	2300      	movs	r3, #0
 800b32c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b330:	e7aa      	b.n	800b288 <_printf_i+0x148>
 800b332:	6923      	ldr	r3, [r4, #16]
 800b334:	4632      	mov	r2, r6
 800b336:	4649      	mov	r1, r9
 800b338:	4640      	mov	r0, r8
 800b33a:	47d0      	blx	sl
 800b33c:	3001      	adds	r0, #1
 800b33e:	d0ad      	beq.n	800b29c <_printf_i+0x15c>
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	079b      	lsls	r3, r3, #30
 800b344:	d413      	bmi.n	800b36e <_printf_i+0x22e>
 800b346:	68e0      	ldr	r0, [r4, #12]
 800b348:	9b03      	ldr	r3, [sp, #12]
 800b34a:	4298      	cmp	r0, r3
 800b34c:	bfb8      	it	lt
 800b34e:	4618      	movlt	r0, r3
 800b350:	e7a6      	b.n	800b2a0 <_printf_i+0x160>
 800b352:	2301      	movs	r3, #1
 800b354:	4632      	mov	r2, r6
 800b356:	4649      	mov	r1, r9
 800b358:	4640      	mov	r0, r8
 800b35a:	47d0      	blx	sl
 800b35c:	3001      	adds	r0, #1
 800b35e:	d09d      	beq.n	800b29c <_printf_i+0x15c>
 800b360:	3501      	adds	r5, #1
 800b362:	68e3      	ldr	r3, [r4, #12]
 800b364:	9903      	ldr	r1, [sp, #12]
 800b366:	1a5b      	subs	r3, r3, r1
 800b368:	42ab      	cmp	r3, r5
 800b36a:	dcf2      	bgt.n	800b352 <_printf_i+0x212>
 800b36c:	e7eb      	b.n	800b346 <_printf_i+0x206>
 800b36e:	2500      	movs	r5, #0
 800b370:	f104 0619 	add.w	r6, r4, #25
 800b374:	e7f5      	b.n	800b362 <_printf_i+0x222>
 800b376:	bf00      	nop
 800b378:	0800b491 	.word	0x0800b491
 800b37c:	0800b4a2 	.word	0x0800b4a2

0800b380 <memmove>:
 800b380:	4288      	cmp	r0, r1
 800b382:	b510      	push	{r4, lr}
 800b384:	eb01 0402 	add.w	r4, r1, r2
 800b388:	d902      	bls.n	800b390 <memmove+0x10>
 800b38a:	4284      	cmp	r4, r0
 800b38c:	4623      	mov	r3, r4
 800b38e:	d807      	bhi.n	800b3a0 <memmove+0x20>
 800b390:	1e43      	subs	r3, r0, #1
 800b392:	42a1      	cmp	r1, r4
 800b394:	d008      	beq.n	800b3a8 <memmove+0x28>
 800b396:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b39a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b39e:	e7f8      	b.n	800b392 <memmove+0x12>
 800b3a0:	4402      	add	r2, r0
 800b3a2:	4601      	mov	r1, r0
 800b3a4:	428a      	cmp	r2, r1
 800b3a6:	d100      	bne.n	800b3aa <memmove+0x2a>
 800b3a8:	bd10      	pop	{r4, pc}
 800b3aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3b2:	e7f7      	b.n	800b3a4 <memmove+0x24>

0800b3b4 <memcpy>:
 800b3b4:	440a      	add	r2, r1
 800b3b6:	4291      	cmp	r1, r2
 800b3b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3bc:	d100      	bne.n	800b3c0 <memcpy+0xc>
 800b3be:	4770      	bx	lr
 800b3c0:	b510      	push	{r4, lr}
 800b3c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3ca:	4291      	cmp	r1, r2
 800b3cc:	d1f9      	bne.n	800b3c2 <memcpy+0xe>
 800b3ce:	bd10      	pop	{r4, pc}

0800b3d0 <_realloc_r>:
 800b3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3d4:	4680      	mov	r8, r0
 800b3d6:	4615      	mov	r5, r2
 800b3d8:	460c      	mov	r4, r1
 800b3da:	b921      	cbnz	r1, 800b3e6 <_realloc_r+0x16>
 800b3dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	f7ff bbad 	b.w	800ab40 <_malloc_r>
 800b3e6:	b92a      	cbnz	r2, 800b3f4 <_realloc_r+0x24>
 800b3e8:	f7ff fc9a 	bl	800ad20 <_free_r>
 800b3ec:	2400      	movs	r4, #0
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f4:	f000 f81a 	bl	800b42c <_malloc_usable_size_r>
 800b3f8:	4285      	cmp	r5, r0
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	d802      	bhi.n	800b404 <_realloc_r+0x34>
 800b3fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b402:	d8f4      	bhi.n	800b3ee <_realloc_r+0x1e>
 800b404:	4629      	mov	r1, r5
 800b406:	4640      	mov	r0, r8
 800b408:	f7ff fb9a 	bl	800ab40 <_malloc_r>
 800b40c:	4607      	mov	r7, r0
 800b40e:	2800      	cmp	r0, #0
 800b410:	d0ec      	beq.n	800b3ec <_realloc_r+0x1c>
 800b412:	42b5      	cmp	r5, r6
 800b414:	462a      	mov	r2, r5
 800b416:	4621      	mov	r1, r4
 800b418:	bf28      	it	cs
 800b41a:	4632      	movcs	r2, r6
 800b41c:	f7ff ffca 	bl	800b3b4 <memcpy>
 800b420:	4621      	mov	r1, r4
 800b422:	4640      	mov	r0, r8
 800b424:	f7ff fc7c 	bl	800ad20 <_free_r>
 800b428:	463c      	mov	r4, r7
 800b42a:	e7e0      	b.n	800b3ee <_realloc_r+0x1e>

0800b42c <_malloc_usable_size_r>:
 800b42c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b430:	1f18      	subs	r0, r3, #4
 800b432:	2b00      	cmp	r3, #0
 800b434:	bfbc      	itt	lt
 800b436:	580b      	ldrlt	r3, [r1, r0]
 800b438:	18c0      	addlt	r0, r0, r3
 800b43a:	4770      	bx	lr

0800b43c <_init>:
 800b43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43e:	bf00      	nop
 800b440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b442:	bc08      	pop	{r3}
 800b444:	469e      	mov	lr, r3
 800b446:	4770      	bx	lr

0800b448 <_fini>:
 800b448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44a:	bf00      	nop
 800b44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b44e:	bc08      	pop	{r3}
 800b450:	469e      	mov	lr, r3
 800b452:	4770      	bx	lr
