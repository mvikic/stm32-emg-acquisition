
EMG_STM32F407VGT6_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005134  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080052c4  080052c4  000062c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005328  08005328  000070e4  2**0
                  CONTENTS
  4 .ARM          00000008  08005328  08005328  00006328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005330  08005330  000070e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005330  08005330  00006330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005334  08005334  00006334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  08005338  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000070e4  2**0
                  CONTENTS
 10 .bss          00000668  200000e4  200000e4  000070e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000074c  2000074c  000070e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000070e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa5a  00000000  00000000  00007114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024b1  00000000  00000000  00016b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00019020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b90  00000000  00000000  00019f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023471  00000000  00000000  0001aac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b4a  00000000  00000000  0003df31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db4f1  00000000  00000000  00050a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b3  00000000  00000000  0012bf6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044a0  00000000  00000000  0012c020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001304c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00001229  00000000  00000000  00130527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  00131750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e4 	.word	0x200000e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052ac 	.word	0x080052ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	080052ac 	.word	0x080052ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fe4f 	bl	8001208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f837 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f9cd 	bl	800090c <MX_GPIO_Init>
  MX_DMA_Init();
 8000572:	f000 f98d 	bl	8000890 <MX_DMA_Init>
  MX_ADC1_Init();
 8000576:	f000 f88f 	bl	8000698 <MX_ADC1_Init>
  MX_DAC_Init();
 800057a:	f000 f8df 	bl	800073c <MX_DAC_Init>
  MX_TIM8_Init();
 800057e:	f000 f907 	bl	8000790 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f95b 	bl	800083c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, N);
 8000586:	2220      	movs	r2, #32
 8000588:	490c      	ldr	r1, [pc, #48]	@ (80005bc <main+0x5c>)
 800058a:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <main+0x60>)
 800058c:	f000 ff16 	bl	80013bc <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, dac_buffer, N, DAC_ALIGN_12B_R);
 8000590:	2300      	movs	r3, #0
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2320      	movs	r3, #32
 8000596:	4a0b      	ldr	r2, [pc, #44]	@ (80005c4 <main+0x64>)
 8000598:	2100      	movs	r1, #0
 800059a:	480b      	ldr	r0, [pc, #44]	@ (80005c8 <main+0x68>)
 800059c:	f001 fbfc 	bl	8001d98 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim8);
 80005a0:	480a      	ldr	r0, [pc, #40]	@ (80005cc <main+0x6c>)
 80005a2:	f002 ff3b 	bl	800341c <HAL_TIM_Base_Start>
  arm_fir_init_f32(&filter1, NUM_TAPS, Coeffs, State, halfN);  // Puca na ovoj inicijalizaciji, stack frame ukazuje na ConvHalfCplCallback
 80005a6:	2310      	movs	r3, #16
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <main+0x70>)
 80005ac:	4a09      	ldr	r2, [pc, #36]	@ (80005d4 <main+0x74>)
 80005ae:	2120      	movs	r1, #32
 80005b0:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <main+0x78>)
 80005b2:	f003 ff51 	bl	8004458 <arm_fir_init_f32>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b6:	bf00      	nop
 80005b8:	e7fd      	b.n	80005b6 <main+0x56>
 80005ba:	bf00      	nop
 80005bc:	2000030c 	.word	0x2000030c
 80005c0:	20000100 	.word	0x20000100
 80005c4:	2000038c 	.word	0x2000038c
 80005c8:	200001a8 	.word	0x200001a8
 80005cc:	2000021c 	.word	0x2000021c
 80005d0:	20000540 	.word	0x20000540
 80005d4:	20000008 	.word	0x20000008
 80005d8:	2000050c 	.word	0x2000050c

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	@ 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f004 f9de 	bl	80049ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <SystemClock_Config+0xb4>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	4a21      	ldr	r2, [pc, #132]	@ (8000690 <SystemClock_Config+0xb4>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000610:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <SystemClock_Config+0xb4>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b1c      	ldr	r3, [pc, #112]	@ (8000694 <SystemClock_Config+0xb8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a1b      	ldr	r2, [pc, #108]	@ (8000694 <SystemClock_Config+0xb8>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <SystemClock_Config+0xb8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000644:	2300      	movs	r3, #0
 8000646:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fa8d 	bl	8002b6c <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000658:	f000 fb34 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fcf0 	bl	800305c <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000682:	f000 fb1f 	bl	8000cc4 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	@ 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006aa:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006ac:	4a22      	ldr	r2, [pc, #136]	@ (8000738 <MX_ADC1_Init+0xa0>)
 80006ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006b0:	4b20      	ldr	r3, [pc, #128]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006d0:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80006d8:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006da:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80006de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e0:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006e6:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006ec:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006fa:	480e      	ldr	r0, [pc, #56]	@ (8000734 <MX_ADC1_Init+0x9c>)
 80006fc:	f000 fe1a 	bl	8001334 <HAL_ADC_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000706:	f000 fadd 	bl	8000cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800070a:	230b      	movs	r3, #11
 800070c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000716:	463b      	mov	r3, r7
 8000718:	4619      	mov	r1, r3
 800071a:	4806      	ldr	r0, [pc, #24]	@ (8000734 <MX_ADC1_Init+0x9c>)
 800071c:	f000 ff68 	bl	80015f0 <HAL_ADC_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000726:	f000 facd 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000100 	.word	0x20000100
 8000738:	40012000 	.word	0x40012000

0800073c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800074a:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_DAC_Init+0x4c>)
 800074c:	4a0f      	ldr	r2, [pc, #60]	@ (800078c <MX_DAC_Init+0x50>)
 800074e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000750:	480d      	ldr	r0, [pc, #52]	@ (8000788 <MX_DAC_Init+0x4c>)
 8000752:	f001 fafe 	bl	8001d52 <HAL_DAC_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800075c:	f000 fab2 	bl	8000cc4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000760:	230c      	movs	r3, #12
 8000762:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	@ (8000788 <MX_DAC_Init+0x4c>)
 8000770:	f001 fbf2 	bl	8001f58 <HAL_DAC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800077a:	f000 faa3 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200001a8 	.word	0x200001a8
 800078c:	40007400 	.word	0x40007400

08000790 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007a0:	463b      	mov	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80007ac:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MX_TIM8_Init+0xa4>)
 80007ae:	4a22      	ldr	r2, [pc, #136]	@ (8000838 <MX_TIM8_Init+0xa8>)
 80007b0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <MX_TIM8_Init+0xa4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <MX_TIM8_Init+0xa4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 56000;
 80007be:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_TIM8_Init+0xa4>)
 80007c0:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 80007c4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_TIM8_Init+0xa4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80007cc:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_TIM8_Init+0xa4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d2:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_TIM8_Init+0xa4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80007d8:	4816      	ldr	r0, [pc, #88]	@ (8000834 <MX_TIM8_Init+0xa4>)
 80007da:	f002 fe87 	bl	80034ec <HAL_TIM_IC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80007e4:	f000 fa6e 	bl	8000cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007e8:	2320      	movs	r3, #32
 80007ea:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4619      	mov	r1, r3
 80007f6:	480f      	ldr	r0, [pc, #60]	@ (8000834 <MX_TIM8_Init+0xa4>)
 80007f8:	f003 f93a 	bl	8003a70 <HAL_TIMEx_MasterConfigSynchronization>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000802:	f000 fa5f 	bl	8000cc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800080a:	2301      	movs	r3, #1
 800080c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	4619      	mov	r1, r3
 800081c:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_TIM8_Init+0xa4>)
 800081e:	f002 feb4 	bl	800358a <HAL_TIM_IC_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 8000828:	f000 fa4c 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000021c 	.word	0x2000021c
 8000838:	40010400 	.word	0x40010400

0800083c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000840:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_USART2_UART_Init+0x4c>)
 8000842:	4a12      	ldr	r2, [pc, #72]	@ (800088c <MX_USART2_UART_Init+0x50>)
 8000844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <MX_USART2_UART_Init+0x4c>)
 8000848:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 800084c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_USART2_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000860:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_USART2_UART_Init+0x4c>)
 8000862:	2208      	movs	r2, #8
 8000864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_USART2_UART_Init+0x4c>)
 8000874:	f003 f978 	bl	8003b68 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087e:	f000 fa21 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000264 	.word	0x20000264
 800088c:	40004400 	.word	0x40004400

08000890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <MX_DMA_Init+0x78>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a1a      	ldr	r2, [pc, #104]	@ (8000908 <MX_DMA_Init+0x78>)
 80008a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_DMA_Init+0x78>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_DMA_Init+0x78>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a13      	ldr	r2, [pc, #76]	@ (8000908 <MX_DMA_Init+0x78>)
 80008bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_DMA_Init+0x78>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2010      	movs	r0, #16
 80008d4:	f001 fa07 	bl	8001ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008d8:	2010      	movs	r0, #16
 80008da:	f001 fa20 	bl	8001d1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	2011      	movs	r0, #17
 80008e4:	f001 f9ff 	bl	8001ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80008e8:	2011      	movs	r0, #17
 80008ea:	f001 fa18 	bl	8001d1e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	2038      	movs	r0, #56	@ 0x38
 80008f4:	f001 f9f7 	bl	8001ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008f8:	2038      	movs	r0, #56	@ 0x38
 80008fa:	f001 fa10 	bl	8001d1e <HAL_NVIC_EnableIRQ>

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <MX_GPIO_Init+0x9c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a1f      	ldr	r2, [pc, #124]	@ (80009a8 <MX_GPIO_Init+0x9c>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b1d      	ldr	r3, [pc, #116]	@ (80009a8 <MX_GPIO_Init+0x9c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <MX_GPIO_Init+0x9c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a18      	ldr	r2, [pc, #96]	@ (80009a8 <MX_GPIO_Init+0x9c>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <MX_GPIO_Init+0x9c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_GPIO_Init+0x9c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a11      	ldr	r2, [pc, #68]	@ (80009a8 <MX_GPIO_Init+0x9c>)
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_GPIO_Init+0x9c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Green_Pin|LD3_Orange_Pin|LD5_Red_Pin|LD6_Blue_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800097c:	480b      	ldr	r0, [pc, #44]	@ (80009ac <MX_GPIO_Init+0xa0>)
 800097e:	f002 f8db 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Green_Pin LD3_Orange_Pin LD5_Red_Pin LD6_Blue_Pin */
  GPIO_InitStruct.Pin = LD4_Green_Pin|LD3_Orange_Pin|LD5_Red_Pin|LD6_Blue_Pin;
 8000982:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	4619      	mov	r1, r3
 800099a:	4804      	ldr	r0, [pc, #16]	@ (80009ac <MX_GPIO_Init+0xa0>)
 800099c:	f001 ff30 	bl	8002800 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a0:	bf00      	nop
 80009a2:	3720      	adds	r7, #32
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020c00 	.word	0x40020c00

080009b0 <BlinkLED>:

/* USER CODE BEGIN 4 */
void BlinkLED(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t duration, uint32_t count) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	460b      	mov	r3, r1
 80009be:	817b      	strh	r3, [r7, #10]
    for (uint32_t i = 0; i < count; i++) {
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	e014      	b.n	80009f0 <BlinkLED+0x40>
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET); // Turn on LED
 80009c6:	897b      	ldrh	r3, [r7, #10]
 80009c8:	2201      	movs	r2, #1
 80009ca:	4619      	mov	r1, r3
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f002 f8b3 	bl	8002b38 <HAL_GPIO_WritePin>
        HAL_Delay(duration); // Delay for the specified duration
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f000 fc8a 	bl	80012ec <HAL_Delay>
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET); // Turn off LED
 80009d8:	897b      	ldrh	r3, [r7, #10]
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f002 f8aa 	bl	8002b38 <HAL_GPIO_WritePin>
        HAL_Delay(duration); // Delay for the specified duration
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 fc81 	bl	80012ec <HAL_Delay>
    for (uint32_t i = 0; i < count; i++) {
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3301      	adds	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697a      	ldr	r2, [r7, #20]
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d3e6      	bcc.n	80009c6 <BlinkLED+0x16>
    }
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <EnqueueToUartBuffer>:

void EnqueueToUartBuffer(uint8_t* data, size_t size) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < size; i++) {
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	e01b      	b.n	8000a4c <EnqueueToUartBuffer+0x48>
        // Wait if buffer is full
        while (((uartTxBuffer.head + 1) % BUFFER_SIZE) == uartTxBuffer.tail);
 8000a14:	bf00      	nop
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <EnqueueToUartBuffer+0x84>)
 8000a18:	6a1b      	ldr	r3, [r3, #32]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	f003 021f 	and.w	r2, r3, #31
 8000a20:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <EnqueueToUartBuffer+0x84>)
 8000a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d0f6      	beq.n	8000a16 <EnqueueToUartBuffer+0x12>
        uartTxBuffer.buffer[uartTxBuffer.head] = data[i];
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	441a      	add	r2, r3
 8000a2e:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <EnqueueToUartBuffer+0x84>)
 8000a30:	6a1b      	ldr	r3, [r3, #32]
 8000a32:	7811      	ldrb	r1, [r2, #0]
 8000a34:	4a14      	ldr	r2, [pc, #80]	@ (8000a88 <EnqueueToUartBuffer+0x84>)
 8000a36:	54d1      	strb	r1, [r2, r3]
        uartTxBuffer.head = (uartTxBuffer.head + 1) % BUFFER_SIZE;
 8000a38:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <EnqueueToUartBuffer+0x84>)
 8000a3a:	6a1b      	ldr	r3, [r3, #32]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	f003 031f 	and.w	r3, r3, #31
 8000a42:	4a11      	ldr	r2, [pc, #68]	@ (8000a88 <EnqueueToUartBuffer+0x84>)
 8000a44:	6213      	str	r3, [r2, #32]
    for (size_t i = 0; i < size; i++) {
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d3df      	bcc.n	8000a14 <EnqueueToUartBuffer+0x10>
    }

    // If the transmission is not already ongoing, start the transmission
    if (uartTxBuffer.tail == uartTxBuffer.head) {
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <EnqueueToUartBuffer+0x84>)
 8000a56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a58:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <EnqueueToUartBuffer+0x84>)
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d10f      	bne.n	8000a80 <EnqueueToUartBuffer+0x7c>
        // Start DMA transmission
        uartTxBuffer.tail = (uartTxBuffer.tail + 1) % BUFFER_SIZE; // Move tail to point to the first byte
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <EnqueueToUartBuffer+0x84>)
 8000a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a64:	3301      	adds	r3, #1
 8000a66:	f003 031f 	and.w	r3, r3, #31
 8000a6a:	4a07      	ldr	r2, [pc, #28]	@ (8000a88 <EnqueueToUartBuffer+0x84>)
 8000a6c:	6253      	str	r3, [r2, #36]	@ 0x24
        HAL_UART_Transmit_DMA(&huart2, &uartTxBuffer.buffer[uartTxBuffer.tail], 1);
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <EnqueueToUartBuffer+0x84>)
 8000a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a72:	4a05      	ldr	r2, [pc, #20]	@ (8000a88 <EnqueueToUartBuffer+0x84>)
 8000a74:	4413      	add	r3, r2
 8000a76:	2201      	movs	r2, #1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4804      	ldr	r0, [pc, #16]	@ (8000a8c <EnqueueToUartBuffer+0x88>)
 8000a7c:	f003 f8c4 	bl	8003c08 <HAL_UART_Transmit_DMA>
    }
}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000518 	.word	0x20000518
 8000a8c:	20000264 	.word	0x20000264

08000a90 <SendDACData>:

void SendDACData(uint32_t* data, size_t size) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	@ 0x38
 8000a94:	af02      	add	r7, sp, #8
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
    char buffer[32];
    for (size_t i = 0; i < size; i++) {
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a9e:	e017      	b.n	8000ad0 <SendDACData+0x40>
        int len = snprintf(buffer, sizeof(buffer), "DAC[%d]: %lu\r\n", i, data[i]);
 8000aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f107 0008 	add.w	r0, r7, #8
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae4 <SendDACData+0x54>)
 8000ab4:	2120      	movs	r1, #32
 8000ab6:	f003 ff45 	bl	8004944 <sniprintf>
 8000aba:	62b8      	str	r0, [r7, #40]	@ 0x28
        EnqueueToUartBuffer((uint8_t*)buffer, len);
 8000abc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff9d 	bl	8000a04 <EnqueueToUartBuffer>
    for (size_t i = 0; i < size; i++) {
 8000aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000acc:	3301      	adds	r3, #1
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ad0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d3e3      	bcc.n	8000aa0 <SendDACData+0x10>
    }
}
 8000ad8:	bf00      	nop
 8000ada:	bf00      	nop
 8000adc:	3730      	adds	r7, #48	@ 0x30
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	080052c4 	.word	0x080052c4

08000ae8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Ensure it's the correct UART
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a12      	ldr	r2, [pc, #72]	@ (8000b40 <HAL_UART_TxCpltCallback+0x58>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d11d      	bne.n	8000b36 <HAL_UART_TxCpltCallback+0x4e>
        // Move the tail forward in the circular buffer
        if (uartTxBuffer.tail != uartTxBuffer.head) {
 8000afa:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <HAL_UART_TxCpltCallback+0x5c>)
 8000afc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <HAL_UART_TxCpltCallback+0x5c>)
 8000b00:	6a1b      	ldr	r3, [r3, #32]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d010      	beq.n	8000b28 <HAL_UART_TxCpltCallback+0x40>
            uartTxBuffer.tail = (uartTxBuffer.tail + 1) % BUFFER_SIZE;
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <HAL_UART_TxCpltCallback+0x5c>)
 8000b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	f003 031f 	and.w	r3, r3, #31
 8000b10:	4a0c      	ldr	r2, [pc, #48]	@ (8000b44 <HAL_UART_TxCpltCallback+0x5c>)
 8000b12:	6253      	str	r3, [r2, #36]	@ 0x24
            HAL_UART_Transmit_DMA(&huart2, &uartTxBuffer.buffer[uartTxBuffer.tail], 1);
 8000b14:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <HAL_UART_TxCpltCallback+0x5c>)
 8000b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b18:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <HAL_UART_TxCpltCallback+0x5c>)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4809      	ldr	r0, [pc, #36]	@ (8000b48 <HAL_UART_TxCpltCallback+0x60>)
 8000b22:	f003 f871 	bl	8003c08 <HAL_UART_Transmit_DMA>
        } else {
        	// Blink blue LED when transmission is complete
        	BlinkLED(GPIOD, LD6_Blue_Pin, 100, 1); // Adjust GPIO port and pin number accordingly
        }
    }
}
 8000b26:	e006      	b.n	8000b36 <HAL_UART_TxCpltCallback+0x4e>
        	BlinkLED(GPIOD, LD6_Blue_Pin, 100, 1); // Adjust GPIO port and pin number accordingly
 8000b28:	2301      	movs	r3, #1
 8000b2a:	2264      	movs	r2, #100	@ 0x64
 8000b2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b30:	4806      	ldr	r0, [pc, #24]	@ (8000b4c <HAL_UART_TxCpltCallback+0x64>)
 8000b32:	f7ff ff3d 	bl	80009b0 <BlinkLED>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40004400 	.word	0x40004400
 8000b44:	20000518 	.word	0x20000518
 8000b48:	20000264 	.word	0x20000264
 8000b4c:	40020c00 	.word	0x40020c00

08000b50 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	for( int n=0; n<halfN; n++){ filt_in[n] = (float32_t) adc_buffer[n];}
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	e010      	b.n	8000b80 <HAL_ADC_ConvHalfCpltCallback+0x30>
 8000b5e:	4a21      	ldr	r2, [pc, #132]	@ (8000be4 <HAL_ADC_ConvHalfCpltCallback+0x94>)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b66:	ee07 3a90 	vmov	s15, r3
 8000b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000be8 <HAL_ADC_ConvHalfCpltCallback+0x98>)
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	edc3 7a00 	vstr	s15, [r3]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b0f      	cmp	r3, #15
 8000b84:	ddeb      	ble.n	8000b5e <HAL_ADC_ConvHalfCpltCallback+0xe>
	arm_fir_f32(&filter1, filt_in_ptr, filt_out_ptr, halfN);
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 8000b88:	6819      	ldr	r1, [r3, #0]
 8000b8a:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	2310      	movs	r3, #16
 8000b90:	4818      	ldr	r0, [pc, #96]	@ (8000bf4 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 8000b92:	f003 fc73 	bl	800447c <arm_fir_f32>
//	arm_fir_f32(&filter1, filt_in, filt_out, halfN);
	for( int n=0; n<halfN; n++){ dac_buffer[n] = (uint32_t) filt_out[n];}
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	e010      	b.n	8000bbe <HAL_ADC_ConvHalfCpltCallback+0x6e>
 8000b9c:	4a16      	ldr	r2, [pc, #88]	@ (8000bf8 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	edd3 7a00 	vldr	s15, [r3]
 8000ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bac:	ee17 1a90 	vmov	r1, s15
 8000bb0:	4a12      	ldr	r2, [pc, #72]	@ (8000bfc <HAL_ADC_ConvHalfCpltCallback+0xac>)
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	ddeb      	ble.n	8000b9c <HAL_ADC_ConvHalfCpltCallback+0x4c>

	// Transmit DAC data via UART
	SendDACData(dac_buffer, halfN);
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <HAL_ADC_ConvHalfCpltCallback+0xac>)
 8000bc8:	f7ff ff62 	bl	8000a90 <SendDACData>

	BlinkLED(GPIOD, LD4_Green_Pin, 100, 1); // Adjust GPIO port and pin number accordingly
 8000bcc:	2301      	movs	r3, #1
 8000bce:	2264      	movs	r2, #100	@ 0x64
 8000bd0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bd4:	480a      	ldr	r0, [pc, #40]	@ (8000c00 <HAL_ADC_ConvHalfCpltCallback+0xb0>)
 8000bd6:	f7ff feeb 	bl	80009b0 <BlinkLED>
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000030c 	.word	0x2000030c
 8000be8:	2000040c 	.word	0x2000040c
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000004 	.word	0x20000004
 8000bf4:	2000050c 	.word	0x2000050c
 8000bf8:	2000048c 	.word	0x2000048c
 8000bfc:	2000038c 	.word	0x2000038c
 8000c00:	40020c00 	.word	0x40020c00

08000c04 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	for( int n=halfN; n<N; n++){ filt_in[n] = (float32_t) adc_buffer[n];}
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	e010      	b.n	8000c34 <HAL_ADC_ConvCpltCallback+0x30>
 8000c12:	4a23      	ldr	r2, [pc, #140]	@ (8000ca0 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1a:	ee07 3a90 	vmov	s15, r3
 8000c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c22:	4a20      	ldr	r2, [pc, #128]	@ (8000ca4 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	4413      	add	r3, r2
 8000c2a:	edc3 7a00 	vstr	s15, [r3]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	3301      	adds	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b1f      	cmp	r3, #31
 8000c38:	ddeb      	ble.n	8000c12 <HAL_ADC_ConvCpltCallback+0xe>
	arm_fir_f32(&filter1, filt_in_ptr + halfN, filt_out_ptr + halfN, halfN);
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8000c42:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <HAL_ADC_ConvCpltCallback+0xa8>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	4818      	ldr	r0, [pc, #96]	@ (8000cb0 <HAL_ADC_ConvCpltCallback+0xac>)
 8000c4e:	f003 fc15 	bl	800447c <arm_fir_f32>
	for( int n=halfN; n<N; n++){ dac_buffer[n] = (uint32_t) filt_out[n];}
 8000c52:	2310      	movs	r3, #16
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	e010      	b.n	8000c7a <HAL_ADC_ConvCpltCallback+0x76>
 8000c58:	4a16      	ldr	r2, [pc, #88]	@ (8000cb4 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	edd3 7a00 	vldr	s15, [r3]
 8000c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c68:	ee17 1a90 	vmov	r1, s15
 8000c6c:	4a12      	ldr	r2, [pc, #72]	@ (8000cb8 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	3301      	adds	r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	2b1f      	cmp	r3, #31
 8000c7e:	ddeb      	ble.n	8000c58 <HAL_ADC_ConvCpltCallback+0x54>

	// Transmit DAC data via UART
	SendDACData(dac_buffer + halfN, halfN);
 8000c80:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <HAL_ADC_ConvCpltCallback+0xb8>)
 8000c82:	2110      	movs	r1, #16
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff03 	bl	8000a90 <SendDACData>

	BlinkLED(GPIOD, LD5_Red_Pin, 100, 1); // Adjust GPIO port and pin number accordingly
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	2264      	movs	r2, #100	@ 0x64
 8000c8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c92:	480b      	ldr	r0, [pc, #44]	@ (8000cc0 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000c94:	f7ff fe8c 	bl	80009b0 <BlinkLED>
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000030c 	.word	0x2000030c
 8000ca4:	2000040c 	.word	0x2000040c
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	2000050c 	.word	0x2000050c
 8000cb4:	2000048c 	.word	0x2000048c
 8000cb8:	2000038c 	.word	0x2000038c
 8000cbc:	200003cc 	.word	0x200003cc
 8000cc0:	40020c00 	.word	0x40020c00

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <Error_Handler+0x8>

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	4a0f      	ldr	r2, [pc, #60]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	4a08      	ldr	r2, [pc, #32]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a2f      	ldr	r2, [pc, #188]	@ (8000dfc <HAL_ADC_MspInit+0xdc>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d157      	bne.n	8000df2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b2e      	ldr	r3, [pc, #184]	@ (8000e00 <HAL_ADC_MspInit+0xe0>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	4a2d      	ldr	r2, [pc, #180]	@ (8000e00 <HAL_ADC_MspInit+0xe0>)
 8000d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d52:	4b2b      	ldr	r3, [pc, #172]	@ (8000e00 <HAL_ADC_MspInit+0xe0>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <HAL_ADC_MspInit+0xe0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a26      	ldr	r2, [pc, #152]	@ (8000e00 <HAL_ADC_MspInit+0xe0>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <HAL_ADC_MspInit+0xe0>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	481d      	ldr	r0, [pc, #116]	@ (8000e04 <HAL_ADC_MspInit+0xe4>)
 8000d8e:	f001 fd37 	bl	8002800 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d92:	4b1d      	ldr	r3, [pc, #116]	@ (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000d94:	4a1d      	ldr	r2, [pc, #116]	@ (8000e0c <HAL_ADC_MspInit+0xec>)
 8000d96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da4:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000daa:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000dac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000db0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000db4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000db8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dba:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000dbc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000dc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dc8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dd6:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000dd8:	f001 f9a2 	bl	8002120 <HAL_DMA_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000de2:	f7ff ff6f 	bl	8000cc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a07      	ldr	r2, [pc, #28]	@ (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000dea:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dec:	4a06      	ldr	r2, [pc, #24]	@ (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	@ 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40012000 	.word	0x40012000
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020800 	.word	0x40020800
 8000e08:	20000148 	.word	0x20000148
 8000e0c:	40026410 	.word	0x40026410

08000e10 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a2f      	ldr	r2, [pc, #188]	@ (8000eec <HAL_DAC_MspInit+0xdc>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d158      	bne.n	8000ee4 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef0 <HAL_DAC_MspInit+0xe0>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ef0 <HAL_DAC_MspInit+0xe0>)
 8000e3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e42:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef0 <HAL_DAC_MspInit+0xe0>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b27      	ldr	r3, [pc, #156]	@ (8000ef0 <HAL_DAC_MspInit+0xe0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a26      	ldr	r2, [pc, #152]	@ (8000ef0 <HAL_DAC_MspInit+0xe0>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <HAL_DAC_MspInit+0xe0>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	481d      	ldr	r0, [pc, #116]	@ (8000ef4 <HAL_DAC_MspInit+0xe4>)
 8000e7e:	f001 fcbf 	bl	8002800 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000e82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <HAL_DAC_MspInit+0xe8>)
 8000e84:	4a1d      	ldr	r2, [pc, #116]	@ (8000efc <HAL_DAC_MspInit+0xec>)
 8000e86:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <HAL_DAC_MspInit+0xe8>)
 8000e8a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000e8e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e90:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <HAL_DAC_MspInit+0xe8>)
 8000e92:	2240      	movs	r2, #64	@ 0x40
 8000e94:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e96:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <HAL_DAC_MspInit+0xe8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <HAL_DAC_MspInit+0xe8>)
 8000e9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ea2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <HAL_DAC_MspInit+0xe8>)
 8000ea6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000eaa:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_DAC_MspInit+0xe8>)
 8000eae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eb2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000eb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <HAL_DAC_MspInit+0xe8>)
 8000eb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eba:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_DAC_MspInit+0xe8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <HAL_DAC_MspInit+0xe8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000ec8:	480b      	ldr	r0, [pc, #44]	@ (8000ef8 <HAL_DAC_MspInit+0xe8>)
 8000eca:	f001 f929 	bl	8002120 <HAL_DMA_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8000ed4:	f7ff fef6 	bl	8000cc4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a07      	ldr	r2, [pc, #28]	@ (8000ef8 <HAL_DAC_MspInit+0xe8>)
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	4a06      	ldr	r2, [pc, #24]	@ (8000ef8 <HAL_DAC_MspInit+0xe8>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3728      	adds	r7, #40	@ 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40007400 	.word	0x40007400
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	200001bc 	.word	0x200001bc
 8000efc:	40026088 	.word	0x40026088

08000f00 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	@ 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM8)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a19      	ldr	r2, [pc, #100]	@ (8000f84 <HAL_TIM_IC_MspInit+0x84>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d12b      	bne.n	8000f7a <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <HAL_TIM_IC_MspInit+0x88>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2a:	4a17      	ldr	r2, [pc, #92]	@ (8000f88 <HAL_TIM_IC_MspInit+0x88>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f32:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <HAL_TIM_IC_MspInit+0x88>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <HAL_TIM_IC_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a10      	ldr	r2, [pc, #64]	@ (8000f88 <HAL_TIM_IC_MspInit+0x88>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <HAL_TIM_IC_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f5a:	2340      	movs	r3, #64	@ 0x40
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <HAL_TIM_IC_MspInit+0x8c>)
 8000f76:	f001 fc43 	bl	8002800 <HAL_GPIO_Init>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	@ 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40010400 	.word	0x40010400
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020800 	.word	0x40020800

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a31      	ldr	r2, [pc, #196]	@ (8001074 <HAL_UART_MspInit+0xe4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d15c      	bne.n	800106c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4b30      	ldr	r3, [pc, #192]	@ (8001078 <HAL_UART_MspInit+0xe8>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	4a2f      	ldr	r2, [pc, #188]	@ (8001078 <HAL_UART_MspInit+0xe8>)
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc2:	4b2d      	ldr	r3, [pc, #180]	@ (8001078 <HAL_UART_MspInit+0xe8>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b29      	ldr	r3, [pc, #164]	@ (8001078 <HAL_UART_MspInit+0xe8>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a28      	ldr	r2, [pc, #160]	@ (8001078 <HAL_UART_MspInit+0xe8>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b26      	ldr	r3, [pc, #152]	@ (8001078 <HAL_UART_MspInit+0xe8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fea:	230c      	movs	r3, #12
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	481d      	ldr	r0, [pc, #116]	@ (800107c <HAL_UART_MspInit+0xec>)
 8001006:	f001 fbfb 	bl	8002800 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800100a:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <HAL_UART_MspInit+0xf0>)
 800100c:	4a1d      	ldr	r2, [pc, #116]	@ (8001084 <HAL_UART_MspInit+0xf4>)
 800100e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001010:	4b1b      	ldr	r3, [pc, #108]	@ (8001080 <HAL_UART_MspInit+0xf0>)
 8001012:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001016:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001018:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <HAL_UART_MspInit+0xf0>)
 800101a:	2240      	movs	r2, #64	@ 0x40
 800101c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800101e:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <HAL_UART_MspInit+0xf0>)
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001024:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <HAL_UART_MspInit+0xf0>)
 8001026:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800102a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800102c:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <HAL_UART_MspInit+0xf0>)
 800102e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001032:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <HAL_UART_MspInit+0xf0>)
 8001036:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800103a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800103c:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <HAL_UART_MspInit+0xf0>)
 800103e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001042:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001044:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <HAL_UART_MspInit+0xf0>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800104a:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <HAL_UART_MspInit+0xf0>)
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001050:	480b      	ldr	r0, [pc, #44]	@ (8001080 <HAL_UART_MspInit+0xf0>)
 8001052:	f001 f865 	bl	8002120 <HAL_DMA_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800105c:	f7ff fe32 	bl	8000cc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a07      	ldr	r2, [pc, #28]	@ (8001080 <HAL_UART_MspInit+0xf0>)
 8001064:	639a      	str	r2, [r3, #56]	@ 0x38
 8001066:	4a06      	ldr	r2, [pc, #24]	@ (8001080 <HAL_UART_MspInit+0xf0>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	@ 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40004400 	.word	0x40004400
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000
 8001080:	200002ac 	.word	0x200002ac
 8001084:	400260a0 	.word	0x400260a0

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <NMI_Handler+0x4>

08001090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <HardFault_Handler+0x4>

08001098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <MemManage_Handler+0x4>

080010a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <BusFault_Handler+0x4>

080010a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <UsageFault_Handler+0x4>

080010b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010de:	f000 f8e5 	bl	80012ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <DMA1_Stream5_IRQHandler+0x10>)
 80010ee:	f001 f91d 	bl	800232c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001bc 	.word	0x200001bc

080010fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <DMA1_Stream6_IRQHandler+0x10>)
 8001102:	f001 f913 	bl	800232c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200002ac 	.word	0x200002ac

08001110 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <DMA2_Stream0_IRQHandler+0x10>)
 8001116:	f001 f909 	bl	800232c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000148 	.word	0x20000148

08001124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800112c:	4a14      	ldr	r2, [pc, #80]	@ (8001180 <_sbrk+0x5c>)
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <_sbrk+0x60>)
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <_sbrk+0x64>)
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <_sbrk+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	429a      	cmp	r2, r3
 8001152:	d207      	bcs.n	8001164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001154:	f003 fc32 	bl	80049bc <__errno>
 8001158:	4603      	mov	r3, r0
 800115a:	220c      	movs	r2, #12
 800115c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	e009      	b.n	8001178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	4a05      	ldr	r2, [pc, #20]	@ (8001188 <_sbrk+0x64>)
 8001174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20020000 	.word	0x20020000
 8001184:	00000400 	.word	0x00000400
 8001188:	200005fc 	.word	0x200005fc
 800118c:	20000750 	.word	0x20000750

08001190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <SystemInit+0x20>)
 8001196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800119a:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <SystemInit+0x20>)
 800119c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011b8:	f7ff ffea 	bl	8001190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011be:	490d      	ldr	r1, [pc, #52]	@ (80011f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c0:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001200 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e2:	f003 fbf1 	bl	80049c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e6:	f7ff f9bb 	bl	8000560 <main>
  bx  lr    
 80011ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 80011f8:	08005338 	.word	0x08005338
  ldr r2, =_sbss
 80011fc:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8001200:	2000074c 	.word	0x2000074c

08001204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC_IRQHandler>
	...

08001208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800120c:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0d      	ldr	r2, [pc, #52]	@ (8001248 <HAL_Init+0x40>)
 8001212:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001216:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001218:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <HAL_Init+0x40>)
 800121e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001222:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <HAL_Init+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a07      	ldr	r2, [pc, #28]	@ (8001248 <HAL_Init+0x40>)
 800122a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800122e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 fd4d 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001236:	200f      	movs	r0, #15
 8001238:	f000 f808 	bl	800124c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123c:	f7ff fd48 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023c00 	.word	0x40023c00

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <HAL_InitTick+0x54>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_InitTick+0x58>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001262:	fbb3 f3f1 	udiv	r3, r3, r1
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fd65 	bl	8001d3a <HAL_SYSTICK_Config>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e00e      	b.n	8001298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d80a      	bhi.n	8001296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001280:	2200      	movs	r2, #0
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f000 fd2d 	bl	8001ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800128c:	4a06      	ldr	r2, [pc, #24]	@ (80012a8 <HAL_InitTick+0x5c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	e000      	b.n	8001298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000088 	.word	0x20000088
 80012a4:	20000090 	.word	0x20000090
 80012a8:	2000008c 	.word	0x2000008c

080012ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_IncTick+0x20>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_IncTick+0x24>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <HAL_IncTick+0x24>)
 80012be:	6013      	str	r3, [r2, #0]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000090 	.word	0x20000090
 80012d0:	20000600 	.word	0x20000600

080012d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b03      	ldr	r3, [pc, #12]	@ (80012e8 <HAL_GetTick+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000600 	.word	0x20000600

080012ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f4:	f7ff ffee 	bl	80012d4 <HAL_GetTick>
 80012f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001304:	d005      	beq.n	8001312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001306:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <HAL_Delay+0x44>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001312:	bf00      	nop
 8001314:	f7ff ffde 	bl	80012d4 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	429a      	cmp	r2, r3
 8001322:	d8f7      	bhi.n	8001314 <HAL_Delay+0x28>
  {
  }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000090 	.word	0x20000090

08001334 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e033      	b.n	80013b2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	2b00      	cmp	r3, #0
 8001350:	d109      	bne.n	8001366 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff fce4 	bl	8000d20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	2b00      	cmp	r3, #0
 8001370:	d118      	bne.n	80013a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800137a:	f023 0302 	bic.w	r3, r3, #2
 800137e:	f043 0202 	orr.w	r2, r3, #2
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 fa54 	bl	8001834 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	f023 0303 	bic.w	r3, r3, #3
 800139a:	f043 0201 	orr.w	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80013a2:	e001      	b.n	80013a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d101      	bne.n	80013da <HAL_ADC_Start_DMA+0x1e>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e0e9      	b.n	80015ae <HAL_ADC_Start_DMA+0x1f2>
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d018      	beq.n	8001422 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0201 	orr.w	r2, r2, #1
 80013fe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001400:	4b6d      	ldr	r3, [pc, #436]	@ (80015b8 <HAL_ADC_Start_DMA+0x1fc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a6d      	ldr	r2, [pc, #436]	@ (80015bc <HAL_ADC_Start_DMA+0x200>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0c9a      	lsrs	r2, r3, #18
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001414:	e002      	b.n	800141c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	3b01      	subs	r3, #1
 800141a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f9      	bne.n	8001416 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800142c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001430:	d107      	bne.n	8001442 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001440:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b01      	cmp	r3, #1
 800144e:	f040 80a1 	bne.w	8001594 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800145a:	f023 0301 	bic.w	r3, r3, #1
 800145e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001470:	2b00      	cmp	r3, #0
 8001472:	d007      	beq.n	8001484 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800147c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001488:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800148c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001490:	d106      	bne.n	80014a0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001496:	f023 0206 	bic.w	r2, r3, #6
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	645a      	str	r2, [r3, #68]	@ 0x44
 800149e:	e002      	b.n	80014a6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2200      	movs	r2, #0
 80014a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014ae:	4b44      	ldr	r3, [pc, #272]	@ (80015c0 <HAL_ADC_Start_DMA+0x204>)
 80014b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014b6:	4a43      	ldr	r2, [pc, #268]	@ (80015c4 <HAL_ADC_Start_DMA+0x208>)
 80014b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014be:	4a42      	ldr	r2, [pc, #264]	@ (80015c8 <HAL_ADC_Start_DMA+0x20c>)
 80014c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014c6:	4a41      	ldr	r2, [pc, #260]	@ (80015cc <HAL_ADC_Start_DMA+0x210>)
 80014c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80014d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80014e2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014f2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	334c      	adds	r3, #76	@ 0x4c
 80014fe:	4619      	mov	r1, r3
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f000 feba 	bl	800227c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	2b00      	cmp	r3, #0
 8001512:	d12a      	bne.n	800156a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a2d      	ldr	r2, [pc, #180]	@ (80015d0 <HAL_ADC_Start_DMA+0x214>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d015      	beq.n	800154a <HAL_ADC_Start_DMA+0x18e>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a2c      	ldr	r2, [pc, #176]	@ (80015d4 <HAL_ADC_Start_DMA+0x218>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d105      	bne.n	8001534 <HAL_ADC_Start_DMA+0x178>
 8001528:	4b25      	ldr	r3, [pc, #148]	@ (80015c0 <HAL_ADC_Start_DMA+0x204>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00a      	beq.n	800154a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a27      	ldr	r2, [pc, #156]	@ (80015d8 <HAL_ADC_Start_DMA+0x21c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d136      	bne.n	80015ac <HAL_ADC_Start_DMA+0x1f0>
 800153e:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <HAL_ADC_Start_DMA+0x204>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	2b00      	cmp	r3, #0
 8001548:	d130      	bne.n	80015ac <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d129      	bne.n	80015ac <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	e020      	b.n	80015ac <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a18      	ldr	r2, [pc, #96]	@ (80015d0 <HAL_ADC_Start_DMA+0x214>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d11b      	bne.n	80015ac <HAL_ADC_Start_DMA+0x1f0>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d114      	bne.n	80015ac <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	e00b      	b.n	80015ac <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	f043 0210 	orr.w	r2, r3, #16
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000088 	.word	0x20000088
 80015bc:	431bde83 	.word	0x431bde83
 80015c0:	40012300 	.word	0x40012300
 80015c4:	08001a2d 	.word	0x08001a2d
 80015c8:	08001ae7 	.word	0x08001ae7
 80015cc:	08001b03 	.word	0x08001b03
 80015d0:	40012000 	.word	0x40012000
 80015d4:	40012100 	.word	0x40012100
 80015d8:	40012200 	.word	0x40012200

080015dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <HAL_ADC_ConfigChannel+0x1c>
 8001608:	2302      	movs	r3, #2
 800160a:	e105      	b.n	8001818 <HAL_ADC_ConfigChannel+0x228>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b09      	cmp	r3, #9
 800161a:	d925      	bls.n	8001668 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68d9      	ldr	r1, [r3, #12]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b29b      	uxth	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	3b1e      	subs	r3, #30
 8001632:	2207      	movs	r2, #7
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43da      	mvns	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	400a      	ands	r2, r1
 8001640:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68d9      	ldr	r1, [r3, #12]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b29b      	uxth	r3, r3
 8001652:	4618      	mov	r0, r3
 8001654:	4603      	mov	r3, r0
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4403      	add	r3, r0
 800165a:	3b1e      	subs	r3, #30
 800165c:	409a      	lsls	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	e022      	b.n	80016ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6919      	ldr	r1, [r3, #16]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	2207      	movs	r2, #7
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	400a      	ands	r2, r1
 800168a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6919      	ldr	r1, [r3, #16]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	b29b      	uxth	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	4603      	mov	r3, r0
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4403      	add	r3, r0
 80016a4:	409a      	lsls	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d824      	bhi.n	8001700 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	3b05      	subs	r3, #5
 80016c8:	221f      	movs	r2, #31
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	400a      	ands	r2, r1
 80016d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4618      	mov	r0, r3
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	3b05      	subs	r3, #5
 80016f2:	fa00 f203 	lsl.w	r2, r0, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80016fe:	e04c      	b.n	800179a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b0c      	cmp	r3, #12
 8001706:	d824      	bhi.n	8001752 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	3b23      	subs	r3, #35	@ 0x23
 800171a:	221f      	movs	r2, #31
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43da      	mvns	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	400a      	ands	r2, r1
 8001728:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	b29b      	uxth	r3, r3
 8001736:	4618      	mov	r0, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	3b23      	subs	r3, #35	@ 0x23
 8001744:	fa00 f203 	lsl.w	r2, r0, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001750:	e023      	b.n	800179a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	3b41      	subs	r3, #65	@ 0x41
 8001764:	221f      	movs	r2, #31
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	400a      	ands	r2, r1
 8001772:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	3b41      	subs	r3, #65	@ 0x41
 800178e:	fa00 f203 	lsl.w	r2, r0, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800179a:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <HAL_ADC_ConfigChannel+0x234>)
 800179c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a21      	ldr	r2, [pc, #132]	@ (8001828 <HAL_ADC_ConfigChannel+0x238>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d109      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x1cc>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b12      	cmp	r3, #18
 80017ae:	d105      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a19      	ldr	r2, [pc, #100]	@ (8001828 <HAL_ADC_ConfigChannel+0x238>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d123      	bne.n	800180e <HAL_ADC_ConfigChannel+0x21e>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b10      	cmp	r3, #16
 80017cc:	d003      	beq.n	80017d6 <HAL_ADC_ConfigChannel+0x1e6>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b11      	cmp	r3, #17
 80017d4:	d11b      	bne.n	800180e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b10      	cmp	r3, #16
 80017e8:	d111      	bne.n	800180e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <HAL_ADC_ConfigChannel+0x23c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a10      	ldr	r2, [pc, #64]	@ (8001830 <HAL_ADC_ConfigChannel+0x240>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	0c9a      	lsrs	r2, r3, #18
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001800:	e002      	b.n	8001808 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3b01      	subs	r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f9      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	40012300 	.word	0x40012300
 8001828:	40012000 	.word	0x40012000
 800182c:	20000088 	.word	0x20000088
 8001830:	431bde83 	.word	0x431bde83

08001834 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800183c:	4b79      	ldr	r3, [pc, #484]	@ (8001a24 <ADC_Init+0x1f0>)
 800183e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	431a      	orrs	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001868:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6859      	ldr	r1, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	021a      	lsls	r2, r3, #8
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800188c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6859      	ldr	r1, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6899      	ldr	r1, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c6:	4a58      	ldr	r2, [pc, #352]	@ (8001a28 <ADC_Init+0x1f4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d022      	beq.n	8001912 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6899      	ldr	r1, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6899      	ldr	r1, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	e00f      	b.n	8001932 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001920:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001930:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0202 	bic.w	r2, r2, #2
 8001940:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6899      	ldr	r1, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7e1b      	ldrb	r3, [r3, #24]
 800194c:	005a      	lsls	r2, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d01b      	beq.n	8001998 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800196e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800197e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6859      	ldr	r1, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	3b01      	subs	r3, #1
 800198c:	035a      	lsls	r2, r3, #13
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	e007      	b.n	80019a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019a6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80019b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	051a      	lsls	r2, r3, #20
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6899      	ldr	r1, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019ea:	025a      	lsls	r2, r3, #9
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6899      	ldr	r1, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	029a      	lsls	r2, r3, #10
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	609a      	str	r2, [r3, #8]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40012300 	.word	0x40012300
 8001a28:	0f000001 	.word	0x0f000001

08001a2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d13c      	bne.n	8001ac0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d12b      	bne.n	8001ab8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d127      	bne.n	8001ab8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d119      	bne.n	8001ab8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0220 	bic.w	r2, r2, #32
 8001a92:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	f043 0201 	orr.w	r2, r3, #1
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f7ff f8a3 	bl	8000c04 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001abe:	e00e      	b.n	8001ade <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f7ff fd85 	bl	80015dc <HAL_ADC_ErrorCallback>
}
 8001ad2:	e004      	b.n	8001ade <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	4798      	blx	r3
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001af2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f7ff f82b 	bl	8000b50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b0e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2240      	movs	r2, #64	@ 0x40
 8001b14:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	f043 0204 	orr.w	r2, r3, #4
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f7ff fd5a 	bl	80015dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	@ (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	@ (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	@ (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	@ (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	@ (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	@ (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	@ 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	@ 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c9c:	d301      	bcc.n	8001ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00f      	b.n	8001cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <SysTick_Config+0x40>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001caa:	210f      	movs	r1, #15
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f7ff ff8e 	bl	8001bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <SysTick_Config+0x40>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cba:	4b04      	ldr	r3, [pc, #16]	@ (8001ccc <SysTick_Config+0x40>)
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	e000e010 	.word	0xe000e010

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff29 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf8:	f7ff ff3e 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7ff ff8e 	bl	8001c24 <NVIC_EncodePriority>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff5d 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff31 	bl	8001b94 <__NVIC_EnableIRQ>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffa2 	bl	8001c8c <SysTick_Config>
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e014      	b.n	8001d8e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	791b      	ldrb	r3, [r3, #4]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d105      	bne.n	8001d7a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff f84b 	bl	8000e10 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0a2      	b.n	8001efa <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	795b      	ldrb	r3, [r3, #5]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_DAC_Start_DMA+0x28>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e09c      	b.n	8001efa <HAL_DAC_Start_DMA+0x162>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d129      	bne.n	8001e26 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4a4b      	ldr	r2, [pc, #300]	@ (8001f04 <HAL_DAC_Start_DMA+0x16c>)
 8001dd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	4a4a      	ldr	r2, [pc, #296]	@ (8001f08 <HAL_DAC_Start_DMA+0x170>)
 8001de0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	4a49      	ldr	r2, [pc, #292]	@ (8001f0c <HAL_DAC_Start_DMA+0x174>)
 8001de8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001df8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_DAC_Start_DMA+0x70>
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d005      	beq.n	8001e12 <HAL_DAC_Start_DMA+0x7a>
 8001e06:	e009      	b.n	8001e1c <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3308      	adds	r3, #8
 8001e0e:	613b      	str	r3, [r7, #16]
        break;
 8001e10:	e033      	b.n	8001e7a <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	330c      	adds	r3, #12
 8001e18:	613b      	str	r3, [r7, #16]
        break;
 8001e1a:	e02e      	b.n	8001e7a <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3310      	adds	r3, #16
 8001e22:	613b      	str	r3, [r7, #16]
        break;
 8001e24:	e029      	b.n	8001e7a <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	4a39      	ldr	r2, [pc, #228]	@ (8001f10 <HAL_DAC_Start_DMA+0x178>)
 8001e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	4a38      	ldr	r2, [pc, #224]	@ (8001f14 <HAL_DAC_Start_DMA+0x17c>)
 8001e34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	4a37      	ldr	r2, [pc, #220]	@ (8001f18 <HAL_DAC_Start_DMA+0x180>)
 8001e3c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001e4c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_DAC_Start_DMA+0xc4>
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d005      	beq.n	8001e66 <HAL_DAC_Start_DMA+0xce>
 8001e5a:	e009      	b.n	8001e70 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3314      	adds	r3, #20
 8001e62:	613b      	str	r3, [r7, #16]
        break;
 8001e64:	e009      	b.n	8001e7a <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	3318      	adds	r3, #24
 8001e6c:	613b      	str	r3, [r7, #16]
        break;
 8001e6e:	e004      	b.n	8001e7a <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	331c      	adds	r3, #28
 8001e76:	613b      	str	r3, [r7, #16]
        break;
 8001e78:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d111      	bne.n	8001ea4 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e8e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6898      	ldr	r0, [r3, #8]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	f000 f9ef 	bl	800227c <HAL_DMA_Start_IT>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]
 8001ea2:	e010      	b.n	8001ec6 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001eb2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	68d8      	ldr	r0, [r3, #12]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	f000 f9dd 	bl	800227c <HAL_DMA_Start_IT>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10c      	bne.n	8001eec <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6819      	ldr	r1, [r3, #0]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2201      	movs	r2, #1
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e005      	b.n	8001ef8 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f043 0204 	orr.w	r2, r3, #4
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	0800200b 	.word	0x0800200b
 8001f08:	0800202d 	.word	0x0800202d
 8001f0c:	08002049 	.word	0x08002049
 8001f10:	080020b3 	.word	0x080020b3
 8001f14:	080020d5 	.word	0x080020d5
 8001f18:	080020f1 	.word	0x080020f1

08001f1c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	@ 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <HAL_DAC_ConfigChannel+0x1c>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e042      	b.n	8001ffe <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	795b      	ldrb	r3, [r3, #5]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_DAC_ConfigChannel+0x2c>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e03c      	b.n	8001ffe <HAL_DAC_ConfigChannel+0xa6>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2201      	movs	r2, #1
 8001f88:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	22c0      	movs	r2, #192	@ 0xc0
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	400a      	ands	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001ffc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	@ 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002016:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f7ff ff7f 	bl	8001f1c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	711a      	strb	r2, [r3, #4]
}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002038:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f7ff ff78 	bl	8001f30 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002054:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f043 0204 	orr.w	r2, r3, #4
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7ff ff6e 	bl	8001f44 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	711a      	strb	r2, [r3, #4]
}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020be:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f7ff ffd8 	bl	8002076 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	711a      	strb	r2, [r3, #4]
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f7ff ffd1 	bl	800208a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80020e8:	bf00      	nop
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f043 0204 	orr.w	r2, r3, #4
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7ff ffc7 	bl	800209e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	711a      	strb	r2, [r3, #4]
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7ff f8d2 	bl	80012d4 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e099      	b.n	8002270 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800215c:	e00f      	b.n	800217e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800215e:	f7ff f8b9 	bl	80012d4 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b05      	cmp	r3, #5
 800216a:	d908      	bls.n	800217e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2220      	movs	r2, #32
 8002170:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2203      	movs	r2, #3
 8002176:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e078      	b.n	8002270 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e8      	bne.n	800215e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	4b38      	ldr	r3, [pc, #224]	@ (8002278 <HAL_DMA_Init+0x158>)
 8002198:	4013      	ands	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d107      	bne.n	80021e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e0:	4313      	orrs	r3, r2
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f023 0307 	bic.w	r3, r3, #7
 80021fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220e:	2b04      	cmp	r3, #4
 8002210:	d117      	bne.n	8002242 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00e      	beq.n	8002242 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fa6f 	bl	8002708 <DMA_CheckFifoParam>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2240      	movs	r2, #64	@ 0x40
 8002234:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800223e:	2301      	movs	r3, #1
 8002240:	e016      	b.n	8002270 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fa26 	bl	800269c <DMA_CalcBaseAndBitshift>
 8002250:	4603      	mov	r3, r0
 8002252:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002258:	223f      	movs	r2, #63	@ 0x3f
 800225a:	409a      	lsls	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	f010803f 	.word	0xf010803f

0800227c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002292:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_DMA_Start_IT+0x26>
 800229e:	2302      	movs	r3, #2
 80022a0:	e040      	b.n	8002324 <HAL_DMA_Start_IT+0xa8>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d12f      	bne.n	8002316 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2202      	movs	r2, #2
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f9b8 	bl	8002640 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d4:	223f      	movs	r2, #63	@ 0x3f
 80022d6:	409a      	lsls	r2, r3
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0216 	orr.w	r2, r2, #22
 80022ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0208 	orr.w	r2, r2, #8
 8002302:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e005      	b.n	8002322 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800231e:	2302      	movs	r3, #2
 8002320:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002322:	7dfb      	ldrb	r3, [r7, #23]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002338:	4b8e      	ldr	r3, [pc, #568]	@ (8002574 <HAL_DMA_IRQHandler+0x248>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a8e      	ldr	r2, [pc, #568]	@ (8002578 <HAL_DMA_IRQHandler+0x24c>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	0a9b      	lsrs	r3, r3, #10
 8002344:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002356:	2208      	movs	r2, #8
 8002358:	409a      	lsls	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01a      	beq.n	8002398 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d013      	beq.n	8002398 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0204 	bic.w	r2, r2, #4
 800237e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002384:	2208      	movs	r2, #8
 8002386:	409a      	lsls	r2, r3
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002390:	f043 0201 	orr.w	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239c:	2201      	movs	r2, #1
 800239e:	409a      	lsls	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d012      	beq.n	80023ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ba:	2201      	movs	r2, #1
 80023bc:	409a      	lsls	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c6:	f043 0202 	orr.w	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d2:	2204      	movs	r2, #4
 80023d4:	409a      	lsls	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4013      	ands	r3, r2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d012      	beq.n	8002404 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00b      	beq.n	8002404 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f0:	2204      	movs	r2, #4
 80023f2:	409a      	lsls	r2, r3
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fc:	f043 0204 	orr.w	r2, r3, #4
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002408:	2210      	movs	r2, #16
 800240a:	409a      	lsls	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d043      	beq.n	800249c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d03c      	beq.n	800249c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002426:	2210      	movs	r2, #16
 8002428:	409a      	lsls	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d018      	beq.n	800246e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d108      	bne.n	800245c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d024      	beq.n	800249c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	4798      	blx	r3
 800245a:	e01f      	b.n	800249c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01b      	beq.n	800249c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	4798      	blx	r3
 800246c:	e016      	b.n	800249c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d107      	bne.n	800248c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0208 	bic.w	r2, r2, #8
 800248a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a0:	2220      	movs	r2, #32
 80024a2:	409a      	lsls	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 808f 	beq.w	80025cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8087 	beq.w	80025cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c2:	2220      	movs	r2, #32
 80024c4:	409a      	lsls	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b05      	cmp	r3, #5
 80024d4:	d136      	bne.n	8002544 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0216 	bic.w	r2, r2, #22
 80024e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d103      	bne.n	8002506 <HAL_DMA_IRQHandler+0x1da>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002502:	2b00      	cmp	r3, #0
 8002504:	d007      	beq.n	8002516 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0208 	bic.w	r2, r2, #8
 8002514:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251a:	223f      	movs	r2, #63	@ 0x3f
 800251c:	409a      	lsls	r2, r3
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002536:	2b00      	cmp	r3, #0
 8002538:	d07e      	beq.n	8002638 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
        }
        return;
 8002542:	e079      	b.n	8002638 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d01d      	beq.n	800258e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10d      	bne.n	800257c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002564:	2b00      	cmp	r3, #0
 8002566:	d031      	beq.n	80025cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
 8002570:	e02c      	b.n	80025cc <HAL_DMA_IRQHandler+0x2a0>
 8002572:	bf00      	nop
 8002574:	20000088 	.word	0x20000088
 8002578:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d023      	beq.n	80025cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	4798      	blx	r3
 800258c:	e01e      	b.n	80025cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10f      	bne.n	80025bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0210 	bic.w	r2, r2, #16
 80025aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d032      	beq.n	800263a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d022      	beq.n	8002626 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2205      	movs	r2, #5
 80025e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	3301      	adds	r3, #1
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	429a      	cmp	r2, r3
 8002602:	d307      	bcc.n	8002614 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f2      	bne.n	80025f8 <HAL_DMA_IRQHandler+0x2cc>
 8002612:	e000      	b.n	8002616 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002614:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	4798      	blx	r3
 8002636:	e000      	b.n	800263a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002638:	bf00      	nop
    }
  }
}
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800265c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b40      	cmp	r3, #64	@ 0x40
 800266c:	d108      	bne.n	8002680 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800267e:	e007      	b.n	8002690 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	60da      	str	r2, [r3, #12]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	3b10      	subs	r3, #16
 80026ac:	4a14      	ldr	r2, [pc, #80]	@ (8002700 <DMA_CalcBaseAndBitshift+0x64>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026b6:	4a13      	ldr	r2, [pc, #76]	@ (8002704 <DMA_CalcBaseAndBitshift+0x68>)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d909      	bls.n	80026de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026d2:	f023 0303 	bic.w	r3, r3, #3
 80026d6:	1d1a      	adds	r2, r3, #4
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	659a      	str	r2, [r3, #88]	@ 0x58
 80026dc:	e007      	b.n	80026ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026e6:	f023 0303 	bic.w	r3, r3, #3
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	aaaaaaab 	.word	0xaaaaaaab
 8002704:	080052ec 	.word	0x080052ec

08002708 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002718:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d11f      	bne.n	8002762 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d856      	bhi.n	80027d6 <DMA_CheckFifoParam+0xce>
 8002728:	a201      	add	r2, pc, #4	@ (adr r2, 8002730 <DMA_CheckFifoParam+0x28>)
 800272a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272e:	bf00      	nop
 8002730:	08002741 	.word	0x08002741
 8002734:	08002753 	.word	0x08002753
 8002738:	08002741 	.word	0x08002741
 800273c:	080027d7 	.word	0x080027d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002744:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d046      	beq.n	80027da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002750:	e043      	b.n	80027da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002756:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800275a:	d140      	bne.n	80027de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002760:	e03d      	b.n	80027de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800276a:	d121      	bne.n	80027b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b03      	cmp	r3, #3
 8002770:	d837      	bhi.n	80027e2 <DMA_CheckFifoParam+0xda>
 8002772:	a201      	add	r2, pc, #4	@ (adr r2, 8002778 <DMA_CheckFifoParam+0x70>)
 8002774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002778:	08002789 	.word	0x08002789
 800277c:	0800278f 	.word	0x0800278f
 8002780:	08002789 	.word	0x08002789
 8002784:	080027a1 	.word	0x080027a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
      break;
 800278c:	e030      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002792:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d025      	beq.n	80027e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800279e:	e022      	b.n	80027e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027a8:	d11f      	bne.n	80027ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ae:	e01c      	b.n	80027ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d903      	bls.n	80027be <DMA_CheckFifoParam+0xb6>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d003      	beq.n	80027c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027bc:	e018      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
      break;
 80027c2:	e015      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00e      	beq.n	80027ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
      break;
 80027d4:	e00b      	b.n	80027ee <DMA_CheckFifoParam+0xe6>
      break;
 80027d6:	bf00      	nop
 80027d8:	e00a      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;
 80027da:	bf00      	nop
 80027dc:	e008      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;
 80027de:	bf00      	nop
 80027e0:	e006      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;
 80027e2:	bf00      	nop
 80027e4:	e004      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;
 80027e6:	bf00      	nop
 80027e8:	e002      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80027ea:	bf00      	nop
 80027ec:	e000      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;
 80027ee:	bf00      	nop
    }
  } 
  
  return status; 
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop

08002800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	@ 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	e16b      	b.n	8002af4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800281c:	2201      	movs	r2, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	429a      	cmp	r2, r3
 8002836:	f040 815a 	bne.w	8002aee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d005      	beq.n	8002852 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284e:	2b02      	cmp	r3, #2
 8002850:	d130      	bne.n	80028b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	2203      	movs	r2, #3
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002888:	2201      	movs	r2, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 0201 	and.w	r2, r3, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d017      	beq.n	80028f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d123      	bne.n	8002944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	08da      	lsrs	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3208      	adds	r2, #8
 8002904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	220f      	movs	r2, #15
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	08da      	lsrs	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3208      	adds	r2, #8
 800293e:	69b9      	ldr	r1, [r7, #24]
 8002940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0203 	and.w	r2, r3, #3
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80b4 	beq.w	8002aee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b60      	ldr	r3, [pc, #384]	@ (8002b0c <HAL_GPIO_Init+0x30c>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	4a5f      	ldr	r2, [pc, #380]	@ (8002b0c <HAL_GPIO_Init+0x30c>)
 8002990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002994:	6453      	str	r3, [r2, #68]	@ 0x44
 8002996:	4b5d      	ldr	r3, [pc, #372]	@ (8002b0c <HAL_GPIO_Init+0x30c>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002b10 <HAL_GPIO_Init+0x310>)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	3302      	adds	r3, #2
 80029aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	220f      	movs	r2, #15
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a52      	ldr	r2, [pc, #328]	@ (8002b14 <HAL_GPIO_Init+0x314>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d02b      	beq.n	8002a26 <HAL_GPIO_Init+0x226>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a51      	ldr	r2, [pc, #324]	@ (8002b18 <HAL_GPIO_Init+0x318>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d025      	beq.n	8002a22 <HAL_GPIO_Init+0x222>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a50      	ldr	r2, [pc, #320]	@ (8002b1c <HAL_GPIO_Init+0x31c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d01f      	beq.n	8002a1e <HAL_GPIO_Init+0x21e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002b20 <HAL_GPIO_Init+0x320>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d019      	beq.n	8002a1a <HAL_GPIO_Init+0x21a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002b24 <HAL_GPIO_Init+0x324>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <HAL_GPIO_Init+0x216>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002b28 <HAL_GPIO_Init+0x328>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00d      	beq.n	8002a12 <HAL_GPIO_Init+0x212>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4c      	ldr	r2, [pc, #304]	@ (8002b2c <HAL_GPIO_Init+0x32c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d007      	beq.n	8002a0e <HAL_GPIO_Init+0x20e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4b      	ldr	r2, [pc, #300]	@ (8002b30 <HAL_GPIO_Init+0x330>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d101      	bne.n	8002a0a <HAL_GPIO_Init+0x20a>
 8002a06:	2307      	movs	r3, #7
 8002a08:	e00e      	b.n	8002a28 <HAL_GPIO_Init+0x228>
 8002a0a:	2308      	movs	r3, #8
 8002a0c:	e00c      	b.n	8002a28 <HAL_GPIO_Init+0x228>
 8002a0e:	2306      	movs	r3, #6
 8002a10:	e00a      	b.n	8002a28 <HAL_GPIO_Init+0x228>
 8002a12:	2305      	movs	r3, #5
 8002a14:	e008      	b.n	8002a28 <HAL_GPIO_Init+0x228>
 8002a16:	2304      	movs	r3, #4
 8002a18:	e006      	b.n	8002a28 <HAL_GPIO_Init+0x228>
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e004      	b.n	8002a28 <HAL_GPIO_Init+0x228>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e002      	b.n	8002a28 <HAL_GPIO_Init+0x228>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_GPIO_Init+0x228>
 8002a26:	2300      	movs	r3, #0
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	f002 0203 	and.w	r2, r2, #3
 8002a2e:	0092      	lsls	r2, r2, #2
 8002a30:	4093      	lsls	r3, r2
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a38:	4935      	ldr	r1, [pc, #212]	@ (8002b10 <HAL_GPIO_Init+0x310>)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	3302      	adds	r3, #2
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a46:	4b3b      	ldr	r3, [pc, #236]	@ (8002b34 <HAL_GPIO_Init+0x334>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a6a:	4a32      	ldr	r2, [pc, #200]	@ (8002b34 <HAL_GPIO_Init+0x334>)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a70:	4b30      	ldr	r3, [pc, #192]	@ (8002b34 <HAL_GPIO_Init+0x334>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a94:	4a27      	ldr	r2, [pc, #156]	@ (8002b34 <HAL_GPIO_Init+0x334>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a9a:	4b26      	ldr	r3, [pc, #152]	@ (8002b34 <HAL_GPIO_Init+0x334>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002abe:	4a1d      	ldr	r2, [pc, #116]	@ (8002b34 <HAL_GPIO_Init+0x334>)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <HAL_GPIO_Init+0x334>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ae8:	4a12      	ldr	r2, [pc, #72]	@ (8002b34 <HAL_GPIO_Init+0x334>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3301      	adds	r3, #1
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2b0f      	cmp	r3, #15
 8002af8:	f67f ae90 	bls.w	800281c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	3724      	adds	r7, #36	@ 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40013800 	.word	0x40013800
 8002b14:	40020000 	.word	0x40020000
 8002b18:	40020400 	.word	0x40020400
 8002b1c:	40020800 	.word	0x40020800
 8002b20:	40020c00 	.word	0x40020c00
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40021400 	.word	0x40021400
 8002b2c:	40021800 	.word	0x40021800
 8002b30:	40021c00 	.word	0x40021c00
 8002b34:	40013c00 	.word	0x40013c00

08002b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
 8002b44:	4613      	mov	r3, r2
 8002b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b48:	787b      	ldrb	r3, [r7, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b54:	e003      	b.n	8002b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b56:	887b      	ldrh	r3, [r7, #2]
 8002b58:	041a      	lsls	r2, r3, #16
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	619a      	str	r2, [r3, #24]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e267      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d075      	beq.n	8002c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b8a:	4b88      	ldr	r3, [pc, #544]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d00c      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b96:	4b85      	ldr	r3, [pc, #532]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d112      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba2:	4b82      	ldr	r3, [pc, #520]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002baa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bae:	d10b      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb0:	4b7e      	ldr	r3, [pc, #504]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d05b      	beq.n	8002c74 <HAL_RCC_OscConfig+0x108>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d157      	bne.n	8002c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e242      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bd0:	d106      	bne.n	8002be0 <HAL_RCC_OscConfig+0x74>
 8002bd2:	4b76      	ldr	r3, [pc, #472]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a75      	ldr	r2, [pc, #468]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e01d      	b.n	8002c1c <HAL_RCC_OscConfig+0xb0>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x98>
 8002bea:	4b70      	ldr	r3, [pc, #448]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a6f      	ldr	r2, [pc, #444]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002bf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b6d      	ldr	r3, [pc, #436]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a6c      	ldr	r2, [pc, #432]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e00b      	b.n	8002c1c <HAL_RCC_OscConfig+0xb0>
 8002c04:	4b69      	ldr	r3, [pc, #420]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a68      	ldr	r2, [pc, #416]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b66      	ldr	r3, [pc, #408]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a65      	ldr	r2, [pc, #404]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d013      	beq.n	8002c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7fe fb56 	bl	80012d4 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c2c:	f7fe fb52 	bl	80012d4 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	@ 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e207      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	4b5b      	ldr	r3, [pc, #364]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0xc0>
 8002c4a:	e014      	b.n	8002c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fb42 	bl	80012d4 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c54:	f7fe fb3e 	bl	80012d4 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	@ 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e1f3      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	4b51      	ldr	r3, [pc, #324]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0xe8>
 8002c72:	e000      	b.n	8002c76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d063      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c82:	4b4a      	ldr	r3, [pc, #296]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8e:	4b47      	ldr	r3, [pc, #284]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d11c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9a:	4b44      	ldr	r3, [pc, #272]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d116      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	4b41      	ldr	r3, [pc, #260]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_RCC_OscConfig+0x152>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e1c7      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4937      	ldr	r1, [pc, #220]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	e03a      	b.n	8002d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d020      	beq.n	8002d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cdc:	4b34      	ldr	r3, [pc, #208]	@ (8002db0 <HAL_RCC_OscConfig+0x244>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7fe faf7 	bl	80012d4 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cea:	f7fe faf3 	bl	80012d4 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e1a8      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d08:	4b28      	ldr	r3, [pc, #160]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4925      	ldr	r1, [pc, #148]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]
 8002d1c:	e015      	b.n	8002d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1e:	4b24      	ldr	r3, [pc, #144]	@ (8002db0 <HAL_RCC_OscConfig+0x244>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe fad6 	bl	80012d4 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2c:	f7fe fad2 	bl	80012d4 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e187      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d036      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d016      	beq.n	8002d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5e:	4b15      	ldr	r3, [pc, #84]	@ (8002db4 <HAL_RCC_OscConfig+0x248>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7fe fab6 	bl	80012d4 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d6c:	f7fe fab2 	bl	80012d4 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e167      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <HAL_RCC_OscConfig+0x240>)
 8002d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x200>
 8002d8a:	e01b      	b.n	8002dc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d8c:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <HAL_RCC_OscConfig+0x248>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d92:	f7fe fa9f 	bl	80012d4 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	e00e      	b.n	8002db8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d9a:	f7fe fa9b 	bl	80012d4 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d907      	bls.n	8002db8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e150      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
 8002dac:	40023800 	.word	0x40023800
 8002db0:	42470000 	.word	0x42470000
 8002db4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db8:	4b88      	ldr	r3, [pc, #544]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ea      	bne.n	8002d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 8097 	beq.w	8002f00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd6:	4b81      	ldr	r3, [pc, #516]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	4b7d      	ldr	r3, [pc, #500]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	4a7c      	ldr	r2, [pc, #496]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002df2:	4b7a      	ldr	r3, [pc, #488]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e02:	4b77      	ldr	r3, [pc, #476]	@ (8002fe0 <HAL_RCC_OscConfig+0x474>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d118      	bne.n	8002e40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e0e:	4b74      	ldr	r3, [pc, #464]	@ (8002fe0 <HAL_RCC_OscConfig+0x474>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a73      	ldr	r2, [pc, #460]	@ (8002fe0 <HAL_RCC_OscConfig+0x474>)
 8002e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1a:	f7fe fa5b 	bl	80012d4 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e22:	f7fe fa57 	bl	80012d4 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e10c      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e34:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe0 <HAL_RCC_OscConfig+0x474>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d106      	bne.n	8002e56 <HAL_RCC_OscConfig+0x2ea>
 8002e48:	4b64      	ldr	r3, [pc, #400]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4c:	4a63      	ldr	r2, [pc, #396]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e54:	e01c      	b.n	8002e90 <HAL_RCC_OscConfig+0x324>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b05      	cmp	r3, #5
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x30c>
 8002e5e:	4b5f      	ldr	r3, [pc, #380]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e62:	4a5e      	ldr	r2, [pc, #376]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e64:	f043 0304 	orr.w	r3, r3, #4
 8002e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e6a:	4b5c      	ldr	r3, [pc, #368]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6e:	4a5b      	ldr	r2, [pc, #364]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e76:	e00b      	b.n	8002e90 <HAL_RCC_OscConfig+0x324>
 8002e78:	4b58      	ldr	r3, [pc, #352]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7c:	4a57      	ldr	r2, [pc, #348]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e84:	4b55      	ldr	r3, [pc, #340]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e88:	4a54      	ldr	r2, [pc, #336]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e8a:	f023 0304 	bic.w	r3, r3, #4
 8002e8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d015      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7fe fa1c 	bl	80012d4 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7fe fa18 	bl	80012d4 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e0cb      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb6:	4b49      	ldr	r3, [pc, #292]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0ee      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x334>
 8002ec2:	e014      	b.n	8002eee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec4:	f7fe fa06 	bl	80012d4 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ecc:	f7fe fa02 	bl	80012d4 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e0b5      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1ee      	bne.n	8002ecc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eee:	7dfb      	ldrb	r3, [r7, #23]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d105      	bne.n	8002f00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef4:	4b39      	ldr	r3, [pc, #228]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	4a38      	ldr	r2, [pc, #224]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80a1 	beq.w	800304c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f0a:	4b34      	ldr	r3, [pc, #208]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d05c      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d141      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	4b31      	ldr	r3, [pc, #196]	@ (8002fe4 <HAL_RCC_OscConfig+0x478>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7fe f9d6 	bl	80012d4 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fe f9d2 	bl	80012d4 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e087      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	4b27      	ldr	r3, [pc, #156]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	019b      	lsls	r3, r3, #6
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	3b01      	subs	r3, #1
 8002f64:	041b      	lsls	r3, r3, #16
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	491b      	ldr	r1, [pc, #108]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f74:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <HAL_RCC_OscConfig+0x478>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7a:	f7fe f9ab 	bl	80012d4 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f82:	f7fe f9a7 	bl	80012d4 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e05c      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f94:	4b11      	ldr	r3, [pc, #68]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x416>
 8002fa0:	e054      	b.n	800304c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa2:	4b10      	ldr	r3, [pc, #64]	@ (8002fe4 <HAL_RCC_OscConfig+0x478>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fe f994 	bl	80012d4 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fe f990 	bl	80012d4 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e045      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc2:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x444>
 8002fce:	e03d      	b.n	800304c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d107      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e038      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40007000 	.word	0x40007000
 8002fe4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8003058 <HAL_RCC_OscConfig+0x4ec>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d028      	beq.n	8003048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003000:	429a      	cmp	r2, r3
 8003002:	d121      	bne.n	8003048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300e:	429a      	cmp	r2, r3
 8003010:	d11a      	bne.n	8003048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003018:	4013      	ands	r3, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800301e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003020:	4293      	cmp	r3, r2
 8003022:	d111      	bne.n	8003048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302e:	085b      	lsrs	r3, r3, #1
 8003030:	3b01      	subs	r3, #1
 8003032:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d107      	bne.n	8003048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003042:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800

0800305c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0cc      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003070:	4b68      	ldr	r3, [pc, #416]	@ (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d90c      	bls.n	8003098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b65      	ldr	r3, [pc, #404]	@ (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b63      	ldr	r3, [pc, #396]	@ (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0b8      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b0:	4b59      	ldr	r3, [pc, #356]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a58      	ldr	r2, [pc, #352]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c8:	4b53      	ldr	r3, [pc, #332]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a52      	ldr	r2, [pc, #328]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d4:	4b50      	ldr	r3, [pc, #320]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	494d      	ldr	r1, [pc, #308]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d044      	beq.n	800317c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b47      	ldr	r3, [pc, #284]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d119      	bne.n	800313a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e07f      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d003      	beq.n	800311a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003116:	2b03      	cmp	r3, #3
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311a:	4b3f      	ldr	r3, [pc, #252]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e06f      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312a:	4b3b      	ldr	r3, [pc, #236]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e067      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313a:	4b37      	ldr	r3, [pc, #220]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4934      	ldr	r1, [pc, #208]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800314c:	f7fe f8c2 	bl	80012d4 <HAL_GetTick>
 8003150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	e00a      	b.n	800316a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7fe f8be 	bl	80012d4 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e04f      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	4b2b      	ldr	r3, [pc, #172]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 020c 	and.w	r2, r3, #12
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	429a      	cmp	r2, r3
 800317a:	d1eb      	bne.n	8003154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800317c:	4b25      	ldr	r3, [pc, #148]	@ (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d20c      	bcs.n	80031a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318a:	4b22      	ldr	r3, [pc, #136]	@ (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003192:	4b20      	ldr	r3, [pc, #128]	@ (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e032      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b0:	4b19      	ldr	r3, [pc, #100]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4916      	ldr	r1, [pc, #88]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ce:	4b12      	ldr	r3, [pc, #72]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	490e      	ldr	r1, [pc, #56]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031e2:	f000 f821 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 80031e6:	4602      	mov	r2, r0
 80031e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	490a      	ldr	r1, [pc, #40]	@ (800321c <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	5ccb      	ldrb	r3, [r1, r3]
 80031f6:	fa22 f303 	lsr.w	r3, r2, r3
 80031fa:	4a09      	ldr	r2, [pc, #36]	@ (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031fe:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <HAL_RCC_ClockConfig+0x1c8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe f822 	bl	800124c <HAL_InitTick>

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023c00 	.word	0x40023c00
 8003218:	40023800 	.word	0x40023800
 800321c:	080052d4 	.word	0x080052d4
 8003220:	20000088 	.word	0x20000088
 8003224:	2000008c 	.word	0x2000008c

08003228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800322c:	b090      	sub	sp, #64	@ 0x40
 800322e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003240:	4b59      	ldr	r3, [pc, #356]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b08      	cmp	r3, #8
 800324a:	d00d      	beq.n	8003268 <HAL_RCC_GetSysClockFreq+0x40>
 800324c:	2b08      	cmp	r3, #8
 800324e:	f200 80a1 	bhi.w	8003394 <HAL_RCC_GetSysClockFreq+0x16c>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0x34>
 8003256:	2b04      	cmp	r3, #4
 8003258:	d003      	beq.n	8003262 <HAL_RCC_GetSysClockFreq+0x3a>
 800325a:	e09b      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800325c:	4b53      	ldr	r3, [pc, #332]	@ (80033ac <HAL_RCC_GetSysClockFreq+0x184>)
 800325e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003260:	e09b      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003262:	4b53      	ldr	r3, [pc, #332]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003264:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003266:	e098      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003268:	4b4f      	ldr	r3, [pc, #316]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003270:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003272:	4b4d      	ldr	r3, [pc, #308]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d028      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327e:	4b4a      	ldr	r3, [pc, #296]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	099b      	lsrs	r3, r3, #6
 8003284:	2200      	movs	r2, #0
 8003286:	623b      	str	r3, [r7, #32]
 8003288:	627a      	str	r2, [r7, #36]	@ 0x24
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003290:	2100      	movs	r1, #0
 8003292:	4b47      	ldr	r3, [pc, #284]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003294:	fb03 f201 	mul.w	r2, r3, r1
 8003298:	2300      	movs	r3, #0
 800329a:	fb00 f303 	mul.w	r3, r0, r3
 800329e:	4413      	add	r3, r2
 80032a0:	4a43      	ldr	r2, [pc, #268]	@ (80033b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80032a2:	fba0 1202 	umull	r1, r2, r0, r2
 80032a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032a8:	460a      	mov	r2, r1
 80032aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80032ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032ae:	4413      	add	r3, r2
 80032b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b4:	2200      	movs	r2, #0
 80032b6:	61bb      	str	r3, [r7, #24]
 80032b8:	61fa      	str	r2, [r7, #28]
 80032ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032c2:	f7fc ffd5 	bl	8000270 <__aeabi_uldivmod>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4613      	mov	r3, r2
 80032cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032ce:	e053      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d0:	4b35      	ldr	r3, [pc, #212]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	099b      	lsrs	r3, r3, #6
 80032d6:	2200      	movs	r2, #0
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	617a      	str	r2, [r7, #20]
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032e2:	f04f 0b00 	mov.w	fp, #0
 80032e6:	4652      	mov	r2, sl
 80032e8:	465b      	mov	r3, fp
 80032ea:	f04f 0000 	mov.w	r0, #0
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	0159      	lsls	r1, r3, #5
 80032f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f8:	0150      	lsls	r0, r2, #5
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	ebb2 080a 	subs.w	r8, r2, sl
 8003302:	eb63 090b 	sbc.w	r9, r3, fp
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003312:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003316:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800331a:	ebb2 0408 	subs.w	r4, r2, r8
 800331e:	eb63 0509 	sbc.w	r5, r3, r9
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	00eb      	lsls	r3, r5, #3
 800332c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003330:	00e2      	lsls	r2, r4, #3
 8003332:	4614      	mov	r4, r2
 8003334:	461d      	mov	r5, r3
 8003336:	eb14 030a 	adds.w	r3, r4, sl
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	eb45 030b 	adc.w	r3, r5, fp
 8003340:	607b      	str	r3, [r7, #4]
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800334e:	4629      	mov	r1, r5
 8003350:	028b      	lsls	r3, r1, #10
 8003352:	4621      	mov	r1, r4
 8003354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003358:	4621      	mov	r1, r4
 800335a:	028a      	lsls	r2, r1, #10
 800335c:	4610      	mov	r0, r2
 800335e:	4619      	mov	r1, r3
 8003360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003362:	2200      	movs	r2, #0
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	60fa      	str	r2, [r7, #12]
 8003368:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800336c:	f7fc ff80 	bl	8000270 <__aeabi_uldivmod>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4613      	mov	r3, r2
 8003376:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003378:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	0c1b      	lsrs	r3, r3, #16
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	3301      	adds	r3, #1
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003388:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800338a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003392:	e002      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003394:	4b05      	ldr	r3, [pc, #20]	@ (80033ac <HAL_RCC_GetSysClockFreq+0x184>)
 8003396:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800339a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800339c:	4618      	mov	r0, r3
 800339e:	3740      	adds	r7, #64	@ 0x40
 80033a0:	46bd      	mov	sp, r7
 80033a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033a6:	bf00      	nop
 80033a8:	40023800 	.word	0x40023800
 80033ac:	00f42400 	.word	0x00f42400
 80033b0:	017d7840 	.word	0x017d7840

080033b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b8:	4b03      	ldr	r3, [pc, #12]	@ (80033c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000088 	.word	0x20000088

080033cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033d0:	f7ff fff0 	bl	80033b4 <HAL_RCC_GetHCLKFreq>
 80033d4:	4602      	mov	r2, r0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	0a9b      	lsrs	r3, r3, #10
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	4903      	ldr	r1, [pc, #12]	@ (80033f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033e2:	5ccb      	ldrb	r3, [r1, r3]
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40023800 	.word	0x40023800
 80033f0:	080052e4 	.word	0x080052e4

080033f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033f8:	f7ff ffdc 	bl	80033b4 <HAL_RCC_GetHCLKFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	0b5b      	lsrs	r3, r3, #13
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4903      	ldr	r1, [pc, #12]	@ (8003418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40023800 	.word	0x40023800
 8003418:	080052e4 	.word	0x080052e4

0800341c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	d001      	beq.n	8003434 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e046      	b.n	80034c2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a23      	ldr	r2, [pc, #140]	@ (80034d0 <HAL_TIM_Base_Start+0xb4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d022      	beq.n	800348c <HAL_TIM_Base_Start+0x70>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800344e:	d01d      	beq.n	800348c <HAL_TIM_Base_Start+0x70>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1f      	ldr	r2, [pc, #124]	@ (80034d4 <HAL_TIM_Base_Start+0xb8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d018      	beq.n	800348c <HAL_TIM_Base_Start+0x70>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1e      	ldr	r2, [pc, #120]	@ (80034d8 <HAL_TIM_Base_Start+0xbc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d013      	beq.n	800348c <HAL_TIM_Base_Start+0x70>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1c      	ldr	r2, [pc, #112]	@ (80034dc <HAL_TIM_Base_Start+0xc0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00e      	beq.n	800348c <HAL_TIM_Base_Start+0x70>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1b      	ldr	r2, [pc, #108]	@ (80034e0 <HAL_TIM_Base_Start+0xc4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d009      	beq.n	800348c <HAL_TIM_Base_Start+0x70>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a19      	ldr	r2, [pc, #100]	@ (80034e4 <HAL_TIM_Base_Start+0xc8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_TIM_Base_Start+0x70>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a18      	ldr	r2, [pc, #96]	@ (80034e8 <HAL_TIM_Base_Start+0xcc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d111      	bne.n	80034b0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b06      	cmp	r3, #6
 800349c:	d010      	beq.n	80034c0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0201 	orr.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ae:	e007      	b.n	80034c0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40010000 	.word	0x40010000
 80034d4:	40000400 	.word	0x40000400
 80034d8:	40000800 	.word	0x40000800
 80034dc:	40000c00 	.word	0x40000c00
 80034e0:	40010400 	.word	0x40010400
 80034e4:	40014000 	.word	0x40014000
 80034e8:	40001800 	.word	0x40001800

080034ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e041      	b.n	8003582 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd fcf4 	bl	8000f00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f000 f8ca 	bl	80036c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b086      	sub	sp, #24
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e088      	b.n	80036ba <HAL_TIM_IC_ConfigChannel+0x130>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d11b      	bne.n	80035ee <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80035c6:	f000 f929 	bl	800381c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699a      	ldr	r2, [r3, #24]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 020c 	bic.w	r2, r2, #12
 80035d8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6999      	ldr	r1, [r3, #24]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	619a      	str	r2, [r3, #24]
 80035ec:	e060      	b.n	80036b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d11c      	bne.n	800362e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003604:	f000 f97e 	bl	8003904 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003616:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6999      	ldr	r1, [r3, #24]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	021a      	lsls	r2, r3, #8
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	619a      	str	r2, [r3, #24]
 800362c:	e040      	b.n	80036b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b08      	cmp	r3, #8
 8003632:	d11b      	bne.n	800366c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003644:	f000 f99b 	bl	800397e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	69da      	ldr	r2, [r3, #28]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 020c 	bic.w	r2, r2, #12
 8003656:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69d9      	ldr	r1, [r3, #28]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	61da      	str	r2, [r3, #28]
 800366a:	e021      	b.n	80036b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b0c      	cmp	r3, #12
 8003670:	d11c      	bne.n	80036ac <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003682:	f000 f9b8 	bl	80039f6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003694:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69d9      	ldr	r1, [r3, #28]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	021a      	lsls	r2, r3, #8
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	61da      	str	r2, [r3, #28]
 80036aa:	e001      	b.n	80036b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a46      	ldr	r2, [pc, #280]	@ (80037f0 <TIM_Base_SetConfig+0x12c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d013      	beq.n	8003704 <TIM_Base_SetConfig+0x40>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e2:	d00f      	beq.n	8003704 <TIM_Base_SetConfig+0x40>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a43      	ldr	r2, [pc, #268]	@ (80037f4 <TIM_Base_SetConfig+0x130>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00b      	beq.n	8003704 <TIM_Base_SetConfig+0x40>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a42      	ldr	r2, [pc, #264]	@ (80037f8 <TIM_Base_SetConfig+0x134>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d007      	beq.n	8003704 <TIM_Base_SetConfig+0x40>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a41      	ldr	r2, [pc, #260]	@ (80037fc <TIM_Base_SetConfig+0x138>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d003      	beq.n	8003704 <TIM_Base_SetConfig+0x40>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a40      	ldr	r2, [pc, #256]	@ (8003800 <TIM_Base_SetConfig+0x13c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d108      	bne.n	8003716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800370a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a35      	ldr	r2, [pc, #212]	@ (80037f0 <TIM_Base_SetConfig+0x12c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d02b      	beq.n	8003776 <TIM_Base_SetConfig+0xb2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003724:	d027      	beq.n	8003776 <TIM_Base_SetConfig+0xb2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a32      	ldr	r2, [pc, #200]	@ (80037f4 <TIM_Base_SetConfig+0x130>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d023      	beq.n	8003776 <TIM_Base_SetConfig+0xb2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a31      	ldr	r2, [pc, #196]	@ (80037f8 <TIM_Base_SetConfig+0x134>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d01f      	beq.n	8003776 <TIM_Base_SetConfig+0xb2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a30      	ldr	r2, [pc, #192]	@ (80037fc <TIM_Base_SetConfig+0x138>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d01b      	beq.n	8003776 <TIM_Base_SetConfig+0xb2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a2f      	ldr	r2, [pc, #188]	@ (8003800 <TIM_Base_SetConfig+0x13c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d017      	beq.n	8003776 <TIM_Base_SetConfig+0xb2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a2e      	ldr	r2, [pc, #184]	@ (8003804 <TIM_Base_SetConfig+0x140>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <TIM_Base_SetConfig+0xb2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a2d      	ldr	r2, [pc, #180]	@ (8003808 <TIM_Base_SetConfig+0x144>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00f      	beq.n	8003776 <TIM_Base_SetConfig+0xb2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a2c      	ldr	r2, [pc, #176]	@ (800380c <TIM_Base_SetConfig+0x148>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00b      	beq.n	8003776 <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a2b      	ldr	r2, [pc, #172]	@ (8003810 <TIM_Base_SetConfig+0x14c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d007      	beq.n	8003776 <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a2a      	ldr	r2, [pc, #168]	@ (8003814 <TIM_Base_SetConfig+0x150>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d003      	beq.n	8003776 <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a29      	ldr	r2, [pc, #164]	@ (8003818 <TIM_Base_SetConfig+0x154>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d108      	bne.n	8003788 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800377c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a10      	ldr	r2, [pc, #64]	@ (80037f0 <TIM_Base_SetConfig+0x12c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d003      	beq.n	80037bc <TIM_Base_SetConfig+0xf8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a12      	ldr	r2, [pc, #72]	@ (8003800 <TIM_Base_SetConfig+0x13c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d103      	bne.n	80037c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d105      	bne.n	80037e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f023 0201 	bic.w	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	611a      	str	r2, [r3, #16]
  }
}
 80037e2:	bf00      	nop
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40000400 	.word	0x40000400
 80037f8:	40000800 	.word	0x40000800
 80037fc:	40000c00 	.word	0x40000c00
 8003800:	40010400 	.word	0x40010400
 8003804:	40014000 	.word	0x40014000
 8003808:	40014400 	.word	0x40014400
 800380c:	40014800 	.word	0x40014800
 8003810:	40001800 	.word	0x40001800
 8003814:	40001c00 	.word	0x40001c00
 8003818:	40002000 	.word	0x40002000

0800381c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f023 0201 	bic.w	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4a28      	ldr	r2, [pc, #160]	@ (80038e8 <TIM_TI1_SetConfig+0xcc>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01b      	beq.n	8003882 <TIM_TI1_SetConfig+0x66>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003850:	d017      	beq.n	8003882 <TIM_TI1_SetConfig+0x66>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4a25      	ldr	r2, [pc, #148]	@ (80038ec <TIM_TI1_SetConfig+0xd0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <TIM_TI1_SetConfig+0x66>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4a24      	ldr	r2, [pc, #144]	@ (80038f0 <TIM_TI1_SetConfig+0xd4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00f      	beq.n	8003882 <TIM_TI1_SetConfig+0x66>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a23      	ldr	r2, [pc, #140]	@ (80038f4 <TIM_TI1_SetConfig+0xd8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00b      	beq.n	8003882 <TIM_TI1_SetConfig+0x66>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a22      	ldr	r2, [pc, #136]	@ (80038f8 <TIM_TI1_SetConfig+0xdc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d007      	beq.n	8003882 <TIM_TI1_SetConfig+0x66>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4a21      	ldr	r2, [pc, #132]	@ (80038fc <TIM_TI1_SetConfig+0xe0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d003      	beq.n	8003882 <TIM_TI1_SetConfig+0x66>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a20      	ldr	r2, [pc, #128]	@ (8003900 <TIM_TI1_SetConfig+0xe4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <TIM_TI1_SetConfig+0x6a>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <TIM_TI1_SetConfig+0x6c>
 8003886:	2300      	movs	r3, #0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f023 0303 	bic.w	r3, r3, #3
 8003892:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e003      	b.n	80038a6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f023 030a 	bic.w	r3, r3, #10
 80038c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f003 030a 	and.w	r3, r3, #10
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	621a      	str	r2, [r3, #32]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40010000 	.word	0x40010000
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40000800 	.word	0x40000800
 80038f4:	40000c00 	.word	0x40000c00
 80038f8:	40010400 	.word	0x40010400
 80038fc:	40014000 	.word	0x40014000
 8003900:	40001800 	.word	0x40001800

08003904 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f023 0210 	bic.w	r2, r3, #16
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	031b      	lsls	r3, r3, #12
 8003948:	b29b      	uxth	r3, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003956:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	4313      	orrs	r3, r2
 8003964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	621a      	str	r2, [r3, #32]
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800397e:	b480      	push	{r7}
 8003980:	b087      	sub	sp, #28
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
 800398a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f023 0303 	bic.w	r3, r3, #3
 80039aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039ba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80039ce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	621a      	str	r2, [r3, #32]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b087      	sub	sp, #28
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a22:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a34:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	031b      	lsls	r3, r3, #12
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003a48:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	031b      	lsls	r3, r3, #12
 8003a4e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	621a      	str	r2, [r3, #32]
}
 8003a64:	bf00      	nop
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e05a      	b.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a21      	ldr	r2, [pc, #132]	@ (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d022      	beq.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad4:	d01d      	beq.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1d      	ldr	r2, [pc, #116]	@ (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d018      	beq.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1a      	ldr	r2, [pc, #104]	@ (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00e      	beq.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a18      	ldr	r2, [pc, #96]	@ (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d009      	beq.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a17      	ldr	r2, [pc, #92]	@ (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d004      	beq.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a15      	ldr	r2, [pc, #84]	@ (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d10c      	bne.n	8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40010000 	.word	0x40010000
 8003b50:	40000400 	.word	0x40000400
 8003b54:	40000800 	.word	0x40000800
 8003b58:	40000c00 	.word	0x40000c00
 8003b5c:	40010400 	.word	0x40010400
 8003b60:	40014000 	.word	0x40014000
 8003b64:	40001800 	.word	0x40001800

08003b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e042      	b.n	8003c00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fd f9fe 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2224      	movs	r2, #36	@ 0x24
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f9df 	bl	8003f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08c      	sub	sp, #48	@ 0x30
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	4613      	mov	r3, r2
 8003c14:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d156      	bne.n	8003cd0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <HAL_UART_Transmit_DMA+0x26>
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e04f      	b.n	8003cd2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	88fa      	ldrh	r2, [r7, #6]
 8003c3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	88fa      	ldrh	r2, [r7, #6]
 8003c42:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2221      	movs	r2, #33	@ 0x21
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c56:	4a21      	ldr	r2, [pc, #132]	@ (8003cdc <HAL_UART_Transmit_DMA+0xd4>)
 8003c58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5e:	4a20      	ldr	r2, [pc, #128]	@ (8003ce0 <HAL_UART_Transmit_DMA+0xd8>)
 8003c60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c66:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce4 <HAL_UART_Transmit_DMA+0xdc>)
 8003c68:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6e:	2200      	movs	r2, #0
 8003c70:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003c72:	f107 0308 	add.w	r3, r7, #8
 8003c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7e:	6819      	ldr	r1, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3304      	adds	r3, #4
 8003c86:	461a      	mov	r2, r3
 8003c88:	88fb      	ldrh	r3, [r7, #6]
 8003c8a:	f7fe faf7 	bl	800227c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3314      	adds	r3, #20
 8003c9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	e853 3f00 	ldrex	r3, [r3]
 8003ca6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3314      	adds	r3, #20
 8003cb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cb8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbc:	6a39      	ldr	r1, [r7, #32]
 8003cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc0:	e841 2300 	strex	r3, r2, [r1]
 8003cc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1e5      	bne.n	8003c98 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e000      	b.n	8003cd2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3730      	adds	r7, #48	@ 0x30
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	08003d11 	.word	0x08003d11
 8003ce0:	08003dab 	.word	0x08003dab
 8003ce4:	08003dc7 	.word	0x08003dc7

08003ce8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b090      	sub	sp, #64	@ 0x40
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d137      	bne.n	8003d9c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d2e:	2200      	movs	r2, #0
 8003d30:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3314      	adds	r3, #20
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	623b      	str	r3, [r7, #32]
   return(result);
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3314      	adds	r3, #20
 8003d50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d52:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e5      	bne.n	8003d32 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	330c      	adds	r3, #12
 8003d84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d86:	61fa      	str	r2, [r7, #28]
 8003d88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	69b9      	ldr	r1, [r7, #24]
 8003d8c:	69fa      	ldr	r2, [r7, #28]
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	617b      	str	r3, [r7, #20]
   return(result);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e5      	bne.n	8003d66 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d9a:	e002      	b.n	8003da2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003d9c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003d9e:	f7fc fea3 	bl	8000ae8 <HAL_UART_TxCpltCallback>
}
 8003da2:	bf00      	nop
 8003da4:	3740      	adds	r7, #64	@ 0x40
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f7ff ff95 	bl	8003ce8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de2:	2b80      	cmp	r3, #128	@ 0x80
 8003de4:	bf0c      	ite	eq
 8003de6:	2301      	moveq	r3, #1
 8003de8:	2300      	movne	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b21      	cmp	r3, #33	@ 0x21
 8003df8:	d108      	bne.n	8003e0c <UART_DMAError+0x46>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2200      	movs	r2, #0
 8003e04:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003e06:	68b8      	ldr	r0, [r7, #8]
 8003e08:	f000 f827 	bl	8003e5a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e16:	2b40      	cmp	r3, #64	@ 0x40
 8003e18:	bf0c      	ite	eq
 8003e1a:	2301      	moveq	r3, #1
 8003e1c:	2300      	movne	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b22      	cmp	r3, #34	@ 0x22
 8003e2c:	d108      	bne.n	8003e40 <UART_DMAError+0x7a>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2200      	movs	r2, #0
 8003e38:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003e3a:	68b8      	ldr	r0, [r7, #8]
 8003e3c:	f000 f835 	bl	8003eaa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e44:	f043 0210 	orr.w	r2, r3, #16
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e4c:	68b8      	ldr	r0, [r7, #8]
 8003e4e:	f7ff ff55 	bl	8003cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b089      	sub	sp, #36	@ 0x24
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	330c      	adds	r3, #12
 8003e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	330c      	adds	r3, #12
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	61ba      	str	r2, [r7, #24]
 8003e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	6979      	ldr	r1, [r7, #20]
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e5      	bne.n	8003e62 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003e9e:	bf00      	nop
 8003ea0:	3724      	adds	r7, #36	@ 0x24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b095      	sub	sp, #84	@ 0x54
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ed2:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ed8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e5      	bne.n	8003eb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3314      	adds	r3, #20
 8003f04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e5      	bne.n	8003ee6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d119      	bne.n	8003f56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	330c      	adds	r3, #12
 8003f28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f023 0310 	bic.w	r3, r3, #16
 8003f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	330c      	adds	r3, #12
 8003f40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f42:	61ba      	str	r2, [r7, #24]
 8003f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6979      	ldr	r1, [r7, #20]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e5      	bne.n	8003f22 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f64:	bf00      	nop
 8003f66:	3754      	adds	r7, #84	@ 0x54
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f74:	b0c0      	sub	sp, #256	@ 0x100
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8c:	68d9      	ldr	r1, [r3, #12]
 8003f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	ea40 0301 	orr.w	r3, r0, r1
 8003f98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fc8:	f021 010c 	bic.w	r1, r1, #12
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fea:	6999      	ldr	r1, [r3, #24]
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	ea40 0301 	orr.w	r3, r0, r1
 8003ff6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4b8f      	ldr	r3, [pc, #572]	@ (800423c <UART_SetConfig+0x2cc>)
 8004000:	429a      	cmp	r2, r3
 8004002:	d005      	beq.n	8004010 <UART_SetConfig+0xa0>
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	4b8d      	ldr	r3, [pc, #564]	@ (8004240 <UART_SetConfig+0x2d0>)
 800400c:	429a      	cmp	r2, r3
 800400e:	d104      	bne.n	800401a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004010:	f7ff f9f0 	bl	80033f4 <HAL_RCC_GetPCLK2Freq>
 8004014:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004018:	e003      	b.n	8004022 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800401a:	f7ff f9d7 	bl	80033cc <HAL_RCC_GetPCLK1Freq>
 800401e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800402c:	f040 810c 	bne.w	8004248 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004034:	2200      	movs	r2, #0
 8004036:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800403a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800403e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004042:	4622      	mov	r2, r4
 8004044:	462b      	mov	r3, r5
 8004046:	1891      	adds	r1, r2, r2
 8004048:	65b9      	str	r1, [r7, #88]	@ 0x58
 800404a:	415b      	adcs	r3, r3
 800404c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800404e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004052:	4621      	mov	r1, r4
 8004054:	eb12 0801 	adds.w	r8, r2, r1
 8004058:	4629      	mov	r1, r5
 800405a:	eb43 0901 	adc.w	r9, r3, r1
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800406a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800406e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004072:	4690      	mov	r8, r2
 8004074:	4699      	mov	r9, r3
 8004076:	4623      	mov	r3, r4
 8004078:	eb18 0303 	adds.w	r3, r8, r3
 800407c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004080:	462b      	mov	r3, r5
 8004082:	eb49 0303 	adc.w	r3, r9, r3
 8004086:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004096:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800409a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800409e:	460b      	mov	r3, r1
 80040a0:	18db      	adds	r3, r3, r3
 80040a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80040a4:	4613      	mov	r3, r2
 80040a6:	eb42 0303 	adc.w	r3, r2, r3
 80040aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80040ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040b4:	f7fc f8dc 	bl	8000270 <__aeabi_uldivmod>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4b61      	ldr	r3, [pc, #388]	@ (8004244 <UART_SetConfig+0x2d4>)
 80040be:	fba3 2302 	umull	r2, r3, r3, r2
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	011c      	lsls	r4, r3, #4
 80040c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040d8:	4642      	mov	r2, r8
 80040da:	464b      	mov	r3, r9
 80040dc:	1891      	adds	r1, r2, r2
 80040de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040e0:	415b      	adcs	r3, r3
 80040e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040e8:	4641      	mov	r1, r8
 80040ea:	eb12 0a01 	adds.w	sl, r2, r1
 80040ee:	4649      	mov	r1, r9
 80040f0:	eb43 0b01 	adc.w	fp, r3, r1
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004100:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004108:	4692      	mov	sl, r2
 800410a:	469b      	mov	fp, r3
 800410c:	4643      	mov	r3, r8
 800410e:	eb1a 0303 	adds.w	r3, sl, r3
 8004112:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004116:	464b      	mov	r3, r9
 8004118:	eb4b 0303 	adc.w	r3, fp, r3
 800411c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800412c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004130:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004134:	460b      	mov	r3, r1
 8004136:	18db      	adds	r3, r3, r3
 8004138:	643b      	str	r3, [r7, #64]	@ 0x40
 800413a:	4613      	mov	r3, r2
 800413c:	eb42 0303 	adc.w	r3, r2, r3
 8004140:	647b      	str	r3, [r7, #68]	@ 0x44
 8004142:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004146:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800414a:	f7fc f891 	bl	8000270 <__aeabi_uldivmod>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4611      	mov	r1, r2
 8004154:	4b3b      	ldr	r3, [pc, #236]	@ (8004244 <UART_SetConfig+0x2d4>)
 8004156:	fba3 2301 	umull	r2, r3, r3, r1
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	2264      	movs	r2, #100	@ 0x64
 800415e:	fb02 f303 	mul.w	r3, r2, r3
 8004162:	1acb      	subs	r3, r1, r3
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800416a:	4b36      	ldr	r3, [pc, #216]	@ (8004244 <UART_SetConfig+0x2d4>)
 800416c:	fba3 2302 	umull	r2, r3, r3, r2
 8004170:	095b      	lsrs	r3, r3, #5
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004178:	441c      	add	r4, r3
 800417a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800417e:	2200      	movs	r2, #0
 8004180:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004184:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004188:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800418c:	4642      	mov	r2, r8
 800418e:	464b      	mov	r3, r9
 8004190:	1891      	adds	r1, r2, r2
 8004192:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004194:	415b      	adcs	r3, r3
 8004196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004198:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800419c:	4641      	mov	r1, r8
 800419e:	1851      	adds	r1, r2, r1
 80041a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80041a2:	4649      	mov	r1, r9
 80041a4:	414b      	adcs	r3, r1
 80041a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041b4:	4659      	mov	r1, fp
 80041b6:	00cb      	lsls	r3, r1, #3
 80041b8:	4651      	mov	r1, sl
 80041ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041be:	4651      	mov	r1, sl
 80041c0:	00ca      	lsls	r2, r1, #3
 80041c2:	4610      	mov	r0, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	4642      	mov	r2, r8
 80041ca:	189b      	adds	r3, r3, r2
 80041cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041d0:	464b      	mov	r3, r9
 80041d2:	460a      	mov	r2, r1
 80041d4:	eb42 0303 	adc.w	r3, r2, r3
 80041d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041f0:	460b      	mov	r3, r1
 80041f2:	18db      	adds	r3, r3, r3
 80041f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041f6:	4613      	mov	r3, r2
 80041f8:	eb42 0303 	adc.w	r3, r2, r3
 80041fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004202:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004206:	f7fc f833 	bl	8000270 <__aeabi_uldivmod>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4b0d      	ldr	r3, [pc, #52]	@ (8004244 <UART_SetConfig+0x2d4>)
 8004210:	fba3 1302 	umull	r1, r3, r3, r2
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	2164      	movs	r1, #100	@ 0x64
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	3332      	adds	r3, #50	@ 0x32
 8004222:	4a08      	ldr	r2, [pc, #32]	@ (8004244 <UART_SetConfig+0x2d4>)
 8004224:	fba2 2303 	umull	r2, r3, r2, r3
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	f003 0207 	and.w	r2, r3, #7
 800422e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4422      	add	r2, r4
 8004236:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004238:	e106      	b.n	8004448 <UART_SetConfig+0x4d8>
 800423a:	bf00      	nop
 800423c:	40011000 	.word	0x40011000
 8004240:	40011400 	.word	0x40011400
 8004244:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800424c:	2200      	movs	r2, #0
 800424e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004252:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004256:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800425a:	4642      	mov	r2, r8
 800425c:	464b      	mov	r3, r9
 800425e:	1891      	adds	r1, r2, r2
 8004260:	6239      	str	r1, [r7, #32]
 8004262:	415b      	adcs	r3, r3
 8004264:	627b      	str	r3, [r7, #36]	@ 0x24
 8004266:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800426a:	4641      	mov	r1, r8
 800426c:	1854      	adds	r4, r2, r1
 800426e:	4649      	mov	r1, r9
 8004270:	eb43 0501 	adc.w	r5, r3, r1
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	00eb      	lsls	r3, r5, #3
 800427e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004282:	00e2      	lsls	r2, r4, #3
 8004284:	4614      	mov	r4, r2
 8004286:	461d      	mov	r5, r3
 8004288:	4643      	mov	r3, r8
 800428a:	18e3      	adds	r3, r4, r3
 800428c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004290:	464b      	mov	r3, r9
 8004292:	eb45 0303 	adc.w	r3, r5, r3
 8004296:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800429a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042b6:	4629      	mov	r1, r5
 80042b8:	008b      	lsls	r3, r1, #2
 80042ba:	4621      	mov	r1, r4
 80042bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042c0:	4621      	mov	r1, r4
 80042c2:	008a      	lsls	r2, r1, #2
 80042c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042c8:	f7fb ffd2 	bl	8000270 <__aeabi_uldivmod>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4b60      	ldr	r3, [pc, #384]	@ (8004454 <UART_SetConfig+0x4e4>)
 80042d2:	fba3 2302 	umull	r2, r3, r3, r2
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	011c      	lsls	r4, r3, #4
 80042da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042de:	2200      	movs	r2, #0
 80042e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042ec:	4642      	mov	r2, r8
 80042ee:	464b      	mov	r3, r9
 80042f0:	1891      	adds	r1, r2, r2
 80042f2:	61b9      	str	r1, [r7, #24]
 80042f4:	415b      	adcs	r3, r3
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042fc:	4641      	mov	r1, r8
 80042fe:	1851      	adds	r1, r2, r1
 8004300:	6139      	str	r1, [r7, #16]
 8004302:	4649      	mov	r1, r9
 8004304:	414b      	adcs	r3, r1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004314:	4659      	mov	r1, fp
 8004316:	00cb      	lsls	r3, r1, #3
 8004318:	4651      	mov	r1, sl
 800431a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800431e:	4651      	mov	r1, sl
 8004320:	00ca      	lsls	r2, r1, #3
 8004322:	4610      	mov	r0, r2
 8004324:	4619      	mov	r1, r3
 8004326:	4603      	mov	r3, r0
 8004328:	4642      	mov	r2, r8
 800432a:	189b      	adds	r3, r3, r2
 800432c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004330:	464b      	mov	r3, r9
 8004332:	460a      	mov	r2, r1
 8004334:	eb42 0303 	adc.w	r3, r2, r3
 8004338:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004346:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004354:	4649      	mov	r1, r9
 8004356:	008b      	lsls	r3, r1, #2
 8004358:	4641      	mov	r1, r8
 800435a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800435e:	4641      	mov	r1, r8
 8004360:	008a      	lsls	r2, r1, #2
 8004362:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004366:	f7fb ff83 	bl	8000270 <__aeabi_uldivmod>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4611      	mov	r1, r2
 8004370:	4b38      	ldr	r3, [pc, #224]	@ (8004454 <UART_SetConfig+0x4e4>)
 8004372:	fba3 2301 	umull	r2, r3, r3, r1
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	2264      	movs	r2, #100	@ 0x64
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	1acb      	subs	r3, r1, r3
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	3332      	adds	r3, #50	@ 0x32
 8004384:	4a33      	ldr	r2, [pc, #204]	@ (8004454 <UART_SetConfig+0x4e4>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004390:	441c      	add	r4, r3
 8004392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004396:	2200      	movs	r2, #0
 8004398:	673b      	str	r3, [r7, #112]	@ 0x70
 800439a:	677a      	str	r2, [r7, #116]	@ 0x74
 800439c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043a0:	4642      	mov	r2, r8
 80043a2:	464b      	mov	r3, r9
 80043a4:	1891      	adds	r1, r2, r2
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	415b      	adcs	r3, r3
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043b0:	4641      	mov	r1, r8
 80043b2:	1851      	adds	r1, r2, r1
 80043b4:	6039      	str	r1, [r7, #0]
 80043b6:	4649      	mov	r1, r9
 80043b8:	414b      	adcs	r3, r1
 80043ba:	607b      	str	r3, [r7, #4]
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043c8:	4659      	mov	r1, fp
 80043ca:	00cb      	lsls	r3, r1, #3
 80043cc:	4651      	mov	r1, sl
 80043ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043d2:	4651      	mov	r1, sl
 80043d4:	00ca      	lsls	r2, r1, #3
 80043d6:	4610      	mov	r0, r2
 80043d8:	4619      	mov	r1, r3
 80043da:	4603      	mov	r3, r0
 80043dc:	4642      	mov	r2, r8
 80043de:	189b      	adds	r3, r3, r2
 80043e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043e2:	464b      	mov	r3, r9
 80043e4:	460a      	mov	r2, r1
 80043e6:	eb42 0303 	adc.w	r3, r2, r3
 80043ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80043f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004404:	4649      	mov	r1, r9
 8004406:	008b      	lsls	r3, r1, #2
 8004408:	4641      	mov	r1, r8
 800440a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800440e:	4641      	mov	r1, r8
 8004410:	008a      	lsls	r2, r1, #2
 8004412:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004416:	f7fb ff2b 	bl	8000270 <__aeabi_uldivmod>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4b0d      	ldr	r3, [pc, #52]	@ (8004454 <UART_SetConfig+0x4e4>)
 8004420:	fba3 1302 	umull	r1, r3, r3, r2
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	2164      	movs	r1, #100	@ 0x64
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	3332      	adds	r3, #50	@ 0x32
 8004432:	4a08      	ldr	r2, [pc, #32]	@ (8004454 <UART_SetConfig+0x4e4>)
 8004434:	fba2 2303 	umull	r2, r3, r2, r3
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	f003 020f 	and.w	r2, r3, #15
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4422      	add	r2, r4
 8004446:	609a      	str	r2, [r3, #8]
}
 8004448:	bf00      	nop
 800444a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800444e:	46bd      	mov	sp, r7
 8004450:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004454:	51eb851f 	.word	0x51eb851f

08004458 <arm_fir_init_f32>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	9c04      	ldr	r4, [sp, #16]
 800445c:	6082      	str	r2, [r0, #8]
 800445e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8004462:	3c01      	subs	r4, #1
 8004464:	4605      	mov	r5, r0
 8004466:	440c      	add	r4, r1
 8004468:	8001      	strh	r1, [r0, #0]
 800446a:	461e      	mov	r6, r3
 800446c:	00a2      	lsls	r2, r4, #2
 800446e:	4618      	mov	r0, r3
 8004470:	2100      	movs	r1, #0
 8004472:	f000 fa9b 	bl	80049ac <memset>
 8004476:	606e      	str	r6, [r5, #4]
 8004478:	bd70      	pop	{r4, r5, r6, pc}
 800447a:	bf00      	nop

0800447c <arm_fir_f32>:
 800447c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004480:	ed2d 8b10 	vpush	{d8-d15}
 8004484:	b089      	sub	sp, #36	@ 0x24
 8004486:	4605      	mov	r5, r0
 8004488:	9003      	str	r0, [sp, #12]
 800448a:	8800      	ldrh	r0, [r0, #0]
 800448c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8004490:	9304      	str	r3, [sp, #16]
 8004492:	461e      	mov	r6, r3
 8004494:	f100 4380 	add.w	r3, r0, #1073741824	@ 0x40000000
 8004498:	3b01      	subs	r3, #1
 800449a:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 800449e:	08f3      	lsrs	r3, r6, #3
 80044a0:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80044a4:	9001      	str	r0, [sp, #4]
 80044a6:	4625      	mov	r5, r4
 80044a8:	9400      	str	r4, [sp, #0]
 80044aa:	9302      	str	r3, [sp, #8]
 80044ac:	f000 81ee 	beq.w	800488c <arm_fir_f32+0x410>
 80044b0:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 80044b4:	469e      	mov	lr, r3
 80044b6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80044ba:	1f1e      	subs	r6, r3, #4
 80044bc:	4604      	mov	r4, r0
 80044be:	9605      	str	r6, [sp, #20]
 80044c0:	eb08 0003 	add.w	r0, r8, r3
 80044c4:	f004 0a07 	and.w	sl, r4, #7
 80044c8:	4613      	mov	r3, r2
 80044ca:	f10c 0420 	add.w	r4, ip, #32
 80044ce:	f8cd c018 	str.w	ip, [sp, #24]
 80044d2:	4684      	mov	ip, r0
 80044d4:	4648      	mov	r0, r9
 80044d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80044da:	9107      	str	r1, [sp, #28]
 80044dc:	f105 0720 	add.w	r7, r5, #32
 80044e0:	f101 0620 	add.w	r6, r1, #32
 80044e4:	f102 0520 	add.w	r5, r2, #32
 80044e8:	4652      	mov	r2, sl
 80044ea:	469a      	mov	sl, r3
 80044ec:	f856 3c20 	ldr.w	r3, [r6, #-32]
 80044f0:	f847 3c20 	str.w	r3, [r7, #-32]
 80044f4:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 80044f8:	f847 3c1c 	str.w	r3, [r7, #-28]
 80044fc:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8004500:	f847 3c18 	str.w	r3, [r7, #-24]
 8004504:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8004508:	f847 3c14 	str.w	r3, [r7, #-20]
 800450c:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8004510:	f847 3c10 	str.w	r3, [r7, #-16]
 8004514:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8004518:	f847 3c0c 	str.w	r3, [r7, #-12]
 800451c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8004520:	f847 3c08 	str.w	r3, [r7, #-8]
 8004524:	eddf 3af1 	vldr	s7, [pc, #964]	@ 80048ec <arm_fir_f32+0x470>
 8004528:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800452c:	f847 3c04 	str.w	r3, [r7, #-4]
 8004530:	ed14 3a08 	vldr	s6, [r4, #-32]	@ 0xffffffe0
 8004534:	ed54 2a07 	vldr	s5, [r4, #-28]	@ 0xffffffe4
 8004538:	ed14 2a06 	vldr	s4, [r4, #-24]	@ 0xffffffe8
 800453c:	ed54 1a05 	vldr	s3, [r4, #-20]	@ 0xffffffec
 8004540:	ed14 1a04 	vldr	s2, [r4, #-16]
 8004544:	ed54 0a03 	vldr	s1, [r4, #-12]
 8004548:	ed14 0a02 	vldr	s0, [r4, #-8]
 800454c:	1f21      	subs	r1, r4, #4
 800454e:	eef0 8a63 	vmov.f32	s17, s7
 8004552:	eef0 9a63 	vmov.f32	s19, s7
 8004556:	eef0 aa63 	vmov.f32	s21, s7
 800455a:	eef0 ba63 	vmov.f32	s23, s7
 800455e:	eeb0 ca63 	vmov.f32	s24, s7
 8004562:	eef0 ca63 	vmov.f32	s25, s7
 8004566:	eeb0 da63 	vmov.f32	s26, s7
 800456a:	2800      	cmp	r0, #0
 800456c:	f000 81e8 	beq.w	8004940 <arm_fir_f32+0x4c4>
 8004570:	f108 0120 	add.w	r1, r8, #32
 8004574:	f104 031c 	add.w	r3, r4, #28
 8004578:	4683      	mov	fp, r0
 800457a:	ed13 8a08 	vldr	s16, [r3, #-32]	@ 0xffffffe0
 800457e:	ed11 4a08 	vldr	s8, [r1, #-32]	@ 0xffffffe0
 8004582:	ed51 4a07 	vldr	s9, [r1, #-28]	@ 0xffffffe4
 8004586:	ed11 5a06 	vldr	s10, [r1, #-24]	@ 0xffffffe8
 800458a:	ed51 5a05 	vldr	s11, [r1, #-20]	@ 0xffffffec
 800458e:	ed11 6a04 	vldr	s12, [r1, #-16]
 8004592:	ed51 6a03 	vldr	s13, [r1, #-12]
 8004596:	ed11 7a02 	vldr	s14, [r1, #-8]
 800459a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800459e:	ee23 fa04 	vmul.f32	s30, s6, s8
 80045a2:	ee62 ea84 	vmul.f32	s29, s5, s8
 80045a6:	ed13 3a07 	vldr	s6, [r3, #-28]	@ 0xffffffe4
 80045aa:	ee22 ea04 	vmul.f32	s28, s4, s8
 80045ae:	ee61 da84 	vmul.f32	s27, s3, s8
 80045b2:	ee21 ba04 	vmul.f32	s22, s2, s8
 80045b6:	ee20 aa84 	vmul.f32	s20, s1, s8
 80045ba:	ee20 9a04 	vmul.f32	s18, s0, s8
 80045be:	ee28 4a04 	vmul.f32	s8, s16, s8
 80045c2:	ee62 fa24 	vmul.f32	s31, s4, s9
 80045c6:	ee3c ca0e 	vadd.f32	s24, s24, s28
 80045ca:	ee7b baad 	vadd.f32	s23, s23, s27
 80045ce:	ee21 eaa4 	vmul.f32	s28, s3, s9
 80045d2:	ee61 da24 	vmul.f32	s27, s2, s9
 80045d6:	ee7a aa8b 	vadd.f32	s21, s21, s22
 80045da:	ee79 9a8a 	vadd.f32	s19, s19, s20
 80045de:	ee20 baa4 	vmul.f32	s22, s1, s9
 80045e2:	ee20 aa24 	vmul.f32	s20, s0, s9
 80045e6:	ee3d da0f 	vadd.f32	s26, s26, s30
 80045ea:	ee7c caae 	vadd.f32	s25, s25, s29
 80045ee:	ee22 faa4 	vmul.f32	s30, s5, s9
 80045f2:	ee78 8a89 	vadd.f32	s17, s17, s18
 80045f6:	ed53 2a06 	vldr	s5, [r3, #-24]	@ 0xffffffe8
 80045fa:	ee28 9a24 	vmul.f32	s18, s16, s9
 80045fe:	ee73 3a84 	vadd.f32	s7, s7, s8
 8004602:	ee63 4a24 	vmul.f32	s9, s6, s9
 8004606:	ee22 4a05 	vmul.f32	s8, s4, s10
 800460a:	ee61 ea05 	vmul.f32	s29, s2, s10
 800460e:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 8004612:	ee3d da0f 	vadd.f32	s26, s26, s30
 8004616:	ee7c caaf 	vadd.f32	s25, s25, s31
 800461a:	ee20 fa85 	vmul.f32	s30, s1, s10
 800461e:	ee61 fa85 	vmul.f32	s31, s3, s10
 8004622:	ee3c ea0e 	vadd.f32	s28, s24, s28
 8004626:	ee7b daad 	vadd.f32	s27, s23, s27
 800462a:	ee3a ba8b 	vadd.f32	s22, s21, s22
 800462e:	ee60 ba05 	vmul.f32	s23, s0, s10
 8004632:	ee68 aa05 	vmul.f32	s21, s16, s10
 8004636:	ee39 aa8a 	vadd.f32	s20, s19, s20
 800463a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800463e:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8004642:	ee63 4a05 	vmul.f32	s9, s6, s10
 8004646:	ee22 5a85 	vmul.f32	s10, s5, s10
 800464a:	ee21 9a25 	vmul.f32	s18, s2, s11
 800464e:	ee20 ca25 	vmul.f32	s24, s0, s11
 8004652:	ee3d da04 	vadd.f32	s26, s26, s8
 8004656:	ee7c caaf 	vadd.f32	s25, s25, s31
 800465a:	ee21 4aa5 	vmul.f32	s8, s3, s11
 800465e:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8004662:	ed53 1a04 	vldr	s3, [r3, #-16]
 8004666:	ee60 eaa5 	vmul.f32	s29, s1, s11
 800466a:	ee7d da8f 	vadd.f32	s27, s27, s30
 800466e:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8004672:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8004676:	ee68 ba25 	vmul.f32	s23, s16, s11
 800467a:	ee63 aa25 	vmul.f32	s21, s6, s11
 800467e:	ee78 8aa4 	vadd.f32	s17, s17, s9
 8004682:	ee73 3a85 	vadd.f32	s7, s7, s10
 8004686:	ee22 5aa5 	vmul.f32	s10, s5, s11
 800468a:	ee62 5a25 	vmul.f32	s11, s4, s11
 800468e:	ee61 4a06 	vmul.f32	s9, s2, s12
 8004692:	ee60 9a86 	vmul.f32	s19, s1, s12
 8004696:	ee60 fa06 	vmul.f32	s31, s0, s12
 800469a:	ed13 1a03 	vldr	s2, [r3, #-12]
 800469e:	ee23 fa06 	vmul.f32	s30, s6, s12
 80046a2:	ee3d da04 	vadd.f32	s26, s26, s8
 80046a6:	ee7c ca89 	vadd.f32	s25, s25, s18
 80046aa:	ee3e ea2e 	vadd.f32	s28, s28, s29
 80046ae:	ee28 9a06 	vmul.f32	s18, s16, s12
 80046b2:	ee7d da8c 	vadd.f32	s27, s27, s24
 80046b6:	ee3b ba2b 	vadd.f32	s22, s22, s23
 80046ba:	ee22 ca86 	vmul.f32	s24, s5, s12
 80046be:	ee3a aa2a 	vadd.f32	s20, s20, s21
 80046c2:	ee78 8a85 	vadd.f32	s17, s17, s10
 80046c6:	ee73 3aa5 	vadd.f32	s7, s7, s11
 80046ca:	ee62 5a06 	vmul.f32	s11, s4, s12
 80046ce:	ee21 6a86 	vmul.f32	s12, s3, s12
 80046d2:	ee20 4a26 	vmul.f32	s8, s0, s13
 80046d6:	ee63 ea26 	vmul.f32	s29, s6, s13
 80046da:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80046de:	ee22 5a26 	vmul.f32	s10, s4, s13
 80046e2:	ee3d da24 	vadd.f32	s26, s26, s9
 80046e6:	ee7c caa9 	vadd.f32	s25, s25, s19
 80046ea:	ee60 4aa6 	vmul.f32	s9, s1, s13
 80046ee:	ee3e ea2f 	vadd.f32	s28, s28, s31
 80046f2:	ed53 0a02 	vldr	s1, [r3, #-8]
 80046f6:	ee68 fa26 	vmul.f32	s31, s16, s13
 80046fa:	ee7d da89 	vadd.f32	s27, s27, s18
 80046fe:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8004702:	ee78 8aa5 	vadd.f32	s17, s17, s11
 8004706:	ee22 faa6 	vmul.f32	s30, s5, s13
 800470a:	ee73 3a86 	vadd.f32	s7, s7, s12
 800470e:	ee21 6aa6 	vmul.f32	s12, s3, s13
 8004712:	ee61 6a26 	vmul.f32	s13, s2, s13
 8004716:	ee60 aa07 	vmul.f32	s21, s0, s14
 800471a:	ee28 ca07 	vmul.f32	s24, s16, s14
 800471e:	ee63 ba07 	vmul.f32	s23, s6, s14
 8004722:	ee7a 9a05 	vadd.f32	s19, s20, s10
 8004726:	ee78 8a86 	vadd.f32	s17, s17, s12
 800472a:	ee3d da24 	vadd.f32	s26, s26, s9
 800472e:	ee7c ca84 	vadd.f32	s25, s25, s8
 8004732:	ee7d daae 	vadd.f32	s27, s27, s29
 8004736:	ee22 9a07 	vmul.f32	s18, s4, s14
 800473a:	ee62 ea87 	vmul.f32	s29, s5, s14
 800473e:	ee61 5a87 	vmul.f32	s11, s3, s14
 8004742:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8004746:	ed13 0a01 	vldr	s0, [r3, #-4]
 800474a:	ee61 6a07 	vmul.f32	s13, s2, s14
 800474e:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8004752:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8004756:	ee20 7a87 	vmul.f32	s14, s1, s14
 800475a:	ee68 4a27 	vmul.f32	s9, s16, s15
 800475e:	ee3d da2a 	vadd.f32	s26, s26, s21
 8004762:	ee7c ca8c 	vadd.f32	s25, s25, s24
 8004766:	ee23 8a27 	vmul.f32	s16, s6, s15
 800476a:	ee3e ea2b 	vadd.f32	s28, s28, s23
 800476e:	ee22 4aa7 	vmul.f32	s8, s5, s15
 8004772:	ee22 aa27 	vmul.f32	s20, s4, s15
 8004776:	ee21 5aa7 	vmul.f32	s10, s3, s15
 800477a:	ee21 6a27 	vmul.f32	s12, s2, s15
 800477e:	ee78 6aa6 	vadd.f32	s13, s17, s13
 8004782:	ee7d daae 	vadd.f32	s27, s27, s29
 8004786:	ee60 8aa7 	vmul.f32	s17, s1, s15
 800478a:	ee3b ba09 	vadd.f32	s22, s22, s18
 800478e:	ee79 9aa5 	vadd.f32	s19, s19, s11
 8004792:	ee73 3a87 	vadd.f32	s7, s7, s14
 8004796:	ee60 7a27 	vmul.f32	s15, s0, s15
 800479a:	f1bb 0b01 	subs.w	fp, fp, #1
 800479e:	f101 0120 	add.w	r1, r1, #32
 80047a2:	ee3d da24 	vadd.f32	s26, s26, s9
 80047a6:	ee7c ca88 	vadd.f32	s25, s25, s16
 80047aa:	ee3e ca04 	vadd.f32	s24, s28, s8
 80047ae:	ee7d ba8a 	vadd.f32	s23, s27, s20
 80047b2:	ee7b aa05 	vadd.f32	s21, s22, s10
 80047b6:	ee79 9a86 	vadd.f32	s19, s19, s12
 80047ba:	ee76 8aa8 	vadd.f32	s17, s13, s17
 80047be:	ee73 3aa7 	vadd.f32	s7, s7, s15
 80047c2:	f103 0320 	add.w	r3, r3, #32
 80047c6:	f47f aed8 	bne.w	800457a <arm_fir_f32+0xfe>
 80047ca:	eb09 0104 	add.w	r1, r9, r4
 80047ce:	46e3      	mov	fp, ip
 80047d0:	b3a2      	cbz	r2, 800483c <arm_fir_f32+0x3c0>
 80047d2:	4613      	mov	r3, r2
 80047d4:	ecbb 6a01 	vldmia	fp!, {s12}
 80047d8:	ecf1 7a01 	vldmia	r1!, {s15}
 80047dc:	ee23 3a06 	vmul.f32	s6, s6, s12
 80047e0:	ee22 4a86 	vmul.f32	s8, s5, s12
 80047e4:	ee62 4a06 	vmul.f32	s9, s4, s12
 80047e8:	ee21 5a86 	vmul.f32	s10, s3, s12
 80047ec:	ee61 5a06 	vmul.f32	s11, s2, s12
 80047f0:	ee60 6a86 	vmul.f32	s13, s1, s12
 80047f4:	ee20 7a06 	vmul.f32	s14, s0, s12
 80047f8:	ee27 6a86 	vmul.f32	s12, s15, s12
 80047fc:	3b01      	subs	r3, #1
 80047fe:	ee3d da03 	vadd.f32	s26, s26, s6
 8004802:	ee7c ca84 	vadd.f32	s25, s25, s8
 8004806:	eeb0 3a62 	vmov.f32	s6, s5
 800480a:	ee3c ca24 	vadd.f32	s24, s24, s9
 800480e:	eef0 2a42 	vmov.f32	s5, s4
 8004812:	ee7b ba85 	vadd.f32	s23, s23, s10
 8004816:	eeb0 2a61 	vmov.f32	s4, s3
 800481a:	ee7a aaa5 	vadd.f32	s21, s21, s11
 800481e:	eef0 1a41 	vmov.f32	s3, s2
 8004822:	ee79 9aa6 	vadd.f32	s19, s19, s13
 8004826:	eeb0 1a60 	vmov.f32	s2, s1
 800482a:	ee78 8a87 	vadd.f32	s17, s17, s14
 800482e:	eef0 0a40 	vmov.f32	s1, s0
 8004832:	ee73 3a86 	vadd.f32	s7, s7, s12
 8004836:	eeb0 0a67 	vmov.f32	s0, s15
 800483a:	d1cb      	bne.n	80047d4 <arm_fir_f32+0x358>
 800483c:	f1be 0e01 	subs.w	lr, lr, #1
 8004840:	ed05 da08 	vstr	s26, [r5, #-32]	@ 0xffffffe0
 8004844:	ed45 ca07 	vstr	s25, [r5, #-28]	@ 0xffffffe4
 8004848:	ed05 ca06 	vstr	s24, [r5, #-24]	@ 0xffffffe8
 800484c:	ed45 ba05 	vstr	s23, [r5, #-20]	@ 0xffffffec
 8004850:	ed45 aa04 	vstr	s21, [r5, #-16]
 8004854:	ed45 9a03 	vstr	s19, [r5, #-12]
 8004858:	ed45 8a02 	vstr	s17, [r5, #-8]
 800485c:	ed45 3a01 	vstr	s7, [r5, #-4]
 8004860:	f107 0720 	add.w	r7, r7, #32
 8004864:	f106 0620 	add.w	r6, r6, #32
 8004868:	f104 0420 	add.w	r4, r4, #32
 800486c:	f105 0520 	add.w	r5, r5, #32
 8004870:	f47f ae3c 	bne.w	80044ec <arm_fir_f32+0x70>
 8004874:	9b02      	ldr	r3, [sp, #8]
 8004876:	9800      	ldr	r0, [sp, #0]
 8004878:	f8dd c018 	ldr.w	ip, [sp, #24]
 800487c:	9907      	ldr	r1, [sp, #28]
 800487e:	015b      	lsls	r3, r3, #5
 8004880:	4652      	mov	r2, sl
 8004882:	4418      	add	r0, r3
 8004884:	9000      	str	r0, [sp, #0]
 8004886:	4419      	add	r1, r3
 8004888:	449c      	add	ip, r3
 800488a:	441a      	add	r2, r3
 800488c:	9b04      	ldr	r3, [sp, #16]
 800488e:	f013 0e07 	ands.w	lr, r3, #7
 8004892:	d01f      	beq.n	80048d4 <arm_fir_f32+0x458>
 8004894:	9f00      	ldr	r7, [sp, #0]
 8004896:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800489a:	4676      	mov	r6, lr
 800489c:	4665      	mov	r5, ip
 800489e:	f851 3b04 	ldr.w	r3, [r1], #4
 80048a2:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80048ec <arm_fir_f32+0x470>
 80048a6:	f847 3b04 	str.w	r3, [r7], #4
 80048aa:	4644      	mov	r4, r8
 80048ac:	464b      	mov	r3, r9
 80048ae:	4628      	mov	r0, r5
 80048b0:	ecb0 7a01 	vldmia	r0!, {s14}
 80048b4:	ecf4 7a01 	vldmia	r4!, {s15}
 80048b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048bc:	3b01      	subs	r3, #1
 80048be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80048c2:	d1f5      	bne.n	80048b0 <arm_fir_f32+0x434>
 80048c4:	3e01      	subs	r6, #1
 80048c6:	ece2 6a01 	vstmia	r2!, {s13}
 80048ca:	f105 0504 	add.w	r5, r5, #4
 80048ce:	d1e6      	bne.n	800489e <arm_fir_f32+0x422>
 80048d0:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 80048d4:	9b01      	ldr	r3, [sp, #4]
 80048d6:	1e59      	subs	r1, r3, #1
 80048d8:	9b03      	ldr	r3, [sp, #12]
 80048da:	088e      	lsrs	r6, r1, #2
 80048dc:	685c      	ldr	r4, [r3, #4]
 80048de:	d020      	beq.n	8004922 <arm_fir_f32+0x4a6>
 80048e0:	f104 0210 	add.w	r2, r4, #16
 80048e4:	f10c 0310 	add.w	r3, ip, #16
 80048e8:	4630      	mov	r0, r6
 80048ea:	e001      	b.n	80048f0 <arm_fir_f32+0x474>
 80048ec:	00000000 	.word	0x00000000
 80048f0:	f853 5c10 	ldr.w	r5, [r3, #-16]
 80048f4:	f842 5c10 	str.w	r5, [r2, #-16]
 80048f8:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 80048fc:	f842 5c0c 	str.w	r5, [r2, #-12]
 8004900:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8004904:	f842 5c08 	str.w	r5, [r2, #-8]
 8004908:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800490c:	f842 5c04 	str.w	r5, [r2, #-4]
 8004910:	3801      	subs	r0, #1
 8004912:	f103 0310 	add.w	r3, r3, #16
 8004916:	f102 0210 	add.w	r2, r2, #16
 800491a:	d1e9      	bne.n	80048f0 <arm_fir_f32+0x474>
 800491c:	0133      	lsls	r3, r6, #4
 800491e:	441c      	add	r4, r3
 8004920:	449c      	add	ip, r3
 8004922:	f011 0303 	ands.w	r3, r1, #3
 8004926:	d006      	beq.n	8004936 <arm_fir_f32+0x4ba>
 8004928:	4622      	mov	r2, r4
 800492a:	f85c 1b04 	ldr.w	r1, [ip], #4
 800492e:	f842 1b04 	str.w	r1, [r2], #4
 8004932:	3b01      	subs	r3, #1
 8004934:	d1f9      	bne.n	800492a <arm_fir_f32+0x4ae>
 8004936:	b009      	add	sp, #36	@ 0x24
 8004938:	ecbd 8b10 	vpop	{d8-d15}
 800493c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004940:	46c3      	mov	fp, r8
 8004942:	e745      	b.n	80047d0 <arm_fir_f32+0x354>

08004944 <sniprintf>:
 8004944:	b40c      	push	{r2, r3}
 8004946:	b530      	push	{r4, r5, lr}
 8004948:	4b17      	ldr	r3, [pc, #92]	@ (80049a8 <sniprintf+0x64>)
 800494a:	1e0c      	subs	r4, r1, #0
 800494c:	681d      	ldr	r5, [r3, #0]
 800494e:	b09d      	sub	sp, #116	@ 0x74
 8004950:	da08      	bge.n	8004964 <sniprintf+0x20>
 8004952:	238b      	movs	r3, #139	@ 0x8b
 8004954:	602b      	str	r3, [r5, #0]
 8004956:	f04f 30ff 	mov.w	r0, #4294967295
 800495a:	b01d      	add	sp, #116	@ 0x74
 800495c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004960:	b002      	add	sp, #8
 8004962:	4770      	bx	lr
 8004964:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004968:	f8ad 3014 	strh.w	r3, [sp, #20]
 800496c:	bf14      	ite	ne
 800496e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004972:	4623      	moveq	r3, r4
 8004974:	9304      	str	r3, [sp, #16]
 8004976:	9307      	str	r3, [sp, #28]
 8004978:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800497c:	9002      	str	r0, [sp, #8]
 800497e:	9006      	str	r0, [sp, #24]
 8004980:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004984:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004986:	ab21      	add	r3, sp, #132	@ 0x84
 8004988:	a902      	add	r1, sp, #8
 800498a:	4628      	mov	r0, r5
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	f000 f995 	bl	8004cbc <_svfiprintf_r>
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	bfbc      	itt	lt
 8004996:	238b      	movlt	r3, #139	@ 0x8b
 8004998:	602b      	strlt	r3, [r5, #0]
 800499a:	2c00      	cmp	r4, #0
 800499c:	d0dd      	beq.n	800495a <sniprintf+0x16>
 800499e:	9b02      	ldr	r3, [sp, #8]
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	e7d9      	b.n	800495a <sniprintf+0x16>
 80049a6:	bf00      	nop
 80049a8:	20000094 	.word	0x20000094

080049ac <memset>:
 80049ac:	4402      	add	r2, r0
 80049ae:	4603      	mov	r3, r0
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d100      	bne.n	80049b6 <memset+0xa>
 80049b4:	4770      	bx	lr
 80049b6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ba:	e7f9      	b.n	80049b0 <memset+0x4>

080049bc <__errno>:
 80049bc:	4b01      	ldr	r3, [pc, #4]	@ (80049c4 <__errno+0x8>)
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20000094 	.word	0x20000094

080049c8 <__libc_init_array>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004a00 <__libc_init_array+0x38>)
 80049cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004a04 <__libc_init_array+0x3c>)
 80049ce:	1b64      	subs	r4, r4, r5
 80049d0:	10a4      	asrs	r4, r4, #2
 80049d2:	2600      	movs	r6, #0
 80049d4:	42a6      	cmp	r6, r4
 80049d6:	d109      	bne.n	80049ec <__libc_init_array+0x24>
 80049d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004a08 <__libc_init_array+0x40>)
 80049da:	4c0c      	ldr	r4, [pc, #48]	@ (8004a0c <__libc_init_array+0x44>)
 80049dc:	f000 fc66 	bl	80052ac <_init>
 80049e0:	1b64      	subs	r4, r4, r5
 80049e2:	10a4      	asrs	r4, r4, #2
 80049e4:	2600      	movs	r6, #0
 80049e6:	42a6      	cmp	r6, r4
 80049e8:	d105      	bne.n	80049f6 <__libc_init_array+0x2e>
 80049ea:	bd70      	pop	{r4, r5, r6, pc}
 80049ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f0:	4798      	blx	r3
 80049f2:	3601      	adds	r6, #1
 80049f4:	e7ee      	b.n	80049d4 <__libc_init_array+0xc>
 80049f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049fa:	4798      	blx	r3
 80049fc:	3601      	adds	r6, #1
 80049fe:	e7f2      	b.n	80049e6 <__libc_init_array+0x1e>
 8004a00:	08005330 	.word	0x08005330
 8004a04:	08005330 	.word	0x08005330
 8004a08:	08005330 	.word	0x08005330
 8004a0c:	08005334 	.word	0x08005334

08004a10 <__retarget_lock_acquire_recursive>:
 8004a10:	4770      	bx	lr

08004a12 <__retarget_lock_release_recursive>:
 8004a12:	4770      	bx	lr

08004a14 <_free_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4605      	mov	r5, r0
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	d041      	beq.n	8004aa0 <_free_r+0x8c>
 8004a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a20:	1f0c      	subs	r4, r1, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	bfb8      	it	lt
 8004a26:	18e4      	addlt	r4, r4, r3
 8004a28:	f000 f8e0 	bl	8004bec <__malloc_lock>
 8004a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa4 <_free_r+0x90>)
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	b933      	cbnz	r3, 8004a40 <_free_r+0x2c>
 8004a32:	6063      	str	r3, [r4, #4]
 8004a34:	6014      	str	r4, [r2, #0]
 8004a36:	4628      	mov	r0, r5
 8004a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a3c:	f000 b8dc 	b.w	8004bf8 <__malloc_unlock>
 8004a40:	42a3      	cmp	r3, r4
 8004a42:	d908      	bls.n	8004a56 <_free_r+0x42>
 8004a44:	6820      	ldr	r0, [r4, #0]
 8004a46:	1821      	adds	r1, r4, r0
 8004a48:	428b      	cmp	r3, r1
 8004a4a:	bf01      	itttt	eq
 8004a4c:	6819      	ldreq	r1, [r3, #0]
 8004a4e:	685b      	ldreq	r3, [r3, #4]
 8004a50:	1809      	addeq	r1, r1, r0
 8004a52:	6021      	streq	r1, [r4, #0]
 8004a54:	e7ed      	b.n	8004a32 <_free_r+0x1e>
 8004a56:	461a      	mov	r2, r3
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	b10b      	cbz	r3, 8004a60 <_free_r+0x4c>
 8004a5c:	42a3      	cmp	r3, r4
 8004a5e:	d9fa      	bls.n	8004a56 <_free_r+0x42>
 8004a60:	6811      	ldr	r1, [r2, #0]
 8004a62:	1850      	adds	r0, r2, r1
 8004a64:	42a0      	cmp	r0, r4
 8004a66:	d10b      	bne.n	8004a80 <_free_r+0x6c>
 8004a68:	6820      	ldr	r0, [r4, #0]
 8004a6a:	4401      	add	r1, r0
 8004a6c:	1850      	adds	r0, r2, r1
 8004a6e:	4283      	cmp	r3, r0
 8004a70:	6011      	str	r1, [r2, #0]
 8004a72:	d1e0      	bne.n	8004a36 <_free_r+0x22>
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	6053      	str	r3, [r2, #4]
 8004a7a:	4408      	add	r0, r1
 8004a7c:	6010      	str	r0, [r2, #0]
 8004a7e:	e7da      	b.n	8004a36 <_free_r+0x22>
 8004a80:	d902      	bls.n	8004a88 <_free_r+0x74>
 8004a82:	230c      	movs	r3, #12
 8004a84:	602b      	str	r3, [r5, #0]
 8004a86:	e7d6      	b.n	8004a36 <_free_r+0x22>
 8004a88:	6820      	ldr	r0, [r4, #0]
 8004a8a:	1821      	adds	r1, r4, r0
 8004a8c:	428b      	cmp	r3, r1
 8004a8e:	bf04      	itt	eq
 8004a90:	6819      	ldreq	r1, [r3, #0]
 8004a92:	685b      	ldreq	r3, [r3, #4]
 8004a94:	6063      	str	r3, [r4, #4]
 8004a96:	bf04      	itt	eq
 8004a98:	1809      	addeq	r1, r1, r0
 8004a9a:	6021      	streq	r1, [r4, #0]
 8004a9c:	6054      	str	r4, [r2, #4]
 8004a9e:	e7ca      	b.n	8004a36 <_free_r+0x22>
 8004aa0:	bd38      	pop	{r3, r4, r5, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000748 	.word	0x20000748

08004aa8 <sbrk_aligned>:
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	4e0f      	ldr	r6, [pc, #60]	@ (8004ae8 <sbrk_aligned+0x40>)
 8004aac:	460c      	mov	r4, r1
 8004aae:	6831      	ldr	r1, [r6, #0]
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	b911      	cbnz	r1, 8004aba <sbrk_aligned+0x12>
 8004ab4:	f000 fba6 	bl	8005204 <_sbrk_r>
 8004ab8:	6030      	str	r0, [r6, #0]
 8004aba:	4621      	mov	r1, r4
 8004abc:	4628      	mov	r0, r5
 8004abe:	f000 fba1 	bl	8005204 <_sbrk_r>
 8004ac2:	1c43      	adds	r3, r0, #1
 8004ac4:	d103      	bne.n	8004ace <sbrk_aligned+0x26>
 8004ac6:	f04f 34ff 	mov.w	r4, #4294967295
 8004aca:	4620      	mov	r0, r4
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
 8004ace:	1cc4      	adds	r4, r0, #3
 8004ad0:	f024 0403 	bic.w	r4, r4, #3
 8004ad4:	42a0      	cmp	r0, r4
 8004ad6:	d0f8      	beq.n	8004aca <sbrk_aligned+0x22>
 8004ad8:	1a21      	subs	r1, r4, r0
 8004ada:	4628      	mov	r0, r5
 8004adc:	f000 fb92 	bl	8005204 <_sbrk_r>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d1f2      	bne.n	8004aca <sbrk_aligned+0x22>
 8004ae4:	e7ef      	b.n	8004ac6 <sbrk_aligned+0x1e>
 8004ae6:	bf00      	nop
 8004ae8:	20000744 	.word	0x20000744

08004aec <_malloc_r>:
 8004aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004af0:	1ccd      	adds	r5, r1, #3
 8004af2:	f025 0503 	bic.w	r5, r5, #3
 8004af6:	3508      	adds	r5, #8
 8004af8:	2d0c      	cmp	r5, #12
 8004afa:	bf38      	it	cc
 8004afc:	250c      	movcc	r5, #12
 8004afe:	2d00      	cmp	r5, #0
 8004b00:	4606      	mov	r6, r0
 8004b02:	db01      	blt.n	8004b08 <_malloc_r+0x1c>
 8004b04:	42a9      	cmp	r1, r5
 8004b06:	d904      	bls.n	8004b12 <_malloc_r+0x26>
 8004b08:	230c      	movs	r3, #12
 8004b0a:	6033      	str	r3, [r6, #0]
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004be8 <_malloc_r+0xfc>
 8004b16:	f000 f869 	bl	8004bec <__malloc_lock>
 8004b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b1e:	461c      	mov	r4, r3
 8004b20:	bb44      	cbnz	r4, 8004b74 <_malloc_r+0x88>
 8004b22:	4629      	mov	r1, r5
 8004b24:	4630      	mov	r0, r6
 8004b26:	f7ff ffbf 	bl	8004aa8 <sbrk_aligned>
 8004b2a:	1c43      	adds	r3, r0, #1
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	d158      	bne.n	8004be2 <_malloc_r+0xf6>
 8004b30:	f8d8 4000 	ldr.w	r4, [r8]
 8004b34:	4627      	mov	r7, r4
 8004b36:	2f00      	cmp	r7, #0
 8004b38:	d143      	bne.n	8004bc2 <_malloc_r+0xd6>
 8004b3a:	2c00      	cmp	r4, #0
 8004b3c:	d04b      	beq.n	8004bd6 <_malloc_r+0xea>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	4639      	mov	r1, r7
 8004b42:	4630      	mov	r0, r6
 8004b44:	eb04 0903 	add.w	r9, r4, r3
 8004b48:	f000 fb5c 	bl	8005204 <_sbrk_r>
 8004b4c:	4581      	cmp	r9, r0
 8004b4e:	d142      	bne.n	8004bd6 <_malloc_r+0xea>
 8004b50:	6821      	ldr	r1, [r4, #0]
 8004b52:	1a6d      	subs	r5, r5, r1
 8004b54:	4629      	mov	r1, r5
 8004b56:	4630      	mov	r0, r6
 8004b58:	f7ff ffa6 	bl	8004aa8 <sbrk_aligned>
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d03a      	beq.n	8004bd6 <_malloc_r+0xea>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	442b      	add	r3, r5
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	f8d8 3000 	ldr.w	r3, [r8]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	bb62      	cbnz	r2, 8004bc8 <_malloc_r+0xdc>
 8004b6e:	f8c8 7000 	str.w	r7, [r8]
 8004b72:	e00f      	b.n	8004b94 <_malloc_r+0xa8>
 8004b74:	6822      	ldr	r2, [r4, #0]
 8004b76:	1b52      	subs	r2, r2, r5
 8004b78:	d420      	bmi.n	8004bbc <_malloc_r+0xd0>
 8004b7a:	2a0b      	cmp	r2, #11
 8004b7c:	d917      	bls.n	8004bae <_malloc_r+0xc2>
 8004b7e:	1961      	adds	r1, r4, r5
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	6025      	str	r5, [r4, #0]
 8004b84:	bf18      	it	ne
 8004b86:	6059      	strne	r1, [r3, #4]
 8004b88:	6863      	ldr	r3, [r4, #4]
 8004b8a:	bf08      	it	eq
 8004b8c:	f8c8 1000 	streq.w	r1, [r8]
 8004b90:	5162      	str	r2, [r4, r5]
 8004b92:	604b      	str	r3, [r1, #4]
 8004b94:	4630      	mov	r0, r6
 8004b96:	f000 f82f 	bl	8004bf8 <__malloc_unlock>
 8004b9a:	f104 000b 	add.w	r0, r4, #11
 8004b9e:	1d23      	adds	r3, r4, #4
 8004ba0:	f020 0007 	bic.w	r0, r0, #7
 8004ba4:	1ac2      	subs	r2, r0, r3
 8004ba6:	bf1c      	itt	ne
 8004ba8:	1a1b      	subne	r3, r3, r0
 8004baa:	50a3      	strne	r3, [r4, r2]
 8004bac:	e7af      	b.n	8004b0e <_malloc_r+0x22>
 8004bae:	6862      	ldr	r2, [r4, #4]
 8004bb0:	42a3      	cmp	r3, r4
 8004bb2:	bf0c      	ite	eq
 8004bb4:	f8c8 2000 	streq.w	r2, [r8]
 8004bb8:	605a      	strne	r2, [r3, #4]
 8004bba:	e7eb      	b.n	8004b94 <_malloc_r+0xa8>
 8004bbc:	4623      	mov	r3, r4
 8004bbe:	6864      	ldr	r4, [r4, #4]
 8004bc0:	e7ae      	b.n	8004b20 <_malloc_r+0x34>
 8004bc2:	463c      	mov	r4, r7
 8004bc4:	687f      	ldr	r7, [r7, #4]
 8004bc6:	e7b6      	b.n	8004b36 <_malloc_r+0x4a>
 8004bc8:	461a      	mov	r2, r3
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	42a3      	cmp	r3, r4
 8004bce:	d1fb      	bne.n	8004bc8 <_malloc_r+0xdc>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	6053      	str	r3, [r2, #4]
 8004bd4:	e7de      	b.n	8004b94 <_malloc_r+0xa8>
 8004bd6:	230c      	movs	r3, #12
 8004bd8:	6033      	str	r3, [r6, #0]
 8004bda:	4630      	mov	r0, r6
 8004bdc:	f000 f80c 	bl	8004bf8 <__malloc_unlock>
 8004be0:	e794      	b.n	8004b0c <_malloc_r+0x20>
 8004be2:	6005      	str	r5, [r0, #0]
 8004be4:	e7d6      	b.n	8004b94 <_malloc_r+0xa8>
 8004be6:	bf00      	nop
 8004be8:	20000748 	.word	0x20000748

08004bec <__malloc_lock>:
 8004bec:	4801      	ldr	r0, [pc, #4]	@ (8004bf4 <__malloc_lock+0x8>)
 8004bee:	f7ff bf0f 	b.w	8004a10 <__retarget_lock_acquire_recursive>
 8004bf2:	bf00      	nop
 8004bf4:	20000740 	.word	0x20000740

08004bf8 <__malloc_unlock>:
 8004bf8:	4801      	ldr	r0, [pc, #4]	@ (8004c00 <__malloc_unlock+0x8>)
 8004bfa:	f7ff bf0a 	b.w	8004a12 <__retarget_lock_release_recursive>
 8004bfe:	bf00      	nop
 8004c00:	20000740 	.word	0x20000740

08004c04 <__ssputs_r>:
 8004c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c08:	688e      	ldr	r6, [r1, #8]
 8004c0a:	461f      	mov	r7, r3
 8004c0c:	42be      	cmp	r6, r7
 8004c0e:	680b      	ldr	r3, [r1, #0]
 8004c10:	4682      	mov	sl, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	4690      	mov	r8, r2
 8004c16:	d82d      	bhi.n	8004c74 <__ssputs_r+0x70>
 8004c18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c20:	d026      	beq.n	8004c70 <__ssputs_r+0x6c>
 8004c22:	6965      	ldr	r5, [r4, #20]
 8004c24:	6909      	ldr	r1, [r1, #16]
 8004c26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c2a:	eba3 0901 	sub.w	r9, r3, r1
 8004c2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c32:	1c7b      	adds	r3, r7, #1
 8004c34:	444b      	add	r3, r9
 8004c36:	106d      	asrs	r5, r5, #1
 8004c38:	429d      	cmp	r5, r3
 8004c3a:	bf38      	it	cc
 8004c3c:	461d      	movcc	r5, r3
 8004c3e:	0553      	lsls	r3, r2, #21
 8004c40:	d527      	bpl.n	8004c92 <__ssputs_r+0x8e>
 8004c42:	4629      	mov	r1, r5
 8004c44:	f7ff ff52 	bl	8004aec <_malloc_r>
 8004c48:	4606      	mov	r6, r0
 8004c4a:	b360      	cbz	r0, 8004ca6 <__ssputs_r+0xa2>
 8004c4c:	6921      	ldr	r1, [r4, #16]
 8004c4e:	464a      	mov	r2, r9
 8004c50:	f000 fae8 	bl	8005224 <memcpy>
 8004c54:	89a3      	ldrh	r3, [r4, #12]
 8004c56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c5e:	81a3      	strh	r3, [r4, #12]
 8004c60:	6126      	str	r6, [r4, #16]
 8004c62:	6165      	str	r5, [r4, #20]
 8004c64:	444e      	add	r6, r9
 8004c66:	eba5 0509 	sub.w	r5, r5, r9
 8004c6a:	6026      	str	r6, [r4, #0]
 8004c6c:	60a5      	str	r5, [r4, #8]
 8004c6e:	463e      	mov	r6, r7
 8004c70:	42be      	cmp	r6, r7
 8004c72:	d900      	bls.n	8004c76 <__ssputs_r+0x72>
 8004c74:	463e      	mov	r6, r7
 8004c76:	6820      	ldr	r0, [r4, #0]
 8004c78:	4632      	mov	r2, r6
 8004c7a:	4641      	mov	r1, r8
 8004c7c:	f000 faa8 	bl	80051d0 <memmove>
 8004c80:	68a3      	ldr	r3, [r4, #8]
 8004c82:	1b9b      	subs	r3, r3, r6
 8004c84:	60a3      	str	r3, [r4, #8]
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	4433      	add	r3, r6
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c92:	462a      	mov	r2, r5
 8004c94:	f000 fad4 	bl	8005240 <_realloc_r>
 8004c98:	4606      	mov	r6, r0
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d1e0      	bne.n	8004c60 <__ssputs_r+0x5c>
 8004c9e:	6921      	ldr	r1, [r4, #16]
 8004ca0:	4650      	mov	r0, sl
 8004ca2:	f7ff feb7 	bl	8004a14 <_free_r>
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	f8ca 3000 	str.w	r3, [sl]
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cb2:	81a3      	strh	r3, [r4, #12]
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb8:	e7e9      	b.n	8004c8e <__ssputs_r+0x8a>
	...

08004cbc <_svfiprintf_r>:
 8004cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc0:	4698      	mov	r8, r3
 8004cc2:	898b      	ldrh	r3, [r1, #12]
 8004cc4:	061b      	lsls	r3, r3, #24
 8004cc6:	b09d      	sub	sp, #116	@ 0x74
 8004cc8:	4607      	mov	r7, r0
 8004cca:	460d      	mov	r5, r1
 8004ccc:	4614      	mov	r4, r2
 8004cce:	d510      	bpl.n	8004cf2 <_svfiprintf_r+0x36>
 8004cd0:	690b      	ldr	r3, [r1, #16]
 8004cd2:	b973      	cbnz	r3, 8004cf2 <_svfiprintf_r+0x36>
 8004cd4:	2140      	movs	r1, #64	@ 0x40
 8004cd6:	f7ff ff09 	bl	8004aec <_malloc_r>
 8004cda:	6028      	str	r0, [r5, #0]
 8004cdc:	6128      	str	r0, [r5, #16]
 8004cde:	b930      	cbnz	r0, 8004cee <_svfiprintf_r+0x32>
 8004ce0:	230c      	movs	r3, #12
 8004ce2:	603b      	str	r3, [r7, #0]
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	b01d      	add	sp, #116	@ 0x74
 8004cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cee:	2340      	movs	r3, #64	@ 0x40
 8004cf0:	616b      	str	r3, [r5, #20]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cf6:	2320      	movs	r3, #32
 8004cf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004cfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d00:	2330      	movs	r3, #48	@ 0x30
 8004d02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ea0 <_svfiprintf_r+0x1e4>
 8004d06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d0a:	f04f 0901 	mov.w	r9, #1
 8004d0e:	4623      	mov	r3, r4
 8004d10:	469a      	mov	sl, r3
 8004d12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d16:	b10a      	cbz	r2, 8004d1c <_svfiprintf_r+0x60>
 8004d18:	2a25      	cmp	r2, #37	@ 0x25
 8004d1a:	d1f9      	bne.n	8004d10 <_svfiprintf_r+0x54>
 8004d1c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d20:	d00b      	beq.n	8004d3a <_svfiprintf_r+0x7e>
 8004d22:	465b      	mov	r3, fp
 8004d24:	4622      	mov	r2, r4
 8004d26:	4629      	mov	r1, r5
 8004d28:	4638      	mov	r0, r7
 8004d2a:	f7ff ff6b 	bl	8004c04 <__ssputs_r>
 8004d2e:	3001      	adds	r0, #1
 8004d30:	f000 80a7 	beq.w	8004e82 <_svfiprintf_r+0x1c6>
 8004d34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d36:	445a      	add	r2, fp
 8004d38:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 809f 	beq.w	8004e82 <_svfiprintf_r+0x1c6>
 8004d44:	2300      	movs	r3, #0
 8004d46:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d4e:	f10a 0a01 	add.w	sl, sl, #1
 8004d52:	9304      	str	r3, [sp, #16]
 8004d54:	9307      	str	r3, [sp, #28]
 8004d56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d5c:	4654      	mov	r4, sl
 8004d5e:	2205      	movs	r2, #5
 8004d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d64:	484e      	ldr	r0, [pc, #312]	@ (8004ea0 <_svfiprintf_r+0x1e4>)
 8004d66:	f7fb fa33 	bl	80001d0 <memchr>
 8004d6a:	9a04      	ldr	r2, [sp, #16]
 8004d6c:	b9d8      	cbnz	r0, 8004da6 <_svfiprintf_r+0xea>
 8004d6e:	06d0      	lsls	r0, r2, #27
 8004d70:	bf44      	itt	mi
 8004d72:	2320      	movmi	r3, #32
 8004d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d78:	0711      	lsls	r1, r2, #28
 8004d7a:	bf44      	itt	mi
 8004d7c:	232b      	movmi	r3, #43	@ 0x2b
 8004d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d82:	f89a 3000 	ldrb.w	r3, [sl]
 8004d86:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d88:	d015      	beq.n	8004db6 <_svfiprintf_r+0xfa>
 8004d8a:	9a07      	ldr	r2, [sp, #28]
 8004d8c:	4654      	mov	r4, sl
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f04f 0c0a 	mov.w	ip, #10
 8004d94:	4621      	mov	r1, r4
 8004d96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d9a:	3b30      	subs	r3, #48	@ 0x30
 8004d9c:	2b09      	cmp	r3, #9
 8004d9e:	d94b      	bls.n	8004e38 <_svfiprintf_r+0x17c>
 8004da0:	b1b0      	cbz	r0, 8004dd0 <_svfiprintf_r+0x114>
 8004da2:	9207      	str	r2, [sp, #28]
 8004da4:	e014      	b.n	8004dd0 <_svfiprintf_r+0x114>
 8004da6:	eba0 0308 	sub.w	r3, r0, r8
 8004daa:	fa09 f303 	lsl.w	r3, r9, r3
 8004dae:	4313      	orrs	r3, r2
 8004db0:	9304      	str	r3, [sp, #16]
 8004db2:	46a2      	mov	sl, r4
 8004db4:	e7d2      	b.n	8004d5c <_svfiprintf_r+0xa0>
 8004db6:	9b03      	ldr	r3, [sp, #12]
 8004db8:	1d19      	adds	r1, r3, #4
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	9103      	str	r1, [sp, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bfbb      	ittet	lt
 8004dc2:	425b      	neglt	r3, r3
 8004dc4:	f042 0202 	orrlt.w	r2, r2, #2
 8004dc8:	9307      	strge	r3, [sp, #28]
 8004dca:	9307      	strlt	r3, [sp, #28]
 8004dcc:	bfb8      	it	lt
 8004dce:	9204      	strlt	r2, [sp, #16]
 8004dd0:	7823      	ldrb	r3, [r4, #0]
 8004dd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dd4:	d10a      	bne.n	8004dec <_svfiprintf_r+0x130>
 8004dd6:	7863      	ldrb	r3, [r4, #1]
 8004dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dda:	d132      	bne.n	8004e42 <_svfiprintf_r+0x186>
 8004ddc:	9b03      	ldr	r3, [sp, #12]
 8004dde:	1d1a      	adds	r2, r3, #4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	9203      	str	r2, [sp, #12]
 8004de4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004de8:	3402      	adds	r4, #2
 8004dea:	9305      	str	r3, [sp, #20]
 8004dec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004eb0 <_svfiprintf_r+0x1f4>
 8004df0:	7821      	ldrb	r1, [r4, #0]
 8004df2:	2203      	movs	r2, #3
 8004df4:	4650      	mov	r0, sl
 8004df6:	f7fb f9eb 	bl	80001d0 <memchr>
 8004dfa:	b138      	cbz	r0, 8004e0c <_svfiprintf_r+0x150>
 8004dfc:	9b04      	ldr	r3, [sp, #16]
 8004dfe:	eba0 000a 	sub.w	r0, r0, sl
 8004e02:	2240      	movs	r2, #64	@ 0x40
 8004e04:	4082      	lsls	r2, r0
 8004e06:	4313      	orrs	r3, r2
 8004e08:	3401      	adds	r4, #1
 8004e0a:	9304      	str	r3, [sp, #16]
 8004e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e10:	4824      	ldr	r0, [pc, #144]	@ (8004ea4 <_svfiprintf_r+0x1e8>)
 8004e12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e16:	2206      	movs	r2, #6
 8004e18:	f7fb f9da 	bl	80001d0 <memchr>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d036      	beq.n	8004e8e <_svfiprintf_r+0x1d2>
 8004e20:	4b21      	ldr	r3, [pc, #132]	@ (8004ea8 <_svfiprintf_r+0x1ec>)
 8004e22:	bb1b      	cbnz	r3, 8004e6c <_svfiprintf_r+0x1b0>
 8004e24:	9b03      	ldr	r3, [sp, #12]
 8004e26:	3307      	adds	r3, #7
 8004e28:	f023 0307 	bic.w	r3, r3, #7
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	9303      	str	r3, [sp, #12]
 8004e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e32:	4433      	add	r3, r6
 8004e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e36:	e76a      	b.n	8004d0e <_svfiprintf_r+0x52>
 8004e38:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e3c:	460c      	mov	r4, r1
 8004e3e:	2001      	movs	r0, #1
 8004e40:	e7a8      	b.n	8004d94 <_svfiprintf_r+0xd8>
 8004e42:	2300      	movs	r3, #0
 8004e44:	3401      	adds	r4, #1
 8004e46:	9305      	str	r3, [sp, #20]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	f04f 0c0a 	mov.w	ip, #10
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e54:	3a30      	subs	r2, #48	@ 0x30
 8004e56:	2a09      	cmp	r2, #9
 8004e58:	d903      	bls.n	8004e62 <_svfiprintf_r+0x1a6>
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0c6      	beq.n	8004dec <_svfiprintf_r+0x130>
 8004e5e:	9105      	str	r1, [sp, #20]
 8004e60:	e7c4      	b.n	8004dec <_svfiprintf_r+0x130>
 8004e62:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e66:	4604      	mov	r4, r0
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e7f0      	b.n	8004e4e <_svfiprintf_r+0x192>
 8004e6c:	ab03      	add	r3, sp, #12
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	462a      	mov	r2, r5
 8004e72:	4b0e      	ldr	r3, [pc, #56]	@ (8004eac <_svfiprintf_r+0x1f0>)
 8004e74:	a904      	add	r1, sp, #16
 8004e76:	4638      	mov	r0, r7
 8004e78:	f3af 8000 	nop.w
 8004e7c:	1c42      	adds	r2, r0, #1
 8004e7e:	4606      	mov	r6, r0
 8004e80:	d1d6      	bne.n	8004e30 <_svfiprintf_r+0x174>
 8004e82:	89ab      	ldrh	r3, [r5, #12]
 8004e84:	065b      	lsls	r3, r3, #25
 8004e86:	f53f af2d 	bmi.w	8004ce4 <_svfiprintf_r+0x28>
 8004e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e8c:	e72c      	b.n	8004ce8 <_svfiprintf_r+0x2c>
 8004e8e:	ab03      	add	r3, sp, #12
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	462a      	mov	r2, r5
 8004e94:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <_svfiprintf_r+0x1f0>)
 8004e96:	a904      	add	r1, sp, #16
 8004e98:	4638      	mov	r0, r7
 8004e9a:	f000 f879 	bl	8004f90 <_printf_i>
 8004e9e:	e7ed      	b.n	8004e7c <_svfiprintf_r+0x1c0>
 8004ea0:	080052f4 	.word	0x080052f4
 8004ea4:	080052fe 	.word	0x080052fe
 8004ea8:	00000000 	.word	0x00000000
 8004eac:	08004c05 	.word	0x08004c05
 8004eb0:	080052fa 	.word	0x080052fa

08004eb4 <_printf_common>:
 8004eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb8:	4616      	mov	r6, r2
 8004eba:	4698      	mov	r8, r3
 8004ebc:	688a      	ldr	r2, [r1, #8]
 8004ebe:	690b      	ldr	r3, [r1, #16]
 8004ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	bfb8      	it	lt
 8004ec8:	4613      	movlt	r3, r2
 8004eca:	6033      	str	r3, [r6, #0]
 8004ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ed0:	4607      	mov	r7, r0
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	b10a      	cbz	r2, 8004eda <_printf_common+0x26>
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	6033      	str	r3, [r6, #0]
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	0699      	lsls	r1, r3, #26
 8004ede:	bf42      	ittt	mi
 8004ee0:	6833      	ldrmi	r3, [r6, #0]
 8004ee2:	3302      	addmi	r3, #2
 8004ee4:	6033      	strmi	r3, [r6, #0]
 8004ee6:	6825      	ldr	r5, [r4, #0]
 8004ee8:	f015 0506 	ands.w	r5, r5, #6
 8004eec:	d106      	bne.n	8004efc <_printf_common+0x48>
 8004eee:	f104 0a19 	add.w	sl, r4, #25
 8004ef2:	68e3      	ldr	r3, [r4, #12]
 8004ef4:	6832      	ldr	r2, [r6, #0]
 8004ef6:	1a9b      	subs	r3, r3, r2
 8004ef8:	42ab      	cmp	r3, r5
 8004efa:	dc26      	bgt.n	8004f4a <_printf_common+0x96>
 8004efc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f00:	6822      	ldr	r2, [r4, #0]
 8004f02:	3b00      	subs	r3, #0
 8004f04:	bf18      	it	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	0692      	lsls	r2, r2, #26
 8004f0a:	d42b      	bmi.n	8004f64 <_printf_common+0xb0>
 8004f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f10:	4641      	mov	r1, r8
 8004f12:	4638      	mov	r0, r7
 8004f14:	47c8      	blx	r9
 8004f16:	3001      	adds	r0, #1
 8004f18:	d01e      	beq.n	8004f58 <_printf_common+0xa4>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	6922      	ldr	r2, [r4, #16]
 8004f1e:	f003 0306 	and.w	r3, r3, #6
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	bf02      	ittt	eq
 8004f26:	68e5      	ldreq	r5, [r4, #12]
 8004f28:	6833      	ldreq	r3, [r6, #0]
 8004f2a:	1aed      	subeq	r5, r5, r3
 8004f2c:	68a3      	ldr	r3, [r4, #8]
 8004f2e:	bf0c      	ite	eq
 8004f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f34:	2500      	movne	r5, #0
 8004f36:	4293      	cmp	r3, r2
 8004f38:	bfc4      	itt	gt
 8004f3a:	1a9b      	subgt	r3, r3, r2
 8004f3c:	18ed      	addgt	r5, r5, r3
 8004f3e:	2600      	movs	r6, #0
 8004f40:	341a      	adds	r4, #26
 8004f42:	42b5      	cmp	r5, r6
 8004f44:	d11a      	bne.n	8004f7c <_printf_common+0xc8>
 8004f46:	2000      	movs	r0, #0
 8004f48:	e008      	b.n	8004f5c <_printf_common+0xa8>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	4652      	mov	r2, sl
 8004f4e:	4641      	mov	r1, r8
 8004f50:	4638      	mov	r0, r7
 8004f52:	47c8      	blx	r9
 8004f54:	3001      	adds	r0, #1
 8004f56:	d103      	bne.n	8004f60 <_printf_common+0xac>
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f60:	3501      	adds	r5, #1
 8004f62:	e7c6      	b.n	8004ef2 <_printf_common+0x3e>
 8004f64:	18e1      	adds	r1, r4, r3
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	2030      	movs	r0, #48	@ 0x30
 8004f6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f6e:	4422      	add	r2, r4
 8004f70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f78:	3302      	adds	r3, #2
 8004f7a:	e7c7      	b.n	8004f0c <_printf_common+0x58>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	4622      	mov	r2, r4
 8004f80:	4641      	mov	r1, r8
 8004f82:	4638      	mov	r0, r7
 8004f84:	47c8      	blx	r9
 8004f86:	3001      	adds	r0, #1
 8004f88:	d0e6      	beq.n	8004f58 <_printf_common+0xa4>
 8004f8a:	3601      	adds	r6, #1
 8004f8c:	e7d9      	b.n	8004f42 <_printf_common+0x8e>
	...

08004f90 <_printf_i>:
 8004f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f94:	7e0f      	ldrb	r7, [r1, #24]
 8004f96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f98:	2f78      	cmp	r7, #120	@ 0x78
 8004f9a:	4691      	mov	r9, r2
 8004f9c:	4680      	mov	r8, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	469a      	mov	sl, r3
 8004fa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fa6:	d807      	bhi.n	8004fb8 <_printf_i+0x28>
 8004fa8:	2f62      	cmp	r7, #98	@ 0x62
 8004faa:	d80a      	bhi.n	8004fc2 <_printf_i+0x32>
 8004fac:	2f00      	cmp	r7, #0
 8004fae:	f000 80d2 	beq.w	8005156 <_printf_i+0x1c6>
 8004fb2:	2f58      	cmp	r7, #88	@ 0x58
 8004fb4:	f000 80b9 	beq.w	800512a <_printf_i+0x19a>
 8004fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fc0:	e03a      	b.n	8005038 <_printf_i+0xa8>
 8004fc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004fc6:	2b15      	cmp	r3, #21
 8004fc8:	d8f6      	bhi.n	8004fb8 <_printf_i+0x28>
 8004fca:	a101      	add	r1, pc, #4	@ (adr r1, 8004fd0 <_printf_i+0x40>)
 8004fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fd0:	08005029 	.word	0x08005029
 8004fd4:	0800503d 	.word	0x0800503d
 8004fd8:	08004fb9 	.word	0x08004fb9
 8004fdc:	08004fb9 	.word	0x08004fb9
 8004fe0:	08004fb9 	.word	0x08004fb9
 8004fe4:	08004fb9 	.word	0x08004fb9
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	08004fb9 	.word	0x08004fb9
 8004ff0:	08004fb9 	.word	0x08004fb9
 8004ff4:	08004fb9 	.word	0x08004fb9
 8004ff8:	08004fb9 	.word	0x08004fb9
 8004ffc:	0800513d 	.word	0x0800513d
 8005000:	08005067 	.word	0x08005067
 8005004:	080050f7 	.word	0x080050f7
 8005008:	08004fb9 	.word	0x08004fb9
 800500c:	08004fb9 	.word	0x08004fb9
 8005010:	0800515f 	.word	0x0800515f
 8005014:	08004fb9 	.word	0x08004fb9
 8005018:	08005067 	.word	0x08005067
 800501c:	08004fb9 	.word	0x08004fb9
 8005020:	08004fb9 	.word	0x08004fb9
 8005024:	080050ff 	.word	0x080050ff
 8005028:	6833      	ldr	r3, [r6, #0]
 800502a:	1d1a      	adds	r2, r3, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6032      	str	r2, [r6, #0]
 8005030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005038:	2301      	movs	r3, #1
 800503a:	e09d      	b.n	8005178 <_printf_i+0x1e8>
 800503c:	6833      	ldr	r3, [r6, #0]
 800503e:	6820      	ldr	r0, [r4, #0]
 8005040:	1d19      	adds	r1, r3, #4
 8005042:	6031      	str	r1, [r6, #0]
 8005044:	0606      	lsls	r6, r0, #24
 8005046:	d501      	bpl.n	800504c <_printf_i+0xbc>
 8005048:	681d      	ldr	r5, [r3, #0]
 800504a:	e003      	b.n	8005054 <_printf_i+0xc4>
 800504c:	0645      	lsls	r5, r0, #25
 800504e:	d5fb      	bpl.n	8005048 <_printf_i+0xb8>
 8005050:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005054:	2d00      	cmp	r5, #0
 8005056:	da03      	bge.n	8005060 <_printf_i+0xd0>
 8005058:	232d      	movs	r3, #45	@ 0x2d
 800505a:	426d      	negs	r5, r5
 800505c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005060:	4859      	ldr	r0, [pc, #356]	@ (80051c8 <_printf_i+0x238>)
 8005062:	230a      	movs	r3, #10
 8005064:	e011      	b.n	800508a <_printf_i+0xfa>
 8005066:	6821      	ldr	r1, [r4, #0]
 8005068:	6833      	ldr	r3, [r6, #0]
 800506a:	0608      	lsls	r0, r1, #24
 800506c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005070:	d402      	bmi.n	8005078 <_printf_i+0xe8>
 8005072:	0649      	lsls	r1, r1, #25
 8005074:	bf48      	it	mi
 8005076:	b2ad      	uxthmi	r5, r5
 8005078:	2f6f      	cmp	r7, #111	@ 0x6f
 800507a:	4853      	ldr	r0, [pc, #332]	@ (80051c8 <_printf_i+0x238>)
 800507c:	6033      	str	r3, [r6, #0]
 800507e:	bf14      	ite	ne
 8005080:	230a      	movne	r3, #10
 8005082:	2308      	moveq	r3, #8
 8005084:	2100      	movs	r1, #0
 8005086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800508a:	6866      	ldr	r6, [r4, #4]
 800508c:	60a6      	str	r6, [r4, #8]
 800508e:	2e00      	cmp	r6, #0
 8005090:	bfa2      	ittt	ge
 8005092:	6821      	ldrge	r1, [r4, #0]
 8005094:	f021 0104 	bicge.w	r1, r1, #4
 8005098:	6021      	strge	r1, [r4, #0]
 800509a:	b90d      	cbnz	r5, 80050a0 <_printf_i+0x110>
 800509c:	2e00      	cmp	r6, #0
 800509e:	d04b      	beq.n	8005138 <_printf_i+0x1a8>
 80050a0:	4616      	mov	r6, r2
 80050a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80050a6:	fb03 5711 	mls	r7, r3, r1, r5
 80050aa:	5dc7      	ldrb	r7, [r0, r7]
 80050ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050b0:	462f      	mov	r7, r5
 80050b2:	42bb      	cmp	r3, r7
 80050b4:	460d      	mov	r5, r1
 80050b6:	d9f4      	bls.n	80050a2 <_printf_i+0x112>
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d10b      	bne.n	80050d4 <_printf_i+0x144>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	07df      	lsls	r7, r3, #31
 80050c0:	d508      	bpl.n	80050d4 <_printf_i+0x144>
 80050c2:	6923      	ldr	r3, [r4, #16]
 80050c4:	6861      	ldr	r1, [r4, #4]
 80050c6:	4299      	cmp	r1, r3
 80050c8:	bfde      	ittt	le
 80050ca:	2330      	movle	r3, #48	@ 0x30
 80050cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050d4:	1b92      	subs	r2, r2, r6
 80050d6:	6122      	str	r2, [r4, #16]
 80050d8:	f8cd a000 	str.w	sl, [sp]
 80050dc:	464b      	mov	r3, r9
 80050de:	aa03      	add	r2, sp, #12
 80050e0:	4621      	mov	r1, r4
 80050e2:	4640      	mov	r0, r8
 80050e4:	f7ff fee6 	bl	8004eb4 <_printf_common>
 80050e8:	3001      	adds	r0, #1
 80050ea:	d14a      	bne.n	8005182 <_printf_i+0x1f2>
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295
 80050f0:	b004      	add	sp, #16
 80050f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	f043 0320 	orr.w	r3, r3, #32
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	4833      	ldr	r0, [pc, #204]	@ (80051cc <_printf_i+0x23c>)
 8005100:	2778      	movs	r7, #120	@ 0x78
 8005102:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	6831      	ldr	r1, [r6, #0]
 800510a:	061f      	lsls	r7, r3, #24
 800510c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005110:	d402      	bmi.n	8005118 <_printf_i+0x188>
 8005112:	065f      	lsls	r7, r3, #25
 8005114:	bf48      	it	mi
 8005116:	b2ad      	uxthmi	r5, r5
 8005118:	6031      	str	r1, [r6, #0]
 800511a:	07d9      	lsls	r1, r3, #31
 800511c:	bf44      	itt	mi
 800511e:	f043 0320 	orrmi.w	r3, r3, #32
 8005122:	6023      	strmi	r3, [r4, #0]
 8005124:	b11d      	cbz	r5, 800512e <_printf_i+0x19e>
 8005126:	2310      	movs	r3, #16
 8005128:	e7ac      	b.n	8005084 <_printf_i+0xf4>
 800512a:	4827      	ldr	r0, [pc, #156]	@ (80051c8 <_printf_i+0x238>)
 800512c:	e7e9      	b.n	8005102 <_printf_i+0x172>
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	f023 0320 	bic.w	r3, r3, #32
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	e7f6      	b.n	8005126 <_printf_i+0x196>
 8005138:	4616      	mov	r6, r2
 800513a:	e7bd      	b.n	80050b8 <_printf_i+0x128>
 800513c:	6833      	ldr	r3, [r6, #0]
 800513e:	6825      	ldr	r5, [r4, #0]
 8005140:	6961      	ldr	r1, [r4, #20]
 8005142:	1d18      	adds	r0, r3, #4
 8005144:	6030      	str	r0, [r6, #0]
 8005146:	062e      	lsls	r6, r5, #24
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	d501      	bpl.n	8005150 <_printf_i+0x1c0>
 800514c:	6019      	str	r1, [r3, #0]
 800514e:	e002      	b.n	8005156 <_printf_i+0x1c6>
 8005150:	0668      	lsls	r0, r5, #25
 8005152:	d5fb      	bpl.n	800514c <_printf_i+0x1bc>
 8005154:	8019      	strh	r1, [r3, #0]
 8005156:	2300      	movs	r3, #0
 8005158:	6123      	str	r3, [r4, #16]
 800515a:	4616      	mov	r6, r2
 800515c:	e7bc      	b.n	80050d8 <_printf_i+0x148>
 800515e:	6833      	ldr	r3, [r6, #0]
 8005160:	1d1a      	adds	r2, r3, #4
 8005162:	6032      	str	r2, [r6, #0]
 8005164:	681e      	ldr	r6, [r3, #0]
 8005166:	6862      	ldr	r2, [r4, #4]
 8005168:	2100      	movs	r1, #0
 800516a:	4630      	mov	r0, r6
 800516c:	f7fb f830 	bl	80001d0 <memchr>
 8005170:	b108      	cbz	r0, 8005176 <_printf_i+0x1e6>
 8005172:	1b80      	subs	r0, r0, r6
 8005174:	6060      	str	r0, [r4, #4]
 8005176:	6863      	ldr	r3, [r4, #4]
 8005178:	6123      	str	r3, [r4, #16]
 800517a:	2300      	movs	r3, #0
 800517c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005180:	e7aa      	b.n	80050d8 <_printf_i+0x148>
 8005182:	6923      	ldr	r3, [r4, #16]
 8005184:	4632      	mov	r2, r6
 8005186:	4649      	mov	r1, r9
 8005188:	4640      	mov	r0, r8
 800518a:	47d0      	blx	sl
 800518c:	3001      	adds	r0, #1
 800518e:	d0ad      	beq.n	80050ec <_printf_i+0x15c>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	079b      	lsls	r3, r3, #30
 8005194:	d413      	bmi.n	80051be <_printf_i+0x22e>
 8005196:	68e0      	ldr	r0, [r4, #12]
 8005198:	9b03      	ldr	r3, [sp, #12]
 800519a:	4298      	cmp	r0, r3
 800519c:	bfb8      	it	lt
 800519e:	4618      	movlt	r0, r3
 80051a0:	e7a6      	b.n	80050f0 <_printf_i+0x160>
 80051a2:	2301      	movs	r3, #1
 80051a4:	4632      	mov	r2, r6
 80051a6:	4649      	mov	r1, r9
 80051a8:	4640      	mov	r0, r8
 80051aa:	47d0      	blx	sl
 80051ac:	3001      	adds	r0, #1
 80051ae:	d09d      	beq.n	80050ec <_printf_i+0x15c>
 80051b0:	3501      	adds	r5, #1
 80051b2:	68e3      	ldr	r3, [r4, #12]
 80051b4:	9903      	ldr	r1, [sp, #12]
 80051b6:	1a5b      	subs	r3, r3, r1
 80051b8:	42ab      	cmp	r3, r5
 80051ba:	dcf2      	bgt.n	80051a2 <_printf_i+0x212>
 80051bc:	e7eb      	b.n	8005196 <_printf_i+0x206>
 80051be:	2500      	movs	r5, #0
 80051c0:	f104 0619 	add.w	r6, r4, #25
 80051c4:	e7f5      	b.n	80051b2 <_printf_i+0x222>
 80051c6:	bf00      	nop
 80051c8:	08005305 	.word	0x08005305
 80051cc:	08005316 	.word	0x08005316

080051d0 <memmove>:
 80051d0:	4288      	cmp	r0, r1
 80051d2:	b510      	push	{r4, lr}
 80051d4:	eb01 0402 	add.w	r4, r1, r2
 80051d8:	d902      	bls.n	80051e0 <memmove+0x10>
 80051da:	4284      	cmp	r4, r0
 80051dc:	4623      	mov	r3, r4
 80051de:	d807      	bhi.n	80051f0 <memmove+0x20>
 80051e0:	1e43      	subs	r3, r0, #1
 80051e2:	42a1      	cmp	r1, r4
 80051e4:	d008      	beq.n	80051f8 <memmove+0x28>
 80051e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051ee:	e7f8      	b.n	80051e2 <memmove+0x12>
 80051f0:	4402      	add	r2, r0
 80051f2:	4601      	mov	r1, r0
 80051f4:	428a      	cmp	r2, r1
 80051f6:	d100      	bne.n	80051fa <memmove+0x2a>
 80051f8:	bd10      	pop	{r4, pc}
 80051fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005202:	e7f7      	b.n	80051f4 <memmove+0x24>

08005204 <_sbrk_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	4d06      	ldr	r5, [pc, #24]	@ (8005220 <_sbrk_r+0x1c>)
 8005208:	2300      	movs	r3, #0
 800520a:	4604      	mov	r4, r0
 800520c:	4608      	mov	r0, r1
 800520e:	602b      	str	r3, [r5, #0]
 8005210:	f7fb ff88 	bl	8001124 <_sbrk>
 8005214:	1c43      	adds	r3, r0, #1
 8005216:	d102      	bne.n	800521e <_sbrk_r+0x1a>
 8005218:	682b      	ldr	r3, [r5, #0]
 800521a:	b103      	cbz	r3, 800521e <_sbrk_r+0x1a>
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	bd38      	pop	{r3, r4, r5, pc}
 8005220:	2000073c 	.word	0x2000073c

08005224 <memcpy>:
 8005224:	440a      	add	r2, r1
 8005226:	4291      	cmp	r1, r2
 8005228:	f100 33ff 	add.w	r3, r0, #4294967295
 800522c:	d100      	bne.n	8005230 <memcpy+0xc>
 800522e:	4770      	bx	lr
 8005230:	b510      	push	{r4, lr}
 8005232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800523a:	4291      	cmp	r1, r2
 800523c:	d1f9      	bne.n	8005232 <memcpy+0xe>
 800523e:	bd10      	pop	{r4, pc}

08005240 <_realloc_r>:
 8005240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005244:	4680      	mov	r8, r0
 8005246:	4615      	mov	r5, r2
 8005248:	460c      	mov	r4, r1
 800524a:	b921      	cbnz	r1, 8005256 <_realloc_r+0x16>
 800524c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005250:	4611      	mov	r1, r2
 8005252:	f7ff bc4b 	b.w	8004aec <_malloc_r>
 8005256:	b92a      	cbnz	r2, 8005264 <_realloc_r+0x24>
 8005258:	f7ff fbdc 	bl	8004a14 <_free_r>
 800525c:	2400      	movs	r4, #0
 800525e:	4620      	mov	r0, r4
 8005260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005264:	f000 f81a 	bl	800529c <_malloc_usable_size_r>
 8005268:	4285      	cmp	r5, r0
 800526a:	4606      	mov	r6, r0
 800526c:	d802      	bhi.n	8005274 <_realloc_r+0x34>
 800526e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005272:	d8f4      	bhi.n	800525e <_realloc_r+0x1e>
 8005274:	4629      	mov	r1, r5
 8005276:	4640      	mov	r0, r8
 8005278:	f7ff fc38 	bl	8004aec <_malloc_r>
 800527c:	4607      	mov	r7, r0
 800527e:	2800      	cmp	r0, #0
 8005280:	d0ec      	beq.n	800525c <_realloc_r+0x1c>
 8005282:	42b5      	cmp	r5, r6
 8005284:	462a      	mov	r2, r5
 8005286:	4621      	mov	r1, r4
 8005288:	bf28      	it	cs
 800528a:	4632      	movcs	r2, r6
 800528c:	f7ff ffca 	bl	8005224 <memcpy>
 8005290:	4621      	mov	r1, r4
 8005292:	4640      	mov	r0, r8
 8005294:	f7ff fbbe 	bl	8004a14 <_free_r>
 8005298:	463c      	mov	r4, r7
 800529a:	e7e0      	b.n	800525e <_realloc_r+0x1e>

0800529c <_malloc_usable_size_r>:
 800529c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052a0:	1f18      	subs	r0, r3, #4
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	bfbc      	itt	lt
 80052a6:	580b      	ldrlt	r3, [r1, r0]
 80052a8:	18c0      	addlt	r0, r0, r3
 80052aa:	4770      	bx	lr

080052ac <_init>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	bf00      	nop
 80052b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b2:	bc08      	pop	{r3}
 80052b4:	469e      	mov	lr, r3
 80052b6:	4770      	bx	lr

080052b8 <_fini>:
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	bf00      	nop
 80052bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052be:	bc08      	pop	{r3}
 80052c0:	469e      	mov	lr, r3
 80052c2:	4770      	bx	lr
